// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/system.proto

package systemconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	system "github.com/zitadel/zitadel/pkg/grpc/system"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// SystemServiceName is the fully-qualified name of the SystemService service.
	SystemServiceName = "zitadel.system.v1.SystemService"
)

// SystemServiceClient is a client for the zitadel.system.v1.SystemService service.
type SystemServiceClient interface {
	// Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(context.Context, *connect_go.Request[system.HealthzRequest]) (*connect_go.Response[system.HealthzResponse], error)
	// Returns a list of ZITADEL instances
	ListInstances(context.Context, *connect_go.Request[system.ListInstancesRequest]) (*connect_go.Response[system.ListInstancesResponse], error)
	// Returns the detail of an instance
	GetInstance(context.Context, *connect_go.Request[system.GetInstanceRequest]) (*connect_go.Response[system.GetInstanceResponse], error)
	// Deprecated: Use CreateInstance instead
	// Creates a new instance with all needed setup data
	// This might take some time
	AddInstance(context.Context, *connect_go.Request[system.AddInstanceRequest]) (*connect_go.Response[system.AddInstanceResponse], error)
	// Updates name of an existing instance
	UpdateInstance(context.Context, *connect_go.Request[system.UpdateInstanceRequest]) (*connect_go.Response[system.UpdateInstanceResponse], error)
	// Creates a new instance with all needed setup data
	// This might take some time
	CreateInstance(context.Context, *connect_go.Request[system.CreateInstanceRequest]) (*connect_go.Response[system.CreateInstanceResponse], error)
	// Removes an instance
	// This might take some time
	RemoveInstance(context.Context, *connect_go.Request[system.RemoveInstanceRequest]) (*connect_go.Response[system.RemoveInstanceResponse], error)
	// Returns all instance members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(context.Context, *connect_go.Request[system.ListIAMMembersRequest]) (*connect_go.Response[system.ListIAMMembersResponse], error)
	// Checks if a domain exists
	ExistsDomain(context.Context, *connect_go.Request[system.ExistsDomainRequest]) (*connect_go.Response[system.ExistsDomainResponse], error)
	// Returns the custom domains of an instance
	ListDomains(context.Context, *connect_go.Request[system.ListDomainsRequest]) (*connect_go.Response[system.ListDomainsResponse], error)
	// Returns the domain of an instance
	AddDomain(context.Context, *connect_go.Request[system.AddDomainRequest]) (*connect_go.Response[system.AddDomainResponse], error)
	// Returns the domain of an instance
	RemoveDomain(context.Context, *connect_go.Request[system.RemoveDomainRequest]) (*connect_go.Response[system.RemoveDomainResponse], error)
	// Returns the domain of an instance
	SetPrimaryDomain(context.Context, *connect_go.Request[system.SetPrimaryDomainRequest]) (*connect_go.Response[system.SetPrimaryDomainResponse], error)
	// Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(context.Context, *connect_go.Request[system.ListViewsRequest]) (*connect_go.Response[system.ListViewsResponse], error)
	// Truncates the delta of the change stream
	// be carefull with this function because ZITADEL has to
	// recompute the deltas after they got cleared.
	// Search requests will return wrong results until all deltas are recomputed
	ClearView(context.Context, *connect_go.Request[system.ClearViewRequest]) (*connect_go.Response[system.ClearViewResponse], error)
	// Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(context.Context, *connect_go.Request[system.ListFailedEventsRequest]) (*connect_go.Response[system.ListFailedEventsResponse], error)
	// Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(context.Context, *connect_go.Request[system.RemoveFailedEventRequest]) (*connect_go.Response[system.RemoveFailedEventResponse], error)
	// Creates a new quota
	AddQuota(context.Context, *connect_go.Request[system.AddQuotaRequest]) (*connect_go.Response[system.AddQuotaResponse], error)
	// Removes a quota
	RemoveQuota(context.Context, *connect_go.Request[system.RemoveQuotaRequest]) (*connect_go.Response[system.RemoveQuotaResponse], error)
}

// NewSystemServiceClient constructs a client for the zitadel.system.v1.SystemService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewSystemServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) SystemServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &systemServiceClient{
		healthz: connect_go.NewClient[system.HealthzRequest, system.HealthzResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/Healthz",
			opts...,
		),
		listInstances: connect_go.NewClient[system.ListInstancesRequest, system.ListInstancesResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ListInstances",
			opts...,
		),
		getInstance: connect_go.NewClient[system.GetInstanceRequest, system.GetInstanceResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/GetInstance",
			opts...,
		),
		addInstance: connect_go.NewClient[system.AddInstanceRequest, system.AddInstanceResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/AddInstance",
			opts...,
		),
		updateInstance: connect_go.NewClient[system.UpdateInstanceRequest, system.UpdateInstanceResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/UpdateInstance",
			opts...,
		),
		createInstance: connect_go.NewClient[system.CreateInstanceRequest, system.CreateInstanceResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/CreateInstance",
			opts...,
		),
		removeInstance: connect_go.NewClient[system.RemoveInstanceRequest, system.RemoveInstanceResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/RemoveInstance",
			opts...,
		),
		listIAMMembers: connect_go.NewClient[system.ListIAMMembersRequest, system.ListIAMMembersResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ListIAMMembers",
			opts...,
		),
		existsDomain: connect_go.NewClient[system.ExistsDomainRequest, system.ExistsDomainResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ExistsDomain",
			opts...,
		),
		listDomains: connect_go.NewClient[system.ListDomainsRequest, system.ListDomainsResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ListDomains",
			opts...,
		),
		addDomain: connect_go.NewClient[system.AddDomainRequest, system.AddDomainResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/AddDomain",
			opts...,
		),
		removeDomain: connect_go.NewClient[system.RemoveDomainRequest, system.RemoveDomainResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/RemoveDomain",
			opts...,
		),
		setPrimaryDomain: connect_go.NewClient[system.SetPrimaryDomainRequest, system.SetPrimaryDomainResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/SetPrimaryDomain",
			opts...,
		),
		listViews: connect_go.NewClient[system.ListViewsRequest, system.ListViewsResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ListViews",
			opts...,
		),
		clearView: connect_go.NewClient[system.ClearViewRequest, system.ClearViewResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ClearView",
			opts...,
		),
		listFailedEvents: connect_go.NewClient[system.ListFailedEventsRequest, system.ListFailedEventsResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/ListFailedEvents",
			opts...,
		),
		removeFailedEvent: connect_go.NewClient[system.RemoveFailedEventRequest, system.RemoveFailedEventResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/RemoveFailedEvent",
			opts...,
		),
		addQuota: connect_go.NewClient[system.AddQuotaRequest, system.AddQuotaResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/AddQuota",
			opts...,
		),
		removeQuota: connect_go.NewClient[system.RemoveQuotaRequest, system.RemoveQuotaResponse](
			httpClient,
			baseURL+"/zitadel.system.v1.SystemService/RemoveQuota",
			opts...,
		),
	}
}

// systemServiceClient implements SystemServiceClient.
type systemServiceClient struct {
	healthz           *connect_go.Client[system.HealthzRequest, system.HealthzResponse]
	listInstances     *connect_go.Client[system.ListInstancesRequest, system.ListInstancesResponse]
	getInstance       *connect_go.Client[system.GetInstanceRequest, system.GetInstanceResponse]
	addInstance       *connect_go.Client[system.AddInstanceRequest, system.AddInstanceResponse]
	updateInstance    *connect_go.Client[system.UpdateInstanceRequest, system.UpdateInstanceResponse]
	createInstance    *connect_go.Client[system.CreateInstanceRequest, system.CreateInstanceResponse]
	removeInstance    *connect_go.Client[system.RemoveInstanceRequest, system.RemoveInstanceResponse]
	listIAMMembers    *connect_go.Client[system.ListIAMMembersRequest, system.ListIAMMembersResponse]
	existsDomain      *connect_go.Client[system.ExistsDomainRequest, system.ExistsDomainResponse]
	listDomains       *connect_go.Client[system.ListDomainsRequest, system.ListDomainsResponse]
	addDomain         *connect_go.Client[system.AddDomainRequest, system.AddDomainResponse]
	removeDomain      *connect_go.Client[system.RemoveDomainRequest, system.RemoveDomainResponse]
	setPrimaryDomain  *connect_go.Client[system.SetPrimaryDomainRequest, system.SetPrimaryDomainResponse]
	listViews         *connect_go.Client[system.ListViewsRequest, system.ListViewsResponse]
	clearView         *connect_go.Client[system.ClearViewRequest, system.ClearViewResponse]
	listFailedEvents  *connect_go.Client[system.ListFailedEventsRequest, system.ListFailedEventsResponse]
	removeFailedEvent *connect_go.Client[system.RemoveFailedEventRequest, system.RemoveFailedEventResponse]
	addQuota          *connect_go.Client[system.AddQuotaRequest, system.AddQuotaResponse]
	removeQuota       *connect_go.Client[system.RemoveQuotaRequest, system.RemoveQuotaResponse]
}

// Healthz calls zitadel.system.v1.SystemService.Healthz.
func (c *systemServiceClient) Healthz(ctx context.Context, req *connect_go.Request[system.HealthzRequest]) (*connect_go.Response[system.HealthzResponse], error) {
	return c.healthz.CallUnary(ctx, req)
}

// ListInstances calls zitadel.system.v1.SystemService.ListInstances.
func (c *systemServiceClient) ListInstances(ctx context.Context, req *connect_go.Request[system.ListInstancesRequest]) (*connect_go.Response[system.ListInstancesResponse], error) {
	return c.listInstances.CallUnary(ctx, req)
}

// GetInstance calls zitadel.system.v1.SystemService.GetInstance.
func (c *systemServiceClient) GetInstance(ctx context.Context, req *connect_go.Request[system.GetInstanceRequest]) (*connect_go.Response[system.GetInstanceResponse], error) {
	return c.getInstance.CallUnary(ctx, req)
}

// AddInstance calls zitadel.system.v1.SystemService.AddInstance.
func (c *systemServiceClient) AddInstance(ctx context.Context, req *connect_go.Request[system.AddInstanceRequest]) (*connect_go.Response[system.AddInstanceResponse], error) {
	return c.addInstance.CallUnary(ctx, req)
}

// UpdateInstance calls zitadel.system.v1.SystemService.UpdateInstance.
func (c *systemServiceClient) UpdateInstance(ctx context.Context, req *connect_go.Request[system.UpdateInstanceRequest]) (*connect_go.Response[system.UpdateInstanceResponse], error) {
	return c.updateInstance.CallUnary(ctx, req)
}

// CreateInstance calls zitadel.system.v1.SystemService.CreateInstance.
func (c *systemServiceClient) CreateInstance(ctx context.Context, req *connect_go.Request[system.CreateInstanceRequest]) (*connect_go.Response[system.CreateInstanceResponse], error) {
	return c.createInstance.CallUnary(ctx, req)
}

// RemoveInstance calls zitadel.system.v1.SystemService.RemoveInstance.
func (c *systemServiceClient) RemoveInstance(ctx context.Context, req *connect_go.Request[system.RemoveInstanceRequest]) (*connect_go.Response[system.RemoveInstanceResponse], error) {
	return c.removeInstance.CallUnary(ctx, req)
}

// ListIAMMembers calls zitadel.system.v1.SystemService.ListIAMMembers.
func (c *systemServiceClient) ListIAMMembers(ctx context.Context, req *connect_go.Request[system.ListIAMMembersRequest]) (*connect_go.Response[system.ListIAMMembersResponse], error) {
	return c.listIAMMembers.CallUnary(ctx, req)
}

// ExistsDomain calls zitadel.system.v1.SystemService.ExistsDomain.
func (c *systemServiceClient) ExistsDomain(ctx context.Context, req *connect_go.Request[system.ExistsDomainRequest]) (*connect_go.Response[system.ExistsDomainResponse], error) {
	return c.existsDomain.CallUnary(ctx, req)
}

// ListDomains calls zitadel.system.v1.SystemService.ListDomains.
func (c *systemServiceClient) ListDomains(ctx context.Context, req *connect_go.Request[system.ListDomainsRequest]) (*connect_go.Response[system.ListDomainsResponse], error) {
	return c.listDomains.CallUnary(ctx, req)
}

// AddDomain calls zitadel.system.v1.SystemService.AddDomain.
func (c *systemServiceClient) AddDomain(ctx context.Context, req *connect_go.Request[system.AddDomainRequest]) (*connect_go.Response[system.AddDomainResponse], error) {
	return c.addDomain.CallUnary(ctx, req)
}

// RemoveDomain calls zitadel.system.v1.SystemService.RemoveDomain.
func (c *systemServiceClient) RemoveDomain(ctx context.Context, req *connect_go.Request[system.RemoveDomainRequest]) (*connect_go.Response[system.RemoveDomainResponse], error) {
	return c.removeDomain.CallUnary(ctx, req)
}

// SetPrimaryDomain calls zitadel.system.v1.SystemService.SetPrimaryDomain.
func (c *systemServiceClient) SetPrimaryDomain(ctx context.Context, req *connect_go.Request[system.SetPrimaryDomainRequest]) (*connect_go.Response[system.SetPrimaryDomainResponse], error) {
	return c.setPrimaryDomain.CallUnary(ctx, req)
}

// ListViews calls zitadel.system.v1.SystemService.ListViews.
func (c *systemServiceClient) ListViews(ctx context.Context, req *connect_go.Request[system.ListViewsRequest]) (*connect_go.Response[system.ListViewsResponse], error) {
	return c.listViews.CallUnary(ctx, req)
}

// ClearView calls zitadel.system.v1.SystemService.ClearView.
func (c *systemServiceClient) ClearView(ctx context.Context, req *connect_go.Request[system.ClearViewRequest]) (*connect_go.Response[system.ClearViewResponse], error) {
	return c.clearView.CallUnary(ctx, req)
}

// ListFailedEvents calls zitadel.system.v1.SystemService.ListFailedEvents.
func (c *systemServiceClient) ListFailedEvents(ctx context.Context, req *connect_go.Request[system.ListFailedEventsRequest]) (*connect_go.Response[system.ListFailedEventsResponse], error) {
	return c.listFailedEvents.CallUnary(ctx, req)
}

// RemoveFailedEvent calls zitadel.system.v1.SystemService.RemoveFailedEvent.
func (c *systemServiceClient) RemoveFailedEvent(ctx context.Context, req *connect_go.Request[system.RemoveFailedEventRequest]) (*connect_go.Response[system.RemoveFailedEventResponse], error) {
	return c.removeFailedEvent.CallUnary(ctx, req)
}

// AddQuota calls zitadel.system.v1.SystemService.AddQuota.
func (c *systemServiceClient) AddQuota(ctx context.Context, req *connect_go.Request[system.AddQuotaRequest]) (*connect_go.Response[system.AddQuotaResponse], error) {
	return c.addQuota.CallUnary(ctx, req)
}

// RemoveQuota calls zitadel.system.v1.SystemService.RemoveQuota.
func (c *systemServiceClient) RemoveQuota(ctx context.Context, req *connect_go.Request[system.RemoveQuotaRequest]) (*connect_go.Response[system.RemoveQuotaResponse], error) {
	return c.removeQuota.CallUnary(ctx, req)
}

// SystemServiceHandler is an implementation of the zitadel.system.v1.SystemService service.
type SystemServiceHandler interface {
	// Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(context.Context, *connect_go.Request[system.HealthzRequest]) (*connect_go.Response[system.HealthzResponse], error)
	// Returns a list of ZITADEL instances
	ListInstances(context.Context, *connect_go.Request[system.ListInstancesRequest]) (*connect_go.Response[system.ListInstancesResponse], error)
	// Returns the detail of an instance
	GetInstance(context.Context, *connect_go.Request[system.GetInstanceRequest]) (*connect_go.Response[system.GetInstanceResponse], error)
	// Deprecated: Use CreateInstance instead
	// Creates a new instance with all needed setup data
	// This might take some time
	AddInstance(context.Context, *connect_go.Request[system.AddInstanceRequest]) (*connect_go.Response[system.AddInstanceResponse], error)
	// Updates name of an existing instance
	UpdateInstance(context.Context, *connect_go.Request[system.UpdateInstanceRequest]) (*connect_go.Response[system.UpdateInstanceResponse], error)
	// Creates a new instance with all needed setup data
	// This might take some time
	CreateInstance(context.Context, *connect_go.Request[system.CreateInstanceRequest]) (*connect_go.Response[system.CreateInstanceResponse], error)
	// Removes an instance
	// This might take some time
	RemoveInstance(context.Context, *connect_go.Request[system.RemoveInstanceRequest]) (*connect_go.Response[system.RemoveInstanceResponse], error)
	// Returns all instance members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(context.Context, *connect_go.Request[system.ListIAMMembersRequest]) (*connect_go.Response[system.ListIAMMembersResponse], error)
	// Checks if a domain exists
	ExistsDomain(context.Context, *connect_go.Request[system.ExistsDomainRequest]) (*connect_go.Response[system.ExistsDomainResponse], error)
	// Returns the custom domains of an instance
	ListDomains(context.Context, *connect_go.Request[system.ListDomainsRequest]) (*connect_go.Response[system.ListDomainsResponse], error)
	// Returns the domain of an instance
	AddDomain(context.Context, *connect_go.Request[system.AddDomainRequest]) (*connect_go.Response[system.AddDomainResponse], error)
	// Returns the domain of an instance
	RemoveDomain(context.Context, *connect_go.Request[system.RemoveDomainRequest]) (*connect_go.Response[system.RemoveDomainResponse], error)
	// Returns the domain of an instance
	SetPrimaryDomain(context.Context, *connect_go.Request[system.SetPrimaryDomainRequest]) (*connect_go.Response[system.SetPrimaryDomainResponse], error)
	// Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(context.Context, *connect_go.Request[system.ListViewsRequest]) (*connect_go.Response[system.ListViewsResponse], error)
	// Truncates the delta of the change stream
	// be carefull with this function because ZITADEL has to
	// recompute the deltas after they got cleared.
	// Search requests will return wrong results until all deltas are recomputed
	ClearView(context.Context, *connect_go.Request[system.ClearViewRequest]) (*connect_go.Response[system.ClearViewResponse], error)
	// Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(context.Context, *connect_go.Request[system.ListFailedEventsRequest]) (*connect_go.Response[system.ListFailedEventsResponse], error)
	// Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(context.Context, *connect_go.Request[system.RemoveFailedEventRequest]) (*connect_go.Response[system.RemoveFailedEventResponse], error)
	// Creates a new quota
	AddQuota(context.Context, *connect_go.Request[system.AddQuotaRequest]) (*connect_go.Response[system.AddQuotaResponse], error)
	// Removes a quota
	RemoveQuota(context.Context, *connect_go.Request[system.RemoveQuotaRequest]) (*connect_go.Response[system.RemoveQuotaResponse], error)
}

// NewSystemServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewSystemServiceHandler(svc SystemServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/zitadel.system.v1.SystemService/Healthz", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/Healthz",
		svc.Healthz,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ListInstances", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ListInstances",
		svc.ListInstances,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/GetInstance", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/GetInstance",
		svc.GetInstance,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/AddInstance", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/AddInstance",
		svc.AddInstance,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/UpdateInstance", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/UpdateInstance",
		svc.UpdateInstance,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/CreateInstance", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/CreateInstance",
		svc.CreateInstance,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/RemoveInstance", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/RemoveInstance",
		svc.RemoveInstance,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ListIAMMembers", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ListIAMMembers",
		svc.ListIAMMembers,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ExistsDomain", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ExistsDomain",
		svc.ExistsDomain,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ListDomains", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ListDomains",
		svc.ListDomains,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/AddDomain", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/AddDomain",
		svc.AddDomain,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/RemoveDomain", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/RemoveDomain",
		svc.RemoveDomain,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/SetPrimaryDomain", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/SetPrimaryDomain",
		svc.SetPrimaryDomain,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ListViews", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ListViews",
		svc.ListViews,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ClearView", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ClearView",
		svc.ClearView,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/ListFailedEvents", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/ListFailedEvents",
		svc.ListFailedEvents,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/RemoveFailedEvent", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/RemoveFailedEvent",
		svc.RemoveFailedEvent,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/AddQuota", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/AddQuota",
		svc.AddQuota,
		opts...,
	))
	mux.Handle("/zitadel.system.v1.SystemService/RemoveQuota", connect_go.NewUnaryHandler(
		"/zitadel.system.v1.SystemService/RemoveQuota",
		svc.RemoveQuota,
		opts...,
	))
	return "/zitadel.system.v1.SystemService/", mux
}

// UnimplementedSystemServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedSystemServiceHandler struct{}

func (UnimplementedSystemServiceHandler) Healthz(context.Context, *connect_go.Request[system.HealthzRequest]) (*connect_go.Response[system.HealthzResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.Healthz is not implemented"))
}

func (UnimplementedSystemServiceHandler) ListInstances(context.Context, *connect_go.Request[system.ListInstancesRequest]) (*connect_go.Response[system.ListInstancesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ListInstances is not implemented"))
}

func (UnimplementedSystemServiceHandler) GetInstance(context.Context, *connect_go.Request[system.GetInstanceRequest]) (*connect_go.Response[system.GetInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.GetInstance is not implemented"))
}

func (UnimplementedSystemServiceHandler) AddInstance(context.Context, *connect_go.Request[system.AddInstanceRequest]) (*connect_go.Response[system.AddInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.AddInstance is not implemented"))
}

func (UnimplementedSystemServiceHandler) UpdateInstance(context.Context, *connect_go.Request[system.UpdateInstanceRequest]) (*connect_go.Response[system.UpdateInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.UpdateInstance is not implemented"))
}

func (UnimplementedSystemServiceHandler) CreateInstance(context.Context, *connect_go.Request[system.CreateInstanceRequest]) (*connect_go.Response[system.CreateInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.CreateInstance is not implemented"))
}

func (UnimplementedSystemServiceHandler) RemoveInstance(context.Context, *connect_go.Request[system.RemoveInstanceRequest]) (*connect_go.Response[system.RemoveInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.RemoveInstance is not implemented"))
}

func (UnimplementedSystemServiceHandler) ListIAMMembers(context.Context, *connect_go.Request[system.ListIAMMembersRequest]) (*connect_go.Response[system.ListIAMMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ListIAMMembers is not implemented"))
}

func (UnimplementedSystemServiceHandler) ExistsDomain(context.Context, *connect_go.Request[system.ExistsDomainRequest]) (*connect_go.Response[system.ExistsDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ExistsDomain is not implemented"))
}

func (UnimplementedSystemServiceHandler) ListDomains(context.Context, *connect_go.Request[system.ListDomainsRequest]) (*connect_go.Response[system.ListDomainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ListDomains is not implemented"))
}

func (UnimplementedSystemServiceHandler) AddDomain(context.Context, *connect_go.Request[system.AddDomainRequest]) (*connect_go.Response[system.AddDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.AddDomain is not implemented"))
}

func (UnimplementedSystemServiceHandler) RemoveDomain(context.Context, *connect_go.Request[system.RemoveDomainRequest]) (*connect_go.Response[system.RemoveDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.RemoveDomain is not implemented"))
}

func (UnimplementedSystemServiceHandler) SetPrimaryDomain(context.Context, *connect_go.Request[system.SetPrimaryDomainRequest]) (*connect_go.Response[system.SetPrimaryDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.SetPrimaryDomain is not implemented"))
}

func (UnimplementedSystemServiceHandler) ListViews(context.Context, *connect_go.Request[system.ListViewsRequest]) (*connect_go.Response[system.ListViewsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ListViews is not implemented"))
}

func (UnimplementedSystemServiceHandler) ClearView(context.Context, *connect_go.Request[system.ClearViewRequest]) (*connect_go.Response[system.ClearViewResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ClearView is not implemented"))
}

func (UnimplementedSystemServiceHandler) ListFailedEvents(context.Context, *connect_go.Request[system.ListFailedEventsRequest]) (*connect_go.Response[system.ListFailedEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.ListFailedEvents is not implemented"))
}

func (UnimplementedSystemServiceHandler) RemoveFailedEvent(context.Context, *connect_go.Request[system.RemoveFailedEventRequest]) (*connect_go.Response[system.RemoveFailedEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.RemoveFailedEvent is not implemented"))
}

func (UnimplementedSystemServiceHandler) AddQuota(context.Context, *connect_go.Request[system.AddQuotaRequest]) (*connect_go.Response[system.AddQuotaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.AddQuota is not implemented"))
}

func (UnimplementedSystemServiceHandler) RemoveQuota(context.Context, *connect_go.Request[system.RemoveQuotaRequest]) (*connect_go.Response[system.RemoveQuotaResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.system.v1.SystemService.RemoveQuota is not implemented"))
}
