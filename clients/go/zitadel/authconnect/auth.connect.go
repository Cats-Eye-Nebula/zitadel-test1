// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/auth.proto

package authconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	auth "github.com/zitadel/zitadel/pkg/grpc/auth"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AuthServiceName is the fully-qualified name of the AuthService service.
	AuthServiceName = "zitadel.auth.v1.AuthService"
)

// AuthServiceClient is a client for the zitadel.auth.v1.AuthService service.
type AuthServiceClient interface {
	Healthz(context.Context, *connect_go.Request[auth.HealthzRequest]) (*connect_go.Response[auth.HealthzResponse], error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *connect_go.Request[auth.GetSupportedLanguagesRequest]) (*connect_go.Response[auth.GetSupportedLanguagesResponse], error)
	// Returns my full blown user
	GetMyUser(context.Context, *connect_go.Request[auth.GetMyUserRequest]) (*connect_go.Response[auth.GetMyUserResponse], error)
	// Changes the user state to deleted
	RemoveMyUser(context.Context, *connect_go.Request[auth.RemoveMyUserRequest]) (*connect_go.Response[auth.RemoveMyUserResponse], error)
	// Returns the history of the authorized user (each event)
	ListMyUserChanges(context.Context, *connect_go.Request[auth.ListMyUserChangesRequest]) (*connect_go.Response[auth.ListMyUserChangesResponse], error)
	// Returns the user sessions of the authorized user of the current useragent
	ListMyUserSessions(context.Context, *connect_go.Request[auth.ListMyUserSessionsRequest]) (*connect_go.Response[auth.ListMyUserSessionsResponse], error)
	// Returns the user metadata of the authorized user
	ListMyMetadata(context.Context, *connect_go.Request[auth.ListMyMetadataRequest]) (*connect_go.Response[auth.ListMyMetadataResponse], error)
	// Returns the user metadata by key of the authorized user
	GetMyMetadata(context.Context, *connect_go.Request[auth.GetMyMetadataRequest]) (*connect_go.Response[auth.GetMyMetadataResponse], error)
	// Returns the refresh tokens of the authorized user
	ListMyRefreshTokens(context.Context, *connect_go.Request[auth.ListMyRefreshTokensRequest]) (*connect_go.Response[auth.ListMyRefreshTokensResponse], error)
	// Revokes a single refresh token of the authorized user by its (token) id
	RevokeMyRefreshToken(context.Context, *connect_go.Request[auth.RevokeMyRefreshTokenRequest]) (*connect_go.Response[auth.RevokeMyRefreshTokenResponse], error)
	// Revokes all refresh tokens of the authorized user
	RevokeAllMyRefreshTokens(context.Context, *connect_go.Request[auth.RevokeAllMyRefreshTokensRequest]) (*connect_go.Response[auth.RevokeAllMyRefreshTokensResponse], error)
	// Change the user name of the authorize user
	UpdateMyUserName(context.Context, *connect_go.Request[auth.UpdateMyUserNameRequest]) (*connect_go.Response[auth.UpdateMyUserNameResponse], error)
	// Returns the password complexity policy of my organisation
	// This policy defines how the password should look
	GetMyPasswordComplexityPolicy(context.Context, *connect_go.Request[auth.GetMyPasswordComplexityPolicyRequest]) (*connect_go.Response[auth.GetMyPasswordComplexityPolicyResponse], error)
	// Change the password of the authorized user
	UpdateMyPassword(context.Context, *connect_go.Request[auth.UpdateMyPasswordRequest]) (*connect_go.Response[auth.UpdateMyPasswordResponse], error)
	// Returns the profile information of the authorized user
	GetMyProfile(context.Context, *connect_go.Request[auth.GetMyProfileRequest]) (*connect_go.Response[auth.GetMyProfileResponse], error)
	// Changes the profile information of the authorized user
	UpdateMyProfile(context.Context, *connect_go.Request[auth.UpdateMyProfileRequest]) (*connect_go.Response[auth.UpdateMyProfileResponse], error)
	// Returns the email address of the authorized user
	GetMyEmail(context.Context, *connect_go.Request[auth.GetMyEmailRequest]) (*connect_go.Response[auth.GetMyEmailResponse], error)
	// Changes the email address of the authorized user
	// An email is sent to the given address, to verify it
	SetMyEmail(context.Context, *connect_go.Request[auth.SetMyEmailRequest]) (*connect_go.Response[auth.SetMyEmailResponse], error)
	// Sets the email address to verified
	VerifyMyEmail(context.Context, *connect_go.Request[auth.VerifyMyEmailRequest]) (*connect_go.Response[auth.VerifyMyEmailResponse], error)
	// Sends a new email to the last given address to verify it
	ResendMyEmailVerification(context.Context, *connect_go.Request[auth.ResendMyEmailVerificationRequest]) (*connect_go.Response[auth.ResendMyEmailVerificationResponse], error)
	// Returns the phone number of the authorized user
	GetMyPhone(context.Context, *connect_go.Request[auth.GetMyPhoneRequest]) (*connect_go.Response[auth.GetMyPhoneResponse], error)
	// Sets the phone number of the authorized user
	// An sms is sent to the number with a verification code
	SetMyPhone(context.Context, *connect_go.Request[auth.SetMyPhoneRequest]) (*connect_go.Response[auth.SetMyPhoneResponse], error)
	// Sets the phone number to verified
	VerifyMyPhone(context.Context, *connect_go.Request[auth.VerifyMyPhoneRequest]) (*connect_go.Response[auth.VerifyMyPhoneResponse], error)
	// Resends a sms to the last given phone number, to verify it
	ResendMyPhoneVerification(context.Context, *connect_go.Request[auth.ResendMyPhoneVerificationRequest]) (*connect_go.Response[auth.ResendMyPhoneVerificationResponse], error)
	// Removed the phone number of the authorized user
	RemoveMyPhone(context.Context, *connect_go.Request[auth.RemoveMyPhoneRequest]) (*connect_go.Response[auth.RemoveMyPhoneResponse], error)
	// Remove my avatar
	RemoveMyAvatar(context.Context, *connect_go.Request[auth.RemoveMyAvatarRequest]) (*connect_go.Response[auth.RemoveMyAvatarResponse], error)
	// Returns a list of all linked identity providers (social logins, eg. Google, Microsoft, AD, etc.)
	ListMyLinkedIDPs(context.Context, *connect_go.Request[auth.ListMyLinkedIDPsRequest]) (*connect_go.Response[auth.ListMyLinkedIDPsResponse], error)
	// Removes a linked identity provider (social logins, eg. Google, Microsoft, AD, etc.)
	RemoveMyLinkedIDP(context.Context, *connect_go.Request[auth.RemoveMyLinkedIDPRequest]) (*connect_go.Response[auth.RemoveMyLinkedIDPResponse], error)
	// Returns all configured authentication factors (second and multi)
	ListMyAuthFactors(context.Context, *connect_go.Request[auth.ListMyAuthFactorsRequest]) (*connect_go.Response[auth.ListMyAuthFactorsResponse], error)
	// Adds a new OTP (One Time Password) Second Factor to the authorized user
	// Only one OTP can be configured per user
	AddMyAuthFactorOTP(context.Context, *connect_go.Request[auth.AddMyAuthFactorOTPRequest]) (*connect_go.Response[auth.AddMyAuthFactorOTPResponse], error)
	// Verify the last added OTP (One Time Password)
	VerifyMyAuthFactorOTP(context.Context, *connect_go.Request[auth.VerifyMyAuthFactorOTPRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorOTPResponse], error)
	// Removed the configured OTP (One Time Password) Factor
	RemoveMyAuthFactorOTP(context.Context, *connect_go.Request[auth.RemoveMyAuthFactorOTPRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorOTPResponse], error)
	// Adds a new U2F (Universal Second Factor) to the authorized user
	// Multiple U2Fs can be configured
	AddMyAuthFactorU2F(context.Context, *connect_go.Request[auth.AddMyAuthFactorU2FRequest]) (*connect_go.Response[auth.AddMyAuthFactorU2FResponse], error)
	// Verifies the last added U2F (Universal Second Factor) of the authorized user
	VerifyMyAuthFactorU2F(context.Context, *connect_go.Request[auth.VerifyMyAuthFactorU2FRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorU2FResponse], error)
	// Removes the U2F Authentication from the authorized user
	RemoveMyAuthFactorU2F(context.Context, *connect_go.Request[auth.RemoveMyAuthFactorU2FRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorU2FResponse], error)
	// Returns all configured passwordless authenticators of the authorized user
	ListMyPasswordless(context.Context, *connect_go.Request[auth.ListMyPasswordlessRequest]) (*connect_go.Response[auth.ListMyPasswordlessResponse], error)
	// Adds a new passwordless authenticator to the authorized user
	// Multiple passwordless authentications can be configured
	AddMyPasswordless(context.Context, *connect_go.Request[auth.AddMyPasswordlessRequest]) (*connect_go.Response[auth.AddMyPasswordlessResponse], error)
	// Adds a new passwordless authenticator link to the authorized user and returns it directly
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	AddMyPasswordlessLink(context.Context, *connect_go.Request[auth.AddMyPasswordlessLinkRequest]) (*connect_go.Response[auth.AddMyPasswordlessLinkResponse], error)
	// Adds a new passwordless authenticator link to the authorized user and sends it to the registered email address
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	SendMyPasswordlessLink(context.Context, *connect_go.Request[auth.SendMyPasswordlessLinkRequest]) (*connect_go.Response[auth.SendMyPasswordlessLinkResponse], error)
	// Verifies the last added passwordless configuration
	VerifyMyPasswordless(context.Context, *connect_go.Request[auth.VerifyMyPasswordlessRequest]) (*connect_go.Response[auth.VerifyMyPasswordlessResponse], error)
	// Removes the passwordless configuration from the authorized user
	RemoveMyPasswordless(context.Context, *connect_go.Request[auth.RemoveMyPasswordlessRequest]) (*connect_go.Response[auth.RemoveMyPasswordlessResponse], error)
	// Returns all user grants (authorizations) of the authorized user
	ListMyUserGrants(context.Context, *connect_go.Request[auth.ListMyUserGrantsRequest]) (*connect_go.Response[auth.ListMyUserGrantsResponse], error)
	// Returns a list of organisations where the authorized user has a user grant (authorization) in the context of the requested project
	ListMyProjectOrgs(context.Context, *connect_go.Request[auth.ListMyProjectOrgsRequest]) (*connect_go.Response[auth.ListMyProjectOrgsResponse], error)
	// Returns the permissions the authorized user has in ZITADEL based on his manager roles (e.g ORG_OWNER)
	ListMyZitadelPermissions(context.Context, *connect_go.Request[auth.ListMyZitadelPermissionsRequest]) (*connect_go.Response[auth.ListMyZitadelPermissionsResponse], error)
	// Returns a list of roles for the authorized user and project
	ListMyProjectPermissions(context.Context, *connect_go.Request[auth.ListMyProjectPermissionsRequest]) (*connect_go.Response[auth.ListMyProjectPermissionsResponse], error)
	// Show all the permissions my user has in ZITADEL (ZITADEL Manager)
	// Limit should always be set, there is a default limit set by the service
	ListMyMemberships(context.Context, *connect_go.Request[auth.ListMyMembershipsRequest]) (*connect_go.Response[auth.ListMyMembershipsResponse], error)
	// Returns the label policy of the current organisation
	GetMyLabelPolicy(context.Context, *connect_go.Request[auth.GetMyLabelPolicyRequest]) (*connect_go.Response[auth.GetMyLabelPolicyResponse], error)
	// Returns the privacy policy of the current organisation
	GetMyPrivacyPolicy(context.Context, *connect_go.Request[auth.GetMyPrivacyPolicyRequest]) (*connect_go.Response[auth.GetMyPrivacyPolicyResponse], error)
	// Returns the login policy of the current organisation
	GetMyLoginPolicy(context.Context, *connect_go.Request[auth.GetMyLoginPolicyRequest]) (*connect_go.Response[auth.GetMyLoginPolicyResponse], error)
}

// NewAuthServiceClient constructs a client for the zitadel.auth.v1.AuthService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAuthServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AuthServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &authServiceClient{
		healthz: connect_go.NewClient[auth.HealthzRequest, auth.HealthzResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/Healthz",
			opts...,
		),
		getSupportedLanguages: connect_go.NewClient[auth.GetSupportedLanguagesRequest, auth.GetSupportedLanguagesResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetSupportedLanguages",
			opts...,
		),
		getMyUser: connect_go.NewClient[auth.GetMyUserRequest, auth.GetMyUserResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyUser",
			opts...,
		),
		removeMyUser: connect_go.NewClient[auth.RemoveMyUserRequest, auth.RemoveMyUserResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyUser",
			opts...,
		),
		listMyUserChanges: connect_go.NewClient[auth.ListMyUserChangesRequest, auth.ListMyUserChangesResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyUserChanges",
			opts...,
		),
		listMyUserSessions: connect_go.NewClient[auth.ListMyUserSessionsRequest, auth.ListMyUserSessionsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyUserSessions",
			opts...,
		),
		listMyMetadata: connect_go.NewClient[auth.ListMyMetadataRequest, auth.ListMyMetadataResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyMetadata",
			opts...,
		),
		getMyMetadata: connect_go.NewClient[auth.GetMyMetadataRequest, auth.GetMyMetadataResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyMetadata",
			opts...,
		),
		listMyRefreshTokens: connect_go.NewClient[auth.ListMyRefreshTokensRequest, auth.ListMyRefreshTokensResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyRefreshTokens",
			opts...,
		),
		revokeMyRefreshToken: connect_go.NewClient[auth.RevokeMyRefreshTokenRequest, auth.RevokeMyRefreshTokenResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RevokeMyRefreshToken",
			opts...,
		),
		revokeAllMyRefreshTokens: connect_go.NewClient[auth.RevokeAllMyRefreshTokensRequest, auth.RevokeAllMyRefreshTokensResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RevokeAllMyRefreshTokens",
			opts...,
		),
		updateMyUserName: connect_go.NewClient[auth.UpdateMyUserNameRequest, auth.UpdateMyUserNameResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/UpdateMyUserName",
			opts...,
		),
		getMyPasswordComplexityPolicy: connect_go.NewClient[auth.GetMyPasswordComplexityPolicyRequest, auth.GetMyPasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyPasswordComplexityPolicy",
			opts...,
		),
		updateMyPassword: connect_go.NewClient[auth.UpdateMyPasswordRequest, auth.UpdateMyPasswordResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/UpdateMyPassword",
			opts...,
		),
		getMyProfile: connect_go.NewClient[auth.GetMyProfileRequest, auth.GetMyProfileResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyProfile",
			opts...,
		),
		updateMyProfile: connect_go.NewClient[auth.UpdateMyProfileRequest, auth.UpdateMyProfileResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/UpdateMyProfile",
			opts...,
		),
		getMyEmail: connect_go.NewClient[auth.GetMyEmailRequest, auth.GetMyEmailResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyEmail",
			opts...,
		),
		setMyEmail: connect_go.NewClient[auth.SetMyEmailRequest, auth.SetMyEmailResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/SetMyEmail",
			opts...,
		),
		verifyMyEmail: connect_go.NewClient[auth.VerifyMyEmailRequest, auth.VerifyMyEmailResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/VerifyMyEmail",
			opts...,
		),
		resendMyEmailVerification: connect_go.NewClient[auth.ResendMyEmailVerificationRequest, auth.ResendMyEmailVerificationResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ResendMyEmailVerification",
			opts...,
		),
		getMyPhone: connect_go.NewClient[auth.GetMyPhoneRequest, auth.GetMyPhoneResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyPhone",
			opts...,
		),
		setMyPhone: connect_go.NewClient[auth.SetMyPhoneRequest, auth.SetMyPhoneResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/SetMyPhone",
			opts...,
		),
		verifyMyPhone: connect_go.NewClient[auth.VerifyMyPhoneRequest, auth.VerifyMyPhoneResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/VerifyMyPhone",
			opts...,
		),
		resendMyPhoneVerification: connect_go.NewClient[auth.ResendMyPhoneVerificationRequest, auth.ResendMyPhoneVerificationResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ResendMyPhoneVerification",
			opts...,
		),
		removeMyPhone: connect_go.NewClient[auth.RemoveMyPhoneRequest, auth.RemoveMyPhoneResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyPhone",
			opts...,
		),
		removeMyAvatar: connect_go.NewClient[auth.RemoveMyAvatarRequest, auth.RemoveMyAvatarResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyAvatar",
			opts...,
		),
		listMyLinkedIDPs: connect_go.NewClient[auth.ListMyLinkedIDPsRequest, auth.ListMyLinkedIDPsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyLinkedIDPs",
			opts...,
		),
		removeMyLinkedIDP: connect_go.NewClient[auth.RemoveMyLinkedIDPRequest, auth.RemoveMyLinkedIDPResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyLinkedIDP",
			opts...,
		),
		listMyAuthFactors: connect_go.NewClient[auth.ListMyAuthFactorsRequest, auth.ListMyAuthFactorsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyAuthFactors",
			opts...,
		),
		addMyAuthFactorOTP: connect_go.NewClient[auth.AddMyAuthFactorOTPRequest, auth.AddMyAuthFactorOTPResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/AddMyAuthFactorOTP",
			opts...,
		),
		verifyMyAuthFactorOTP: connect_go.NewClient[auth.VerifyMyAuthFactorOTPRequest, auth.VerifyMyAuthFactorOTPResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/VerifyMyAuthFactorOTP",
			opts...,
		),
		removeMyAuthFactorOTP: connect_go.NewClient[auth.RemoveMyAuthFactorOTPRequest, auth.RemoveMyAuthFactorOTPResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyAuthFactorOTP",
			opts...,
		),
		addMyAuthFactorU2F: connect_go.NewClient[auth.AddMyAuthFactorU2FRequest, auth.AddMyAuthFactorU2FResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/AddMyAuthFactorU2F",
			opts...,
		),
		verifyMyAuthFactorU2F: connect_go.NewClient[auth.VerifyMyAuthFactorU2FRequest, auth.VerifyMyAuthFactorU2FResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/VerifyMyAuthFactorU2F",
			opts...,
		),
		removeMyAuthFactorU2F: connect_go.NewClient[auth.RemoveMyAuthFactorU2FRequest, auth.RemoveMyAuthFactorU2FResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyAuthFactorU2F",
			opts...,
		),
		listMyPasswordless: connect_go.NewClient[auth.ListMyPasswordlessRequest, auth.ListMyPasswordlessResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyPasswordless",
			opts...,
		),
		addMyPasswordless: connect_go.NewClient[auth.AddMyPasswordlessRequest, auth.AddMyPasswordlessResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/AddMyPasswordless",
			opts...,
		),
		addMyPasswordlessLink: connect_go.NewClient[auth.AddMyPasswordlessLinkRequest, auth.AddMyPasswordlessLinkResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/AddMyPasswordlessLink",
			opts...,
		),
		sendMyPasswordlessLink: connect_go.NewClient[auth.SendMyPasswordlessLinkRequest, auth.SendMyPasswordlessLinkResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/SendMyPasswordlessLink",
			opts...,
		),
		verifyMyPasswordless: connect_go.NewClient[auth.VerifyMyPasswordlessRequest, auth.VerifyMyPasswordlessResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/VerifyMyPasswordless",
			opts...,
		),
		removeMyPasswordless: connect_go.NewClient[auth.RemoveMyPasswordlessRequest, auth.RemoveMyPasswordlessResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/RemoveMyPasswordless",
			opts...,
		),
		listMyUserGrants: connect_go.NewClient[auth.ListMyUserGrantsRequest, auth.ListMyUserGrantsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyUserGrants",
			opts...,
		),
		listMyProjectOrgs: connect_go.NewClient[auth.ListMyProjectOrgsRequest, auth.ListMyProjectOrgsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyProjectOrgs",
			opts...,
		),
		listMyZitadelPermissions: connect_go.NewClient[auth.ListMyZitadelPermissionsRequest, auth.ListMyZitadelPermissionsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyZitadelPermissions",
			opts...,
		),
		listMyProjectPermissions: connect_go.NewClient[auth.ListMyProjectPermissionsRequest, auth.ListMyProjectPermissionsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyProjectPermissions",
			opts...,
		),
		listMyMemberships: connect_go.NewClient[auth.ListMyMembershipsRequest, auth.ListMyMembershipsResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/ListMyMemberships",
			opts...,
		),
		getMyLabelPolicy: connect_go.NewClient[auth.GetMyLabelPolicyRequest, auth.GetMyLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyLabelPolicy",
			opts...,
		),
		getMyPrivacyPolicy: connect_go.NewClient[auth.GetMyPrivacyPolicyRequest, auth.GetMyPrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyPrivacyPolicy",
			opts...,
		),
		getMyLoginPolicy: connect_go.NewClient[auth.GetMyLoginPolicyRequest, auth.GetMyLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.auth.v1.AuthService/GetMyLoginPolicy",
			opts...,
		),
	}
}

// authServiceClient implements AuthServiceClient.
type authServiceClient struct {
	healthz                       *connect_go.Client[auth.HealthzRequest, auth.HealthzResponse]
	getSupportedLanguages         *connect_go.Client[auth.GetSupportedLanguagesRequest, auth.GetSupportedLanguagesResponse]
	getMyUser                     *connect_go.Client[auth.GetMyUserRequest, auth.GetMyUserResponse]
	removeMyUser                  *connect_go.Client[auth.RemoveMyUserRequest, auth.RemoveMyUserResponse]
	listMyUserChanges             *connect_go.Client[auth.ListMyUserChangesRequest, auth.ListMyUserChangesResponse]
	listMyUserSessions            *connect_go.Client[auth.ListMyUserSessionsRequest, auth.ListMyUserSessionsResponse]
	listMyMetadata                *connect_go.Client[auth.ListMyMetadataRequest, auth.ListMyMetadataResponse]
	getMyMetadata                 *connect_go.Client[auth.GetMyMetadataRequest, auth.GetMyMetadataResponse]
	listMyRefreshTokens           *connect_go.Client[auth.ListMyRefreshTokensRequest, auth.ListMyRefreshTokensResponse]
	revokeMyRefreshToken          *connect_go.Client[auth.RevokeMyRefreshTokenRequest, auth.RevokeMyRefreshTokenResponse]
	revokeAllMyRefreshTokens      *connect_go.Client[auth.RevokeAllMyRefreshTokensRequest, auth.RevokeAllMyRefreshTokensResponse]
	updateMyUserName              *connect_go.Client[auth.UpdateMyUserNameRequest, auth.UpdateMyUserNameResponse]
	getMyPasswordComplexityPolicy *connect_go.Client[auth.GetMyPasswordComplexityPolicyRequest, auth.GetMyPasswordComplexityPolicyResponse]
	updateMyPassword              *connect_go.Client[auth.UpdateMyPasswordRequest, auth.UpdateMyPasswordResponse]
	getMyProfile                  *connect_go.Client[auth.GetMyProfileRequest, auth.GetMyProfileResponse]
	updateMyProfile               *connect_go.Client[auth.UpdateMyProfileRequest, auth.UpdateMyProfileResponse]
	getMyEmail                    *connect_go.Client[auth.GetMyEmailRequest, auth.GetMyEmailResponse]
	setMyEmail                    *connect_go.Client[auth.SetMyEmailRequest, auth.SetMyEmailResponse]
	verifyMyEmail                 *connect_go.Client[auth.VerifyMyEmailRequest, auth.VerifyMyEmailResponse]
	resendMyEmailVerification     *connect_go.Client[auth.ResendMyEmailVerificationRequest, auth.ResendMyEmailVerificationResponse]
	getMyPhone                    *connect_go.Client[auth.GetMyPhoneRequest, auth.GetMyPhoneResponse]
	setMyPhone                    *connect_go.Client[auth.SetMyPhoneRequest, auth.SetMyPhoneResponse]
	verifyMyPhone                 *connect_go.Client[auth.VerifyMyPhoneRequest, auth.VerifyMyPhoneResponse]
	resendMyPhoneVerification     *connect_go.Client[auth.ResendMyPhoneVerificationRequest, auth.ResendMyPhoneVerificationResponse]
	removeMyPhone                 *connect_go.Client[auth.RemoveMyPhoneRequest, auth.RemoveMyPhoneResponse]
	removeMyAvatar                *connect_go.Client[auth.RemoveMyAvatarRequest, auth.RemoveMyAvatarResponse]
	listMyLinkedIDPs              *connect_go.Client[auth.ListMyLinkedIDPsRequest, auth.ListMyLinkedIDPsResponse]
	removeMyLinkedIDP             *connect_go.Client[auth.RemoveMyLinkedIDPRequest, auth.RemoveMyLinkedIDPResponse]
	listMyAuthFactors             *connect_go.Client[auth.ListMyAuthFactorsRequest, auth.ListMyAuthFactorsResponse]
	addMyAuthFactorOTP            *connect_go.Client[auth.AddMyAuthFactorOTPRequest, auth.AddMyAuthFactorOTPResponse]
	verifyMyAuthFactorOTP         *connect_go.Client[auth.VerifyMyAuthFactorOTPRequest, auth.VerifyMyAuthFactorOTPResponse]
	removeMyAuthFactorOTP         *connect_go.Client[auth.RemoveMyAuthFactorOTPRequest, auth.RemoveMyAuthFactorOTPResponse]
	addMyAuthFactorU2F            *connect_go.Client[auth.AddMyAuthFactorU2FRequest, auth.AddMyAuthFactorU2FResponse]
	verifyMyAuthFactorU2F         *connect_go.Client[auth.VerifyMyAuthFactorU2FRequest, auth.VerifyMyAuthFactorU2FResponse]
	removeMyAuthFactorU2F         *connect_go.Client[auth.RemoveMyAuthFactorU2FRequest, auth.RemoveMyAuthFactorU2FResponse]
	listMyPasswordless            *connect_go.Client[auth.ListMyPasswordlessRequest, auth.ListMyPasswordlessResponse]
	addMyPasswordless             *connect_go.Client[auth.AddMyPasswordlessRequest, auth.AddMyPasswordlessResponse]
	addMyPasswordlessLink         *connect_go.Client[auth.AddMyPasswordlessLinkRequest, auth.AddMyPasswordlessLinkResponse]
	sendMyPasswordlessLink        *connect_go.Client[auth.SendMyPasswordlessLinkRequest, auth.SendMyPasswordlessLinkResponse]
	verifyMyPasswordless          *connect_go.Client[auth.VerifyMyPasswordlessRequest, auth.VerifyMyPasswordlessResponse]
	removeMyPasswordless          *connect_go.Client[auth.RemoveMyPasswordlessRequest, auth.RemoveMyPasswordlessResponse]
	listMyUserGrants              *connect_go.Client[auth.ListMyUserGrantsRequest, auth.ListMyUserGrantsResponse]
	listMyProjectOrgs             *connect_go.Client[auth.ListMyProjectOrgsRequest, auth.ListMyProjectOrgsResponse]
	listMyZitadelPermissions      *connect_go.Client[auth.ListMyZitadelPermissionsRequest, auth.ListMyZitadelPermissionsResponse]
	listMyProjectPermissions      *connect_go.Client[auth.ListMyProjectPermissionsRequest, auth.ListMyProjectPermissionsResponse]
	listMyMemberships             *connect_go.Client[auth.ListMyMembershipsRequest, auth.ListMyMembershipsResponse]
	getMyLabelPolicy              *connect_go.Client[auth.GetMyLabelPolicyRequest, auth.GetMyLabelPolicyResponse]
	getMyPrivacyPolicy            *connect_go.Client[auth.GetMyPrivacyPolicyRequest, auth.GetMyPrivacyPolicyResponse]
	getMyLoginPolicy              *connect_go.Client[auth.GetMyLoginPolicyRequest, auth.GetMyLoginPolicyResponse]
}

// Healthz calls zitadel.auth.v1.AuthService.Healthz.
func (c *authServiceClient) Healthz(ctx context.Context, req *connect_go.Request[auth.HealthzRequest]) (*connect_go.Response[auth.HealthzResponse], error) {
	return c.healthz.CallUnary(ctx, req)
}

// GetSupportedLanguages calls zitadel.auth.v1.AuthService.GetSupportedLanguages.
func (c *authServiceClient) GetSupportedLanguages(ctx context.Context, req *connect_go.Request[auth.GetSupportedLanguagesRequest]) (*connect_go.Response[auth.GetSupportedLanguagesResponse], error) {
	return c.getSupportedLanguages.CallUnary(ctx, req)
}

// GetMyUser calls zitadel.auth.v1.AuthService.GetMyUser.
func (c *authServiceClient) GetMyUser(ctx context.Context, req *connect_go.Request[auth.GetMyUserRequest]) (*connect_go.Response[auth.GetMyUserResponse], error) {
	return c.getMyUser.CallUnary(ctx, req)
}

// RemoveMyUser calls zitadel.auth.v1.AuthService.RemoveMyUser.
func (c *authServiceClient) RemoveMyUser(ctx context.Context, req *connect_go.Request[auth.RemoveMyUserRequest]) (*connect_go.Response[auth.RemoveMyUserResponse], error) {
	return c.removeMyUser.CallUnary(ctx, req)
}

// ListMyUserChanges calls zitadel.auth.v1.AuthService.ListMyUserChanges.
func (c *authServiceClient) ListMyUserChanges(ctx context.Context, req *connect_go.Request[auth.ListMyUserChangesRequest]) (*connect_go.Response[auth.ListMyUserChangesResponse], error) {
	return c.listMyUserChanges.CallUnary(ctx, req)
}

// ListMyUserSessions calls zitadel.auth.v1.AuthService.ListMyUserSessions.
func (c *authServiceClient) ListMyUserSessions(ctx context.Context, req *connect_go.Request[auth.ListMyUserSessionsRequest]) (*connect_go.Response[auth.ListMyUserSessionsResponse], error) {
	return c.listMyUserSessions.CallUnary(ctx, req)
}

// ListMyMetadata calls zitadel.auth.v1.AuthService.ListMyMetadata.
func (c *authServiceClient) ListMyMetadata(ctx context.Context, req *connect_go.Request[auth.ListMyMetadataRequest]) (*connect_go.Response[auth.ListMyMetadataResponse], error) {
	return c.listMyMetadata.CallUnary(ctx, req)
}

// GetMyMetadata calls zitadel.auth.v1.AuthService.GetMyMetadata.
func (c *authServiceClient) GetMyMetadata(ctx context.Context, req *connect_go.Request[auth.GetMyMetadataRequest]) (*connect_go.Response[auth.GetMyMetadataResponse], error) {
	return c.getMyMetadata.CallUnary(ctx, req)
}

// ListMyRefreshTokens calls zitadel.auth.v1.AuthService.ListMyRefreshTokens.
func (c *authServiceClient) ListMyRefreshTokens(ctx context.Context, req *connect_go.Request[auth.ListMyRefreshTokensRequest]) (*connect_go.Response[auth.ListMyRefreshTokensResponse], error) {
	return c.listMyRefreshTokens.CallUnary(ctx, req)
}

// RevokeMyRefreshToken calls zitadel.auth.v1.AuthService.RevokeMyRefreshToken.
func (c *authServiceClient) RevokeMyRefreshToken(ctx context.Context, req *connect_go.Request[auth.RevokeMyRefreshTokenRequest]) (*connect_go.Response[auth.RevokeMyRefreshTokenResponse], error) {
	return c.revokeMyRefreshToken.CallUnary(ctx, req)
}

// RevokeAllMyRefreshTokens calls zitadel.auth.v1.AuthService.RevokeAllMyRefreshTokens.
func (c *authServiceClient) RevokeAllMyRefreshTokens(ctx context.Context, req *connect_go.Request[auth.RevokeAllMyRefreshTokensRequest]) (*connect_go.Response[auth.RevokeAllMyRefreshTokensResponse], error) {
	return c.revokeAllMyRefreshTokens.CallUnary(ctx, req)
}

// UpdateMyUserName calls zitadel.auth.v1.AuthService.UpdateMyUserName.
func (c *authServiceClient) UpdateMyUserName(ctx context.Context, req *connect_go.Request[auth.UpdateMyUserNameRequest]) (*connect_go.Response[auth.UpdateMyUserNameResponse], error) {
	return c.updateMyUserName.CallUnary(ctx, req)
}

// GetMyPasswordComplexityPolicy calls zitadel.auth.v1.AuthService.GetMyPasswordComplexityPolicy.
func (c *authServiceClient) GetMyPasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[auth.GetMyPasswordComplexityPolicyRequest]) (*connect_go.Response[auth.GetMyPasswordComplexityPolicyResponse], error) {
	return c.getMyPasswordComplexityPolicy.CallUnary(ctx, req)
}

// UpdateMyPassword calls zitadel.auth.v1.AuthService.UpdateMyPassword.
func (c *authServiceClient) UpdateMyPassword(ctx context.Context, req *connect_go.Request[auth.UpdateMyPasswordRequest]) (*connect_go.Response[auth.UpdateMyPasswordResponse], error) {
	return c.updateMyPassword.CallUnary(ctx, req)
}

// GetMyProfile calls zitadel.auth.v1.AuthService.GetMyProfile.
func (c *authServiceClient) GetMyProfile(ctx context.Context, req *connect_go.Request[auth.GetMyProfileRequest]) (*connect_go.Response[auth.GetMyProfileResponse], error) {
	return c.getMyProfile.CallUnary(ctx, req)
}

// UpdateMyProfile calls zitadel.auth.v1.AuthService.UpdateMyProfile.
func (c *authServiceClient) UpdateMyProfile(ctx context.Context, req *connect_go.Request[auth.UpdateMyProfileRequest]) (*connect_go.Response[auth.UpdateMyProfileResponse], error) {
	return c.updateMyProfile.CallUnary(ctx, req)
}

// GetMyEmail calls zitadel.auth.v1.AuthService.GetMyEmail.
func (c *authServiceClient) GetMyEmail(ctx context.Context, req *connect_go.Request[auth.GetMyEmailRequest]) (*connect_go.Response[auth.GetMyEmailResponse], error) {
	return c.getMyEmail.CallUnary(ctx, req)
}

// SetMyEmail calls zitadel.auth.v1.AuthService.SetMyEmail.
func (c *authServiceClient) SetMyEmail(ctx context.Context, req *connect_go.Request[auth.SetMyEmailRequest]) (*connect_go.Response[auth.SetMyEmailResponse], error) {
	return c.setMyEmail.CallUnary(ctx, req)
}

// VerifyMyEmail calls zitadel.auth.v1.AuthService.VerifyMyEmail.
func (c *authServiceClient) VerifyMyEmail(ctx context.Context, req *connect_go.Request[auth.VerifyMyEmailRequest]) (*connect_go.Response[auth.VerifyMyEmailResponse], error) {
	return c.verifyMyEmail.CallUnary(ctx, req)
}

// ResendMyEmailVerification calls zitadel.auth.v1.AuthService.ResendMyEmailVerification.
func (c *authServiceClient) ResendMyEmailVerification(ctx context.Context, req *connect_go.Request[auth.ResendMyEmailVerificationRequest]) (*connect_go.Response[auth.ResendMyEmailVerificationResponse], error) {
	return c.resendMyEmailVerification.CallUnary(ctx, req)
}

// GetMyPhone calls zitadel.auth.v1.AuthService.GetMyPhone.
func (c *authServiceClient) GetMyPhone(ctx context.Context, req *connect_go.Request[auth.GetMyPhoneRequest]) (*connect_go.Response[auth.GetMyPhoneResponse], error) {
	return c.getMyPhone.CallUnary(ctx, req)
}

// SetMyPhone calls zitadel.auth.v1.AuthService.SetMyPhone.
func (c *authServiceClient) SetMyPhone(ctx context.Context, req *connect_go.Request[auth.SetMyPhoneRequest]) (*connect_go.Response[auth.SetMyPhoneResponse], error) {
	return c.setMyPhone.CallUnary(ctx, req)
}

// VerifyMyPhone calls zitadel.auth.v1.AuthService.VerifyMyPhone.
func (c *authServiceClient) VerifyMyPhone(ctx context.Context, req *connect_go.Request[auth.VerifyMyPhoneRequest]) (*connect_go.Response[auth.VerifyMyPhoneResponse], error) {
	return c.verifyMyPhone.CallUnary(ctx, req)
}

// ResendMyPhoneVerification calls zitadel.auth.v1.AuthService.ResendMyPhoneVerification.
func (c *authServiceClient) ResendMyPhoneVerification(ctx context.Context, req *connect_go.Request[auth.ResendMyPhoneVerificationRequest]) (*connect_go.Response[auth.ResendMyPhoneVerificationResponse], error) {
	return c.resendMyPhoneVerification.CallUnary(ctx, req)
}

// RemoveMyPhone calls zitadel.auth.v1.AuthService.RemoveMyPhone.
func (c *authServiceClient) RemoveMyPhone(ctx context.Context, req *connect_go.Request[auth.RemoveMyPhoneRequest]) (*connect_go.Response[auth.RemoveMyPhoneResponse], error) {
	return c.removeMyPhone.CallUnary(ctx, req)
}

// RemoveMyAvatar calls zitadel.auth.v1.AuthService.RemoveMyAvatar.
func (c *authServiceClient) RemoveMyAvatar(ctx context.Context, req *connect_go.Request[auth.RemoveMyAvatarRequest]) (*connect_go.Response[auth.RemoveMyAvatarResponse], error) {
	return c.removeMyAvatar.CallUnary(ctx, req)
}

// ListMyLinkedIDPs calls zitadel.auth.v1.AuthService.ListMyLinkedIDPs.
func (c *authServiceClient) ListMyLinkedIDPs(ctx context.Context, req *connect_go.Request[auth.ListMyLinkedIDPsRequest]) (*connect_go.Response[auth.ListMyLinkedIDPsResponse], error) {
	return c.listMyLinkedIDPs.CallUnary(ctx, req)
}

// RemoveMyLinkedIDP calls zitadel.auth.v1.AuthService.RemoveMyLinkedIDP.
func (c *authServiceClient) RemoveMyLinkedIDP(ctx context.Context, req *connect_go.Request[auth.RemoveMyLinkedIDPRequest]) (*connect_go.Response[auth.RemoveMyLinkedIDPResponse], error) {
	return c.removeMyLinkedIDP.CallUnary(ctx, req)
}

// ListMyAuthFactors calls zitadel.auth.v1.AuthService.ListMyAuthFactors.
func (c *authServiceClient) ListMyAuthFactors(ctx context.Context, req *connect_go.Request[auth.ListMyAuthFactorsRequest]) (*connect_go.Response[auth.ListMyAuthFactorsResponse], error) {
	return c.listMyAuthFactors.CallUnary(ctx, req)
}

// AddMyAuthFactorOTP calls zitadel.auth.v1.AuthService.AddMyAuthFactorOTP.
func (c *authServiceClient) AddMyAuthFactorOTP(ctx context.Context, req *connect_go.Request[auth.AddMyAuthFactorOTPRequest]) (*connect_go.Response[auth.AddMyAuthFactorOTPResponse], error) {
	return c.addMyAuthFactorOTP.CallUnary(ctx, req)
}

// VerifyMyAuthFactorOTP calls zitadel.auth.v1.AuthService.VerifyMyAuthFactorOTP.
func (c *authServiceClient) VerifyMyAuthFactorOTP(ctx context.Context, req *connect_go.Request[auth.VerifyMyAuthFactorOTPRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorOTPResponse], error) {
	return c.verifyMyAuthFactorOTP.CallUnary(ctx, req)
}

// RemoveMyAuthFactorOTP calls zitadel.auth.v1.AuthService.RemoveMyAuthFactorOTP.
func (c *authServiceClient) RemoveMyAuthFactorOTP(ctx context.Context, req *connect_go.Request[auth.RemoveMyAuthFactorOTPRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorOTPResponse], error) {
	return c.removeMyAuthFactorOTP.CallUnary(ctx, req)
}

// AddMyAuthFactorU2F calls zitadel.auth.v1.AuthService.AddMyAuthFactorU2F.
func (c *authServiceClient) AddMyAuthFactorU2F(ctx context.Context, req *connect_go.Request[auth.AddMyAuthFactorU2FRequest]) (*connect_go.Response[auth.AddMyAuthFactorU2FResponse], error) {
	return c.addMyAuthFactorU2F.CallUnary(ctx, req)
}

// VerifyMyAuthFactorU2F calls zitadel.auth.v1.AuthService.VerifyMyAuthFactorU2F.
func (c *authServiceClient) VerifyMyAuthFactorU2F(ctx context.Context, req *connect_go.Request[auth.VerifyMyAuthFactorU2FRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorU2FResponse], error) {
	return c.verifyMyAuthFactorU2F.CallUnary(ctx, req)
}

// RemoveMyAuthFactorU2F calls zitadel.auth.v1.AuthService.RemoveMyAuthFactorU2F.
func (c *authServiceClient) RemoveMyAuthFactorU2F(ctx context.Context, req *connect_go.Request[auth.RemoveMyAuthFactorU2FRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorU2FResponse], error) {
	return c.removeMyAuthFactorU2F.CallUnary(ctx, req)
}

// ListMyPasswordless calls zitadel.auth.v1.AuthService.ListMyPasswordless.
func (c *authServiceClient) ListMyPasswordless(ctx context.Context, req *connect_go.Request[auth.ListMyPasswordlessRequest]) (*connect_go.Response[auth.ListMyPasswordlessResponse], error) {
	return c.listMyPasswordless.CallUnary(ctx, req)
}

// AddMyPasswordless calls zitadel.auth.v1.AuthService.AddMyPasswordless.
func (c *authServiceClient) AddMyPasswordless(ctx context.Context, req *connect_go.Request[auth.AddMyPasswordlessRequest]) (*connect_go.Response[auth.AddMyPasswordlessResponse], error) {
	return c.addMyPasswordless.CallUnary(ctx, req)
}

// AddMyPasswordlessLink calls zitadel.auth.v1.AuthService.AddMyPasswordlessLink.
func (c *authServiceClient) AddMyPasswordlessLink(ctx context.Context, req *connect_go.Request[auth.AddMyPasswordlessLinkRequest]) (*connect_go.Response[auth.AddMyPasswordlessLinkResponse], error) {
	return c.addMyPasswordlessLink.CallUnary(ctx, req)
}

// SendMyPasswordlessLink calls zitadel.auth.v1.AuthService.SendMyPasswordlessLink.
func (c *authServiceClient) SendMyPasswordlessLink(ctx context.Context, req *connect_go.Request[auth.SendMyPasswordlessLinkRequest]) (*connect_go.Response[auth.SendMyPasswordlessLinkResponse], error) {
	return c.sendMyPasswordlessLink.CallUnary(ctx, req)
}

// VerifyMyPasswordless calls zitadel.auth.v1.AuthService.VerifyMyPasswordless.
func (c *authServiceClient) VerifyMyPasswordless(ctx context.Context, req *connect_go.Request[auth.VerifyMyPasswordlessRequest]) (*connect_go.Response[auth.VerifyMyPasswordlessResponse], error) {
	return c.verifyMyPasswordless.CallUnary(ctx, req)
}

// RemoveMyPasswordless calls zitadel.auth.v1.AuthService.RemoveMyPasswordless.
func (c *authServiceClient) RemoveMyPasswordless(ctx context.Context, req *connect_go.Request[auth.RemoveMyPasswordlessRequest]) (*connect_go.Response[auth.RemoveMyPasswordlessResponse], error) {
	return c.removeMyPasswordless.CallUnary(ctx, req)
}

// ListMyUserGrants calls zitadel.auth.v1.AuthService.ListMyUserGrants.
func (c *authServiceClient) ListMyUserGrants(ctx context.Context, req *connect_go.Request[auth.ListMyUserGrantsRequest]) (*connect_go.Response[auth.ListMyUserGrantsResponse], error) {
	return c.listMyUserGrants.CallUnary(ctx, req)
}

// ListMyProjectOrgs calls zitadel.auth.v1.AuthService.ListMyProjectOrgs.
func (c *authServiceClient) ListMyProjectOrgs(ctx context.Context, req *connect_go.Request[auth.ListMyProjectOrgsRequest]) (*connect_go.Response[auth.ListMyProjectOrgsResponse], error) {
	return c.listMyProjectOrgs.CallUnary(ctx, req)
}

// ListMyZitadelPermissions calls zitadel.auth.v1.AuthService.ListMyZitadelPermissions.
func (c *authServiceClient) ListMyZitadelPermissions(ctx context.Context, req *connect_go.Request[auth.ListMyZitadelPermissionsRequest]) (*connect_go.Response[auth.ListMyZitadelPermissionsResponse], error) {
	return c.listMyZitadelPermissions.CallUnary(ctx, req)
}

// ListMyProjectPermissions calls zitadel.auth.v1.AuthService.ListMyProjectPermissions.
func (c *authServiceClient) ListMyProjectPermissions(ctx context.Context, req *connect_go.Request[auth.ListMyProjectPermissionsRequest]) (*connect_go.Response[auth.ListMyProjectPermissionsResponse], error) {
	return c.listMyProjectPermissions.CallUnary(ctx, req)
}

// ListMyMemberships calls zitadel.auth.v1.AuthService.ListMyMemberships.
func (c *authServiceClient) ListMyMemberships(ctx context.Context, req *connect_go.Request[auth.ListMyMembershipsRequest]) (*connect_go.Response[auth.ListMyMembershipsResponse], error) {
	return c.listMyMemberships.CallUnary(ctx, req)
}

// GetMyLabelPolicy calls zitadel.auth.v1.AuthService.GetMyLabelPolicy.
func (c *authServiceClient) GetMyLabelPolicy(ctx context.Context, req *connect_go.Request[auth.GetMyLabelPolicyRequest]) (*connect_go.Response[auth.GetMyLabelPolicyResponse], error) {
	return c.getMyLabelPolicy.CallUnary(ctx, req)
}

// GetMyPrivacyPolicy calls zitadel.auth.v1.AuthService.GetMyPrivacyPolicy.
func (c *authServiceClient) GetMyPrivacyPolicy(ctx context.Context, req *connect_go.Request[auth.GetMyPrivacyPolicyRequest]) (*connect_go.Response[auth.GetMyPrivacyPolicyResponse], error) {
	return c.getMyPrivacyPolicy.CallUnary(ctx, req)
}

// GetMyLoginPolicy calls zitadel.auth.v1.AuthService.GetMyLoginPolicy.
func (c *authServiceClient) GetMyLoginPolicy(ctx context.Context, req *connect_go.Request[auth.GetMyLoginPolicyRequest]) (*connect_go.Response[auth.GetMyLoginPolicyResponse], error) {
	return c.getMyLoginPolicy.CallUnary(ctx, req)
}

// AuthServiceHandler is an implementation of the zitadel.auth.v1.AuthService service.
type AuthServiceHandler interface {
	Healthz(context.Context, *connect_go.Request[auth.HealthzRequest]) (*connect_go.Response[auth.HealthzResponse], error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *connect_go.Request[auth.GetSupportedLanguagesRequest]) (*connect_go.Response[auth.GetSupportedLanguagesResponse], error)
	// Returns my full blown user
	GetMyUser(context.Context, *connect_go.Request[auth.GetMyUserRequest]) (*connect_go.Response[auth.GetMyUserResponse], error)
	// Changes the user state to deleted
	RemoveMyUser(context.Context, *connect_go.Request[auth.RemoveMyUserRequest]) (*connect_go.Response[auth.RemoveMyUserResponse], error)
	// Returns the history of the authorized user (each event)
	ListMyUserChanges(context.Context, *connect_go.Request[auth.ListMyUserChangesRequest]) (*connect_go.Response[auth.ListMyUserChangesResponse], error)
	// Returns the user sessions of the authorized user of the current useragent
	ListMyUserSessions(context.Context, *connect_go.Request[auth.ListMyUserSessionsRequest]) (*connect_go.Response[auth.ListMyUserSessionsResponse], error)
	// Returns the user metadata of the authorized user
	ListMyMetadata(context.Context, *connect_go.Request[auth.ListMyMetadataRequest]) (*connect_go.Response[auth.ListMyMetadataResponse], error)
	// Returns the user metadata by key of the authorized user
	GetMyMetadata(context.Context, *connect_go.Request[auth.GetMyMetadataRequest]) (*connect_go.Response[auth.GetMyMetadataResponse], error)
	// Returns the refresh tokens of the authorized user
	ListMyRefreshTokens(context.Context, *connect_go.Request[auth.ListMyRefreshTokensRequest]) (*connect_go.Response[auth.ListMyRefreshTokensResponse], error)
	// Revokes a single refresh token of the authorized user by its (token) id
	RevokeMyRefreshToken(context.Context, *connect_go.Request[auth.RevokeMyRefreshTokenRequest]) (*connect_go.Response[auth.RevokeMyRefreshTokenResponse], error)
	// Revokes all refresh tokens of the authorized user
	RevokeAllMyRefreshTokens(context.Context, *connect_go.Request[auth.RevokeAllMyRefreshTokensRequest]) (*connect_go.Response[auth.RevokeAllMyRefreshTokensResponse], error)
	// Change the user name of the authorize user
	UpdateMyUserName(context.Context, *connect_go.Request[auth.UpdateMyUserNameRequest]) (*connect_go.Response[auth.UpdateMyUserNameResponse], error)
	// Returns the password complexity policy of my organisation
	// This policy defines how the password should look
	GetMyPasswordComplexityPolicy(context.Context, *connect_go.Request[auth.GetMyPasswordComplexityPolicyRequest]) (*connect_go.Response[auth.GetMyPasswordComplexityPolicyResponse], error)
	// Change the password of the authorized user
	UpdateMyPassword(context.Context, *connect_go.Request[auth.UpdateMyPasswordRequest]) (*connect_go.Response[auth.UpdateMyPasswordResponse], error)
	// Returns the profile information of the authorized user
	GetMyProfile(context.Context, *connect_go.Request[auth.GetMyProfileRequest]) (*connect_go.Response[auth.GetMyProfileResponse], error)
	// Changes the profile information of the authorized user
	UpdateMyProfile(context.Context, *connect_go.Request[auth.UpdateMyProfileRequest]) (*connect_go.Response[auth.UpdateMyProfileResponse], error)
	// Returns the email address of the authorized user
	GetMyEmail(context.Context, *connect_go.Request[auth.GetMyEmailRequest]) (*connect_go.Response[auth.GetMyEmailResponse], error)
	// Changes the email address of the authorized user
	// An email is sent to the given address, to verify it
	SetMyEmail(context.Context, *connect_go.Request[auth.SetMyEmailRequest]) (*connect_go.Response[auth.SetMyEmailResponse], error)
	// Sets the email address to verified
	VerifyMyEmail(context.Context, *connect_go.Request[auth.VerifyMyEmailRequest]) (*connect_go.Response[auth.VerifyMyEmailResponse], error)
	// Sends a new email to the last given address to verify it
	ResendMyEmailVerification(context.Context, *connect_go.Request[auth.ResendMyEmailVerificationRequest]) (*connect_go.Response[auth.ResendMyEmailVerificationResponse], error)
	// Returns the phone number of the authorized user
	GetMyPhone(context.Context, *connect_go.Request[auth.GetMyPhoneRequest]) (*connect_go.Response[auth.GetMyPhoneResponse], error)
	// Sets the phone number of the authorized user
	// An sms is sent to the number with a verification code
	SetMyPhone(context.Context, *connect_go.Request[auth.SetMyPhoneRequest]) (*connect_go.Response[auth.SetMyPhoneResponse], error)
	// Sets the phone number to verified
	VerifyMyPhone(context.Context, *connect_go.Request[auth.VerifyMyPhoneRequest]) (*connect_go.Response[auth.VerifyMyPhoneResponse], error)
	// Resends a sms to the last given phone number, to verify it
	ResendMyPhoneVerification(context.Context, *connect_go.Request[auth.ResendMyPhoneVerificationRequest]) (*connect_go.Response[auth.ResendMyPhoneVerificationResponse], error)
	// Removed the phone number of the authorized user
	RemoveMyPhone(context.Context, *connect_go.Request[auth.RemoveMyPhoneRequest]) (*connect_go.Response[auth.RemoveMyPhoneResponse], error)
	// Remove my avatar
	RemoveMyAvatar(context.Context, *connect_go.Request[auth.RemoveMyAvatarRequest]) (*connect_go.Response[auth.RemoveMyAvatarResponse], error)
	// Returns a list of all linked identity providers (social logins, eg. Google, Microsoft, AD, etc.)
	ListMyLinkedIDPs(context.Context, *connect_go.Request[auth.ListMyLinkedIDPsRequest]) (*connect_go.Response[auth.ListMyLinkedIDPsResponse], error)
	// Removes a linked identity provider (social logins, eg. Google, Microsoft, AD, etc.)
	RemoveMyLinkedIDP(context.Context, *connect_go.Request[auth.RemoveMyLinkedIDPRequest]) (*connect_go.Response[auth.RemoveMyLinkedIDPResponse], error)
	// Returns all configured authentication factors (second and multi)
	ListMyAuthFactors(context.Context, *connect_go.Request[auth.ListMyAuthFactorsRequest]) (*connect_go.Response[auth.ListMyAuthFactorsResponse], error)
	// Adds a new OTP (One Time Password) Second Factor to the authorized user
	// Only one OTP can be configured per user
	AddMyAuthFactorOTP(context.Context, *connect_go.Request[auth.AddMyAuthFactorOTPRequest]) (*connect_go.Response[auth.AddMyAuthFactorOTPResponse], error)
	// Verify the last added OTP (One Time Password)
	VerifyMyAuthFactorOTP(context.Context, *connect_go.Request[auth.VerifyMyAuthFactorOTPRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorOTPResponse], error)
	// Removed the configured OTP (One Time Password) Factor
	RemoveMyAuthFactorOTP(context.Context, *connect_go.Request[auth.RemoveMyAuthFactorOTPRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorOTPResponse], error)
	// Adds a new U2F (Universal Second Factor) to the authorized user
	// Multiple U2Fs can be configured
	AddMyAuthFactorU2F(context.Context, *connect_go.Request[auth.AddMyAuthFactorU2FRequest]) (*connect_go.Response[auth.AddMyAuthFactorU2FResponse], error)
	// Verifies the last added U2F (Universal Second Factor) of the authorized user
	VerifyMyAuthFactorU2F(context.Context, *connect_go.Request[auth.VerifyMyAuthFactorU2FRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorU2FResponse], error)
	// Removes the U2F Authentication from the authorized user
	RemoveMyAuthFactorU2F(context.Context, *connect_go.Request[auth.RemoveMyAuthFactorU2FRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorU2FResponse], error)
	// Returns all configured passwordless authenticators of the authorized user
	ListMyPasswordless(context.Context, *connect_go.Request[auth.ListMyPasswordlessRequest]) (*connect_go.Response[auth.ListMyPasswordlessResponse], error)
	// Adds a new passwordless authenticator to the authorized user
	// Multiple passwordless authentications can be configured
	AddMyPasswordless(context.Context, *connect_go.Request[auth.AddMyPasswordlessRequest]) (*connect_go.Response[auth.AddMyPasswordlessResponse], error)
	// Adds a new passwordless authenticator link to the authorized user and returns it directly
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	AddMyPasswordlessLink(context.Context, *connect_go.Request[auth.AddMyPasswordlessLinkRequest]) (*connect_go.Response[auth.AddMyPasswordlessLinkResponse], error)
	// Adds a new passwordless authenticator link to the authorized user and sends it to the registered email address
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	SendMyPasswordlessLink(context.Context, *connect_go.Request[auth.SendMyPasswordlessLinkRequest]) (*connect_go.Response[auth.SendMyPasswordlessLinkResponse], error)
	// Verifies the last added passwordless configuration
	VerifyMyPasswordless(context.Context, *connect_go.Request[auth.VerifyMyPasswordlessRequest]) (*connect_go.Response[auth.VerifyMyPasswordlessResponse], error)
	// Removes the passwordless configuration from the authorized user
	RemoveMyPasswordless(context.Context, *connect_go.Request[auth.RemoveMyPasswordlessRequest]) (*connect_go.Response[auth.RemoveMyPasswordlessResponse], error)
	// Returns all user grants (authorizations) of the authorized user
	ListMyUserGrants(context.Context, *connect_go.Request[auth.ListMyUserGrantsRequest]) (*connect_go.Response[auth.ListMyUserGrantsResponse], error)
	// Returns a list of organisations where the authorized user has a user grant (authorization) in the context of the requested project
	ListMyProjectOrgs(context.Context, *connect_go.Request[auth.ListMyProjectOrgsRequest]) (*connect_go.Response[auth.ListMyProjectOrgsResponse], error)
	// Returns the permissions the authorized user has in ZITADEL based on his manager roles (e.g ORG_OWNER)
	ListMyZitadelPermissions(context.Context, *connect_go.Request[auth.ListMyZitadelPermissionsRequest]) (*connect_go.Response[auth.ListMyZitadelPermissionsResponse], error)
	// Returns a list of roles for the authorized user and project
	ListMyProjectPermissions(context.Context, *connect_go.Request[auth.ListMyProjectPermissionsRequest]) (*connect_go.Response[auth.ListMyProjectPermissionsResponse], error)
	// Show all the permissions my user has in ZITADEL (ZITADEL Manager)
	// Limit should always be set, there is a default limit set by the service
	ListMyMemberships(context.Context, *connect_go.Request[auth.ListMyMembershipsRequest]) (*connect_go.Response[auth.ListMyMembershipsResponse], error)
	// Returns the label policy of the current organisation
	GetMyLabelPolicy(context.Context, *connect_go.Request[auth.GetMyLabelPolicyRequest]) (*connect_go.Response[auth.GetMyLabelPolicyResponse], error)
	// Returns the privacy policy of the current organisation
	GetMyPrivacyPolicy(context.Context, *connect_go.Request[auth.GetMyPrivacyPolicyRequest]) (*connect_go.Response[auth.GetMyPrivacyPolicyResponse], error)
	// Returns the login policy of the current organisation
	GetMyLoginPolicy(context.Context, *connect_go.Request[auth.GetMyLoginPolicyRequest]) (*connect_go.Response[auth.GetMyLoginPolicyResponse], error)
}

// NewAuthServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAuthServiceHandler(svc AuthServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/zitadel.auth.v1.AuthService/Healthz", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/Healthz",
		svc.Healthz,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetSupportedLanguages", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetSupportedLanguages",
		svc.GetSupportedLanguages,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyUser", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyUser",
		svc.GetMyUser,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyUser", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyUser",
		svc.RemoveMyUser,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyUserChanges", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyUserChanges",
		svc.ListMyUserChanges,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyUserSessions", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyUserSessions",
		svc.ListMyUserSessions,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyMetadata", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyMetadata",
		svc.ListMyMetadata,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyMetadata", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyMetadata",
		svc.GetMyMetadata,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyRefreshTokens", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyRefreshTokens",
		svc.ListMyRefreshTokens,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RevokeMyRefreshToken", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RevokeMyRefreshToken",
		svc.RevokeMyRefreshToken,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RevokeAllMyRefreshTokens", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RevokeAllMyRefreshTokens",
		svc.RevokeAllMyRefreshTokens,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/UpdateMyUserName", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/UpdateMyUserName",
		svc.UpdateMyUserName,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyPasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyPasswordComplexityPolicy",
		svc.GetMyPasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/UpdateMyPassword", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/UpdateMyPassword",
		svc.UpdateMyPassword,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyProfile", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyProfile",
		svc.GetMyProfile,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/UpdateMyProfile", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/UpdateMyProfile",
		svc.UpdateMyProfile,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyEmail", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyEmail",
		svc.GetMyEmail,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/SetMyEmail", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/SetMyEmail",
		svc.SetMyEmail,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/VerifyMyEmail", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/VerifyMyEmail",
		svc.VerifyMyEmail,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ResendMyEmailVerification", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ResendMyEmailVerification",
		svc.ResendMyEmailVerification,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyPhone", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyPhone",
		svc.GetMyPhone,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/SetMyPhone", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/SetMyPhone",
		svc.SetMyPhone,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/VerifyMyPhone", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/VerifyMyPhone",
		svc.VerifyMyPhone,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ResendMyPhoneVerification", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ResendMyPhoneVerification",
		svc.ResendMyPhoneVerification,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyPhone", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyPhone",
		svc.RemoveMyPhone,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyAvatar", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyAvatar",
		svc.RemoveMyAvatar,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyLinkedIDPs", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyLinkedIDPs",
		svc.ListMyLinkedIDPs,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyLinkedIDP", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyLinkedIDP",
		svc.RemoveMyLinkedIDP,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyAuthFactors", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyAuthFactors",
		svc.ListMyAuthFactors,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/AddMyAuthFactorOTP", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/AddMyAuthFactorOTP",
		svc.AddMyAuthFactorOTP,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/VerifyMyAuthFactorOTP", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/VerifyMyAuthFactorOTP",
		svc.VerifyMyAuthFactorOTP,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyAuthFactorOTP", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyAuthFactorOTP",
		svc.RemoveMyAuthFactorOTP,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/AddMyAuthFactorU2F", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/AddMyAuthFactorU2F",
		svc.AddMyAuthFactorU2F,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/VerifyMyAuthFactorU2F", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/VerifyMyAuthFactorU2F",
		svc.VerifyMyAuthFactorU2F,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyAuthFactorU2F", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyAuthFactorU2F",
		svc.RemoveMyAuthFactorU2F,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyPasswordless", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyPasswordless",
		svc.ListMyPasswordless,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/AddMyPasswordless", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/AddMyPasswordless",
		svc.AddMyPasswordless,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/AddMyPasswordlessLink", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/AddMyPasswordlessLink",
		svc.AddMyPasswordlessLink,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/SendMyPasswordlessLink", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/SendMyPasswordlessLink",
		svc.SendMyPasswordlessLink,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/VerifyMyPasswordless", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/VerifyMyPasswordless",
		svc.VerifyMyPasswordless,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/RemoveMyPasswordless", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/RemoveMyPasswordless",
		svc.RemoveMyPasswordless,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyUserGrants", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyUserGrants",
		svc.ListMyUserGrants,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyProjectOrgs", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyProjectOrgs",
		svc.ListMyProjectOrgs,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyZitadelPermissions", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyZitadelPermissions",
		svc.ListMyZitadelPermissions,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyProjectPermissions", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyProjectPermissions",
		svc.ListMyProjectPermissions,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/ListMyMemberships", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/ListMyMemberships",
		svc.ListMyMemberships,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyLabelPolicy",
		svc.GetMyLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyPrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyPrivacyPolicy",
		svc.GetMyPrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.auth.v1.AuthService/GetMyLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.auth.v1.AuthService/GetMyLoginPolicy",
		svc.GetMyLoginPolicy,
		opts...,
	))
	return "/zitadel.auth.v1.AuthService/", mux
}

// UnimplementedAuthServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAuthServiceHandler struct{}

func (UnimplementedAuthServiceHandler) Healthz(context.Context, *connect_go.Request[auth.HealthzRequest]) (*connect_go.Response[auth.HealthzResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.Healthz is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetSupportedLanguages(context.Context, *connect_go.Request[auth.GetSupportedLanguagesRequest]) (*connect_go.Response[auth.GetSupportedLanguagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetSupportedLanguages is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyUser(context.Context, *connect_go.Request[auth.GetMyUserRequest]) (*connect_go.Response[auth.GetMyUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyUser(context.Context, *connect_go.Request[auth.RemoveMyUserRequest]) (*connect_go.Response[auth.RemoveMyUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyUser is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyUserChanges(context.Context, *connect_go.Request[auth.ListMyUserChangesRequest]) (*connect_go.Response[auth.ListMyUserChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyUserChanges is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyUserSessions(context.Context, *connect_go.Request[auth.ListMyUserSessionsRequest]) (*connect_go.Response[auth.ListMyUserSessionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyUserSessions is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyMetadata(context.Context, *connect_go.Request[auth.ListMyMetadataRequest]) (*connect_go.Response[auth.ListMyMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyMetadata is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyMetadata(context.Context, *connect_go.Request[auth.GetMyMetadataRequest]) (*connect_go.Response[auth.GetMyMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyMetadata is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyRefreshTokens(context.Context, *connect_go.Request[auth.ListMyRefreshTokensRequest]) (*connect_go.Response[auth.ListMyRefreshTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyRefreshTokens is not implemented"))
}

func (UnimplementedAuthServiceHandler) RevokeMyRefreshToken(context.Context, *connect_go.Request[auth.RevokeMyRefreshTokenRequest]) (*connect_go.Response[auth.RevokeMyRefreshTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RevokeMyRefreshToken is not implemented"))
}

func (UnimplementedAuthServiceHandler) RevokeAllMyRefreshTokens(context.Context, *connect_go.Request[auth.RevokeAllMyRefreshTokensRequest]) (*connect_go.Response[auth.RevokeAllMyRefreshTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RevokeAllMyRefreshTokens is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateMyUserName(context.Context, *connect_go.Request[auth.UpdateMyUserNameRequest]) (*connect_go.Response[auth.UpdateMyUserNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.UpdateMyUserName is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyPasswordComplexityPolicy(context.Context, *connect_go.Request[auth.GetMyPasswordComplexityPolicyRequest]) (*connect_go.Response[auth.GetMyPasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyPasswordComplexityPolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateMyPassword(context.Context, *connect_go.Request[auth.UpdateMyPasswordRequest]) (*connect_go.Response[auth.UpdateMyPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.UpdateMyPassword is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyProfile(context.Context, *connect_go.Request[auth.GetMyProfileRequest]) (*connect_go.Response[auth.GetMyProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyProfile is not implemented"))
}

func (UnimplementedAuthServiceHandler) UpdateMyProfile(context.Context, *connect_go.Request[auth.UpdateMyProfileRequest]) (*connect_go.Response[auth.UpdateMyProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.UpdateMyProfile is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyEmail(context.Context, *connect_go.Request[auth.GetMyEmailRequest]) (*connect_go.Response[auth.GetMyEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) SetMyEmail(context.Context, *connect_go.Request[auth.SetMyEmailRequest]) (*connect_go.Response[auth.SetMyEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.SetMyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMyEmail(context.Context, *connect_go.Request[auth.VerifyMyEmailRequest]) (*connect_go.Response[auth.VerifyMyEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.VerifyMyEmail is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResendMyEmailVerification(context.Context, *connect_go.Request[auth.ResendMyEmailVerificationRequest]) (*connect_go.Response[auth.ResendMyEmailVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ResendMyEmailVerification is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyPhone(context.Context, *connect_go.Request[auth.GetMyPhoneRequest]) (*connect_go.Response[auth.GetMyPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyPhone is not implemented"))
}

func (UnimplementedAuthServiceHandler) SetMyPhone(context.Context, *connect_go.Request[auth.SetMyPhoneRequest]) (*connect_go.Response[auth.SetMyPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.SetMyPhone is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMyPhone(context.Context, *connect_go.Request[auth.VerifyMyPhoneRequest]) (*connect_go.Response[auth.VerifyMyPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.VerifyMyPhone is not implemented"))
}

func (UnimplementedAuthServiceHandler) ResendMyPhoneVerification(context.Context, *connect_go.Request[auth.ResendMyPhoneVerificationRequest]) (*connect_go.Response[auth.ResendMyPhoneVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ResendMyPhoneVerification is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyPhone(context.Context, *connect_go.Request[auth.RemoveMyPhoneRequest]) (*connect_go.Response[auth.RemoveMyPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyPhone is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyAvatar(context.Context, *connect_go.Request[auth.RemoveMyAvatarRequest]) (*connect_go.Response[auth.RemoveMyAvatarResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyAvatar is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyLinkedIDPs(context.Context, *connect_go.Request[auth.ListMyLinkedIDPsRequest]) (*connect_go.Response[auth.ListMyLinkedIDPsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyLinkedIDPs is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyLinkedIDP(context.Context, *connect_go.Request[auth.RemoveMyLinkedIDPRequest]) (*connect_go.Response[auth.RemoveMyLinkedIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyLinkedIDP is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyAuthFactors(context.Context, *connect_go.Request[auth.ListMyAuthFactorsRequest]) (*connect_go.Response[auth.ListMyAuthFactorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyAuthFactors is not implemented"))
}

func (UnimplementedAuthServiceHandler) AddMyAuthFactorOTP(context.Context, *connect_go.Request[auth.AddMyAuthFactorOTPRequest]) (*connect_go.Response[auth.AddMyAuthFactorOTPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.AddMyAuthFactorOTP is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMyAuthFactorOTP(context.Context, *connect_go.Request[auth.VerifyMyAuthFactorOTPRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorOTPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.VerifyMyAuthFactorOTP is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyAuthFactorOTP(context.Context, *connect_go.Request[auth.RemoveMyAuthFactorOTPRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorOTPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyAuthFactorOTP is not implemented"))
}

func (UnimplementedAuthServiceHandler) AddMyAuthFactorU2F(context.Context, *connect_go.Request[auth.AddMyAuthFactorU2FRequest]) (*connect_go.Response[auth.AddMyAuthFactorU2FResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.AddMyAuthFactorU2F is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMyAuthFactorU2F(context.Context, *connect_go.Request[auth.VerifyMyAuthFactorU2FRequest]) (*connect_go.Response[auth.VerifyMyAuthFactorU2FResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.VerifyMyAuthFactorU2F is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyAuthFactorU2F(context.Context, *connect_go.Request[auth.RemoveMyAuthFactorU2FRequest]) (*connect_go.Response[auth.RemoveMyAuthFactorU2FResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyAuthFactorU2F is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyPasswordless(context.Context, *connect_go.Request[auth.ListMyPasswordlessRequest]) (*connect_go.Response[auth.ListMyPasswordlessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyPasswordless is not implemented"))
}

func (UnimplementedAuthServiceHandler) AddMyPasswordless(context.Context, *connect_go.Request[auth.AddMyPasswordlessRequest]) (*connect_go.Response[auth.AddMyPasswordlessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.AddMyPasswordless is not implemented"))
}

func (UnimplementedAuthServiceHandler) AddMyPasswordlessLink(context.Context, *connect_go.Request[auth.AddMyPasswordlessLinkRequest]) (*connect_go.Response[auth.AddMyPasswordlessLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.AddMyPasswordlessLink is not implemented"))
}

func (UnimplementedAuthServiceHandler) SendMyPasswordlessLink(context.Context, *connect_go.Request[auth.SendMyPasswordlessLinkRequest]) (*connect_go.Response[auth.SendMyPasswordlessLinkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.SendMyPasswordlessLink is not implemented"))
}

func (UnimplementedAuthServiceHandler) VerifyMyPasswordless(context.Context, *connect_go.Request[auth.VerifyMyPasswordlessRequest]) (*connect_go.Response[auth.VerifyMyPasswordlessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.VerifyMyPasswordless is not implemented"))
}

func (UnimplementedAuthServiceHandler) RemoveMyPasswordless(context.Context, *connect_go.Request[auth.RemoveMyPasswordlessRequest]) (*connect_go.Response[auth.RemoveMyPasswordlessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.RemoveMyPasswordless is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyUserGrants(context.Context, *connect_go.Request[auth.ListMyUserGrantsRequest]) (*connect_go.Response[auth.ListMyUserGrantsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyUserGrants is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyProjectOrgs(context.Context, *connect_go.Request[auth.ListMyProjectOrgsRequest]) (*connect_go.Response[auth.ListMyProjectOrgsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyProjectOrgs is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyZitadelPermissions(context.Context, *connect_go.Request[auth.ListMyZitadelPermissionsRequest]) (*connect_go.Response[auth.ListMyZitadelPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyZitadelPermissions is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyProjectPermissions(context.Context, *connect_go.Request[auth.ListMyProjectPermissionsRequest]) (*connect_go.Response[auth.ListMyProjectPermissionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyProjectPermissions is not implemented"))
}

func (UnimplementedAuthServiceHandler) ListMyMemberships(context.Context, *connect_go.Request[auth.ListMyMembershipsRequest]) (*connect_go.Response[auth.ListMyMembershipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.ListMyMemberships is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyLabelPolicy(context.Context, *connect_go.Request[auth.GetMyLabelPolicyRequest]) (*connect_go.Response[auth.GetMyLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyLabelPolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyPrivacyPolicy(context.Context, *connect_go.Request[auth.GetMyPrivacyPolicyRequest]) (*connect_go.Response[auth.GetMyPrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyPrivacyPolicy is not implemented"))
}

func (UnimplementedAuthServiceHandler) GetMyLoginPolicy(context.Context, *connect_go.Request[auth.GetMyLoginPolicyRequest]) (*connect_go.Response[auth.GetMyLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.auth.v1.AuthService.GetMyLoginPolicy is not implemented"))
}
