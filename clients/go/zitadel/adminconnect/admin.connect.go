// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/admin.proto

package adminconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	admin "github.com/zitadel/zitadel/pkg/grpc/admin"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "zitadel.admin.v1.AdminService"
)

// AdminServiceClient is a client for the zitadel.admin.v1.AdminService service.
type AdminServiceClient interface {
	// Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(context.Context, *connect_go.Request[admin.HealthzRequest]) (*connect_go.Response[admin.HealthzResponse], error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *connect_go.Request[admin.GetSupportedLanguagesRequest]) (*connect_go.Response[admin.GetSupportedLanguagesResponse], error)
	// Set the default language
	SetDefaultLanguage(context.Context, *connect_go.Request[admin.SetDefaultLanguageRequest]) (*connect_go.Response[admin.SetDefaultLanguageResponse], error)
	// Set the default language
	GetDefaultLanguage(context.Context, *connect_go.Request[admin.GetDefaultLanguageRequest]) (*connect_go.Response[admin.GetDefaultLanguageResponse], error)
	// Returns the details of the instance
	GetMyInstance(context.Context, *connect_go.Request[admin.GetMyInstanceRequest]) (*connect_go.Response[admin.GetMyInstanceResponse], error)
	// Returns the domains of the instance
	ListInstanceDomains(context.Context, *connect_go.Request[admin.ListInstanceDomainsRequest]) (*connect_go.Response[admin.ListInstanceDomainsResponse], error)
	// Set the default language
	ListSecretGenerators(context.Context, *connect_go.Request[admin.ListSecretGeneratorsRequest]) (*connect_go.Response[admin.ListSecretGeneratorsResponse], error)
	// Get Secret Generator by type (e.g PasswordResetCode)
	GetSecretGenerator(context.Context, *connect_go.Request[admin.GetSecretGeneratorRequest]) (*connect_go.Response[admin.GetSecretGeneratorResponse], error)
	// Update secret generator configuration
	UpdateSecretGenerator(context.Context, *connect_go.Request[admin.UpdateSecretGeneratorRequest]) (*connect_go.Response[admin.UpdateSecretGeneratorResponse], error)
	// Get system smtp configuration
	GetSMTPConfig(context.Context, *connect_go.Request[admin.GetSMTPConfigRequest]) (*connect_go.Response[admin.GetSMTPConfigResponse], error)
	// Add system smtp configuration
	AddSMTPConfig(context.Context, *connect_go.Request[admin.AddSMTPConfigRequest]) (*connect_go.Response[admin.AddSMTPConfigResponse], error)
	// Update system smtp configuration
	UpdateSMTPConfig(context.Context, *connect_go.Request[admin.UpdateSMTPConfigRequest]) (*connect_go.Response[admin.UpdateSMTPConfigResponse], error)
	// Update system smtp configuration password for host
	UpdateSMTPConfigPassword(context.Context, *connect_go.Request[admin.UpdateSMTPConfigPasswordRequest]) (*connect_go.Response[admin.UpdateSMTPConfigPasswordResponse], error)
	// Remove system smtp configuration
	RemoveSMTPConfig(context.Context, *connect_go.Request[admin.RemoveSMTPConfigRequest]) (*connect_go.Response[admin.RemoveSMTPConfigResponse], error)
	// list sms provider configurations
	ListSMSProviders(context.Context, *connect_go.Request[admin.ListSMSProvidersRequest]) (*connect_go.Response[admin.ListSMSProvidersResponse], error)
	// Get sms provider
	GetSMSProvider(context.Context, *connect_go.Request[admin.GetSMSProviderRequest]) (*connect_go.Response[admin.GetSMSProviderResponse], error)
	// Add twilio sms provider
	AddSMSProviderTwilio(context.Context, *connect_go.Request[admin.AddSMSProviderTwilioRequest]) (*connect_go.Response[admin.AddSMSProviderTwilioResponse], error)
	// Update twilio sms provider
	UpdateSMSProviderTwilio(context.Context, *connect_go.Request[admin.UpdateSMSProviderTwilioRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioResponse], error)
	// Update twilio sms provider token
	UpdateSMSProviderTwilioToken(context.Context, *connect_go.Request[admin.UpdateSMSProviderTwilioTokenRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioTokenResponse], error)
	// Activate sms provider
	ActivateSMSProvider(context.Context, *connect_go.Request[admin.ActivateSMSProviderRequest]) (*connect_go.Response[admin.ActivateSMSProviderResponse], error)
	// Deactivate sms provider
	DeactivateSMSProvider(context.Context, *connect_go.Request[admin.DeactivateSMSProviderRequest]) (*connect_go.Response[admin.DeactivateSMSProviderResponse], error)
	// Remove sms provider token
	RemoveSMSProvider(context.Context, *connect_go.Request[admin.RemoveSMSProviderRequest]) (*connect_go.Response[admin.RemoveSMSProviderResponse], error)
	// Get OIDC settings (e.g token lifetimes, etc.)
	GetOIDCSettings(context.Context, *connect_go.Request[admin.GetOIDCSettingsRequest]) (*connect_go.Response[admin.GetOIDCSettingsResponse], error)
	// Add oidc settings (e.g token lifetimes, etc)
	AddOIDCSettings(context.Context, *connect_go.Request[admin.AddOIDCSettingsRequest]) (*connect_go.Response[admin.AddOIDCSettingsResponse], error)
	// Update oidc settings (e.g token lifetimes, etc)
	UpdateOIDCSettings(context.Context, *connect_go.Request[admin.UpdateOIDCSettingsRequest]) (*connect_go.Response[admin.UpdateOIDCSettingsResponse], error)
	// Get file system notification provider
	GetFileSystemNotificationProvider(context.Context, *connect_go.Request[admin.GetFileSystemNotificationProviderRequest]) (*connect_go.Response[admin.GetFileSystemNotificationProviderResponse], error)
	// Get log notification provider
	GetLogNotificationProvider(context.Context, *connect_go.Request[admin.GetLogNotificationProviderRequest]) (*connect_go.Response[admin.GetLogNotificationProviderResponse], error)
	// Get the security policy
	GetSecurityPolicy(context.Context, *connect_go.Request[admin.GetSecurityPolicyRequest]) (*connect_go.Response[admin.GetSecurityPolicyResponse], error)
	// set the security policy
	SetSecurityPolicy(context.Context, *connect_go.Request[admin.SetSecurityPolicyRequest]) (*connect_go.Response[admin.SetSecurityPolicyResponse], error)
	// Returns an organisation by id
	GetOrgByID(context.Context, *connect_go.Request[admin.GetOrgByIDRequest]) (*connect_go.Response[admin.GetOrgByIDResponse], error)
	// Checks whether an organisation exists by the given parameters
	IsOrgUnique(context.Context, *connect_go.Request[admin.IsOrgUniqueRequest]) (*connect_go.Response[admin.IsOrgUniqueResponse], error)
	// Set the default org
	SetDefaultOrg(context.Context, *connect_go.Request[admin.SetDefaultOrgRequest]) (*connect_go.Response[admin.SetDefaultOrgResponse], error)
	// Set the default org
	GetDefaultOrg(context.Context, *connect_go.Request[admin.GetDefaultOrgRequest]) (*connect_go.Response[admin.GetDefaultOrgResponse], error)
	// Returns all organisations matching the request
	// all queries need to match (AND)
	ListOrgs(context.Context, *connect_go.Request[admin.ListOrgsRequest]) (*connect_go.Response[admin.ListOrgsResponse], error)
	// Creates a new org and user
	// and adds the user to the orgs members as ORG_OWNER
	SetUpOrg(context.Context, *connect_go.Request[admin.SetUpOrgRequest]) (*connect_go.Response[admin.SetUpOrgResponse], error)
	// Sets the state of the organisation and all its resource (Users, Projects, Grants to and from the org) to removed
	// Users of this organisation will not be able login
	RemoveOrg(context.Context, *connect_go.Request[admin.RemoveOrgRequest]) (*connect_go.Response[admin.RemoveOrgResponse], error)
	// Returns a identity provider configuration of the IAM instance
	GetIDPByID(context.Context, *connect_go.Request[admin.GetIDPByIDRequest]) (*connect_go.Response[admin.GetIDPByIDResponse], error)
	// Returns all identity provider configurations of the IAM instance
	ListIDPs(context.Context, *connect_go.Request[admin.ListIDPsRequest]) (*connect_go.Response[admin.ListIDPsResponse], error)
	// Adds a new oidc identity provider configuration the IAM instance
	AddOIDCIDP(context.Context, *connect_go.Request[admin.AddOIDCIDPRequest]) (*connect_go.Response[admin.AddOIDCIDPResponse], error)
	// Adds a new jwt identity provider configuration the IAM instance
	AddJWTIDP(context.Context, *connect_go.Request[admin.AddJWTIDPRequest]) (*connect_go.Response[admin.AddJWTIDPResponse], error)
	// Updates the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDP(context.Context, *connect_go.Request[admin.UpdateIDPRequest]) (*connect_go.Response[admin.UpdateIDPResponse], error)
	// Sets the state of the idp to IDP_STATE_INACTIVE
	// the state MUST be IDP_STATE_ACTIVE for this call
	DeactivateIDP(context.Context, *connect_go.Request[admin.DeactivateIDPRequest]) (*connect_go.Response[admin.DeactivateIDPResponse], error)
	// Sets the state of the idp to IDP_STATE_ACTIVE
	// the state MUST be IDP_STATE_INACTIVE for this call
	ReactivateIDP(context.Context, *connect_go.Request[admin.ReactivateIDPRequest]) (*connect_go.Response[admin.ReactivateIDPResponse], error)
	// RemoveIDP deletes the IDP permanetly
	RemoveIDP(context.Context, *connect_go.Request[admin.RemoveIDPRequest]) (*connect_go.Response[admin.RemoveIDPResponse], error)
	// Updates the oidc configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPOIDCConfig(context.Context, *connect_go.Request[admin.UpdateIDPOIDCConfigRequest]) (*connect_go.Response[admin.UpdateIDPOIDCConfigResponse], error)
	// Updates the jwt configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPJWTConfig(context.Context, *connect_go.Request[admin.UpdateIDPJWTConfigRequest]) (*connect_go.Response[admin.UpdateIDPJWTConfigResponse], error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(context.Context, *connect_go.Request[admin.ListProvidersRequest]) (*connect_go.Response[admin.ListProvidersResponse], error)
	// Returns an identity provider of the instance
	GetProviderByID(context.Context, *connect_go.Request[admin.GetProviderByIDRequest]) (*connect_go.Response[admin.GetProviderByIDResponse], error)
	// Add a new ldap identity provider on the instance
	AddLDAPProvider(context.Context, *connect_go.Request[admin.AddLDAPProviderRequest]) (*connect_go.Response[admin.AddLDAPProviderResponse], error)
	// Change an existing ldap identity provider on the instance
	UpdateLDAPProvider(context.Context, *connect_go.Request[admin.UpdateLDAPProviderRequest]) (*connect_go.Response[admin.UpdateLDAPProviderResponse], error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(context.Context, *connect_go.Request[admin.DeleteProviderRequest]) (*connect_go.Response[admin.DeleteProviderResponse], error)
	// deprecated: please use DomainPolicy instead
	// Returns the Org IAM policy defined by the administrators of ZITADEL
	GetOrgIAMPolicy(context.Context, *connect_go.Request[admin.GetOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Updates the default OrgIAM policy.
	// it impacts all organisations without a customised policy
	UpdateOrgIAMPolicy(context.Context, *connect_go.Request[admin.UpdateOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Returns the customised policy or the default if not customised
	GetCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.GetCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetCustomOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Defines a custom OrgIAM policy as specified
	AddCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.AddCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.AddCustomOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Updates a custom OrgIAM policy as specified
	UpdateCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.UpdateCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateCustomOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomOrgIAMPolicyToDefault(context.Context, *connect_go.Request[admin.ResetCustomOrgIAMPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomOrgIAMPolicyToDefaultResponse], error)
	// Returns the Domain policy defined by the administrators of ZITADEL
	GetDomainPolicy(context.Context, *connect_go.Request[admin.GetDomainPolicyRequest]) (*connect_go.Response[admin.GetDomainPolicyResponse], error)
	// Updates the default Domain policy.
	// it impacts all organisations without a customised policy
	UpdateDomainPolicy(context.Context, *connect_go.Request[admin.UpdateDomainPolicyRequest]) (*connect_go.Response[admin.UpdateDomainPolicyResponse], error)
	// Returns the customised policy or the default if not customised
	GetCustomDomainPolicy(context.Context, *connect_go.Request[admin.GetCustomDomainPolicyRequest]) (*connect_go.Response[admin.GetCustomDomainPolicyResponse], error)
	// Defines a custom Domain policy as specified
	AddCustomDomainPolicy(context.Context, *connect_go.Request[admin.AddCustomDomainPolicyRequest]) (*connect_go.Response[admin.AddCustomDomainPolicyResponse], error)
	// Updates a custom Domain policy as specified
	UpdateCustomDomainPolicy(context.Context, *connect_go.Request[admin.UpdateCustomDomainPolicyRequest]) (*connect_go.Response[admin.UpdateCustomDomainPolicyResponse], error)
	// Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomDomainPolicyToDefault(context.Context, *connect_go.Request[admin.ResetCustomDomainPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainPolicyToDefaultResponse], error)
	// Returns the label policy defined by the administrators of ZITADEL
	GetLabelPolicy(context.Context, *connect_go.Request[admin.GetLabelPolicyRequest]) (*connect_go.Response[admin.GetLabelPolicyResponse], error)
	// Returns the preview label policy defined by the administrators of ZITADEL
	GetPreviewLabelPolicy(context.Context, *connect_go.Request[admin.GetPreviewLabelPolicyRequest]) (*connect_go.Response[admin.GetPreviewLabelPolicyResponse], error)
	// Updates the default label policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLabelPolicy(context.Context, *connect_go.Request[admin.UpdateLabelPolicyRequest]) (*connect_go.Response[admin.UpdateLabelPolicyResponse], error)
	// Activates all changes of the label policy
	ActivateLabelPolicy(context.Context, *connect_go.Request[admin.ActivateLabelPolicyRequest]) (*connect_go.Response[admin.ActivateLabelPolicyResponse], error)
	// Removes the logo of the label policy
	RemoveLabelPolicyLogo(context.Context, *connect_go.Request[admin.RemoveLabelPolicyLogoRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoResponse], error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyLogoDark(context.Context, *connect_go.Request[admin.RemoveLabelPolicyLogoDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoDarkResponse], error)
	// Removes the icon of the label policy
	RemoveLabelPolicyIcon(context.Context, *connect_go.Request[admin.RemoveLabelPolicyIconRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconResponse], error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyIconDark(context.Context, *connect_go.Request[admin.RemoveLabelPolicyIconDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconDarkResponse], error)
	// Removes the font of the label policy
	RemoveLabelPolicyFont(context.Context, *connect_go.Request[admin.RemoveLabelPolicyFontRequest]) (*connect_go.Response[admin.RemoveLabelPolicyFontResponse], error)
	// Returns the login policy defined by the administrators of ZITADEL
	GetLoginPolicy(context.Context, *connect_go.Request[admin.GetLoginPolicyRequest]) (*connect_go.Response[admin.GetLoginPolicyResponse], error)
	// Updates the default login policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLoginPolicy(context.Context, *connect_go.Request[admin.UpdateLoginPolicyRequest]) (*connect_go.Response[admin.UpdateLoginPolicyResponse], error)
	// Returns the idps linked to the default login policy,
	// defined by the administrators of ZITADEL
	ListLoginPolicyIDPs(context.Context, *connect_go.Request[admin.ListLoginPolicyIDPsRequest]) (*connect_go.Response[admin.ListLoginPolicyIDPsResponse], error)
	// Adds the povided idp to the default login policy.
	// It impacts all organisations without a customised policy
	AddIDPToLoginPolicy(context.Context, *connect_go.Request[admin.AddIDPToLoginPolicyRequest]) (*connect_go.Response[admin.AddIDPToLoginPolicyResponse], error)
	// Removes the povided idp from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveIDPFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveIDPFromLoginPolicyResponse], error)
	// Returns the available second factors defined by the administrators of ZITADEL
	ListLoginPolicySecondFactors(context.Context, *connect_go.Request[admin.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicySecondFactorsResponse], error)
	// Adds a second factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddSecondFactorToLoginPolicy(context.Context, *connect_go.Request[admin.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddSecondFactorToLoginPolicyResponse], error)
	// Removes a second factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveSecondFactorFromLoginPolicyResponse], error)
	// Returns the available multi factors defined by the administrators of ZITADEL
	ListLoginPolicyMultiFactors(context.Context, *connect_go.Request[admin.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicyMultiFactorsResponse], error)
	// Adds a multi factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddMultiFactorToLoginPolicy(context.Context, *connect_go.Request[admin.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddMultiFactorToLoginPolicyResponse], error)
	// Removes a multi factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveMultiFactorFromLoginPolicyResponse], error)
	// Returns the password complexity policy defined by the administrators of ZITADEL
	GetPasswordComplexityPolicy(context.Context, *connect_go.Request[admin.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[admin.GetPasswordComplexityPolicyResponse], error)
	// Updates the default password complexity policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordComplexityPolicy(context.Context, *connect_go.Request[admin.UpdatePasswordComplexityPolicyRequest]) (*connect_go.Response[admin.UpdatePasswordComplexityPolicyResponse], error)
	// Returns the password age policy defined by the administrators of ZITADEL
	GetPasswordAgePolicy(context.Context, *connect_go.Request[admin.GetPasswordAgePolicyRequest]) (*connect_go.Response[admin.GetPasswordAgePolicyResponse], error)
	// Updates the default password age policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordAgePolicy(context.Context, *connect_go.Request[admin.UpdatePasswordAgePolicyRequest]) (*connect_go.Response[admin.UpdatePasswordAgePolicyResponse], error)
	// Returns the lockout policy defined by the administrators of ZITADEL
	GetLockoutPolicy(context.Context, *connect_go.Request[admin.GetLockoutPolicyRequest]) (*connect_go.Response[admin.GetLockoutPolicyResponse], error)
	// Updates the default lockout policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLockoutPolicy(context.Context, *connect_go.Request[admin.UpdateLockoutPolicyRequest]) (*connect_go.Response[admin.UpdateLockoutPolicyResponse], error)
	// Returns the privacy policy defined by the administrators of ZITADEL
	GetPrivacyPolicy(context.Context, *connect_go.Request[admin.GetPrivacyPolicyRequest]) (*connect_go.Response[admin.GetPrivacyPolicyResponse], error)
	// Updates the default privacy policy of ZITADEL
	// it impacts all organisations without a customised policy
	// Variable {{.Lang}} can be set to have different links based on the language
	UpdatePrivacyPolicy(context.Context, *connect_go.Request[admin.UpdatePrivacyPolicyRequest]) (*connect_go.Response[admin.UpdatePrivacyPolicyResponse], error)
	// Add a default notification policy for ZITADEL
	// it impacts all organisations without a customised policy
	AddNotificationPolicy(context.Context, *connect_go.Request[admin.AddNotificationPolicyRequest]) (*connect_go.Response[admin.AddNotificationPolicyResponse], error)
	// Returns the notification policy defined by the administrators of ZITADEL
	GetNotificationPolicy(context.Context, *connect_go.Request[admin.GetNotificationPolicyRequest]) (*connect_go.Response[admin.GetNotificationPolicyResponse], error)
	// Updates the default notification policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateNotificationPolicy(context.Context, *connect_go.Request[admin.UpdateNotificationPolicyRequest]) (*connect_go.Response[admin.UpdateNotificationPolicyResponse], error)
	// Returns the default text for initial message (translation file)
	GetDefaultInitMessageText(context.Context, *connect_go.Request[admin.GetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.GetDefaultInitMessageTextResponse], error)
	// Returns the custom text for initial message (overwritten in eventstore)
	GetCustomInitMessageText(context.Context, *connect_go.Request[admin.GetCustomInitMessageTextRequest]) (*connect_go.Response[admin.GetCustomInitMessageTextResponse], error)
	// Sets the default custom text for initial message
	// it impacts all organisations without customized initial message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultInitMessageText(context.Context, *connect_go.Request[admin.SetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.SetDefaultInitMessageTextResponse], error)
	// Removes the custom init message text of the system
	// The default text from the translation file will trigger after
	ResetCustomInitMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomInitMessageTextToDefaultResponse], error)
	// Returns the default text for password reset message (translation file)
	GetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordResetMessageTextResponse], error)
	// Returns the custom text for password reset message (overwritten in eventstore)
	GetCustomPasswordResetMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordResetMessageTextResponse], error)
	// Sets the default custom text for password reset message
	// it impacts all organisations without customized password reset message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordResetMessageTextResponse], error)
	// Removes the custom password reset message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordResetMessageTextToDefaultResponse], error)
	// Returns the default text for verify email message (translation files)
	GetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[admin.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyEmailMessageTextResponse], error)
	// Returns the custom text for verify email message (overwritten in eventstore)
	GetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[admin.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyEmailMessageTextResponse], error)
	// Sets the default custom text for verify email message
	// it impacts all organisations without customized verify email message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[admin.SetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyEmailMessageTextResponse], error)
	// Removes the custom verify email message text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyEmailMessageTextToDefaultResponse], error)
	// Returns the default text for verify phone message (translation file)
	GetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyPhoneMessageTextResponse], error)
	// Returns the custom text for verify phone message
	GetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyPhoneMessageTextResponse], error)
	// Sets the default custom text for verify phone message
	// it impacts all organisations without customized verify phone message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.SetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyPhoneMessageTextResponse], error)
	// Removes the custom verify phone text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error)
	// Returns the default text for domain claimed message (translation file)
	GetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[admin.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetDefaultDomainClaimedMessageTextResponse], error)
	// Returns the custom text for domain claimed message (overwritten in eventstore)
	GetCustomDomainClaimedMessageText(context.Context, *connect_go.Request[admin.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetCustomDomainClaimedMessageTextResponse], error)
	// Sets the default custom text for domain claimed message
	// it impacts all organisations without customized domain claimed message text
	// The Following Variables can be used:
	// {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[admin.SetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.SetDefaultDomainClaimedMessageTextResponse], error)
	// Removes the custom domain claimed message text of the system
	// The default text from the translation file will trigger after
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainClaimedMessageTextToDefaultResponse], error)
	// Returns the default text for passwordless registration message (translation file)
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordlessRegistrationMessageTextResponse], error)
	// Returns the custom text for passwordless registration message (overwritten in eventstore)
	GetCustomPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordlessRegistrationMessageTextResponse], error)
	// Sets the default custom text for passwordless registration message
	// it impacts all organisations without customized passwordless registration message text
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordlessRegistrationMessageTextResponse], error)
	// Removes the custom passwordless link message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error)
	// Returns the default text for password change message (translation file)
	GetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordChangeMessageTextResponse], error)
	// Returns the custom text for password change message (overwritten in eventstore)
	GetCustomPasswordChangeMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordChangeMessageTextResponse], error)
	// Sets the default custom text for password change message
	// it impacts all organisations without customized password change message text
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordChangeMessageTextResponse], error)
	// Removes the custom password change message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordChangeMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordChangeMessageTextToDefaultResponse], error)
	// Returns the default custom texts for login ui (translation file)
	GetDefaultLoginTexts(context.Context, *connect_go.Request[admin.GetDefaultLoginTextsRequest]) (*connect_go.Response[admin.GetDefaultLoginTextsResponse], error)
	// Returns the custom texts for login ui
	GetCustomLoginTexts(context.Context, *connect_go.Request[admin.GetCustomLoginTextsRequest]) (*connect_go.Response[admin.GetCustomLoginTextsResponse], error)
	// Sets the custom text for login ui
	// it impacts all organisations without customized login ui texts
	SetCustomLoginText(context.Context, *connect_go.Request[admin.SetCustomLoginTextsRequest]) (*connect_go.Response[admin.SetCustomLoginTextsResponse], error)
	// Removes the custom texts for login ui
	// it impacts all organisations without customized login ui texts
	// The default text form translation file will trigger after
	ResetCustomLoginTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[admin.ResetCustomLoginTextsToDefaultResponse], error)
	// Returns the IAM roles visible for the requested user
	ListIAMMemberRoles(context.Context, *connect_go.Request[admin.ListIAMMemberRolesRequest]) (*connect_go.Response[admin.ListIAMMemberRolesResponse], error)
	// Returns all members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(context.Context, *connect_go.Request[admin.ListIAMMembersRequest]) (*connect_go.Response[admin.ListIAMMembersResponse], error)
	// Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(context.Context, *connect_go.Request[admin.AddIAMMemberRequest]) (*connect_go.Response[admin.AddIAMMemberResponse], error)
	// Sets the given roles on a member.
	// The member has only roles provided by this call
	UpdateIAMMember(context.Context, *connect_go.Request[admin.UpdateIAMMemberRequest]) (*connect_go.Response[admin.UpdateIAMMemberResponse], error)
	// Removes the user from the membership list of ZITADEL
	RemoveIAMMember(context.Context, *connect_go.Request[admin.RemoveIAMMemberRequest]) (*connect_go.Response[admin.RemoveIAMMemberResponse], error)
	// Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(context.Context, *connect_go.Request[admin.ListViewsRequest]) (*connect_go.Response[admin.ListViewsResponse], error)
	// Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(context.Context, *connect_go.Request[admin.ListFailedEventsRequest]) (*connect_go.Response[admin.ListFailedEventsResponse], error)
	// Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(context.Context, *connect_go.Request[admin.RemoveFailedEventRequest]) (*connect_go.Response[admin.RemoveFailedEventResponse], error)
	// Imports data into instance and creates different objects
	ImportData(context.Context, *connect_go.Request[admin.ImportDataRequest]) (*connect_go.Response[admin.ImportDataResponse], error)
	// Exports data from instance
	ExportData(context.Context, *connect_go.Request[admin.ExportDataRequest]) (*connect_go.Response[admin.ExportDataResponse], error)
	ListEventTypes(context.Context, *connect_go.Request[admin.ListEventTypesRequest]) (*connect_go.Response[admin.ListEventTypesResponse], error)
	ListEvents(context.Context, *connect_go.Request[admin.ListEventsRequest]) (*connect_go.Response[admin.ListEventsResponse], error)
	ListAggregateTypes(context.Context, *connect_go.Request[admin.ListAggregateTypesRequest]) (*connect_go.Response[admin.ListAggregateTypesResponse], error)
}

// NewAdminServiceClient constructs a client for the zitadel.admin.v1.AdminService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		healthz: connect_go.NewClient[admin.HealthzRequest, admin.HealthzResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/Healthz",
			opts...,
		),
		getSupportedLanguages: connect_go.NewClient[admin.GetSupportedLanguagesRequest, admin.GetSupportedLanguagesResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetSupportedLanguages",
			opts...,
		),
		setDefaultLanguage: connect_go.NewClient[admin.SetDefaultLanguageRequest, admin.SetDefaultLanguageResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultLanguage",
			opts...,
		),
		getDefaultLanguage: connect_go.NewClient[admin.GetDefaultLanguageRequest, admin.GetDefaultLanguageResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultLanguage",
			opts...,
		),
		getMyInstance: connect_go.NewClient[admin.GetMyInstanceRequest, admin.GetMyInstanceResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetMyInstance",
			opts...,
		),
		listInstanceDomains: connect_go.NewClient[admin.ListInstanceDomainsRequest, admin.ListInstanceDomainsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListInstanceDomains",
			opts...,
		),
		listSecretGenerators: connect_go.NewClient[admin.ListSecretGeneratorsRequest, admin.ListSecretGeneratorsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListSecretGenerators",
			opts...,
		),
		getSecretGenerator: connect_go.NewClient[admin.GetSecretGeneratorRequest, admin.GetSecretGeneratorResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetSecretGenerator",
			opts...,
		),
		updateSecretGenerator: connect_go.NewClient[admin.UpdateSecretGeneratorRequest, admin.UpdateSecretGeneratorResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateSecretGenerator",
			opts...,
		),
		getSMTPConfig: connect_go.NewClient[admin.GetSMTPConfigRequest, admin.GetSMTPConfigResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetSMTPConfig",
			opts...,
		),
		addSMTPConfig: connect_go.NewClient[admin.AddSMTPConfigRequest, admin.AddSMTPConfigResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddSMTPConfig",
			opts...,
		),
		updateSMTPConfig: connect_go.NewClient[admin.UpdateSMTPConfigRequest, admin.UpdateSMTPConfigResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateSMTPConfig",
			opts...,
		),
		updateSMTPConfigPassword: connect_go.NewClient[admin.UpdateSMTPConfigPasswordRequest, admin.UpdateSMTPConfigPasswordResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateSMTPConfigPassword",
			opts...,
		),
		removeSMTPConfig: connect_go.NewClient[admin.RemoveSMTPConfigRequest, admin.RemoveSMTPConfigResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveSMTPConfig",
			opts...,
		),
		listSMSProviders: connect_go.NewClient[admin.ListSMSProvidersRequest, admin.ListSMSProvidersResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListSMSProviders",
			opts...,
		),
		getSMSProvider: connect_go.NewClient[admin.GetSMSProviderRequest, admin.GetSMSProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetSMSProvider",
			opts...,
		),
		addSMSProviderTwilio: connect_go.NewClient[admin.AddSMSProviderTwilioRequest, admin.AddSMSProviderTwilioResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddSMSProviderTwilio",
			opts...,
		),
		updateSMSProviderTwilio: connect_go.NewClient[admin.UpdateSMSProviderTwilioRequest, admin.UpdateSMSProviderTwilioResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilio",
			opts...,
		),
		updateSMSProviderTwilioToken: connect_go.NewClient[admin.UpdateSMSProviderTwilioTokenRequest, admin.UpdateSMSProviderTwilioTokenResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilioToken",
			opts...,
		),
		activateSMSProvider: connect_go.NewClient[admin.ActivateSMSProviderRequest, admin.ActivateSMSProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ActivateSMSProvider",
			opts...,
		),
		deactivateSMSProvider: connect_go.NewClient[admin.DeactivateSMSProviderRequest, admin.DeactivateSMSProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/DeactivateSMSProvider",
			opts...,
		),
		removeSMSProvider: connect_go.NewClient[admin.RemoveSMSProviderRequest, admin.RemoveSMSProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveSMSProvider",
			opts...,
		),
		getOIDCSettings: connect_go.NewClient[admin.GetOIDCSettingsRequest, admin.GetOIDCSettingsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetOIDCSettings",
			opts...,
		),
		addOIDCSettings: connect_go.NewClient[admin.AddOIDCSettingsRequest, admin.AddOIDCSettingsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddOIDCSettings",
			opts...,
		),
		updateOIDCSettings: connect_go.NewClient[admin.UpdateOIDCSettingsRequest, admin.UpdateOIDCSettingsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateOIDCSettings",
			opts...,
		),
		getFileSystemNotificationProvider: connect_go.NewClient[admin.GetFileSystemNotificationProviderRequest, admin.GetFileSystemNotificationProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetFileSystemNotificationProvider",
			opts...,
		),
		getLogNotificationProvider: connect_go.NewClient[admin.GetLogNotificationProviderRequest, admin.GetLogNotificationProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetLogNotificationProvider",
			opts...,
		),
		getSecurityPolicy: connect_go.NewClient[admin.GetSecurityPolicyRequest, admin.GetSecurityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetSecurityPolicy",
			opts...,
		),
		setSecurityPolicy: connect_go.NewClient[admin.SetSecurityPolicyRequest, admin.SetSecurityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetSecurityPolicy",
			opts...,
		),
		getOrgByID: connect_go.NewClient[admin.GetOrgByIDRequest, admin.GetOrgByIDResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetOrgByID",
			opts...,
		),
		isOrgUnique: connect_go.NewClient[admin.IsOrgUniqueRequest, admin.IsOrgUniqueResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/IsOrgUnique",
			opts...,
		),
		setDefaultOrg: connect_go.NewClient[admin.SetDefaultOrgRequest, admin.SetDefaultOrgResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultOrg",
			opts...,
		),
		getDefaultOrg: connect_go.NewClient[admin.GetDefaultOrgRequest, admin.GetDefaultOrgResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultOrg",
			opts...,
		),
		listOrgs: connect_go.NewClient[admin.ListOrgsRequest, admin.ListOrgsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListOrgs",
			opts...,
		),
		setUpOrg: connect_go.NewClient[admin.SetUpOrgRequest, admin.SetUpOrgResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetUpOrg",
			opts...,
		),
		removeOrg: connect_go.NewClient[admin.RemoveOrgRequest, admin.RemoveOrgResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveOrg",
			opts...,
		),
		getIDPByID: connect_go.NewClient[admin.GetIDPByIDRequest, admin.GetIDPByIDResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetIDPByID",
			opts...,
		),
		listIDPs: connect_go.NewClient[admin.ListIDPsRequest, admin.ListIDPsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListIDPs",
			opts...,
		),
		addOIDCIDP: connect_go.NewClient[admin.AddOIDCIDPRequest, admin.AddOIDCIDPResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddOIDCIDP",
			opts...,
		),
		addJWTIDP: connect_go.NewClient[admin.AddJWTIDPRequest, admin.AddJWTIDPResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddJWTIDP",
			opts...,
		),
		updateIDP: connect_go.NewClient[admin.UpdateIDPRequest, admin.UpdateIDPResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateIDP",
			opts...,
		),
		deactivateIDP: connect_go.NewClient[admin.DeactivateIDPRequest, admin.DeactivateIDPResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/DeactivateIDP",
			opts...,
		),
		reactivateIDP: connect_go.NewClient[admin.ReactivateIDPRequest, admin.ReactivateIDPResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ReactivateIDP",
			opts...,
		),
		removeIDP: connect_go.NewClient[admin.RemoveIDPRequest, admin.RemoveIDPResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveIDP",
			opts...,
		),
		updateIDPOIDCConfig: connect_go.NewClient[admin.UpdateIDPOIDCConfigRequest, admin.UpdateIDPOIDCConfigResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig",
			opts...,
		),
		updateIDPJWTConfig: connect_go.NewClient[admin.UpdateIDPJWTConfigRequest, admin.UpdateIDPJWTConfigResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateIDPJWTConfig",
			opts...,
		),
		listProviders: connect_go.NewClient[admin.ListProvidersRequest, admin.ListProvidersResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListProviders",
			opts...,
		),
		getProviderByID: connect_go.NewClient[admin.GetProviderByIDRequest, admin.GetProviderByIDResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetProviderByID",
			opts...,
		),
		addLDAPProvider: connect_go.NewClient[admin.AddLDAPProviderRequest, admin.AddLDAPProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddLDAPProvider",
			opts...,
		),
		updateLDAPProvider: connect_go.NewClient[admin.UpdateLDAPProviderRequest, admin.UpdateLDAPProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateLDAPProvider",
			opts...,
		),
		deleteProvider: connect_go.NewClient[admin.DeleteProviderRequest, admin.DeleteProviderResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/DeleteProvider",
			opts...,
		),
		getOrgIAMPolicy: connect_go.NewClient[admin.GetOrgIAMPolicyRequest, admin.GetOrgIAMPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetOrgIAMPolicy",
			opts...,
		),
		updateOrgIAMPolicy: connect_go.NewClient[admin.UpdateOrgIAMPolicyRequest, admin.UpdateOrgIAMPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy",
			opts...,
		),
		getCustomOrgIAMPolicy: connect_go.NewClient[admin.GetCustomOrgIAMPolicyRequest, admin.GetCustomOrgIAMPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy",
			opts...,
		),
		addCustomOrgIAMPolicy: connect_go.NewClient[admin.AddCustomOrgIAMPolicyRequest, admin.AddCustomOrgIAMPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy",
			opts...,
		),
		updateCustomOrgIAMPolicy: connect_go.NewClient[admin.UpdateCustomOrgIAMPolicyRequest, admin.UpdateCustomOrgIAMPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy",
			opts...,
		),
		resetCustomOrgIAMPolicyToDefault: connect_go.NewClient[admin.ResetCustomOrgIAMPolicyToDefaultRequest, admin.ResetCustomOrgIAMPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault",
			opts...,
		),
		getDomainPolicy: connect_go.NewClient[admin.GetDomainPolicyRequest, admin.GetDomainPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDomainPolicy",
			opts...,
		),
		updateDomainPolicy: connect_go.NewClient[admin.UpdateDomainPolicyRequest, admin.UpdateDomainPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateDomainPolicy",
			opts...,
		),
		getCustomDomainPolicy: connect_go.NewClient[admin.GetCustomDomainPolicyRequest, admin.GetCustomDomainPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomDomainPolicy",
			opts...,
		),
		addCustomDomainPolicy: connect_go.NewClient[admin.AddCustomDomainPolicyRequest, admin.AddCustomDomainPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddCustomDomainPolicy",
			opts...,
		),
		updateCustomDomainPolicy: connect_go.NewClient[admin.UpdateCustomDomainPolicyRequest, admin.UpdateCustomDomainPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateCustomDomainPolicy",
			opts...,
		),
		resetCustomDomainPolicyToDefault: connect_go.NewClient[admin.ResetCustomDomainPolicyToDefaultRequest, admin.ResetCustomDomainPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomDomainPolicyToDefault",
			opts...,
		),
		getLabelPolicy: connect_go.NewClient[admin.GetLabelPolicyRequest, admin.GetLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetLabelPolicy",
			opts...,
		),
		getPreviewLabelPolicy: connect_go.NewClient[admin.GetPreviewLabelPolicyRequest, admin.GetPreviewLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetPreviewLabelPolicy",
			opts...,
		),
		updateLabelPolicy: connect_go.NewClient[admin.UpdateLabelPolicyRequest, admin.UpdateLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateLabelPolicy",
			opts...,
		),
		activateLabelPolicy: connect_go.NewClient[admin.ActivateLabelPolicyRequest, admin.ActivateLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ActivateLabelPolicy",
			opts...,
		),
		removeLabelPolicyLogo: connect_go.NewClient[admin.RemoveLabelPolicyLogoRequest, admin.RemoveLabelPolicyLogoResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogo",
			opts...,
		),
		removeLabelPolicyLogoDark: connect_go.NewClient[admin.RemoveLabelPolicyLogoDarkRequest, admin.RemoveLabelPolicyLogoDarkResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogoDark",
			opts...,
		),
		removeLabelPolicyIcon: connect_go.NewClient[admin.RemoveLabelPolicyIconRequest, admin.RemoveLabelPolicyIconResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveLabelPolicyIcon",
			opts...,
		),
		removeLabelPolicyIconDark: connect_go.NewClient[admin.RemoveLabelPolicyIconDarkRequest, admin.RemoveLabelPolicyIconDarkResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveLabelPolicyIconDark",
			opts...,
		),
		removeLabelPolicyFont: connect_go.NewClient[admin.RemoveLabelPolicyFontRequest, admin.RemoveLabelPolicyFontResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveLabelPolicyFont",
			opts...,
		),
		getLoginPolicy: connect_go.NewClient[admin.GetLoginPolicyRequest, admin.GetLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetLoginPolicy",
			opts...,
		),
		updateLoginPolicy: connect_go.NewClient[admin.UpdateLoginPolicyRequest, admin.UpdateLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateLoginPolicy",
			opts...,
		),
		listLoginPolicyIDPs: connect_go.NewClient[admin.ListLoginPolicyIDPsRequest, admin.ListLoginPolicyIDPsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs",
			opts...,
		),
		addIDPToLoginPolicy: connect_go.NewClient[admin.AddIDPToLoginPolicyRequest, admin.AddIDPToLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy",
			opts...,
		),
		removeIDPFromLoginPolicy: connect_go.NewClient[admin.RemoveIDPFromLoginPolicyRequest, admin.RemoveIDPFromLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy",
			opts...,
		),
		listLoginPolicySecondFactors: connect_go.NewClient[admin.ListLoginPolicySecondFactorsRequest, admin.ListLoginPolicySecondFactorsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors",
			opts...,
		),
		addSecondFactorToLoginPolicy: connect_go.NewClient[admin.AddSecondFactorToLoginPolicyRequest, admin.AddSecondFactorToLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy",
			opts...,
		),
		removeSecondFactorFromLoginPolicy: connect_go.NewClient[admin.RemoveSecondFactorFromLoginPolicyRequest, admin.RemoveSecondFactorFromLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy",
			opts...,
		),
		listLoginPolicyMultiFactors: connect_go.NewClient[admin.ListLoginPolicyMultiFactorsRequest, admin.ListLoginPolicyMultiFactorsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors",
			opts...,
		),
		addMultiFactorToLoginPolicy: connect_go.NewClient[admin.AddMultiFactorToLoginPolicyRequest, admin.AddMultiFactorToLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy",
			opts...,
		),
		removeMultiFactorFromLoginPolicy: connect_go.NewClient[admin.RemoveMultiFactorFromLoginPolicyRequest, admin.RemoveMultiFactorFromLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy",
			opts...,
		),
		getPasswordComplexityPolicy: connect_go.NewClient[admin.GetPasswordComplexityPolicyRequest, admin.GetPasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy",
			opts...,
		),
		updatePasswordComplexityPolicy: connect_go.NewClient[admin.UpdatePasswordComplexityPolicyRequest, admin.UpdatePasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy",
			opts...,
		),
		getPasswordAgePolicy: connect_go.NewClient[admin.GetPasswordAgePolicyRequest, admin.GetPasswordAgePolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetPasswordAgePolicy",
			opts...,
		),
		updatePasswordAgePolicy: connect_go.NewClient[admin.UpdatePasswordAgePolicyRequest, admin.UpdatePasswordAgePolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy",
			opts...,
		),
		getLockoutPolicy: connect_go.NewClient[admin.GetLockoutPolicyRequest, admin.GetLockoutPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetLockoutPolicy",
			opts...,
		),
		updateLockoutPolicy: connect_go.NewClient[admin.UpdateLockoutPolicyRequest, admin.UpdateLockoutPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateLockoutPolicy",
			opts...,
		),
		getPrivacyPolicy: connect_go.NewClient[admin.GetPrivacyPolicyRequest, admin.GetPrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetPrivacyPolicy",
			opts...,
		),
		updatePrivacyPolicy: connect_go.NewClient[admin.UpdatePrivacyPolicyRequest, admin.UpdatePrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdatePrivacyPolicy",
			opts...,
		),
		addNotificationPolicy: connect_go.NewClient[admin.AddNotificationPolicyRequest, admin.AddNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddNotificationPolicy",
			opts...,
		),
		getNotificationPolicy: connect_go.NewClient[admin.GetNotificationPolicyRequest, admin.GetNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetNotificationPolicy",
			opts...,
		),
		updateNotificationPolicy: connect_go.NewClient[admin.UpdateNotificationPolicyRequest, admin.UpdateNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateNotificationPolicy",
			opts...,
		),
		getDefaultInitMessageText: connect_go.NewClient[admin.GetDefaultInitMessageTextRequest, admin.GetDefaultInitMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultInitMessageText",
			opts...,
		),
		getCustomInitMessageText: connect_go.NewClient[admin.GetCustomInitMessageTextRequest, admin.GetCustomInitMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomInitMessageText",
			opts...,
		),
		setDefaultInitMessageText: connect_go.NewClient[admin.SetDefaultInitMessageTextRequest, admin.SetDefaultInitMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultInitMessageText",
			opts...,
		),
		resetCustomInitMessageTextToDefault: connect_go.NewClient[admin.ResetCustomInitMessageTextToDefaultRequest, admin.ResetCustomInitMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomInitMessageTextToDefault",
			opts...,
		),
		getDefaultPasswordResetMessageText: connect_go.NewClient[admin.GetDefaultPasswordResetMessageTextRequest, admin.GetDefaultPasswordResetMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultPasswordResetMessageText",
			opts...,
		),
		getCustomPasswordResetMessageText: connect_go.NewClient[admin.GetCustomPasswordResetMessageTextRequest, admin.GetCustomPasswordResetMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomPasswordResetMessageText",
			opts...,
		),
		setDefaultPasswordResetMessageText: connect_go.NewClient[admin.SetDefaultPasswordResetMessageTextRequest, admin.SetDefaultPasswordResetMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultPasswordResetMessageText",
			opts...,
		),
		resetCustomPasswordResetMessageTextToDefault: connect_go.NewClient[admin.ResetCustomPasswordResetMessageTextToDefaultRequest, admin.ResetCustomPasswordResetMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomPasswordResetMessageTextToDefault",
			opts...,
		),
		getDefaultVerifyEmailMessageText: connect_go.NewClient[admin.GetDefaultVerifyEmailMessageTextRequest, admin.GetDefaultVerifyEmailMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailMessageText",
			opts...,
		),
		getCustomVerifyEmailMessageText: connect_go.NewClient[admin.GetCustomVerifyEmailMessageTextRequest, admin.GetCustomVerifyEmailMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomVerifyEmailMessageText",
			opts...,
		),
		setDefaultVerifyEmailMessageText: connect_go.NewClient[admin.SetDefaultVerifyEmailMessageTextRequest, admin.SetDefaultVerifyEmailMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailMessageText",
			opts...,
		),
		resetCustomVerifyEmailMessageTextToDefault: connect_go.NewClient[admin.ResetCustomVerifyEmailMessageTextToDefaultRequest, admin.ResetCustomVerifyEmailMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailMessageTextToDefault",
			opts...,
		),
		getDefaultVerifyPhoneMessageText: connect_go.NewClient[admin.GetDefaultVerifyPhoneMessageTextRequest, admin.GetDefaultVerifyPhoneMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultVerifyPhoneMessageText",
			opts...,
		),
		getCustomVerifyPhoneMessageText: connect_go.NewClient[admin.GetCustomVerifyPhoneMessageTextRequest, admin.GetCustomVerifyPhoneMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomVerifyPhoneMessageText",
			opts...,
		),
		setDefaultVerifyPhoneMessageText: connect_go.NewClient[admin.SetDefaultVerifyPhoneMessageTextRequest, admin.SetDefaultVerifyPhoneMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultVerifyPhoneMessageText",
			opts...,
		),
		resetCustomVerifyPhoneMessageTextToDefault: connect_go.NewClient[admin.ResetCustomVerifyPhoneMessageTextToDefaultRequest, admin.ResetCustomVerifyPhoneMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomVerifyPhoneMessageTextToDefault",
			opts...,
		),
		getDefaultDomainClaimedMessageText: connect_go.NewClient[admin.GetDefaultDomainClaimedMessageTextRequest, admin.GetDefaultDomainClaimedMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultDomainClaimedMessageText",
			opts...,
		),
		getCustomDomainClaimedMessageText: connect_go.NewClient[admin.GetCustomDomainClaimedMessageTextRequest, admin.GetCustomDomainClaimedMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomDomainClaimedMessageText",
			opts...,
		),
		setDefaultDomainClaimedMessageText: connect_go.NewClient[admin.SetDefaultDomainClaimedMessageTextRequest, admin.SetDefaultDomainClaimedMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultDomainClaimedMessageText",
			opts...,
		),
		resetCustomDomainClaimedMessageTextToDefault: connect_go.NewClient[admin.ResetCustomDomainClaimedMessageTextToDefaultRequest, admin.ResetCustomDomainClaimedMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomDomainClaimedMessageTextToDefault",
			opts...,
		),
		getDefaultPasswordlessRegistrationMessageText: connect_go.NewClient[admin.GetDefaultPasswordlessRegistrationMessageTextRequest, admin.GetDefaultPasswordlessRegistrationMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultPasswordlessRegistrationMessageText",
			opts...,
		),
		getCustomPasswordlessRegistrationMessageText: connect_go.NewClient[admin.GetCustomPasswordlessRegistrationMessageTextRequest, admin.GetCustomPasswordlessRegistrationMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomPasswordlessRegistrationMessageText",
			opts...,
		),
		setDefaultPasswordlessRegistrationMessageText: connect_go.NewClient[admin.SetDefaultPasswordlessRegistrationMessageTextRequest, admin.SetDefaultPasswordlessRegistrationMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultPasswordlessRegistrationMessageText",
			opts...,
		),
		resetCustomPasswordlessRegistrationMessageTextToDefault: connect_go.NewClient[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomPasswordlessRegistrationMessageTextToDefault",
			opts...,
		),
		getDefaultPasswordChangeMessageText: connect_go.NewClient[admin.GetDefaultPasswordChangeMessageTextRequest, admin.GetDefaultPasswordChangeMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultPasswordChangeMessageText",
			opts...,
		),
		getCustomPasswordChangeMessageText: connect_go.NewClient[admin.GetCustomPasswordChangeMessageTextRequest, admin.GetCustomPasswordChangeMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomPasswordChangeMessageText",
			opts...,
		),
		setDefaultPasswordChangeMessageText: connect_go.NewClient[admin.SetDefaultPasswordChangeMessageTextRequest, admin.SetDefaultPasswordChangeMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetDefaultPasswordChangeMessageText",
			opts...,
		),
		resetCustomPasswordChangeMessageTextToDefault: connect_go.NewClient[admin.ResetCustomPasswordChangeMessageTextToDefaultRequest, admin.ResetCustomPasswordChangeMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomPasswordChangeMessageTextToDefault",
			opts...,
		),
		getDefaultLoginTexts: connect_go.NewClient[admin.GetDefaultLoginTextsRequest, admin.GetDefaultLoginTextsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetDefaultLoginTexts",
			opts...,
		),
		getCustomLoginTexts: connect_go.NewClient[admin.GetCustomLoginTextsRequest, admin.GetCustomLoginTextsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/GetCustomLoginTexts",
			opts...,
		),
		setCustomLoginText: connect_go.NewClient[admin.SetCustomLoginTextsRequest, admin.SetCustomLoginTextsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/SetCustomLoginText",
			opts...,
		),
		resetCustomLoginTextToDefault: connect_go.NewClient[admin.ResetCustomLoginTextsToDefaultRequest, admin.ResetCustomLoginTextsToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ResetCustomLoginTextToDefault",
			opts...,
		),
		listIAMMemberRoles: connect_go.NewClient[admin.ListIAMMemberRolesRequest, admin.ListIAMMemberRolesResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListIAMMemberRoles",
			opts...,
		),
		listIAMMembers: connect_go.NewClient[admin.ListIAMMembersRequest, admin.ListIAMMembersResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListIAMMembers",
			opts...,
		),
		addIAMMember: connect_go.NewClient[admin.AddIAMMemberRequest, admin.AddIAMMemberResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/AddIAMMember",
			opts...,
		),
		updateIAMMember: connect_go.NewClient[admin.UpdateIAMMemberRequest, admin.UpdateIAMMemberResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/UpdateIAMMember",
			opts...,
		),
		removeIAMMember: connect_go.NewClient[admin.RemoveIAMMemberRequest, admin.RemoveIAMMemberResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveIAMMember",
			opts...,
		),
		listViews: connect_go.NewClient[admin.ListViewsRequest, admin.ListViewsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListViews",
			opts...,
		),
		listFailedEvents: connect_go.NewClient[admin.ListFailedEventsRequest, admin.ListFailedEventsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListFailedEvents",
			opts...,
		),
		removeFailedEvent: connect_go.NewClient[admin.RemoveFailedEventRequest, admin.RemoveFailedEventResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/RemoveFailedEvent",
			opts...,
		),
		importData: connect_go.NewClient[admin.ImportDataRequest, admin.ImportDataResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ImportData",
			opts...,
		),
		exportData: connect_go.NewClient[admin.ExportDataRequest, admin.ExportDataResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ExportData",
			opts...,
		),
		listEventTypes: connect_go.NewClient[admin.ListEventTypesRequest, admin.ListEventTypesResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListEventTypes",
			opts...,
		),
		listEvents: connect_go.NewClient[admin.ListEventsRequest, admin.ListEventsResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListEvents",
			opts...,
		),
		listAggregateTypes: connect_go.NewClient[admin.ListAggregateTypesRequest, admin.ListAggregateTypesResponse](
			httpClient,
			baseURL+"/zitadel.admin.v1.AdminService/ListAggregateTypes",
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	healthz                                                 *connect_go.Client[admin.HealthzRequest, admin.HealthzResponse]
	getSupportedLanguages                                   *connect_go.Client[admin.GetSupportedLanguagesRequest, admin.GetSupportedLanguagesResponse]
	setDefaultLanguage                                      *connect_go.Client[admin.SetDefaultLanguageRequest, admin.SetDefaultLanguageResponse]
	getDefaultLanguage                                      *connect_go.Client[admin.GetDefaultLanguageRequest, admin.GetDefaultLanguageResponse]
	getMyInstance                                           *connect_go.Client[admin.GetMyInstanceRequest, admin.GetMyInstanceResponse]
	listInstanceDomains                                     *connect_go.Client[admin.ListInstanceDomainsRequest, admin.ListInstanceDomainsResponse]
	listSecretGenerators                                    *connect_go.Client[admin.ListSecretGeneratorsRequest, admin.ListSecretGeneratorsResponse]
	getSecretGenerator                                      *connect_go.Client[admin.GetSecretGeneratorRequest, admin.GetSecretGeneratorResponse]
	updateSecretGenerator                                   *connect_go.Client[admin.UpdateSecretGeneratorRequest, admin.UpdateSecretGeneratorResponse]
	getSMTPConfig                                           *connect_go.Client[admin.GetSMTPConfigRequest, admin.GetSMTPConfigResponse]
	addSMTPConfig                                           *connect_go.Client[admin.AddSMTPConfigRequest, admin.AddSMTPConfigResponse]
	updateSMTPConfig                                        *connect_go.Client[admin.UpdateSMTPConfigRequest, admin.UpdateSMTPConfigResponse]
	updateSMTPConfigPassword                                *connect_go.Client[admin.UpdateSMTPConfigPasswordRequest, admin.UpdateSMTPConfigPasswordResponse]
	removeSMTPConfig                                        *connect_go.Client[admin.RemoveSMTPConfigRequest, admin.RemoveSMTPConfigResponse]
	listSMSProviders                                        *connect_go.Client[admin.ListSMSProvidersRequest, admin.ListSMSProvidersResponse]
	getSMSProvider                                          *connect_go.Client[admin.GetSMSProviderRequest, admin.GetSMSProviderResponse]
	addSMSProviderTwilio                                    *connect_go.Client[admin.AddSMSProviderTwilioRequest, admin.AddSMSProviderTwilioResponse]
	updateSMSProviderTwilio                                 *connect_go.Client[admin.UpdateSMSProviderTwilioRequest, admin.UpdateSMSProviderTwilioResponse]
	updateSMSProviderTwilioToken                            *connect_go.Client[admin.UpdateSMSProviderTwilioTokenRequest, admin.UpdateSMSProviderTwilioTokenResponse]
	activateSMSProvider                                     *connect_go.Client[admin.ActivateSMSProviderRequest, admin.ActivateSMSProviderResponse]
	deactivateSMSProvider                                   *connect_go.Client[admin.DeactivateSMSProviderRequest, admin.DeactivateSMSProviderResponse]
	removeSMSProvider                                       *connect_go.Client[admin.RemoveSMSProviderRequest, admin.RemoveSMSProviderResponse]
	getOIDCSettings                                         *connect_go.Client[admin.GetOIDCSettingsRequest, admin.GetOIDCSettingsResponse]
	addOIDCSettings                                         *connect_go.Client[admin.AddOIDCSettingsRequest, admin.AddOIDCSettingsResponse]
	updateOIDCSettings                                      *connect_go.Client[admin.UpdateOIDCSettingsRequest, admin.UpdateOIDCSettingsResponse]
	getFileSystemNotificationProvider                       *connect_go.Client[admin.GetFileSystemNotificationProviderRequest, admin.GetFileSystemNotificationProviderResponse]
	getLogNotificationProvider                              *connect_go.Client[admin.GetLogNotificationProviderRequest, admin.GetLogNotificationProviderResponse]
	getSecurityPolicy                                       *connect_go.Client[admin.GetSecurityPolicyRequest, admin.GetSecurityPolicyResponse]
	setSecurityPolicy                                       *connect_go.Client[admin.SetSecurityPolicyRequest, admin.SetSecurityPolicyResponse]
	getOrgByID                                              *connect_go.Client[admin.GetOrgByIDRequest, admin.GetOrgByIDResponse]
	isOrgUnique                                             *connect_go.Client[admin.IsOrgUniqueRequest, admin.IsOrgUniqueResponse]
	setDefaultOrg                                           *connect_go.Client[admin.SetDefaultOrgRequest, admin.SetDefaultOrgResponse]
	getDefaultOrg                                           *connect_go.Client[admin.GetDefaultOrgRequest, admin.GetDefaultOrgResponse]
	listOrgs                                                *connect_go.Client[admin.ListOrgsRequest, admin.ListOrgsResponse]
	setUpOrg                                                *connect_go.Client[admin.SetUpOrgRequest, admin.SetUpOrgResponse]
	removeOrg                                               *connect_go.Client[admin.RemoveOrgRequest, admin.RemoveOrgResponse]
	getIDPByID                                              *connect_go.Client[admin.GetIDPByIDRequest, admin.GetIDPByIDResponse]
	listIDPs                                                *connect_go.Client[admin.ListIDPsRequest, admin.ListIDPsResponse]
	addOIDCIDP                                              *connect_go.Client[admin.AddOIDCIDPRequest, admin.AddOIDCIDPResponse]
	addJWTIDP                                               *connect_go.Client[admin.AddJWTIDPRequest, admin.AddJWTIDPResponse]
	updateIDP                                               *connect_go.Client[admin.UpdateIDPRequest, admin.UpdateIDPResponse]
	deactivateIDP                                           *connect_go.Client[admin.DeactivateIDPRequest, admin.DeactivateIDPResponse]
	reactivateIDP                                           *connect_go.Client[admin.ReactivateIDPRequest, admin.ReactivateIDPResponse]
	removeIDP                                               *connect_go.Client[admin.RemoveIDPRequest, admin.RemoveIDPResponse]
	updateIDPOIDCConfig                                     *connect_go.Client[admin.UpdateIDPOIDCConfigRequest, admin.UpdateIDPOIDCConfigResponse]
	updateIDPJWTConfig                                      *connect_go.Client[admin.UpdateIDPJWTConfigRequest, admin.UpdateIDPJWTConfigResponse]
	listProviders                                           *connect_go.Client[admin.ListProvidersRequest, admin.ListProvidersResponse]
	getProviderByID                                         *connect_go.Client[admin.GetProviderByIDRequest, admin.GetProviderByIDResponse]
	addLDAPProvider                                         *connect_go.Client[admin.AddLDAPProviderRequest, admin.AddLDAPProviderResponse]
	updateLDAPProvider                                      *connect_go.Client[admin.UpdateLDAPProviderRequest, admin.UpdateLDAPProviderResponse]
	deleteProvider                                          *connect_go.Client[admin.DeleteProviderRequest, admin.DeleteProviderResponse]
	getOrgIAMPolicy                                         *connect_go.Client[admin.GetOrgIAMPolicyRequest, admin.GetOrgIAMPolicyResponse]
	updateOrgIAMPolicy                                      *connect_go.Client[admin.UpdateOrgIAMPolicyRequest, admin.UpdateOrgIAMPolicyResponse]
	getCustomOrgIAMPolicy                                   *connect_go.Client[admin.GetCustomOrgIAMPolicyRequest, admin.GetCustomOrgIAMPolicyResponse]
	addCustomOrgIAMPolicy                                   *connect_go.Client[admin.AddCustomOrgIAMPolicyRequest, admin.AddCustomOrgIAMPolicyResponse]
	updateCustomOrgIAMPolicy                                *connect_go.Client[admin.UpdateCustomOrgIAMPolicyRequest, admin.UpdateCustomOrgIAMPolicyResponse]
	resetCustomOrgIAMPolicyToDefault                        *connect_go.Client[admin.ResetCustomOrgIAMPolicyToDefaultRequest, admin.ResetCustomOrgIAMPolicyToDefaultResponse]
	getDomainPolicy                                         *connect_go.Client[admin.GetDomainPolicyRequest, admin.GetDomainPolicyResponse]
	updateDomainPolicy                                      *connect_go.Client[admin.UpdateDomainPolicyRequest, admin.UpdateDomainPolicyResponse]
	getCustomDomainPolicy                                   *connect_go.Client[admin.GetCustomDomainPolicyRequest, admin.GetCustomDomainPolicyResponse]
	addCustomDomainPolicy                                   *connect_go.Client[admin.AddCustomDomainPolicyRequest, admin.AddCustomDomainPolicyResponse]
	updateCustomDomainPolicy                                *connect_go.Client[admin.UpdateCustomDomainPolicyRequest, admin.UpdateCustomDomainPolicyResponse]
	resetCustomDomainPolicyToDefault                        *connect_go.Client[admin.ResetCustomDomainPolicyToDefaultRequest, admin.ResetCustomDomainPolicyToDefaultResponse]
	getLabelPolicy                                          *connect_go.Client[admin.GetLabelPolicyRequest, admin.GetLabelPolicyResponse]
	getPreviewLabelPolicy                                   *connect_go.Client[admin.GetPreviewLabelPolicyRequest, admin.GetPreviewLabelPolicyResponse]
	updateLabelPolicy                                       *connect_go.Client[admin.UpdateLabelPolicyRequest, admin.UpdateLabelPolicyResponse]
	activateLabelPolicy                                     *connect_go.Client[admin.ActivateLabelPolicyRequest, admin.ActivateLabelPolicyResponse]
	removeLabelPolicyLogo                                   *connect_go.Client[admin.RemoveLabelPolicyLogoRequest, admin.RemoveLabelPolicyLogoResponse]
	removeLabelPolicyLogoDark                               *connect_go.Client[admin.RemoveLabelPolicyLogoDarkRequest, admin.RemoveLabelPolicyLogoDarkResponse]
	removeLabelPolicyIcon                                   *connect_go.Client[admin.RemoveLabelPolicyIconRequest, admin.RemoveLabelPolicyIconResponse]
	removeLabelPolicyIconDark                               *connect_go.Client[admin.RemoveLabelPolicyIconDarkRequest, admin.RemoveLabelPolicyIconDarkResponse]
	removeLabelPolicyFont                                   *connect_go.Client[admin.RemoveLabelPolicyFontRequest, admin.RemoveLabelPolicyFontResponse]
	getLoginPolicy                                          *connect_go.Client[admin.GetLoginPolicyRequest, admin.GetLoginPolicyResponse]
	updateLoginPolicy                                       *connect_go.Client[admin.UpdateLoginPolicyRequest, admin.UpdateLoginPolicyResponse]
	listLoginPolicyIDPs                                     *connect_go.Client[admin.ListLoginPolicyIDPsRequest, admin.ListLoginPolicyIDPsResponse]
	addIDPToLoginPolicy                                     *connect_go.Client[admin.AddIDPToLoginPolicyRequest, admin.AddIDPToLoginPolicyResponse]
	removeIDPFromLoginPolicy                                *connect_go.Client[admin.RemoveIDPFromLoginPolicyRequest, admin.RemoveIDPFromLoginPolicyResponse]
	listLoginPolicySecondFactors                            *connect_go.Client[admin.ListLoginPolicySecondFactorsRequest, admin.ListLoginPolicySecondFactorsResponse]
	addSecondFactorToLoginPolicy                            *connect_go.Client[admin.AddSecondFactorToLoginPolicyRequest, admin.AddSecondFactorToLoginPolicyResponse]
	removeSecondFactorFromLoginPolicy                       *connect_go.Client[admin.RemoveSecondFactorFromLoginPolicyRequest, admin.RemoveSecondFactorFromLoginPolicyResponse]
	listLoginPolicyMultiFactors                             *connect_go.Client[admin.ListLoginPolicyMultiFactorsRequest, admin.ListLoginPolicyMultiFactorsResponse]
	addMultiFactorToLoginPolicy                             *connect_go.Client[admin.AddMultiFactorToLoginPolicyRequest, admin.AddMultiFactorToLoginPolicyResponse]
	removeMultiFactorFromLoginPolicy                        *connect_go.Client[admin.RemoveMultiFactorFromLoginPolicyRequest, admin.RemoveMultiFactorFromLoginPolicyResponse]
	getPasswordComplexityPolicy                             *connect_go.Client[admin.GetPasswordComplexityPolicyRequest, admin.GetPasswordComplexityPolicyResponse]
	updatePasswordComplexityPolicy                          *connect_go.Client[admin.UpdatePasswordComplexityPolicyRequest, admin.UpdatePasswordComplexityPolicyResponse]
	getPasswordAgePolicy                                    *connect_go.Client[admin.GetPasswordAgePolicyRequest, admin.GetPasswordAgePolicyResponse]
	updatePasswordAgePolicy                                 *connect_go.Client[admin.UpdatePasswordAgePolicyRequest, admin.UpdatePasswordAgePolicyResponse]
	getLockoutPolicy                                        *connect_go.Client[admin.GetLockoutPolicyRequest, admin.GetLockoutPolicyResponse]
	updateLockoutPolicy                                     *connect_go.Client[admin.UpdateLockoutPolicyRequest, admin.UpdateLockoutPolicyResponse]
	getPrivacyPolicy                                        *connect_go.Client[admin.GetPrivacyPolicyRequest, admin.GetPrivacyPolicyResponse]
	updatePrivacyPolicy                                     *connect_go.Client[admin.UpdatePrivacyPolicyRequest, admin.UpdatePrivacyPolicyResponse]
	addNotificationPolicy                                   *connect_go.Client[admin.AddNotificationPolicyRequest, admin.AddNotificationPolicyResponse]
	getNotificationPolicy                                   *connect_go.Client[admin.GetNotificationPolicyRequest, admin.GetNotificationPolicyResponse]
	updateNotificationPolicy                                *connect_go.Client[admin.UpdateNotificationPolicyRequest, admin.UpdateNotificationPolicyResponse]
	getDefaultInitMessageText                               *connect_go.Client[admin.GetDefaultInitMessageTextRequest, admin.GetDefaultInitMessageTextResponse]
	getCustomInitMessageText                                *connect_go.Client[admin.GetCustomInitMessageTextRequest, admin.GetCustomInitMessageTextResponse]
	setDefaultInitMessageText                               *connect_go.Client[admin.SetDefaultInitMessageTextRequest, admin.SetDefaultInitMessageTextResponse]
	resetCustomInitMessageTextToDefault                     *connect_go.Client[admin.ResetCustomInitMessageTextToDefaultRequest, admin.ResetCustomInitMessageTextToDefaultResponse]
	getDefaultPasswordResetMessageText                      *connect_go.Client[admin.GetDefaultPasswordResetMessageTextRequest, admin.GetDefaultPasswordResetMessageTextResponse]
	getCustomPasswordResetMessageText                       *connect_go.Client[admin.GetCustomPasswordResetMessageTextRequest, admin.GetCustomPasswordResetMessageTextResponse]
	setDefaultPasswordResetMessageText                      *connect_go.Client[admin.SetDefaultPasswordResetMessageTextRequest, admin.SetDefaultPasswordResetMessageTextResponse]
	resetCustomPasswordResetMessageTextToDefault            *connect_go.Client[admin.ResetCustomPasswordResetMessageTextToDefaultRequest, admin.ResetCustomPasswordResetMessageTextToDefaultResponse]
	getDefaultVerifyEmailMessageText                        *connect_go.Client[admin.GetDefaultVerifyEmailMessageTextRequest, admin.GetDefaultVerifyEmailMessageTextResponse]
	getCustomVerifyEmailMessageText                         *connect_go.Client[admin.GetCustomVerifyEmailMessageTextRequest, admin.GetCustomVerifyEmailMessageTextResponse]
	setDefaultVerifyEmailMessageText                        *connect_go.Client[admin.SetDefaultVerifyEmailMessageTextRequest, admin.SetDefaultVerifyEmailMessageTextResponse]
	resetCustomVerifyEmailMessageTextToDefault              *connect_go.Client[admin.ResetCustomVerifyEmailMessageTextToDefaultRequest, admin.ResetCustomVerifyEmailMessageTextToDefaultResponse]
	getDefaultVerifyPhoneMessageText                        *connect_go.Client[admin.GetDefaultVerifyPhoneMessageTextRequest, admin.GetDefaultVerifyPhoneMessageTextResponse]
	getCustomVerifyPhoneMessageText                         *connect_go.Client[admin.GetCustomVerifyPhoneMessageTextRequest, admin.GetCustomVerifyPhoneMessageTextResponse]
	setDefaultVerifyPhoneMessageText                        *connect_go.Client[admin.SetDefaultVerifyPhoneMessageTextRequest, admin.SetDefaultVerifyPhoneMessageTextResponse]
	resetCustomVerifyPhoneMessageTextToDefault              *connect_go.Client[admin.ResetCustomVerifyPhoneMessageTextToDefaultRequest, admin.ResetCustomVerifyPhoneMessageTextToDefaultResponse]
	getDefaultDomainClaimedMessageText                      *connect_go.Client[admin.GetDefaultDomainClaimedMessageTextRequest, admin.GetDefaultDomainClaimedMessageTextResponse]
	getCustomDomainClaimedMessageText                       *connect_go.Client[admin.GetCustomDomainClaimedMessageTextRequest, admin.GetCustomDomainClaimedMessageTextResponse]
	setDefaultDomainClaimedMessageText                      *connect_go.Client[admin.SetDefaultDomainClaimedMessageTextRequest, admin.SetDefaultDomainClaimedMessageTextResponse]
	resetCustomDomainClaimedMessageTextToDefault            *connect_go.Client[admin.ResetCustomDomainClaimedMessageTextToDefaultRequest, admin.ResetCustomDomainClaimedMessageTextToDefaultResponse]
	getDefaultPasswordlessRegistrationMessageText           *connect_go.Client[admin.GetDefaultPasswordlessRegistrationMessageTextRequest, admin.GetDefaultPasswordlessRegistrationMessageTextResponse]
	getCustomPasswordlessRegistrationMessageText            *connect_go.Client[admin.GetCustomPasswordlessRegistrationMessageTextRequest, admin.GetCustomPasswordlessRegistrationMessageTextResponse]
	setDefaultPasswordlessRegistrationMessageText           *connect_go.Client[admin.SetDefaultPasswordlessRegistrationMessageTextRequest, admin.SetDefaultPasswordlessRegistrationMessageTextResponse]
	resetCustomPasswordlessRegistrationMessageTextToDefault *connect_go.Client[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse]
	getDefaultPasswordChangeMessageText                     *connect_go.Client[admin.GetDefaultPasswordChangeMessageTextRequest, admin.GetDefaultPasswordChangeMessageTextResponse]
	getCustomPasswordChangeMessageText                      *connect_go.Client[admin.GetCustomPasswordChangeMessageTextRequest, admin.GetCustomPasswordChangeMessageTextResponse]
	setDefaultPasswordChangeMessageText                     *connect_go.Client[admin.SetDefaultPasswordChangeMessageTextRequest, admin.SetDefaultPasswordChangeMessageTextResponse]
	resetCustomPasswordChangeMessageTextToDefault           *connect_go.Client[admin.ResetCustomPasswordChangeMessageTextToDefaultRequest, admin.ResetCustomPasswordChangeMessageTextToDefaultResponse]
	getDefaultLoginTexts                                    *connect_go.Client[admin.GetDefaultLoginTextsRequest, admin.GetDefaultLoginTextsResponse]
	getCustomLoginTexts                                     *connect_go.Client[admin.GetCustomLoginTextsRequest, admin.GetCustomLoginTextsResponse]
	setCustomLoginText                                      *connect_go.Client[admin.SetCustomLoginTextsRequest, admin.SetCustomLoginTextsResponse]
	resetCustomLoginTextToDefault                           *connect_go.Client[admin.ResetCustomLoginTextsToDefaultRequest, admin.ResetCustomLoginTextsToDefaultResponse]
	listIAMMemberRoles                                      *connect_go.Client[admin.ListIAMMemberRolesRequest, admin.ListIAMMemberRolesResponse]
	listIAMMembers                                          *connect_go.Client[admin.ListIAMMembersRequest, admin.ListIAMMembersResponse]
	addIAMMember                                            *connect_go.Client[admin.AddIAMMemberRequest, admin.AddIAMMemberResponse]
	updateIAMMember                                         *connect_go.Client[admin.UpdateIAMMemberRequest, admin.UpdateIAMMemberResponse]
	removeIAMMember                                         *connect_go.Client[admin.RemoveIAMMemberRequest, admin.RemoveIAMMemberResponse]
	listViews                                               *connect_go.Client[admin.ListViewsRequest, admin.ListViewsResponse]
	listFailedEvents                                        *connect_go.Client[admin.ListFailedEventsRequest, admin.ListFailedEventsResponse]
	removeFailedEvent                                       *connect_go.Client[admin.RemoveFailedEventRequest, admin.RemoveFailedEventResponse]
	importData                                              *connect_go.Client[admin.ImportDataRequest, admin.ImportDataResponse]
	exportData                                              *connect_go.Client[admin.ExportDataRequest, admin.ExportDataResponse]
	listEventTypes                                          *connect_go.Client[admin.ListEventTypesRequest, admin.ListEventTypesResponse]
	listEvents                                              *connect_go.Client[admin.ListEventsRequest, admin.ListEventsResponse]
	listAggregateTypes                                      *connect_go.Client[admin.ListAggregateTypesRequest, admin.ListAggregateTypesResponse]
}

// Healthz calls zitadel.admin.v1.AdminService.Healthz.
func (c *adminServiceClient) Healthz(ctx context.Context, req *connect_go.Request[admin.HealthzRequest]) (*connect_go.Response[admin.HealthzResponse], error) {
	return c.healthz.CallUnary(ctx, req)
}

// GetSupportedLanguages calls zitadel.admin.v1.AdminService.GetSupportedLanguages.
func (c *adminServiceClient) GetSupportedLanguages(ctx context.Context, req *connect_go.Request[admin.GetSupportedLanguagesRequest]) (*connect_go.Response[admin.GetSupportedLanguagesResponse], error) {
	return c.getSupportedLanguages.CallUnary(ctx, req)
}

// SetDefaultLanguage calls zitadel.admin.v1.AdminService.SetDefaultLanguage.
func (c *adminServiceClient) SetDefaultLanguage(ctx context.Context, req *connect_go.Request[admin.SetDefaultLanguageRequest]) (*connect_go.Response[admin.SetDefaultLanguageResponse], error) {
	return c.setDefaultLanguage.CallUnary(ctx, req)
}

// GetDefaultLanguage calls zitadel.admin.v1.AdminService.GetDefaultLanguage.
func (c *adminServiceClient) GetDefaultLanguage(ctx context.Context, req *connect_go.Request[admin.GetDefaultLanguageRequest]) (*connect_go.Response[admin.GetDefaultLanguageResponse], error) {
	return c.getDefaultLanguage.CallUnary(ctx, req)
}

// GetMyInstance calls zitadel.admin.v1.AdminService.GetMyInstance.
func (c *adminServiceClient) GetMyInstance(ctx context.Context, req *connect_go.Request[admin.GetMyInstanceRequest]) (*connect_go.Response[admin.GetMyInstanceResponse], error) {
	return c.getMyInstance.CallUnary(ctx, req)
}

// ListInstanceDomains calls zitadel.admin.v1.AdminService.ListInstanceDomains.
func (c *adminServiceClient) ListInstanceDomains(ctx context.Context, req *connect_go.Request[admin.ListInstanceDomainsRequest]) (*connect_go.Response[admin.ListInstanceDomainsResponse], error) {
	return c.listInstanceDomains.CallUnary(ctx, req)
}

// ListSecretGenerators calls zitadel.admin.v1.AdminService.ListSecretGenerators.
func (c *adminServiceClient) ListSecretGenerators(ctx context.Context, req *connect_go.Request[admin.ListSecretGeneratorsRequest]) (*connect_go.Response[admin.ListSecretGeneratorsResponse], error) {
	return c.listSecretGenerators.CallUnary(ctx, req)
}

// GetSecretGenerator calls zitadel.admin.v1.AdminService.GetSecretGenerator.
func (c *adminServiceClient) GetSecretGenerator(ctx context.Context, req *connect_go.Request[admin.GetSecretGeneratorRequest]) (*connect_go.Response[admin.GetSecretGeneratorResponse], error) {
	return c.getSecretGenerator.CallUnary(ctx, req)
}

// UpdateSecretGenerator calls zitadel.admin.v1.AdminService.UpdateSecretGenerator.
func (c *adminServiceClient) UpdateSecretGenerator(ctx context.Context, req *connect_go.Request[admin.UpdateSecretGeneratorRequest]) (*connect_go.Response[admin.UpdateSecretGeneratorResponse], error) {
	return c.updateSecretGenerator.CallUnary(ctx, req)
}

// GetSMTPConfig calls zitadel.admin.v1.AdminService.GetSMTPConfig.
func (c *adminServiceClient) GetSMTPConfig(ctx context.Context, req *connect_go.Request[admin.GetSMTPConfigRequest]) (*connect_go.Response[admin.GetSMTPConfigResponse], error) {
	return c.getSMTPConfig.CallUnary(ctx, req)
}

// AddSMTPConfig calls zitadel.admin.v1.AdminService.AddSMTPConfig.
func (c *adminServiceClient) AddSMTPConfig(ctx context.Context, req *connect_go.Request[admin.AddSMTPConfigRequest]) (*connect_go.Response[admin.AddSMTPConfigResponse], error) {
	return c.addSMTPConfig.CallUnary(ctx, req)
}

// UpdateSMTPConfig calls zitadel.admin.v1.AdminService.UpdateSMTPConfig.
func (c *adminServiceClient) UpdateSMTPConfig(ctx context.Context, req *connect_go.Request[admin.UpdateSMTPConfigRequest]) (*connect_go.Response[admin.UpdateSMTPConfigResponse], error) {
	return c.updateSMTPConfig.CallUnary(ctx, req)
}

// UpdateSMTPConfigPassword calls zitadel.admin.v1.AdminService.UpdateSMTPConfigPassword.
func (c *adminServiceClient) UpdateSMTPConfigPassword(ctx context.Context, req *connect_go.Request[admin.UpdateSMTPConfigPasswordRequest]) (*connect_go.Response[admin.UpdateSMTPConfigPasswordResponse], error) {
	return c.updateSMTPConfigPassword.CallUnary(ctx, req)
}

// RemoveSMTPConfig calls zitadel.admin.v1.AdminService.RemoveSMTPConfig.
func (c *adminServiceClient) RemoveSMTPConfig(ctx context.Context, req *connect_go.Request[admin.RemoveSMTPConfigRequest]) (*connect_go.Response[admin.RemoveSMTPConfigResponse], error) {
	return c.removeSMTPConfig.CallUnary(ctx, req)
}

// ListSMSProviders calls zitadel.admin.v1.AdminService.ListSMSProviders.
func (c *adminServiceClient) ListSMSProviders(ctx context.Context, req *connect_go.Request[admin.ListSMSProvidersRequest]) (*connect_go.Response[admin.ListSMSProvidersResponse], error) {
	return c.listSMSProviders.CallUnary(ctx, req)
}

// GetSMSProvider calls zitadel.admin.v1.AdminService.GetSMSProvider.
func (c *adminServiceClient) GetSMSProvider(ctx context.Context, req *connect_go.Request[admin.GetSMSProviderRequest]) (*connect_go.Response[admin.GetSMSProviderResponse], error) {
	return c.getSMSProvider.CallUnary(ctx, req)
}

// AddSMSProviderTwilio calls zitadel.admin.v1.AdminService.AddSMSProviderTwilio.
func (c *adminServiceClient) AddSMSProviderTwilio(ctx context.Context, req *connect_go.Request[admin.AddSMSProviderTwilioRequest]) (*connect_go.Response[admin.AddSMSProviderTwilioResponse], error) {
	return c.addSMSProviderTwilio.CallUnary(ctx, req)
}

// UpdateSMSProviderTwilio calls zitadel.admin.v1.AdminService.UpdateSMSProviderTwilio.
func (c *adminServiceClient) UpdateSMSProviderTwilio(ctx context.Context, req *connect_go.Request[admin.UpdateSMSProviderTwilioRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioResponse], error) {
	return c.updateSMSProviderTwilio.CallUnary(ctx, req)
}

// UpdateSMSProviderTwilioToken calls zitadel.admin.v1.AdminService.UpdateSMSProviderTwilioToken.
func (c *adminServiceClient) UpdateSMSProviderTwilioToken(ctx context.Context, req *connect_go.Request[admin.UpdateSMSProviderTwilioTokenRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioTokenResponse], error) {
	return c.updateSMSProviderTwilioToken.CallUnary(ctx, req)
}

// ActivateSMSProvider calls zitadel.admin.v1.AdminService.ActivateSMSProvider.
func (c *adminServiceClient) ActivateSMSProvider(ctx context.Context, req *connect_go.Request[admin.ActivateSMSProviderRequest]) (*connect_go.Response[admin.ActivateSMSProviderResponse], error) {
	return c.activateSMSProvider.CallUnary(ctx, req)
}

// DeactivateSMSProvider calls zitadel.admin.v1.AdminService.DeactivateSMSProvider.
func (c *adminServiceClient) DeactivateSMSProvider(ctx context.Context, req *connect_go.Request[admin.DeactivateSMSProviderRequest]) (*connect_go.Response[admin.DeactivateSMSProviderResponse], error) {
	return c.deactivateSMSProvider.CallUnary(ctx, req)
}

// RemoveSMSProvider calls zitadel.admin.v1.AdminService.RemoveSMSProvider.
func (c *adminServiceClient) RemoveSMSProvider(ctx context.Context, req *connect_go.Request[admin.RemoveSMSProviderRequest]) (*connect_go.Response[admin.RemoveSMSProviderResponse], error) {
	return c.removeSMSProvider.CallUnary(ctx, req)
}

// GetOIDCSettings calls zitadel.admin.v1.AdminService.GetOIDCSettings.
func (c *adminServiceClient) GetOIDCSettings(ctx context.Context, req *connect_go.Request[admin.GetOIDCSettingsRequest]) (*connect_go.Response[admin.GetOIDCSettingsResponse], error) {
	return c.getOIDCSettings.CallUnary(ctx, req)
}

// AddOIDCSettings calls zitadel.admin.v1.AdminService.AddOIDCSettings.
func (c *adminServiceClient) AddOIDCSettings(ctx context.Context, req *connect_go.Request[admin.AddOIDCSettingsRequest]) (*connect_go.Response[admin.AddOIDCSettingsResponse], error) {
	return c.addOIDCSettings.CallUnary(ctx, req)
}

// UpdateOIDCSettings calls zitadel.admin.v1.AdminService.UpdateOIDCSettings.
func (c *adminServiceClient) UpdateOIDCSettings(ctx context.Context, req *connect_go.Request[admin.UpdateOIDCSettingsRequest]) (*connect_go.Response[admin.UpdateOIDCSettingsResponse], error) {
	return c.updateOIDCSettings.CallUnary(ctx, req)
}

// GetFileSystemNotificationProvider calls
// zitadel.admin.v1.AdminService.GetFileSystemNotificationProvider.
func (c *adminServiceClient) GetFileSystemNotificationProvider(ctx context.Context, req *connect_go.Request[admin.GetFileSystemNotificationProviderRequest]) (*connect_go.Response[admin.GetFileSystemNotificationProviderResponse], error) {
	return c.getFileSystemNotificationProvider.CallUnary(ctx, req)
}

// GetLogNotificationProvider calls zitadel.admin.v1.AdminService.GetLogNotificationProvider.
func (c *adminServiceClient) GetLogNotificationProvider(ctx context.Context, req *connect_go.Request[admin.GetLogNotificationProviderRequest]) (*connect_go.Response[admin.GetLogNotificationProviderResponse], error) {
	return c.getLogNotificationProvider.CallUnary(ctx, req)
}

// GetSecurityPolicy calls zitadel.admin.v1.AdminService.GetSecurityPolicy.
func (c *adminServiceClient) GetSecurityPolicy(ctx context.Context, req *connect_go.Request[admin.GetSecurityPolicyRequest]) (*connect_go.Response[admin.GetSecurityPolicyResponse], error) {
	return c.getSecurityPolicy.CallUnary(ctx, req)
}

// SetSecurityPolicy calls zitadel.admin.v1.AdminService.SetSecurityPolicy.
func (c *adminServiceClient) SetSecurityPolicy(ctx context.Context, req *connect_go.Request[admin.SetSecurityPolicyRequest]) (*connect_go.Response[admin.SetSecurityPolicyResponse], error) {
	return c.setSecurityPolicy.CallUnary(ctx, req)
}

// GetOrgByID calls zitadel.admin.v1.AdminService.GetOrgByID.
func (c *adminServiceClient) GetOrgByID(ctx context.Context, req *connect_go.Request[admin.GetOrgByIDRequest]) (*connect_go.Response[admin.GetOrgByIDResponse], error) {
	return c.getOrgByID.CallUnary(ctx, req)
}

// IsOrgUnique calls zitadel.admin.v1.AdminService.IsOrgUnique.
func (c *adminServiceClient) IsOrgUnique(ctx context.Context, req *connect_go.Request[admin.IsOrgUniqueRequest]) (*connect_go.Response[admin.IsOrgUniqueResponse], error) {
	return c.isOrgUnique.CallUnary(ctx, req)
}

// SetDefaultOrg calls zitadel.admin.v1.AdminService.SetDefaultOrg.
func (c *adminServiceClient) SetDefaultOrg(ctx context.Context, req *connect_go.Request[admin.SetDefaultOrgRequest]) (*connect_go.Response[admin.SetDefaultOrgResponse], error) {
	return c.setDefaultOrg.CallUnary(ctx, req)
}

// GetDefaultOrg calls zitadel.admin.v1.AdminService.GetDefaultOrg.
func (c *adminServiceClient) GetDefaultOrg(ctx context.Context, req *connect_go.Request[admin.GetDefaultOrgRequest]) (*connect_go.Response[admin.GetDefaultOrgResponse], error) {
	return c.getDefaultOrg.CallUnary(ctx, req)
}

// ListOrgs calls zitadel.admin.v1.AdminService.ListOrgs.
func (c *adminServiceClient) ListOrgs(ctx context.Context, req *connect_go.Request[admin.ListOrgsRequest]) (*connect_go.Response[admin.ListOrgsResponse], error) {
	return c.listOrgs.CallUnary(ctx, req)
}

// SetUpOrg calls zitadel.admin.v1.AdminService.SetUpOrg.
func (c *adminServiceClient) SetUpOrg(ctx context.Context, req *connect_go.Request[admin.SetUpOrgRequest]) (*connect_go.Response[admin.SetUpOrgResponse], error) {
	return c.setUpOrg.CallUnary(ctx, req)
}

// RemoveOrg calls zitadel.admin.v1.AdminService.RemoveOrg.
func (c *adminServiceClient) RemoveOrg(ctx context.Context, req *connect_go.Request[admin.RemoveOrgRequest]) (*connect_go.Response[admin.RemoveOrgResponse], error) {
	return c.removeOrg.CallUnary(ctx, req)
}

// GetIDPByID calls zitadel.admin.v1.AdminService.GetIDPByID.
func (c *adminServiceClient) GetIDPByID(ctx context.Context, req *connect_go.Request[admin.GetIDPByIDRequest]) (*connect_go.Response[admin.GetIDPByIDResponse], error) {
	return c.getIDPByID.CallUnary(ctx, req)
}

// ListIDPs calls zitadel.admin.v1.AdminService.ListIDPs.
func (c *adminServiceClient) ListIDPs(ctx context.Context, req *connect_go.Request[admin.ListIDPsRequest]) (*connect_go.Response[admin.ListIDPsResponse], error) {
	return c.listIDPs.CallUnary(ctx, req)
}

// AddOIDCIDP calls zitadel.admin.v1.AdminService.AddOIDCIDP.
func (c *adminServiceClient) AddOIDCIDP(ctx context.Context, req *connect_go.Request[admin.AddOIDCIDPRequest]) (*connect_go.Response[admin.AddOIDCIDPResponse], error) {
	return c.addOIDCIDP.CallUnary(ctx, req)
}

// AddJWTIDP calls zitadel.admin.v1.AdminService.AddJWTIDP.
func (c *adminServiceClient) AddJWTIDP(ctx context.Context, req *connect_go.Request[admin.AddJWTIDPRequest]) (*connect_go.Response[admin.AddJWTIDPResponse], error) {
	return c.addJWTIDP.CallUnary(ctx, req)
}

// UpdateIDP calls zitadel.admin.v1.AdminService.UpdateIDP.
func (c *adminServiceClient) UpdateIDP(ctx context.Context, req *connect_go.Request[admin.UpdateIDPRequest]) (*connect_go.Response[admin.UpdateIDPResponse], error) {
	return c.updateIDP.CallUnary(ctx, req)
}

// DeactivateIDP calls zitadel.admin.v1.AdminService.DeactivateIDP.
func (c *adminServiceClient) DeactivateIDP(ctx context.Context, req *connect_go.Request[admin.DeactivateIDPRequest]) (*connect_go.Response[admin.DeactivateIDPResponse], error) {
	return c.deactivateIDP.CallUnary(ctx, req)
}

// ReactivateIDP calls zitadel.admin.v1.AdminService.ReactivateIDP.
func (c *adminServiceClient) ReactivateIDP(ctx context.Context, req *connect_go.Request[admin.ReactivateIDPRequest]) (*connect_go.Response[admin.ReactivateIDPResponse], error) {
	return c.reactivateIDP.CallUnary(ctx, req)
}

// RemoveIDP calls zitadel.admin.v1.AdminService.RemoveIDP.
func (c *adminServiceClient) RemoveIDP(ctx context.Context, req *connect_go.Request[admin.RemoveIDPRequest]) (*connect_go.Response[admin.RemoveIDPResponse], error) {
	return c.removeIDP.CallUnary(ctx, req)
}

// UpdateIDPOIDCConfig calls zitadel.admin.v1.AdminService.UpdateIDPOIDCConfig.
func (c *adminServiceClient) UpdateIDPOIDCConfig(ctx context.Context, req *connect_go.Request[admin.UpdateIDPOIDCConfigRequest]) (*connect_go.Response[admin.UpdateIDPOIDCConfigResponse], error) {
	return c.updateIDPOIDCConfig.CallUnary(ctx, req)
}

// UpdateIDPJWTConfig calls zitadel.admin.v1.AdminService.UpdateIDPJWTConfig.
func (c *adminServiceClient) UpdateIDPJWTConfig(ctx context.Context, req *connect_go.Request[admin.UpdateIDPJWTConfigRequest]) (*connect_go.Response[admin.UpdateIDPJWTConfigResponse], error) {
	return c.updateIDPJWTConfig.CallUnary(ctx, req)
}

// ListProviders calls zitadel.admin.v1.AdminService.ListProviders.
func (c *adminServiceClient) ListProviders(ctx context.Context, req *connect_go.Request[admin.ListProvidersRequest]) (*connect_go.Response[admin.ListProvidersResponse], error) {
	return c.listProviders.CallUnary(ctx, req)
}

// GetProviderByID calls zitadel.admin.v1.AdminService.GetProviderByID.
func (c *adminServiceClient) GetProviderByID(ctx context.Context, req *connect_go.Request[admin.GetProviderByIDRequest]) (*connect_go.Response[admin.GetProviderByIDResponse], error) {
	return c.getProviderByID.CallUnary(ctx, req)
}

// AddLDAPProvider calls zitadel.admin.v1.AdminService.AddLDAPProvider.
func (c *adminServiceClient) AddLDAPProvider(ctx context.Context, req *connect_go.Request[admin.AddLDAPProviderRequest]) (*connect_go.Response[admin.AddLDAPProviderResponse], error) {
	return c.addLDAPProvider.CallUnary(ctx, req)
}

// UpdateLDAPProvider calls zitadel.admin.v1.AdminService.UpdateLDAPProvider.
func (c *adminServiceClient) UpdateLDAPProvider(ctx context.Context, req *connect_go.Request[admin.UpdateLDAPProviderRequest]) (*connect_go.Response[admin.UpdateLDAPProviderResponse], error) {
	return c.updateLDAPProvider.CallUnary(ctx, req)
}

// DeleteProvider calls zitadel.admin.v1.AdminService.DeleteProvider.
func (c *adminServiceClient) DeleteProvider(ctx context.Context, req *connect_go.Request[admin.DeleteProviderRequest]) (*connect_go.Response[admin.DeleteProviderResponse], error) {
	return c.deleteProvider.CallUnary(ctx, req)
}

// GetOrgIAMPolicy calls zitadel.admin.v1.AdminService.GetOrgIAMPolicy.
func (c *adminServiceClient) GetOrgIAMPolicy(ctx context.Context, req *connect_go.Request[admin.GetOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetOrgIAMPolicyResponse], error) {
	return c.getOrgIAMPolicy.CallUnary(ctx, req)
}

// UpdateOrgIAMPolicy calls zitadel.admin.v1.AdminService.UpdateOrgIAMPolicy.
func (c *adminServiceClient) UpdateOrgIAMPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateOrgIAMPolicyResponse], error) {
	return c.updateOrgIAMPolicy.CallUnary(ctx, req)
}

// GetCustomOrgIAMPolicy calls zitadel.admin.v1.AdminService.GetCustomOrgIAMPolicy.
func (c *adminServiceClient) GetCustomOrgIAMPolicy(ctx context.Context, req *connect_go.Request[admin.GetCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetCustomOrgIAMPolicyResponse], error) {
	return c.getCustomOrgIAMPolicy.CallUnary(ctx, req)
}

// AddCustomOrgIAMPolicy calls zitadel.admin.v1.AdminService.AddCustomOrgIAMPolicy.
func (c *adminServiceClient) AddCustomOrgIAMPolicy(ctx context.Context, req *connect_go.Request[admin.AddCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.AddCustomOrgIAMPolicyResponse], error) {
	return c.addCustomOrgIAMPolicy.CallUnary(ctx, req)
}

// UpdateCustomOrgIAMPolicy calls zitadel.admin.v1.AdminService.UpdateCustomOrgIAMPolicy.
func (c *adminServiceClient) UpdateCustomOrgIAMPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateCustomOrgIAMPolicyResponse], error) {
	return c.updateCustomOrgIAMPolicy.CallUnary(ctx, req)
}

// ResetCustomOrgIAMPolicyToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomOrgIAMPolicyToDefault.
func (c *adminServiceClient) ResetCustomOrgIAMPolicyToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomOrgIAMPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomOrgIAMPolicyToDefaultResponse], error) {
	return c.resetCustomOrgIAMPolicyToDefault.CallUnary(ctx, req)
}

// GetDomainPolicy calls zitadel.admin.v1.AdminService.GetDomainPolicy.
func (c *adminServiceClient) GetDomainPolicy(ctx context.Context, req *connect_go.Request[admin.GetDomainPolicyRequest]) (*connect_go.Response[admin.GetDomainPolicyResponse], error) {
	return c.getDomainPolicy.CallUnary(ctx, req)
}

// UpdateDomainPolicy calls zitadel.admin.v1.AdminService.UpdateDomainPolicy.
func (c *adminServiceClient) UpdateDomainPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateDomainPolicyRequest]) (*connect_go.Response[admin.UpdateDomainPolicyResponse], error) {
	return c.updateDomainPolicy.CallUnary(ctx, req)
}

// GetCustomDomainPolicy calls zitadel.admin.v1.AdminService.GetCustomDomainPolicy.
func (c *adminServiceClient) GetCustomDomainPolicy(ctx context.Context, req *connect_go.Request[admin.GetCustomDomainPolicyRequest]) (*connect_go.Response[admin.GetCustomDomainPolicyResponse], error) {
	return c.getCustomDomainPolicy.CallUnary(ctx, req)
}

// AddCustomDomainPolicy calls zitadel.admin.v1.AdminService.AddCustomDomainPolicy.
func (c *adminServiceClient) AddCustomDomainPolicy(ctx context.Context, req *connect_go.Request[admin.AddCustomDomainPolicyRequest]) (*connect_go.Response[admin.AddCustomDomainPolicyResponse], error) {
	return c.addCustomDomainPolicy.CallUnary(ctx, req)
}

// UpdateCustomDomainPolicy calls zitadel.admin.v1.AdminService.UpdateCustomDomainPolicy.
func (c *adminServiceClient) UpdateCustomDomainPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateCustomDomainPolicyRequest]) (*connect_go.Response[admin.UpdateCustomDomainPolicyResponse], error) {
	return c.updateCustomDomainPolicy.CallUnary(ctx, req)
}

// ResetCustomDomainPolicyToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomDomainPolicyToDefault.
func (c *adminServiceClient) ResetCustomDomainPolicyToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomDomainPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainPolicyToDefaultResponse], error) {
	return c.resetCustomDomainPolicyToDefault.CallUnary(ctx, req)
}

// GetLabelPolicy calls zitadel.admin.v1.AdminService.GetLabelPolicy.
func (c *adminServiceClient) GetLabelPolicy(ctx context.Context, req *connect_go.Request[admin.GetLabelPolicyRequest]) (*connect_go.Response[admin.GetLabelPolicyResponse], error) {
	return c.getLabelPolicy.CallUnary(ctx, req)
}

// GetPreviewLabelPolicy calls zitadel.admin.v1.AdminService.GetPreviewLabelPolicy.
func (c *adminServiceClient) GetPreviewLabelPolicy(ctx context.Context, req *connect_go.Request[admin.GetPreviewLabelPolicyRequest]) (*connect_go.Response[admin.GetPreviewLabelPolicyResponse], error) {
	return c.getPreviewLabelPolicy.CallUnary(ctx, req)
}

// UpdateLabelPolicy calls zitadel.admin.v1.AdminService.UpdateLabelPolicy.
func (c *adminServiceClient) UpdateLabelPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateLabelPolicyRequest]) (*connect_go.Response[admin.UpdateLabelPolicyResponse], error) {
	return c.updateLabelPolicy.CallUnary(ctx, req)
}

// ActivateLabelPolicy calls zitadel.admin.v1.AdminService.ActivateLabelPolicy.
func (c *adminServiceClient) ActivateLabelPolicy(ctx context.Context, req *connect_go.Request[admin.ActivateLabelPolicyRequest]) (*connect_go.Response[admin.ActivateLabelPolicyResponse], error) {
	return c.activateLabelPolicy.CallUnary(ctx, req)
}

// RemoveLabelPolicyLogo calls zitadel.admin.v1.AdminService.RemoveLabelPolicyLogo.
func (c *adminServiceClient) RemoveLabelPolicyLogo(ctx context.Context, req *connect_go.Request[admin.RemoveLabelPolicyLogoRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoResponse], error) {
	return c.removeLabelPolicyLogo.CallUnary(ctx, req)
}

// RemoveLabelPolicyLogoDark calls zitadel.admin.v1.AdminService.RemoveLabelPolicyLogoDark.
func (c *adminServiceClient) RemoveLabelPolicyLogoDark(ctx context.Context, req *connect_go.Request[admin.RemoveLabelPolicyLogoDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoDarkResponse], error) {
	return c.removeLabelPolicyLogoDark.CallUnary(ctx, req)
}

// RemoveLabelPolicyIcon calls zitadel.admin.v1.AdminService.RemoveLabelPolicyIcon.
func (c *adminServiceClient) RemoveLabelPolicyIcon(ctx context.Context, req *connect_go.Request[admin.RemoveLabelPolicyIconRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconResponse], error) {
	return c.removeLabelPolicyIcon.CallUnary(ctx, req)
}

// RemoveLabelPolicyIconDark calls zitadel.admin.v1.AdminService.RemoveLabelPolicyIconDark.
func (c *adminServiceClient) RemoveLabelPolicyIconDark(ctx context.Context, req *connect_go.Request[admin.RemoveLabelPolicyIconDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconDarkResponse], error) {
	return c.removeLabelPolicyIconDark.CallUnary(ctx, req)
}

// RemoveLabelPolicyFont calls zitadel.admin.v1.AdminService.RemoveLabelPolicyFont.
func (c *adminServiceClient) RemoveLabelPolicyFont(ctx context.Context, req *connect_go.Request[admin.RemoveLabelPolicyFontRequest]) (*connect_go.Response[admin.RemoveLabelPolicyFontResponse], error) {
	return c.removeLabelPolicyFont.CallUnary(ctx, req)
}

// GetLoginPolicy calls zitadel.admin.v1.AdminService.GetLoginPolicy.
func (c *adminServiceClient) GetLoginPolicy(ctx context.Context, req *connect_go.Request[admin.GetLoginPolicyRequest]) (*connect_go.Response[admin.GetLoginPolicyResponse], error) {
	return c.getLoginPolicy.CallUnary(ctx, req)
}

// UpdateLoginPolicy calls zitadel.admin.v1.AdminService.UpdateLoginPolicy.
func (c *adminServiceClient) UpdateLoginPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateLoginPolicyRequest]) (*connect_go.Response[admin.UpdateLoginPolicyResponse], error) {
	return c.updateLoginPolicy.CallUnary(ctx, req)
}

// ListLoginPolicyIDPs calls zitadel.admin.v1.AdminService.ListLoginPolicyIDPs.
func (c *adminServiceClient) ListLoginPolicyIDPs(ctx context.Context, req *connect_go.Request[admin.ListLoginPolicyIDPsRequest]) (*connect_go.Response[admin.ListLoginPolicyIDPsResponse], error) {
	return c.listLoginPolicyIDPs.CallUnary(ctx, req)
}

// AddIDPToLoginPolicy calls zitadel.admin.v1.AdminService.AddIDPToLoginPolicy.
func (c *adminServiceClient) AddIDPToLoginPolicy(ctx context.Context, req *connect_go.Request[admin.AddIDPToLoginPolicyRequest]) (*connect_go.Response[admin.AddIDPToLoginPolicyResponse], error) {
	return c.addIDPToLoginPolicy.CallUnary(ctx, req)
}

// RemoveIDPFromLoginPolicy calls zitadel.admin.v1.AdminService.RemoveIDPFromLoginPolicy.
func (c *adminServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, req *connect_go.Request[admin.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveIDPFromLoginPolicyResponse], error) {
	return c.removeIDPFromLoginPolicy.CallUnary(ctx, req)
}

// ListLoginPolicySecondFactors calls zitadel.admin.v1.AdminService.ListLoginPolicySecondFactors.
func (c *adminServiceClient) ListLoginPolicySecondFactors(ctx context.Context, req *connect_go.Request[admin.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicySecondFactorsResponse], error) {
	return c.listLoginPolicySecondFactors.CallUnary(ctx, req)
}

// AddSecondFactorToLoginPolicy calls zitadel.admin.v1.AdminService.AddSecondFactorToLoginPolicy.
func (c *adminServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, req *connect_go.Request[admin.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddSecondFactorToLoginPolicyResponse], error) {
	return c.addSecondFactorToLoginPolicy.CallUnary(ctx, req)
}

// RemoveSecondFactorFromLoginPolicy calls
// zitadel.admin.v1.AdminService.RemoveSecondFactorFromLoginPolicy.
func (c *adminServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, req *connect_go.Request[admin.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveSecondFactorFromLoginPolicyResponse], error) {
	return c.removeSecondFactorFromLoginPolicy.CallUnary(ctx, req)
}

// ListLoginPolicyMultiFactors calls zitadel.admin.v1.AdminService.ListLoginPolicyMultiFactors.
func (c *adminServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, req *connect_go.Request[admin.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicyMultiFactorsResponse], error) {
	return c.listLoginPolicyMultiFactors.CallUnary(ctx, req)
}

// AddMultiFactorToLoginPolicy calls zitadel.admin.v1.AdminService.AddMultiFactorToLoginPolicy.
func (c *adminServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, req *connect_go.Request[admin.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddMultiFactorToLoginPolicyResponse], error) {
	return c.addMultiFactorToLoginPolicy.CallUnary(ctx, req)
}

// RemoveMultiFactorFromLoginPolicy calls
// zitadel.admin.v1.AdminService.RemoveMultiFactorFromLoginPolicy.
func (c *adminServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, req *connect_go.Request[admin.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveMultiFactorFromLoginPolicyResponse], error) {
	return c.removeMultiFactorFromLoginPolicy.CallUnary(ctx, req)
}

// GetPasswordComplexityPolicy calls zitadel.admin.v1.AdminService.GetPasswordComplexityPolicy.
func (c *adminServiceClient) GetPasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[admin.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[admin.GetPasswordComplexityPolicyResponse], error) {
	return c.getPasswordComplexityPolicy.CallUnary(ctx, req)
}

// UpdatePasswordComplexityPolicy calls
// zitadel.admin.v1.AdminService.UpdatePasswordComplexityPolicy.
func (c *adminServiceClient) UpdatePasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[admin.UpdatePasswordComplexityPolicyRequest]) (*connect_go.Response[admin.UpdatePasswordComplexityPolicyResponse], error) {
	return c.updatePasswordComplexityPolicy.CallUnary(ctx, req)
}

// GetPasswordAgePolicy calls zitadel.admin.v1.AdminService.GetPasswordAgePolicy.
func (c *adminServiceClient) GetPasswordAgePolicy(ctx context.Context, req *connect_go.Request[admin.GetPasswordAgePolicyRequest]) (*connect_go.Response[admin.GetPasswordAgePolicyResponse], error) {
	return c.getPasswordAgePolicy.CallUnary(ctx, req)
}

// UpdatePasswordAgePolicy calls zitadel.admin.v1.AdminService.UpdatePasswordAgePolicy.
func (c *adminServiceClient) UpdatePasswordAgePolicy(ctx context.Context, req *connect_go.Request[admin.UpdatePasswordAgePolicyRequest]) (*connect_go.Response[admin.UpdatePasswordAgePolicyResponse], error) {
	return c.updatePasswordAgePolicy.CallUnary(ctx, req)
}

// GetLockoutPolicy calls zitadel.admin.v1.AdminService.GetLockoutPolicy.
func (c *adminServiceClient) GetLockoutPolicy(ctx context.Context, req *connect_go.Request[admin.GetLockoutPolicyRequest]) (*connect_go.Response[admin.GetLockoutPolicyResponse], error) {
	return c.getLockoutPolicy.CallUnary(ctx, req)
}

// UpdateLockoutPolicy calls zitadel.admin.v1.AdminService.UpdateLockoutPolicy.
func (c *adminServiceClient) UpdateLockoutPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateLockoutPolicyRequest]) (*connect_go.Response[admin.UpdateLockoutPolicyResponse], error) {
	return c.updateLockoutPolicy.CallUnary(ctx, req)
}

// GetPrivacyPolicy calls zitadel.admin.v1.AdminService.GetPrivacyPolicy.
func (c *adminServiceClient) GetPrivacyPolicy(ctx context.Context, req *connect_go.Request[admin.GetPrivacyPolicyRequest]) (*connect_go.Response[admin.GetPrivacyPolicyResponse], error) {
	return c.getPrivacyPolicy.CallUnary(ctx, req)
}

// UpdatePrivacyPolicy calls zitadel.admin.v1.AdminService.UpdatePrivacyPolicy.
func (c *adminServiceClient) UpdatePrivacyPolicy(ctx context.Context, req *connect_go.Request[admin.UpdatePrivacyPolicyRequest]) (*connect_go.Response[admin.UpdatePrivacyPolicyResponse], error) {
	return c.updatePrivacyPolicy.CallUnary(ctx, req)
}

// AddNotificationPolicy calls zitadel.admin.v1.AdminService.AddNotificationPolicy.
func (c *adminServiceClient) AddNotificationPolicy(ctx context.Context, req *connect_go.Request[admin.AddNotificationPolicyRequest]) (*connect_go.Response[admin.AddNotificationPolicyResponse], error) {
	return c.addNotificationPolicy.CallUnary(ctx, req)
}

// GetNotificationPolicy calls zitadel.admin.v1.AdminService.GetNotificationPolicy.
func (c *adminServiceClient) GetNotificationPolicy(ctx context.Context, req *connect_go.Request[admin.GetNotificationPolicyRequest]) (*connect_go.Response[admin.GetNotificationPolicyResponse], error) {
	return c.getNotificationPolicy.CallUnary(ctx, req)
}

// UpdateNotificationPolicy calls zitadel.admin.v1.AdminService.UpdateNotificationPolicy.
func (c *adminServiceClient) UpdateNotificationPolicy(ctx context.Context, req *connect_go.Request[admin.UpdateNotificationPolicyRequest]) (*connect_go.Response[admin.UpdateNotificationPolicyResponse], error) {
	return c.updateNotificationPolicy.CallUnary(ctx, req)
}

// GetDefaultInitMessageText calls zitadel.admin.v1.AdminService.GetDefaultInitMessageText.
func (c *adminServiceClient) GetDefaultInitMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.GetDefaultInitMessageTextResponse], error) {
	return c.getDefaultInitMessageText.CallUnary(ctx, req)
}

// GetCustomInitMessageText calls zitadel.admin.v1.AdminService.GetCustomInitMessageText.
func (c *adminServiceClient) GetCustomInitMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomInitMessageTextRequest]) (*connect_go.Response[admin.GetCustomInitMessageTextResponse], error) {
	return c.getCustomInitMessageText.CallUnary(ctx, req)
}

// SetDefaultInitMessageText calls zitadel.admin.v1.AdminService.SetDefaultInitMessageText.
func (c *adminServiceClient) SetDefaultInitMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.SetDefaultInitMessageTextResponse], error) {
	return c.setDefaultInitMessageText.CallUnary(ctx, req)
}

// ResetCustomInitMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomInitMessageTextToDefault.
func (c *adminServiceClient) ResetCustomInitMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomInitMessageTextToDefaultResponse], error) {
	return c.resetCustomInitMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultPasswordResetMessageText calls
// zitadel.admin.v1.AdminService.GetDefaultPasswordResetMessageText.
func (c *adminServiceClient) GetDefaultPasswordResetMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordResetMessageTextResponse], error) {
	return c.getDefaultPasswordResetMessageText.CallUnary(ctx, req)
}

// GetCustomPasswordResetMessageText calls
// zitadel.admin.v1.AdminService.GetCustomPasswordResetMessageText.
func (c *adminServiceClient) GetCustomPasswordResetMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordResetMessageTextResponse], error) {
	return c.getCustomPasswordResetMessageText.CallUnary(ctx, req)
}

// SetDefaultPasswordResetMessageText calls
// zitadel.admin.v1.AdminService.SetDefaultPasswordResetMessageText.
func (c *adminServiceClient) SetDefaultPasswordResetMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordResetMessageTextResponse], error) {
	return c.setDefaultPasswordResetMessageText.CallUnary(ctx, req)
}

// ResetCustomPasswordResetMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomPasswordResetMessageTextToDefault.
func (c *adminServiceClient) ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordResetMessageTextToDefaultResponse], error) {
	return c.resetCustomPasswordResetMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultVerifyEmailMessageText calls
// zitadel.admin.v1.AdminService.GetDefaultVerifyEmailMessageText.
func (c *adminServiceClient) GetDefaultVerifyEmailMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyEmailMessageTextResponse], error) {
	return c.getDefaultVerifyEmailMessageText.CallUnary(ctx, req)
}

// GetCustomVerifyEmailMessageText calls
// zitadel.admin.v1.AdminService.GetCustomVerifyEmailMessageText.
func (c *adminServiceClient) GetCustomVerifyEmailMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyEmailMessageTextResponse], error) {
	return c.getCustomVerifyEmailMessageText.CallUnary(ctx, req)
}

// SetDefaultVerifyEmailMessageText calls
// zitadel.admin.v1.AdminService.SetDefaultVerifyEmailMessageText.
func (c *adminServiceClient) SetDefaultVerifyEmailMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyEmailMessageTextResponse], error) {
	return c.setDefaultVerifyEmailMessageText.CallUnary(ctx, req)
}

// ResetCustomVerifyEmailMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomVerifyEmailMessageTextToDefault.
func (c *adminServiceClient) ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyEmailMessageTextToDefaultResponse], error) {
	return c.resetCustomVerifyEmailMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultVerifyPhoneMessageText calls
// zitadel.admin.v1.AdminService.GetDefaultVerifyPhoneMessageText.
func (c *adminServiceClient) GetDefaultVerifyPhoneMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyPhoneMessageTextResponse], error) {
	return c.getDefaultVerifyPhoneMessageText.CallUnary(ctx, req)
}

// GetCustomVerifyPhoneMessageText calls
// zitadel.admin.v1.AdminService.GetCustomVerifyPhoneMessageText.
func (c *adminServiceClient) GetCustomVerifyPhoneMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyPhoneMessageTextResponse], error) {
	return c.getCustomVerifyPhoneMessageText.CallUnary(ctx, req)
}

// SetDefaultVerifyPhoneMessageText calls
// zitadel.admin.v1.AdminService.SetDefaultVerifyPhoneMessageText.
func (c *adminServiceClient) SetDefaultVerifyPhoneMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyPhoneMessageTextResponse], error) {
	return c.setDefaultVerifyPhoneMessageText.CallUnary(ctx, req)
}

// ResetCustomVerifyPhoneMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomVerifyPhoneMessageTextToDefault.
func (c *adminServiceClient) ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error) {
	return c.resetCustomVerifyPhoneMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultDomainClaimedMessageText calls
// zitadel.admin.v1.AdminService.GetDefaultDomainClaimedMessageText.
func (c *adminServiceClient) GetDefaultDomainClaimedMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetDefaultDomainClaimedMessageTextResponse], error) {
	return c.getDefaultDomainClaimedMessageText.CallUnary(ctx, req)
}

// GetCustomDomainClaimedMessageText calls
// zitadel.admin.v1.AdminService.GetCustomDomainClaimedMessageText.
func (c *adminServiceClient) GetCustomDomainClaimedMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetCustomDomainClaimedMessageTextResponse], error) {
	return c.getCustomDomainClaimedMessageText.CallUnary(ctx, req)
}

// SetDefaultDomainClaimedMessageText calls
// zitadel.admin.v1.AdminService.SetDefaultDomainClaimedMessageText.
func (c *adminServiceClient) SetDefaultDomainClaimedMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.SetDefaultDomainClaimedMessageTextResponse], error) {
	return c.setDefaultDomainClaimedMessageText.CallUnary(ctx, req)
}

// ResetCustomDomainClaimedMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomDomainClaimedMessageTextToDefault.
func (c *adminServiceClient) ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainClaimedMessageTextToDefaultResponse], error) {
	return c.resetCustomDomainClaimedMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultPasswordlessRegistrationMessageText calls
// zitadel.admin.v1.AdminService.GetDefaultPasswordlessRegistrationMessageText.
func (c *adminServiceClient) GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordlessRegistrationMessageTextResponse], error) {
	return c.getDefaultPasswordlessRegistrationMessageText.CallUnary(ctx, req)
}

// GetCustomPasswordlessRegistrationMessageText calls
// zitadel.admin.v1.AdminService.GetCustomPasswordlessRegistrationMessageText.
func (c *adminServiceClient) GetCustomPasswordlessRegistrationMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordlessRegistrationMessageTextResponse], error) {
	return c.getCustomPasswordlessRegistrationMessageText.CallUnary(ctx, req)
}

// SetDefaultPasswordlessRegistrationMessageText calls
// zitadel.admin.v1.AdminService.SetDefaultPasswordlessRegistrationMessageText.
func (c *adminServiceClient) SetDefaultPasswordlessRegistrationMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordlessRegistrationMessageTextResponse], error) {
	return c.setDefaultPasswordlessRegistrationMessageText.CallUnary(ctx, req)
}

// ResetCustomPasswordlessRegistrationMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomPasswordlessRegistrationMessageTextToDefault.
func (c *adminServiceClient) ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error) {
	return c.resetCustomPasswordlessRegistrationMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultPasswordChangeMessageText calls
// zitadel.admin.v1.AdminService.GetDefaultPasswordChangeMessageText.
func (c *adminServiceClient) GetDefaultPasswordChangeMessageText(ctx context.Context, req *connect_go.Request[admin.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordChangeMessageTextResponse], error) {
	return c.getDefaultPasswordChangeMessageText.CallUnary(ctx, req)
}

// GetCustomPasswordChangeMessageText calls
// zitadel.admin.v1.AdminService.GetCustomPasswordChangeMessageText.
func (c *adminServiceClient) GetCustomPasswordChangeMessageText(ctx context.Context, req *connect_go.Request[admin.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordChangeMessageTextResponse], error) {
	return c.getCustomPasswordChangeMessageText.CallUnary(ctx, req)
}

// SetDefaultPasswordChangeMessageText calls
// zitadel.admin.v1.AdminService.SetDefaultPasswordChangeMessageText.
func (c *adminServiceClient) SetDefaultPasswordChangeMessageText(ctx context.Context, req *connect_go.Request[admin.SetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordChangeMessageTextResponse], error) {
	return c.setDefaultPasswordChangeMessageText.CallUnary(ctx, req)
}

// ResetCustomPasswordChangeMessageTextToDefault calls
// zitadel.admin.v1.AdminService.ResetCustomPasswordChangeMessageTextToDefault.
func (c *adminServiceClient) ResetCustomPasswordChangeMessageTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordChangeMessageTextToDefaultResponse], error) {
	return c.resetCustomPasswordChangeMessageTextToDefault.CallUnary(ctx, req)
}

// GetDefaultLoginTexts calls zitadel.admin.v1.AdminService.GetDefaultLoginTexts.
func (c *adminServiceClient) GetDefaultLoginTexts(ctx context.Context, req *connect_go.Request[admin.GetDefaultLoginTextsRequest]) (*connect_go.Response[admin.GetDefaultLoginTextsResponse], error) {
	return c.getDefaultLoginTexts.CallUnary(ctx, req)
}

// GetCustomLoginTexts calls zitadel.admin.v1.AdminService.GetCustomLoginTexts.
func (c *adminServiceClient) GetCustomLoginTexts(ctx context.Context, req *connect_go.Request[admin.GetCustomLoginTextsRequest]) (*connect_go.Response[admin.GetCustomLoginTextsResponse], error) {
	return c.getCustomLoginTexts.CallUnary(ctx, req)
}

// SetCustomLoginText calls zitadel.admin.v1.AdminService.SetCustomLoginText.
func (c *adminServiceClient) SetCustomLoginText(ctx context.Context, req *connect_go.Request[admin.SetCustomLoginTextsRequest]) (*connect_go.Response[admin.SetCustomLoginTextsResponse], error) {
	return c.setCustomLoginText.CallUnary(ctx, req)
}

// ResetCustomLoginTextToDefault calls zitadel.admin.v1.AdminService.ResetCustomLoginTextToDefault.
func (c *adminServiceClient) ResetCustomLoginTextToDefault(ctx context.Context, req *connect_go.Request[admin.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[admin.ResetCustomLoginTextsToDefaultResponse], error) {
	return c.resetCustomLoginTextToDefault.CallUnary(ctx, req)
}

// ListIAMMemberRoles calls zitadel.admin.v1.AdminService.ListIAMMemberRoles.
func (c *adminServiceClient) ListIAMMemberRoles(ctx context.Context, req *connect_go.Request[admin.ListIAMMemberRolesRequest]) (*connect_go.Response[admin.ListIAMMemberRolesResponse], error) {
	return c.listIAMMemberRoles.CallUnary(ctx, req)
}

// ListIAMMembers calls zitadel.admin.v1.AdminService.ListIAMMembers.
func (c *adminServiceClient) ListIAMMembers(ctx context.Context, req *connect_go.Request[admin.ListIAMMembersRequest]) (*connect_go.Response[admin.ListIAMMembersResponse], error) {
	return c.listIAMMembers.CallUnary(ctx, req)
}

// AddIAMMember calls zitadel.admin.v1.AdminService.AddIAMMember.
func (c *adminServiceClient) AddIAMMember(ctx context.Context, req *connect_go.Request[admin.AddIAMMemberRequest]) (*connect_go.Response[admin.AddIAMMemberResponse], error) {
	return c.addIAMMember.CallUnary(ctx, req)
}

// UpdateIAMMember calls zitadel.admin.v1.AdminService.UpdateIAMMember.
func (c *adminServiceClient) UpdateIAMMember(ctx context.Context, req *connect_go.Request[admin.UpdateIAMMemberRequest]) (*connect_go.Response[admin.UpdateIAMMemberResponse], error) {
	return c.updateIAMMember.CallUnary(ctx, req)
}

// RemoveIAMMember calls zitadel.admin.v1.AdminService.RemoveIAMMember.
func (c *adminServiceClient) RemoveIAMMember(ctx context.Context, req *connect_go.Request[admin.RemoveIAMMemberRequest]) (*connect_go.Response[admin.RemoveIAMMemberResponse], error) {
	return c.removeIAMMember.CallUnary(ctx, req)
}

// ListViews calls zitadel.admin.v1.AdminService.ListViews.
func (c *adminServiceClient) ListViews(ctx context.Context, req *connect_go.Request[admin.ListViewsRequest]) (*connect_go.Response[admin.ListViewsResponse], error) {
	return c.listViews.CallUnary(ctx, req)
}

// ListFailedEvents calls zitadel.admin.v1.AdminService.ListFailedEvents.
func (c *adminServiceClient) ListFailedEvents(ctx context.Context, req *connect_go.Request[admin.ListFailedEventsRequest]) (*connect_go.Response[admin.ListFailedEventsResponse], error) {
	return c.listFailedEvents.CallUnary(ctx, req)
}

// RemoveFailedEvent calls zitadel.admin.v1.AdminService.RemoveFailedEvent.
func (c *adminServiceClient) RemoveFailedEvent(ctx context.Context, req *connect_go.Request[admin.RemoveFailedEventRequest]) (*connect_go.Response[admin.RemoveFailedEventResponse], error) {
	return c.removeFailedEvent.CallUnary(ctx, req)
}

// ImportData calls zitadel.admin.v1.AdminService.ImportData.
func (c *adminServiceClient) ImportData(ctx context.Context, req *connect_go.Request[admin.ImportDataRequest]) (*connect_go.Response[admin.ImportDataResponse], error) {
	return c.importData.CallUnary(ctx, req)
}

// ExportData calls zitadel.admin.v1.AdminService.ExportData.
func (c *adminServiceClient) ExportData(ctx context.Context, req *connect_go.Request[admin.ExportDataRequest]) (*connect_go.Response[admin.ExportDataResponse], error) {
	return c.exportData.CallUnary(ctx, req)
}

// ListEventTypes calls zitadel.admin.v1.AdminService.ListEventTypes.
func (c *adminServiceClient) ListEventTypes(ctx context.Context, req *connect_go.Request[admin.ListEventTypesRequest]) (*connect_go.Response[admin.ListEventTypesResponse], error) {
	return c.listEventTypes.CallUnary(ctx, req)
}

// ListEvents calls zitadel.admin.v1.AdminService.ListEvents.
func (c *adminServiceClient) ListEvents(ctx context.Context, req *connect_go.Request[admin.ListEventsRequest]) (*connect_go.Response[admin.ListEventsResponse], error) {
	return c.listEvents.CallUnary(ctx, req)
}

// ListAggregateTypes calls zitadel.admin.v1.AdminService.ListAggregateTypes.
func (c *adminServiceClient) ListAggregateTypes(ctx context.Context, req *connect_go.Request[admin.ListAggregateTypesRequest]) (*connect_go.Response[admin.ListAggregateTypesResponse], error) {
	return c.listAggregateTypes.CallUnary(ctx, req)
}

// AdminServiceHandler is an implementation of the zitadel.admin.v1.AdminService service.
type AdminServiceHandler interface {
	// Indicates if ZITADEL is running.
	// It respondes as soon as ZITADEL started
	Healthz(context.Context, *connect_go.Request[admin.HealthzRequest]) (*connect_go.Response[admin.HealthzResponse], error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *connect_go.Request[admin.GetSupportedLanguagesRequest]) (*connect_go.Response[admin.GetSupportedLanguagesResponse], error)
	// Set the default language
	SetDefaultLanguage(context.Context, *connect_go.Request[admin.SetDefaultLanguageRequest]) (*connect_go.Response[admin.SetDefaultLanguageResponse], error)
	// Set the default language
	GetDefaultLanguage(context.Context, *connect_go.Request[admin.GetDefaultLanguageRequest]) (*connect_go.Response[admin.GetDefaultLanguageResponse], error)
	// Returns the details of the instance
	GetMyInstance(context.Context, *connect_go.Request[admin.GetMyInstanceRequest]) (*connect_go.Response[admin.GetMyInstanceResponse], error)
	// Returns the domains of the instance
	ListInstanceDomains(context.Context, *connect_go.Request[admin.ListInstanceDomainsRequest]) (*connect_go.Response[admin.ListInstanceDomainsResponse], error)
	// Set the default language
	ListSecretGenerators(context.Context, *connect_go.Request[admin.ListSecretGeneratorsRequest]) (*connect_go.Response[admin.ListSecretGeneratorsResponse], error)
	// Get Secret Generator by type (e.g PasswordResetCode)
	GetSecretGenerator(context.Context, *connect_go.Request[admin.GetSecretGeneratorRequest]) (*connect_go.Response[admin.GetSecretGeneratorResponse], error)
	// Update secret generator configuration
	UpdateSecretGenerator(context.Context, *connect_go.Request[admin.UpdateSecretGeneratorRequest]) (*connect_go.Response[admin.UpdateSecretGeneratorResponse], error)
	// Get system smtp configuration
	GetSMTPConfig(context.Context, *connect_go.Request[admin.GetSMTPConfigRequest]) (*connect_go.Response[admin.GetSMTPConfigResponse], error)
	// Add system smtp configuration
	AddSMTPConfig(context.Context, *connect_go.Request[admin.AddSMTPConfigRequest]) (*connect_go.Response[admin.AddSMTPConfigResponse], error)
	// Update system smtp configuration
	UpdateSMTPConfig(context.Context, *connect_go.Request[admin.UpdateSMTPConfigRequest]) (*connect_go.Response[admin.UpdateSMTPConfigResponse], error)
	// Update system smtp configuration password for host
	UpdateSMTPConfigPassword(context.Context, *connect_go.Request[admin.UpdateSMTPConfigPasswordRequest]) (*connect_go.Response[admin.UpdateSMTPConfigPasswordResponse], error)
	// Remove system smtp configuration
	RemoveSMTPConfig(context.Context, *connect_go.Request[admin.RemoveSMTPConfigRequest]) (*connect_go.Response[admin.RemoveSMTPConfigResponse], error)
	// list sms provider configurations
	ListSMSProviders(context.Context, *connect_go.Request[admin.ListSMSProvidersRequest]) (*connect_go.Response[admin.ListSMSProvidersResponse], error)
	// Get sms provider
	GetSMSProvider(context.Context, *connect_go.Request[admin.GetSMSProviderRequest]) (*connect_go.Response[admin.GetSMSProviderResponse], error)
	// Add twilio sms provider
	AddSMSProviderTwilio(context.Context, *connect_go.Request[admin.AddSMSProviderTwilioRequest]) (*connect_go.Response[admin.AddSMSProviderTwilioResponse], error)
	// Update twilio sms provider
	UpdateSMSProviderTwilio(context.Context, *connect_go.Request[admin.UpdateSMSProviderTwilioRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioResponse], error)
	// Update twilio sms provider token
	UpdateSMSProviderTwilioToken(context.Context, *connect_go.Request[admin.UpdateSMSProviderTwilioTokenRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioTokenResponse], error)
	// Activate sms provider
	ActivateSMSProvider(context.Context, *connect_go.Request[admin.ActivateSMSProviderRequest]) (*connect_go.Response[admin.ActivateSMSProviderResponse], error)
	// Deactivate sms provider
	DeactivateSMSProvider(context.Context, *connect_go.Request[admin.DeactivateSMSProviderRequest]) (*connect_go.Response[admin.DeactivateSMSProviderResponse], error)
	// Remove sms provider token
	RemoveSMSProvider(context.Context, *connect_go.Request[admin.RemoveSMSProviderRequest]) (*connect_go.Response[admin.RemoveSMSProviderResponse], error)
	// Get OIDC settings (e.g token lifetimes, etc.)
	GetOIDCSettings(context.Context, *connect_go.Request[admin.GetOIDCSettingsRequest]) (*connect_go.Response[admin.GetOIDCSettingsResponse], error)
	// Add oidc settings (e.g token lifetimes, etc)
	AddOIDCSettings(context.Context, *connect_go.Request[admin.AddOIDCSettingsRequest]) (*connect_go.Response[admin.AddOIDCSettingsResponse], error)
	// Update oidc settings (e.g token lifetimes, etc)
	UpdateOIDCSettings(context.Context, *connect_go.Request[admin.UpdateOIDCSettingsRequest]) (*connect_go.Response[admin.UpdateOIDCSettingsResponse], error)
	// Get file system notification provider
	GetFileSystemNotificationProvider(context.Context, *connect_go.Request[admin.GetFileSystemNotificationProviderRequest]) (*connect_go.Response[admin.GetFileSystemNotificationProviderResponse], error)
	// Get log notification provider
	GetLogNotificationProvider(context.Context, *connect_go.Request[admin.GetLogNotificationProviderRequest]) (*connect_go.Response[admin.GetLogNotificationProviderResponse], error)
	// Get the security policy
	GetSecurityPolicy(context.Context, *connect_go.Request[admin.GetSecurityPolicyRequest]) (*connect_go.Response[admin.GetSecurityPolicyResponse], error)
	// set the security policy
	SetSecurityPolicy(context.Context, *connect_go.Request[admin.SetSecurityPolicyRequest]) (*connect_go.Response[admin.SetSecurityPolicyResponse], error)
	// Returns an organisation by id
	GetOrgByID(context.Context, *connect_go.Request[admin.GetOrgByIDRequest]) (*connect_go.Response[admin.GetOrgByIDResponse], error)
	// Checks whether an organisation exists by the given parameters
	IsOrgUnique(context.Context, *connect_go.Request[admin.IsOrgUniqueRequest]) (*connect_go.Response[admin.IsOrgUniqueResponse], error)
	// Set the default org
	SetDefaultOrg(context.Context, *connect_go.Request[admin.SetDefaultOrgRequest]) (*connect_go.Response[admin.SetDefaultOrgResponse], error)
	// Set the default org
	GetDefaultOrg(context.Context, *connect_go.Request[admin.GetDefaultOrgRequest]) (*connect_go.Response[admin.GetDefaultOrgResponse], error)
	// Returns all organisations matching the request
	// all queries need to match (AND)
	ListOrgs(context.Context, *connect_go.Request[admin.ListOrgsRequest]) (*connect_go.Response[admin.ListOrgsResponse], error)
	// Creates a new org and user
	// and adds the user to the orgs members as ORG_OWNER
	SetUpOrg(context.Context, *connect_go.Request[admin.SetUpOrgRequest]) (*connect_go.Response[admin.SetUpOrgResponse], error)
	// Sets the state of the organisation and all its resource (Users, Projects, Grants to and from the org) to removed
	// Users of this organisation will not be able login
	RemoveOrg(context.Context, *connect_go.Request[admin.RemoveOrgRequest]) (*connect_go.Response[admin.RemoveOrgResponse], error)
	// Returns a identity provider configuration of the IAM instance
	GetIDPByID(context.Context, *connect_go.Request[admin.GetIDPByIDRequest]) (*connect_go.Response[admin.GetIDPByIDResponse], error)
	// Returns all identity provider configurations of the IAM instance
	ListIDPs(context.Context, *connect_go.Request[admin.ListIDPsRequest]) (*connect_go.Response[admin.ListIDPsResponse], error)
	// Adds a new oidc identity provider configuration the IAM instance
	AddOIDCIDP(context.Context, *connect_go.Request[admin.AddOIDCIDPRequest]) (*connect_go.Response[admin.AddOIDCIDPResponse], error)
	// Adds a new jwt identity provider configuration the IAM instance
	AddJWTIDP(context.Context, *connect_go.Request[admin.AddJWTIDPRequest]) (*connect_go.Response[admin.AddJWTIDPResponse], error)
	// Updates the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDP(context.Context, *connect_go.Request[admin.UpdateIDPRequest]) (*connect_go.Response[admin.UpdateIDPResponse], error)
	// Sets the state of the idp to IDP_STATE_INACTIVE
	// the state MUST be IDP_STATE_ACTIVE for this call
	DeactivateIDP(context.Context, *connect_go.Request[admin.DeactivateIDPRequest]) (*connect_go.Response[admin.DeactivateIDPResponse], error)
	// Sets the state of the idp to IDP_STATE_ACTIVE
	// the state MUST be IDP_STATE_INACTIVE for this call
	ReactivateIDP(context.Context, *connect_go.Request[admin.ReactivateIDPRequest]) (*connect_go.Response[admin.ReactivateIDPResponse], error)
	// RemoveIDP deletes the IDP permanetly
	RemoveIDP(context.Context, *connect_go.Request[admin.RemoveIDPRequest]) (*connect_go.Response[admin.RemoveIDPResponse], error)
	// Updates the oidc configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPOIDCConfig(context.Context, *connect_go.Request[admin.UpdateIDPOIDCConfigRequest]) (*connect_go.Response[admin.UpdateIDPOIDCConfigResponse], error)
	// Updates the jwt configuration of the specified idp
	// all fields are updated. If no value is provided the field will be empty afterwards.
	UpdateIDPJWTConfig(context.Context, *connect_go.Request[admin.UpdateIDPJWTConfigRequest]) (*connect_go.Response[admin.UpdateIDPJWTConfigResponse], error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(context.Context, *connect_go.Request[admin.ListProvidersRequest]) (*connect_go.Response[admin.ListProvidersResponse], error)
	// Returns an identity provider of the instance
	GetProviderByID(context.Context, *connect_go.Request[admin.GetProviderByIDRequest]) (*connect_go.Response[admin.GetProviderByIDResponse], error)
	// Add a new ldap identity provider on the instance
	AddLDAPProvider(context.Context, *connect_go.Request[admin.AddLDAPProviderRequest]) (*connect_go.Response[admin.AddLDAPProviderResponse], error)
	// Change an existing ldap identity provider on the instance
	UpdateLDAPProvider(context.Context, *connect_go.Request[admin.UpdateLDAPProviderRequest]) (*connect_go.Response[admin.UpdateLDAPProviderResponse], error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(context.Context, *connect_go.Request[admin.DeleteProviderRequest]) (*connect_go.Response[admin.DeleteProviderResponse], error)
	// deprecated: please use DomainPolicy instead
	// Returns the Org IAM policy defined by the administrators of ZITADEL
	GetOrgIAMPolicy(context.Context, *connect_go.Request[admin.GetOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Updates the default OrgIAM policy.
	// it impacts all organisations without a customised policy
	UpdateOrgIAMPolicy(context.Context, *connect_go.Request[admin.UpdateOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Returns the customised policy or the default if not customised
	GetCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.GetCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetCustomOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Defines a custom OrgIAM policy as specified
	AddCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.AddCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.AddCustomOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Updates a custom OrgIAM policy as specified
	UpdateCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.UpdateCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateCustomOrgIAMPolicyResponse], error)
	// deprecated: please use DomainPolicy instead
	// Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomOrgIAMPolicyToDefault(context.Context, *connect_go.Request[admin.ResetCustomOrgIAMPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomOrgIAMPolicyToDefaultResponse], error)
	// Returns the Domain policy defined by the administrators of ZITADEL
	GetDomainPolicy(context.Context, *connect_go.Request[admin.GetDomainPolicyRequest]) (*connect_go.Response[admin.GetDomainPolicyResponse], error)
	// Updates the default Domain policy.
	// it impacts all organisations without a customised policy
	UpdateDomainPolicy(context.Context, *connect_go.Request[admin.UpdateDomainPolicyRequest]) (*connect_go.Response[admin.UpdateDomainPolicyResponse], error)
	// Returns the customised policy or the default if not customised
	GetCustomDomainPolicy(context.Context, *connect_go.Request[admin.GetCustomDomainPolicyRequest]) (*connect_go.Response[admin.GetCustomDomainPolicyResponse], error)
	// Defines a custom Domain policy as specified
	AddCustomDomainPolicy(context.Context, *connect_go.Request[admin.AddCustomDomainPolicyRequest]) (*connect_go.Response[admin.AddCustomDomainPolicyResponse], error)
	// Updates a custom Domain policy as specified
	UpdateCustomDomainPolicy(context.Context, *connect_go.Request[admin.UpdateCustomDomainPolicyRequest]) (*connect_go.Response[admin.UpdateCustomDomainPolicyResponse], error)
	// Resets the org iam policy of the organisation to default
	// ZITADEL will fallback to the default policy defined by the ZITADEL administrators
	ResetCustomDomainPolicyToDefault(context.Context, *connect_go.Request[admin.ResetCustomDomainPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainPolicyToDefaultResponse], error)
	// Returns the label policy defined by the administrators of ZITADEL
	GetLabelPolicy(context.Context, *connect_go.Request[admin.GetLabelPolicyRequest]) (*connect_go.Response[admin.GetLabelPolicyResponse], error)
	// Returns the preview label policy defined by the administrators of ZITADEL
	GetPreviewLabelPolicy(context.Context, *connect_go.Request[admin.GetPreviewLabelPolicyRequest]) (*connect_go.Response[admin.GetPreviewLabelPolicyResponse], error)
	// Updates the default label policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLabelPolicy(context.Context, *connect_go.Request[admin.UpdateLabelPolicyRequest]) (*connect_go.Response[admin.UpdateLabelPolicyResponse], error)
	// Activates all changes of the label policy
	ActivateLabelPolicy(context.Context, *connect_go.Request[admin.ActivateLabelPolicyRequest]) (*connect_go.Response[admin.ActivateLabelPolicyResponse], error)
	// Removes the logo of the label policy
	RemoveLabelPolicyLogo(context.Context, *connect_go.Request[admin.RemoveLabelPolicyLogoRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoResponse], error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyLogoDark(context.Context, *connect_go.Request[admin.RemoveLabelPolicyLogoDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoDarkResponse], error)
	// Removes the icon of the label policy
	RemoveLabelPolicyIcon(context.Context, *connect_go.Request[admin.RemoveLabelPolicyIconRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconResponse], error)
	// Removes the logo dark of the label policy
	RemoveLabelPolicyIconDark(context.Context, *connect_go.Request[admin.RemoveLabelPolicyIconDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconDarkResponse], error)
	// Removes the font of the label policy
	RemoveLabelPolicyFont(context.Context, *connect_go.Request[admin.RemoveLabelPolicyFontRequest]) (*connect_go.Response[admin.RemoveLabelPolicyFontResponse], error)
	// Returns the login policy defined by the administrators of ZITADEL
	GetLoginPolicy(context.Context, *connect_go.Request[admin.GetLoginPolicyRequest]) (*connect_go.Response[admin.GetLoginPolicyResponse], error)
	// Updates the default login policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLoginPolicy(context.Context, *connect_go.Request[admin.UpdateLoginPolicyRequest]) (*connect_go.Response[admin.UpdateLoginPolicyResponse], error)
	// Returns the idps linked to the default login policy,
	// defined by the administrators of ZITADEL
	ListLoginPolicyIDPs(context.Context, *connect_go.Request[admin.ListLoginPolicyIDPsRequest]) (*connect_go.Response[admin.ListLoginPolicyIDPsResponse], error)
	// Adds the povided idp to the default login policy.
	// It impacts all organisations without a customised policy
	AddIDPToLoginPolicy(context.Context, *connect_go.Request[admin.AddIDPToLoginPolicyRequest]) (*connect_go.Response[admin.AddIDPToLoginPolicyResponse], error)
	// Removes the povided idp from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveIDPFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveIDPFromLoginPolicyResponse], error)
	// Returns the available second factors defined by the administrators of ZITADEL
	ListLoginPolicySecondFactors(context.Context, *connect_go.Request[admin.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicySecondFactorsResponse], error)
	// Adds a second factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddSecondFactorToLoginPolicy(context.Context, *connect_go.Request[admin.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddSecondFactorToLoginPolicyResponse], error)
	// Removes a second factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveSecondFactorFromLoginPolicyResponse], error)
	// Returns the available multi factors defined by the administrators of ZITADEL
	ListLoginPolicyMultiFactors(context.Context, *connect_go.Request[admin.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicyMultiFactorsResponse], error)
	// Adds a multi factor to the default login policy.
	// It impacts all organisations without a customised policy
	AddMultiFactorToLoginPolicy(context.Context, *connect_go.Request[admin.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddMultiFactorToLoginPolicyResponse], error)
	// Removes a multi factor from the default login policy.
	// It impacts all organisations without a customised policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveMultiFactorFromLoginPolicyResponse], error)
	// Returns the password complexity policy defined by the administrators of ZITADEL
	GetPasswordComplexityPolicy(context.Context, *connect_go.Request[admin.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[admin.GetPasswordComplexityPolicyResponse], error)
	// Updates the default password complexity policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordComplexityPolicy(context.Context, *connect_go.Request[admin.UpdatePasswordComplexityPolicyRequest]) (*connect_go.Response[admin.UpdatePasswordComplexityPolicyResponse], error)
	// Returns the password age policy defined by the administrators of ZITADEL
	GetPasswordAgePolicy(context.Context, *connect_go.Request[admin.GetPasswordAgePolicyRequest]) (*connect_go.Response[admin.GetPasswordAgePolicyResponse], error)
	// Updates the default password age policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdatePasswordAgePolicy(context.Context, *connect_go.Request[admin.UpdatePasswordAgePolicyRequest]) (*connect_go.Response[admin.UpdatePasswordAgePolicyResponse], error)
	// Returns the lockout policy defined by the administrators of ZITADEL
	GetLockoutPolicy(context.Context, *connect_go.Request[admin.GetLockoutPolicyRequest]) (*connect_go.Response[admin.GetLockoutPolicyResponse], error)
	// Updates the default lockout policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateLockoutPolicy(context.Context, *connect_go.Request[admin.UpdateLockoutPolicyRequest]) (*connect_go.Response[admin.UpdateLockoutPolicyResponse], error)
	// Returns the privacy policy defined by the administrators of ZITADEL
	GetPrivacyPolicy(context.Context, *connect_go.Request[admin.GetPrivacyPolicyRequest]) (*connect_go.Response[admin.GetPrivacyPolicyResponse], error)
	// Updates the default privacy policy of ZITADEL
	// it impacts all organisations without a customised policy
	// Variable {{.Lang}} can be set to have different links based on the language
	UpdatePrivacyPolicy(context.Context, *connect_go.Request[admin.UpdatePrivacyPolicyRequest]) (*connect_go.Response[admin.UpdatePrivacyPolicyResponse], error)
	// Add a default notification policy for ZITADEL
	// it impacts all organisations without a customised policy
	AddNotificationPolicy(context.Context, *connect_go.Request[admin.AddNotificationPolicyRequest]) (*connect_go.Response[admin.AddNotificationPolicyResponse], error)
	// Returns the notification policy defined by the administrators of ZITADEL
	GetNotificationPolicy(context.Context, *connect_go.Request[admin.GetNotificationPolicyRequest]) (*connect_go.Response[admin.GetNotificationPolicyResponse], error)
	// Updates the default notification policy of ZITADEL
	// it impacts all organisations without a customised policy
	UpdateNotificationPolicy(context.Context, *connect_go.Request[admin.UpdateNotificationPolicyRequest]) (*connect_go.Response[admin.UpdateNotificationPolicyResponse], error)
	// Returns the default text for initial message (translation file)
	GetDefaultInitMessageText(context.Context, *connect_go.Request[admin.GetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.GetDefaultInitMessageTextResponse], error)
	// Returns the custom text for initial message (overwritten in eventstore)
	GetCustomInitMessageText(context.Context, *connect_go.Request[admin.GetCustomInitMessageTextRequest]) (*connect_go.Response[admin.GetCustomInitMessageTextResponse], error)
	// Sets the default custom text for initial message
	// it impacts all organisations without customized initial message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultInitMessageText(context.Context, *connect_go.Request[admin.SetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.SetDefaultInitMessageTextResponse], error)
	// Removes the custom init message text of the system
	// The default text from the translation file will trigger after
	ResetCustomInitMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomInitMessageTextToDefaultResponse], error)
	// Returns the default text for password reset message (translation file)
	GetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordResetMessageTextResponse], error)
	// Returns the custom text for password reset message (overwritten in eventstore)
	GetCustomPasswordResetMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordResetMessageTextResponse], error)
	// Sets the default custom text for password reset message
	// it impacts all organisations without customized password reset message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordResetMessageTextResponse], error)
	// Removes the custom password reset message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordResetMessageTextToDefaultResponse], error)
	// Returns the default text for verify email message (translation files)
	GetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[admin.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyEmailMessageTextResponse], error)
	// Returns the custom text for verify email message (overwritten in eventstore)
	GetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[admin.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyEmailMessageTextResponse], error)
	// Sets the default custom text for verify email message
	// it impacts all organisations without customized verify email message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[admin.SetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyEmailMessageTextResponse], error)
	// Removes the custom verify email message text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyEmailMessageTextToDefaultResponse], error)
	// Returns the default text for verify phone message (translation file)
	GetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyPhoneMessageTextResponse], error)
	// Returns the custom text for verify phone message
	GetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyPhoneMessageTextResponse], error)
	// Sets the default custom text for verify phone message
	// it impacts all organisations without customized verify phone message text
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.SetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyPhoneMessageTextResponse], error)
	// Removes the custom verify phone text of the system
	// The default text from the translation file will trigger after
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error)
	// Returns the default text for domain claimed message (translation file)
	GetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[admin.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetDefaultDomainClaimedMessageTextResponse], error)
	// Returns the custom text for domain claimed message (overwritten in eventstore)
	GetCustomDomainClaimedMessageText(context.Context, *connect_go.Request[admin.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetCustomDomainClaimedMessageTextResponse], error)
	// Sets the default custom text for domain claimed message
	// it impacts all organisations without customized domain claimed message text
	// The Following Variables can be used:
	// {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[admin.SetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.SetDefaultDomainClaimedMessageTextResponse], error)
	// Removes the custom domain claimed message text of the system
	// The default text from the translation file will trigger after
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainClaimedMessageTextToDefaultResponse], error)
	// Returns the default text for passwordless registration message (translation file)
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordlessRegistrationMessageTextResponse], error)
	// Returns the custom text for passwordless registration message (overwritten in eventstore)
	GetCustomPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordlessRegistrationMessageTextResponse], error)
	// Sets the default custom text for passwordless registration message
	// it impacts all organisations without customized passwordless registration message text
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordlessRegistrationMessageTextResponse], error)
	// Removes the custom passwordless link message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error)
	// Returns the default text for password change message (translation file)
	GetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordChangeMessageTextResponse], error)
	// Returns the custom text for password change message (overwritten in eventstore)
	GetCustomPasswordChangeMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordChangeMessageTextResponse], error)
	// Sets the default custom text for password change message
	// it impacts all organisations without customized password change message text
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordChangeMessageTextResponse], error)
	// Removes the custom password change message text of the system
	// The default text from the translation file will trigger after
	ResetCustomPasswordChangeMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordChangeMessageTextToDefaultResponse], error)
	// Returns the default custom texts for login ui (translation file)
	GetDefaultLoginTexts(context.Context, *connect_go.Request[admin.GetDefaultLoginTextsRequest]) (*connect_go.Response[admin.GetDefaultLoginTextsResponse], error)
	// Returns the custom texts for login ui
	GetCustomLoginTexts(context.Context, *connect_go.Request[admin.GetCustomLoginTextsRequest]) (*connect_go.Response[admin.GetCustomLoginTextsResponse], error)
	// Sets the custom text for login ui
	// it impacts all organisations without customized login ui texts
	SetCustomLoginText(context.Context, *connect_go.Request[admin.SetCustomLoginTextsRequest]) (*connect_go.Response[admin.SetCustomLoginTextsResponse], error)
	// Removes the custom texts for login ui
	// it impacts all organisations without customized login ui texts
	// The default text form translation file will trigger after
	ResetCustomLoginTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[admin.ResetCustomLoginTextsToDefaultResponse], error)
	// Returns the IAM roles visible for the requested user
	ListIAMMemberRoles(context.Context, *connect_go.Request[admin.ListIAMMemberRolesRequest]) (*connect_go.Response[admin.ListIAMMemberRolesResponse], error)
	// Returns all members matching the request
	// all queries need to match (ANDed)
	ListIAMMembers(context.Context, *connect_go.Request[admin.ListIAMMembersRequest]) (*connect_go.Response[admin.ListIAMMembersResponse], error)
	// Adds a user to the membership list of ZITADEL with the given roles
	// undefined roles will be dropped
	AddIAMMember(context.Context, *connect_go.Request[admin.AddIAMMemberRequest]) (*connect_go.Response[admin.AddIAMMemberResponse], error)
	// Sets the given roles on a member.
	// The member has only roles provided by this call
	UpdateIAMMember(context.Context, *connect_go.Request[admin.UpdateIAMMemberRequest]) (*connect_go.Response[admin.UpdateIAMMemberResponse], error)
	// Removes the user from the membership list of ZITADEL
	RemoveIAMMember(context.Context, *connect_go.Request[admin.RemoveIAMMemberRequest]) (*connect_go.Response[admin.RemoveIAMMemberResponse], error)
	// Returns all stored read models of ZITADEL
	// views are used for search optimisation and optimise request latencies
	// they represent the delta of the event happend on the objects
	ListViews(context.Context, *connect_go.Request[admin.ListViewsRequest]) (*connect_go.Response[admin.ListViewsResponse], error)
	// Returns event descriptions which cannot be processed.
	// It's possible that some events need some retries.
	// For example if the SMTP-API wasn't able to send an email at the first time
	ListFailedEvents(context.Context, *connect_go.Request[admin.ListFailedEventsRequest]) (*connect_go.Response[admin.ListFailedEventsResponse], error)
	// Deletes the event from failed events view.
	// the event is not removed from the change stream
	// This call is usefull if the system was able to process the event later.
	// e.g. if the second try of sending an email was successful. the first try produced a
	// failed event. You can find out if it worked on the `failure_count`
	RemoveFailedEvent(context.Context, *connect_go.Request[admin.RemoveFailedEventRequest]) (*connect_go.Response[admin.RemoveFailedEventResponse], error)
	// Imports data into instance and creates different objects
	ImportData(context.Context, *connect_go.Request[admin.ImportDataRequest]) (*connect_go.Response[admin.ImportDataResponse], error)
	// Exports data from instance
	ExportData(context.Context, *connect_go.Request[admin.ExportDataRequest]) (*connect_go.Response[admin.ExportDataResponse], error)
	ListEventTypes(context.Context, *connect_go.Request[admin.ListEventTypesRequest]) (*connect_go.Response[admin.ListEventTypesResponse], error)
	ListEvents(context.Context, *connect_go.Request[admin.ListEventsRequest]) (*connect_go.Response[admin.ListEventsResponse], error)
	ListAggregateTypes(context.Context, *connect_go.Request[admin.ListAggregateTypesRequest]) (*connect_go.Response[admin.ListAggregateTypesResponse], error)
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/zitadel.admin.v1.AdminService/Healthz", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/Healthz",
		svc.Healthz,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetSupportedLanguages", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetSupportedLanguages",
		svc.GetSupportedLanguages,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultLanguage", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultLanguage",
		svc.SetDefaultLanguage,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultLanguage", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultLanguage",
		svc.GetDefaultLanguage,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetMyInstance", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetMyInstance",
		svc.GetMyInstance,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListInstanceDomains", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListInstanceDomains",
		svc.ListInstanceDomains,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListSecretGenerators", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListSecretGenerators",
		svc.ListSecretGenerators,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetSecretGenerator", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetSecretGenerator",
		svc.GetSecretGenerator,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateSecretGenerator", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateSecretGenerator",
		svc.UpdateSecretGenerator,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetSMTPConfig", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetSMTPConfig",
		svc.GetSMTPConfig,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddSMTPConfig", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddSMTPConfig",
		svc.AddSMTPConfig,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateSMTPConfig", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateSMTPConfig",
		svc.UpdateSMTPConfig,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateSMTPConfigPassword", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateSMTPConfigPassword",
		svc.UpdateSMTPConfigPassword,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveSMTPConfig", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveSMTPConfig",
		svc.RemoveSMTPConfig,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListSMSProviders", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListSMSProviders",
		svc.ListSMSProviders,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetSMSProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetSMSProvider",
		svc.GetSMSProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddSMSProviderTwilio", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddSMSProviderTwilio",
		svc.AddSMSProviderTwilio,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilio", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilio",
		svc.UpdateSMSProviderTwilio,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilioToken", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateSMSProviderTwilioToken",
		svc.UpdateSMSProviderTwilioToken,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ActivateSMSProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ActivateSMSProvider",
		svc.ActivateSMSProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/DeactivateSMSProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/DeactivateSMSProvider",
		svc.DeactivateSMSProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveSMSProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveSMSProvider",
		svc.RemoveSMSProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetOIDCSettings", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetOIDCSettings",
		svc.GetOIDCSettings,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddOIDCSettings", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddOIDCSettings",
		svc.AddOIDCSettings,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateOIDCSettings", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateOIDCSettings",
		svc.UpdateOIDCSettings,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetFileSystemNotificationProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetFileSystemNotificationProvider",
		svc.GetFileSystemNotificationProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetLogNotificationProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetLogNotificationProvider",
		svc.GetLogNotificationProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetSecurityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetSecurityPolicy",
		svc.GetSecurityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetSecurityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetSecurityPolicy",
		svc.SetSecurityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetOrgByID", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetOrgByID",
		svc.GetOrgByID,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/IsOrgUnique", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/IsOrgUnique",
		svc.IsOrgUnique,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultOrg", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultOrg",
		svc.SetDefaultOrg,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultOrg", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultOrg",
		svc.GetDefaultOrg,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListOrgs", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListOrgs",
		svc.ListOrgs,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetUpOrg", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetUpOrg",
		svc.SetUpOrg,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveOrg", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveOrg",
		svc.RemoveOrg,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetIDPByID", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetIDPByID",
		svc.GetIDPByID,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListIDPs", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListIDPs",
		svc.ListIDPs,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddOIDCIDP", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddOIDCIDP",
		svc.AddOIDCIDP,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddJWTIDP", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddJWTIDP",
		svc.AddJWTIDP,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateIDP", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateIDP",
		svc.UpdateIDP,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/DeactivateIDP", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/DeactivateIDP",
		svc.DeactivateIDP,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ReactivateIDP", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ReactivateIDP",
		svc.ReactivateIDP,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveIDP", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveIDP",
		svc.RemoveIDP,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateIDPOIDCConfig",
		svc.UpdateIDPOIDCConfig,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateIDPJWTConfig", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateIDPJWTConfig",
		svc.UpdateIDPJWTConfig,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListProviders", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListProviders",
		svc.ListProviders,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetProviderByID", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetProviderByID",
		svc.GetProviderByID,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddLDAPProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddLDAPProvider",
		svc.AddLDAPProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateLDAPProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateLDAPProvider",
		svc.UpdateLDAPProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/DeleteProvider", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/DeleteProvider",
		svc.DeleteProvider,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetOrgIAMPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetOrgIAMPolicy",
		svc.GetOrgIAMPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateOrgIAMPolicy",
		svc.UpdateOrgIAMPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomOrgIAMPolicy",
		svc.GetCustomOrgIAMPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddCustomOrgIAMPolicy",
		svc.AddCustomOrgIAMPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateCustomOrgIAMPolicy",
		svc.UpdateCustomOrgIAMPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomOrgIAMPolicyToDefault",
		svc.ResetCustomOrgIAMPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDomainPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDomainPolicy",
		svc.GetDomainPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateDomainPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateDomainPolicy",
		svc.UpdateDomainPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomDomainPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomDomainPolicy",
		svc.GetCustomDomainPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddCustomDomainPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddCustomDomainPolicy",
		svc.AddCustomDomainPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateCustomDomainPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateCustomDomainPolicy",
		svc.UpdateCustomDomainPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomDomainPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomDomainPolicyToDefault",
		svc.ResetCustomDomainPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetLabelPolicy",
		svc.GetLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetPreviewLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetPreviewLabelPolicy",
		svc.GetPreviewLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateLabelPolicy",
		svc.UpdateLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ActivateLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ActivateLabelPolicy",
		svc.ActivateLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogo", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogo",
		svc.RemoveLabelPolicyLogo,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogoDark", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveLabelPolicyLogoDark",
		svc.RemoveLabelPolicyLogoDark,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveLabelPolicyIcon", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveLabelPolicyIcon",
		svc.RemoveLabelPolicyIcon,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveLabelPolicyIconDark", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveLabelPolicyIconDark",
		svc.RemoveLabelPolicyIconDark,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveLabelPolicyFont", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveLabelPolicyFont",
		svc.RemoveLabelPolicyFont,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetLoginPolicy",
		svc.GetLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateLoginPolicy",
		svc.UpdateLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListLoginPolicyIDPs",
		svc.ListLoginPolicyIDPs,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddIDPToLoginPolicy",
		svc.AddIDPToLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveIDPFromLoginPolicy",
		svc.RemoveIDPFromLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListLoginPolicySecondFactors",
		svc.ListLoginPolicySecondFactors,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddSecondFactorToLoginPolicy",
		svc.AddSecondFactorToLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveSecondFactorFromLoginPolicy",
		svc.RemoveSecondFactorFromLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListLoginPolicyMultiFactors",
		svc.ListLoginPolicyMultiFactors,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddMultiFactorToLoginPolicy",
		svc.AddMultiFactorToLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveMultiFactorFromLoginPolicy",
		svc.RemoveMultiFactorFromLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetPasswordComplexityPolicy",
		svc.GetPasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdatePasswordComplexityPolicy",
		svc.UpdatePasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetPasswordAgePolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetPasswordAgePolicy",
		svc.GetPasswordAgePolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdatePasswordAgePolicy",
		svc.UpdatePasswordAgePolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetLockoutPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetLockoutPolicy",
		svc.GetLockoutPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateLockoutPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateLockoutPolicy",
		svc.UpdateLockoutPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetPrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetPrivacyPolicy",
		svc.GetPrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdatePrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdatePrivacyPolicy",
		svc.UpdatePrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddNotificationPolicy",
		svc.AddNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetNotificationPolicy",
		svc.GetNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateNotificationPolicy",
		svc.UpdateNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultInitMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultInitMessageText",
		svc.GetDefaultInitMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomInitMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomInitMessageText",
		svc.GetCustomInitMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultInitMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultInitMessageText",
		svc.SetDefaultInitMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomInitMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomInitMessageTextToDefault",
		svc.ResetCustomInitMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultPasswordResetMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultPasswordResetMessageText",
		svc.GetDefaultPasswordResetMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomPasswordResetMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomPasswordResetMessageText",
		svc.GetCustomPasswordResetMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultPasswordResetMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultPasswordResetMessageText",
		svc.SetDefaultPasswordResetMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomPasswordResetMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomPasswordResetMessageTextToDefault",
		svc.ResetCustomPasswordResetMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultVerifyEmailMessageText",
		svc.GetDefaultVerifyEmailMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomVerifyEmailMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomVerifyEmailMessageText",
		svc.GetCustomVerifyEmailMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultVerifyEmailMessageText",
		svc.SetDefaultVerifyEmailMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomVerifyEmailMessageTextToDefault",
		svc.ResetCustomVerifyEmailMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultVerifyPhoneMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultVerifyPhoneMessageText",
		svc.GetDefaultVerifyPhoneMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomVerifyPhoneMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomVerifyPhoneMessageText",
		svc.GetCustomVerifyPhoneMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultVerifyPhoneMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultVerifyPhoneMessageText",
		svc.SetDefaultVerifyPhoneMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomVerifyPhoneMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomVerifyPhoneMessageTextToDefault",
		svc.ResetCustomVerifyPhoneMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultDomainClaimedMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultDomainClaimedMessageText",
		svc.GetDefaultDomainClaimedMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomDomainClaimedMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomDomainClaimedMessageText",
		svc.GetCustomDomainClaimedMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultDomainClaimedMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultDomainClaimedMessageText",
		svc.SetDefaultDomainClaimedMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomDomainClaimedMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomDomainClaimedMessageTextToDefault",
		svc.ResetCustomDomainClaimedMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultPasswordlessRegistrationMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultPasswordlessRegistrationMessageText",
		svc.GetDefaultPasswordlessRegistrationMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomPasswordlessRegistrationMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomPasswordlessRegistrationMessageText",
		svc.GetCustomPasswordlessRegistrationMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultPasswordlessRegistrationMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultPasswordlessRegistrationMessageText",
		svc.SetDefaultPasswordlessRegistrationMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomPasswordlessRegistrationMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomPasswordlessRegistrationMessageTextToDefault",
		svc.ResetCustomPasswordlessRegistrationMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultPasswordChangeMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultPasswordChangeMessageText",
		svc.GetDefaultPasswordChangeMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomPasswordChangeMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomPasswordChangeMessageText",
		svc.GetCustomPasswordChangeMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetDefaultPasswordChangeMessageText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetDefaultPasswordChangeMessageText",
		svc.SetDefaultPasswordChangeMessageText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomPasswordChangeMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomPasswordChangeMessageTextToDefault",
		svc.ResetCustomPasswordChangeMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetDefaultLoginTexts", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetDefaultLoginTexts",
		svc.GetDefaultLoginTexts,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/GetCustomLoginTexts", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/GetCustomLoginTexts",
		svc.GetCustomLoginTexts,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/SetCustomLoginText", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/SetCustomLoginText",
		svc.SetCustomLoginText,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ResetCustomLoginTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ResetCustomLoginTextToDefault",
		svc.ResetCustomLoginTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListIAMMemberRoles", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListIAMMemberRoles",
		svc.ListIAMMemberRoles,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListIAMMembers", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListIAMMembers",
		svc.ListIAMMembers,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/AddIAMMember", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/AddIAMMember",
		svc.AddIAMMember,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/UpdateIAMMember", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/UpdateIAMMember",
		svc.UpdateIAMMember,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveIAMMember", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveIAMMember",
		svc.RemoveIAMMember,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListViews", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListViews",
		svc.ListViews,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListFailedEvents", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListFailedEvents",
		svc.ListFailedEvents,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/RemoveFailedEvent", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/RemoveFailedEvent",
		svc.RemoveFailedEvent,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ImportData", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ImportData",
		svc.ImportData,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ExportData", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ExportData",
		svc.ExportData,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListEventTypes", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListEventTypes",
		svc.ListEventTypes,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListEvents", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListEvents",
		svc.ListEvents,
		opts...,
	))
	mux.Handle("/zitadel.admin.v1.AdminService/ListAggregateTypes", connect_go.NewUnaryHandler(
		"/zitadel.admin.v1.AdminService/ListAggregateTypes",
		svc.ListAggregateTypes,
		opts...,
	))
	return "/zitadel.admin.v1.AdminService/", mux
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) Healthz(context.Context, *connect_go.Request[admin.HealthzRequest]) (*connect_go.Response[admin.HealthzResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.Healthz is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSupportedLanguages(context.Context, *connect_go.Request[admin.GetSupportedLanguagesRequest]) (*connect_go.Response[admin.GetSupportedLanguagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetSupportedLanguages is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultLanguage(context.Context, *connect_go.Request[admin.SetDefaultLanguageRequest]) (*connect_go.Response[admin.SetDefaultLanguageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultLanguage is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultLanguage(context.Context, *connect_go.Request[admin.GetDefaultLanguageRequest]) (*connect_go.Response[admin.GetDefaultLanguageResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultLanguage is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetMyInstance(context.Context, *connect_go.Request[admin.GetMyInstanceRequest]) (*connect_go.Response[admin.GetMyInstanceResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetMyInstance is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListInstanceDomains(context.Context, *connect_go.Request[admin.ListInstanceDomainsRequest]) (*connect_go.Response[admin.ListInstanceDomainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListInstanceDomains is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListSecretGenerators(context.Context, *connect_go.Request[admin.ListSecretGeneratorsRequest]) (*connect_go.Response[admin.ListSecretGeneratorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListSecretGenerators is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSecretGenerator(context.Context, *connect_go.Request[admin.GetSecretGeneratorRequest]) (*connect_go.Response[admin.GetSecretGeneratorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetSecretGenerator is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateSecretGenerator(context.Context, *connect_go.Request[admin.UpdateSecretGeneratorRequest]) (*connect_go.Response[admin.UpdateSecretGeneratorResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateSecretGenerator is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSMTPConfig(context.Context, *connect_go.Request[admin.GetSMTPConfigRequest]) (*connect_go.Response[admin.GetSMTPConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetSMTPConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddSMTPConfig(context.Context, *connect_go.Request[admin.AddSMTPConfigRequest]) (*connect_go.Response[admin.AddSMTPConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddSMTPConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateSMTPConfig(context.Context, *connect_go.Request[admin.UpdateSMTPConfigRequest]) (*connect_go.Response[admin.UpdateSMTPConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateSMTPConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateSMTPConfigPassword(context.Context, *connect_go.Request[admin.UpdateSMTPConfigPasswordRequest]) (*connect_go.Response[admin.UpdateSMTPConfigPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateSMTPConfigPassword is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveSMTPConfig(context.Context, *connect_go.Request[admin.RemoveSMTPConfigRequest]) (*connect_go.Response[admin.RemoveSMTPConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveSMTPConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListSMSProviders(context.Context, *connect_go.Request[admin.ListSMSProvidersRequest]) (*connect_go.Response[admin.ListSMSProvidersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListSMSProviders is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSMSProvider(context.Context, *connect_go.Request[admin.GetSMSProviderRequest]) (*connect_go.Response[admin.GetSMSProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetSMSProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddSMSProviderTwilio(context.Context, *connect_go.Request[admin.AddSMSProviderTwilioRequest]) (*connect_go.Response[admin.AddSMSProviderTwilioResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddSMSProviderTwilio is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateSMSProviderTwilio(context.Context, *connect_go.Request[admin.UpdateSMSProviderTwilioRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateSMSProviderTwilio is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateSMSProviderTwilioToken(context.Context, *connect_go.Request[admin.UpdateSMSProviderTwilioTokenRequest]) (*connect_go.Response[admin.UpdateSMSProviderTwilioTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateSMSProviderTwilioToken is not implemented"))
}

func (UnimplementedAdminServiceHandler) ActivateSMSProvider(context.Context, *connect_go.Request[admin.ActivateSMSProviderRequest]) (*connect_go.Response[admin.ActivateSMSProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ActivateSMSProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeactivateSMSProvider(context.Context, *connect_go.Request[admin.DeactivateSMSProviderRequest]) (*connect_go.Response[admin.DeactivateSMSProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.DeactivateSMSProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveSMSProvider(context.Context, *connect_go.Request[admin.RemoveSMSProviderRequest]) (*connect_go.Response[admin.RemoveSMSProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveSMSProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetOIDCSettings(context.Context, *connect_go.Request[admin.GetOIDCSettingsRequest]) (*connect_go.Response[admin.GetOIDCSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetOIDCSettings is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddOIDCSettings(context.Context, *connect_go.Request[admin.AddOIDCSettingsRequest]) (*connect_go.Response[admin.AddOIDCSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddOIDCSettings is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateOIDCSettings(context.Context, *connect_go.Request[admin.UpdateOIDCSettingsRequest]) (*connect_go.Response[admin.UpdateOIDCSettingsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateOIDCSettings is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetFileSystemNotificationProvider(context.Context, *connect_go.Request[admin.GetFileSystemNotificationProviderRequest]) (*connect_go.Response[admin.GetFileSystemNotificationProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetFileSystemNotificationProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetLogNotificationProvider(context.Context, *connect_go.Request[admin.GetLogNotificationProviderRequest]) (*connect_go.Response[admin.GetLogNotificationProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetLogNotificationProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetSecurityPolicy(context.Context, *connect_go.Request[admin.GetSecurityPolicyRequest]) (*connect_go.Response[admin.GetSecurityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetSecurityPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetSecurityPolicy(context.Context, *connect_go.Request[admin.SetSecurityPolicyRequest]) (*connect_go.Response[admin.SetSecurityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetSecurityPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetOrgByID(context.Context, *connect_go.Request[admin.GetOrgByIDRequest]) (*connect_go.Response[admin.GetOrgByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetOrgByID is not implemented"))
}

func (UnimplementedAdminServiceHandler) IsOrgUnique(context.Context, *connect_go.Request[admin.IsOrgUniqueRequest]) (*connect_go.Response[admin.IsOrgUniqueResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.IsOrgUnique is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultOrg(context.Context, *connect_go.Request[admin.SetDefaultOrgRequest]) (*connect_go.Response[admin.SetDefaultOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultOrg is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultOrg(context.Context, *connect_go.Request[admin.GetDefaultOrgRequest]) (*connect_go.Response[admin.GetDefaultOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultOrg is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListOrgs(context.Context, *connect_go.Request[admin.ListOrgsRequest]) (*connect_go.Response[admin.ListOrgsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListOrgs is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetUpOrg(context.Context, *connect_go.Request[admin.SetUpOrgRequest]) (*connect_go.Response[admin.SetUpOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetUpOrg is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveOrg(context.Context, *connect_go.Request[admin.RemoveOrgRequest]) (*connect_go.Response[admin.RemoveOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveOrg is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetIDPByID(context.Context, *connect_go.Request[admin.GetIDPByIDRequest]) (*connect_go.Response[admin.GetIDPByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetIDPByID is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListIDPs(context.Context, *connect_go.Request[admin.ListIDPsRequest]) (*connect_go.Response[admin.ListIDPsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListIDPs is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddOIDCIDP(context.Context, *connect_go.Request[admin.AddOIDCIDPRequest]) (*connect_go.Response[admin.AddOIDCIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddOIDCIDP is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddJWTIDP(context.Context, *connect_go.Request[admin.AddJWTIDPRequest]) (*connect_go.Response[admin.AddJWTIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddJWTIDP is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateIDP(context.Context, *connect_go.Request[admin.UpdateIDPRequest]) (*connect_go.Response[admin.UpdateIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateIDP is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeactivateIDP(context.Context, *connect_go.Request[admin.DeactivateIDPRequest]) (*connect_go.Response[admin.DeactivateIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.DeactivateIDP is not implemented"))
}

func (UnimplementedAdminServiceHandler) ReactivateIDP(context.Context, *connect_go.Request[admin.ReactivateIDPRequest]) (*connect_go.Response[admin.ReactivateIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ReactivateIDP is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveIDP(context.Context, *connect_go.Request[admin.RemoveIDPRequest]) (*connect_go.Response[admin.RemoveIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveIDP is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateIDPOIDCConfig(context.Context, *connect_go.Request[admin.UpdateIDPOIDCConfigRequest]) (*connect_go.Response[admin.UpdateIDPOIDCConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateIDPOIDCConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateIDPJWTConfig(context.Context, *connect_go.Request[admin.UpdateIDPJWTConfigRequest]) (*connect_go.Response[admin.UpdateIDPJWTConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateIDPJWTConfig is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListProviders(context.Context, *connect_go.Request[admin.ListProvidersRequest]) (*connect_go.Response[admin.ListProvidersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListProviders is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetProviderByID(context.Context, *connect_go.Request[admin.GetProviderByIDRequest]) (*connect_go.Response[admin.GetProviderByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetProviderByID is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddLDAPProvider(context.Context, *connect_go.Request[admin.AddLDAPProviderRequest]) (*connect_go.Response[admin.AddLDAPProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddLDAPProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateLDAPProvider(context.Context, *connect_go.Request[admin.UpdateLDAPProviderRequest]) (*connect_go.Response[admin.UpdateLDAPProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateLDAPProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) DeleteProvider(context.Context, *connect_go.Request[admin.DeleteProviderRequest]) (*connect_go.Response[admin.DeleteProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.DeleteProvider is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetOrgIAMPolicy(context.Context, *connect_go.Request[admin.GetOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetOrgIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetOrgIAMPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateOrgIAMPolicy(context.Context, *connect_go.Request[admin.UpdateOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateOrgIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateOrgIAMPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.GetCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.GetCustomOrgIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomOrgIAMPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.AddCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.AddCustomOrgIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddCustomOrgIAMPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateCustomOrgIAMPolicy(context.Context, *connect_go.Request[admin.UpdateCustomOrgIAMPolicyRequest]) (*connect_go.Response[admin.UpdateCustomOrgIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateCustomOrgIAMPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomOrgIAMPolicyToDefault(context.Context, *connect_go.Request[admin.ResetCustomOrgIAMPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomOrgIAMPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomOrgIAMPolicyToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDomainPolicy(context.Context, *connect_go.Request[admin.GetDomainPolicyRequest]) (*connect_go.Response[admin.GetDomainPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDomainPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateDomainPolicy(context.Context, *connect_go.Request[admin.UpdateDomainPolicyRequest]) (*connect_go.Response[admin.UpdateDomainPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateDomainPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomDomainPolicy(context.Context, *connect_go.Request[admin.GetCustomDomainPolicyRequest]) (*connect_go.Response[admin.GetCustomDomainPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomDomainPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddCustomDomainPolicy(context.Context, *connect_go.Request[admin.AddCustomDomainPolicyRequest]) (*connect_go.Response[admin.AddCustomDomainPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddCustomDomainPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateCustomDomainPolicy(context.Context, *connect_go.Request[admin.UpdateCustomDomainPolicyRequest]) (*connect_go.Response[admin.UpdateCustomDomainPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateCustomDomainPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomDomainPolicyToDefault(context.Context, *connect_go.Request[admin.ResetCustomDomainPolicyToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomDomainPolicyToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetLabelPolicy(context.Context, *connect_go.Request[admin.GetLabelPolicyRequest]) (*connect_go.Response[admin.GetLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetLabelPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetPreviewLabelPolicy(context.Context, *connect_go.Request[admin.GetPreviewLabelPolicyRequest]) (*connect_go.Response[admin.GetPreviewLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetPreviewLabelPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateLabelPolicy(context.Context, *connect_go.Request[admin.UpdateLabelPolicyRequest]) (*connect_go.Response[admin.UpdateLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateLabelPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ActivateLabelPolicy(context.Context, *connect_go.Request[admin.ActivateLabelPolicyRequest]) (*connect_go.Response[admin.ActivateLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ActivateLabelPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveLabelPolicyLogo(context.Context, *connect_go.Request[admin.RemoveLabelPolicyLogoRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveLabelPolicyLogo is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveLabelPolicyLogoDark(context.Context, *connect_go.Request[admin.RemoveLabelPolicyLogoDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyLogoDarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveLabelPolicyLogoDark is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveLabelPolicyIcon(context.Context, *connect_go.Request[admin.RemoveLabelPolicyIconRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveLabelPolicyIcon is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveLabelPolicyIconDark(context.Context, *connect_go.Request[admin.RemoveLabelPolicyIconDarkRequest]) (*connect_go.Response[admin.RemoveLabelPolicyIconDarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveLabelPolicyIconDark is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveLabelPolicyFont(context.Context, *connect_go.Request[admin.RemoveLabelPolicyFontRequest]) (*connect_go.Response[admin.RemoveLabelPolicyFontResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveLabelPolicyFont is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetLoginPolicy(context.Context, *connect_go.Request[admin.GetLoginPolicyRequest]) (*connect_go.Response[admin.GetLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateLoginPolicy(context.Context, *connect_go.Request[admin.UpdateLoginPolicyRequest]) (*connect_go.Response[admin.UpdateLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListLoginPolicyIDPs(context.Context, *connect_go.Request[admin.ListLoginPolicyIDPsRequest]) (*connect_go.Response[admin.ListLoginPolicyIDPsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListLoginPolicyIDPs is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddIDPToLoginPolicy(context.Context, *connect_go.Request[admin.AddIDPToLoginPolicyRequest]) (*connect_go.Response[admin.AddIDPToLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddIDPToLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveIDPFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveIDPFromLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveIDPFromLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListLoginPolicySecondFactors(context.Context, *connect_go.Request[admin.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicySecondFactorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListLoginPolicySecondFactors is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddSecondFactorToLoginPolicy(context.Context, *connect_go.Request[admin.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddSecondFactorToLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddSecondFactorToLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveSecondFactorFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveSecondFactorFromLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveSecondFactorFromLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListLoginPolicyMultiFactors(context.Context, *connect_go.Request[admin.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[admin.ListLoginPolicyMultiFactorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListLoginPolicyMultiFactors is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddMultiFactorToLoginPolicy(context.Context, *connect_go.Request[admin.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[admin.AddMultiFactorToLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddMultiFactorToLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveMultiFactorFromLoginPolicy(context.Context, *connect_go.Request[admin.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[admin.RemoveMultiFactorFromLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveMultiFactorFromLoginPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetPasswordComplexityPolicy(context.Context, *connect_go.Request[admin.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[admin.GetPasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetPasswordComplexityPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdatePasswordComplexityPolicy(context.Context, *connect_go.Request[admin.UpdatePasswordComplexityPolicyRequest]) (*connect_go.Response[admin.UpdatePasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdatePasswordComplexityPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetPasswordAgePolicy(context.Context, *connect_go.Request[admin.GetPasswordAgePolicyRequest]) (*connect_go.Response[admin.GetPasswordAgePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetPasswordAgePolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdatePasswordAgePolicy(context.Context, *connect_go.Request[admin.UpdatePasswordAgePolicyRequest]) (*connect_go.Response[admin.UpdatePasswordAgePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdatePasswordAgePolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetLockoutPolicy(context.Context, *connect_go.Request[admin.GetLockoutPolicyRequest]) (*connect_go.Response[admin.GetLockoutPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetLockoutPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateLockoutPolicy(context.Context, *connect_go.Request[admin.UpdateLockoutPolicyRequest]) (*connect_go.Response[admin.UpdateLockoutPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateLockoutPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetPrivacyPolicy(context.Context, *connect_go.Request[admin.GetPrivacyPolicyRequest]) (*connect_go.Response[admin.GetPrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetPrivacyPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdatePrivacyPolicy(context.Context, *connect_go.Request[admin.UpdatePrivacyPolicyRequest]) (*connect_go.Response[admin.UpdatePrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdatePrivacyPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddNotificationPolicy(context.Context, *connect_go.Request[admin.AddNotificationPolicyRequest]) (*connect_go.Response[admin.AddNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddNotificationPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetNotificationPolicy(context.Context, *connect_go.Request[admin.GetNotificationPolicyRequest]) (*connect_go.Response[admin.GetNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetNotificationPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateNotificationPolicy(context.Context, *connect_go.Request[admin.UpdateNotificationPolicyRequest]) (*connect_go.Response[admin.UpdateNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateNotificationPolicy is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultInitMessageText(context.Context, *connect_go.Request[admin.GetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.GetDefaultInitMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultInitMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomInitMessageText(context.Context, *connect_go.Request[admin.GetCustomInitMessageTextRequest]) (*connect_go.Response[admin.GetCustomInitMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomInitMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultInitMessageText(context.Context, *connect_go.Request[admin.SetDefaultInitMessageTextRequest]) (*connect_go.Response[admin.SetDefaultInitMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultInitMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomInitMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomInitMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomInitMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordResetMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultPasswordResetMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomPasswordResetMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordResetMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomPasswordResetMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordResetMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultPasswordResetMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomPasswordResetMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordResetMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomPasswordResetMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[admin.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyEmailMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultVerifyEmailMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[admin.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyEmailMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomVerifyEmailMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[admin.SetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyEmailMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultVerifyEmailMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomVerifyEmailMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyEmailMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomVerifyEmailMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetDefaultVerifyPhoneMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultVerifyPhoneMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.GetCustomVerifyPhoneMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomVerifyPhoneMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[admin.SetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[admin.SetDefaultVerifyPhoneMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultVerifyPhoneMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomVerifyPhoneMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[admin.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetDefaultDomainClaimedMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultDomainClaimedMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomDomainClaimedMessageText(context.Context, *connect_go.Request[admin.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.GetCustomDomainClaimedMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomDomainClaimedMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[admin.SetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[admin.SetDefaultDomainClaimedMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultDomainClaimedMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomDomainClaimedMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomDomainClaimedMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomDomainClaimedMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordlessRegistrationMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultPasswordlessRegistrationMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordlessRegistrationMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomPasswordlessRegistrationMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordlessRegistrationMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultPasswordlessRegistrationMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomPasswordlessRegistrationMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[admin.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetDefaultPasswordChangeMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultPasswordChangeMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomPasswordChangeMessageText(context.Context, *connect_go.Request[admin.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.GetCustomPasswordChangeMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomPasswordChangeMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[admin.SetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[admin.SetDefaultPasswordChangeMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetDefaultPasswordChangeMessageText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomPasswordChangeMessageTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[admin.ResetCustomPasswordChangeMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomPasswordChangeMessageTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetDefaultLoginTexts(context.Context, *connect_go.Request[admin.GetDefaultLoginTextsRequest]) (*connect_go.Response[admin.GetDefaultLoginTextsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetDefaultLoginTexts is not implemented"))
}

func (UnimplementedAdminServiceHandler) GetCustomLoginTexts(context.Context, *connect_go.Request[admin.GetCustomLoginTextsRequest]) (*connect_go.Response[admin.GetCustomLoginTextsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.GetCustomLoginTexts is not implemented"))
}

func (UnimplementedAdminServiceHandler) SetCustomLoginText(context.Context, *connect_go.Request[admin.SetCustomLoginTextsRequest]) (*connect_go.Response[admin.SetCustomLoginTextsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.SetCustomLoginText is not implemented"))
}

func (UnimplementedAdminServiceHandler) ResetCustomLoginTextToDefault(context.Context, *connect_go.Request[admin.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[admin.ResetCustomLoginTextsToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ResetCustomLoginTextToDefault is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListIAMMemberRoles(context.Context, *connect_go.Request[admin.ListIAMMemberRolesRequest]) (*connect_go.Response[admin.ListIAMMemberRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListIAMMemberRoles is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListIAMMembers(context.Context, *connect_go.Request[admin.ListIAMMembersRequest]) (*connect_go.Response[admin.ListIAMMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListIAMMembers is not implemented"))
}

func (UnimplementedAdminServiceHandler) AddIAMMember(context.Context, *connect_go.Request[admin.AddIAMMemberRequest]) (*connect_go.Response[admin.AddIAMMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.AddIAMMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) UpdateIAMMember(context.Context, *connect_go.Request[admin.UpdateIAMMemberRequest]) (*connect_go.Response[admin.UpdateIAMMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.UpdateIAMMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveIAMMember(context.Context, *connect_go.Request[admin.RemoveIAMMemberRequest]) (*connect_go.Response[admin.RemoveIAMMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveIAMMember is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListViews(context.Context, *connect_go.Request[admin.ListViewsRequest]) (*connect_go.Response[admin.ListViewsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListViews is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListFailedEvents(context.Context, *connect_go.Request[admin.ListFailedEventsRequest]) (*connect_go.Response[admin.ListFailedEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListFailedEvents is not implemented"))
}

func (UnimplementedAdminServiceHandler) RemoveFailedEvent(context.Context, *connect_go.Request[admin.RemoveFailedEventRequest]) (*connect_go.Response[admin.RemoveFailedEventResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.RemoveFailedEvent is not implemented"))
}

func (UnimplementedAdminServiceHandler) ImportData(context.Context, *connect_go.Request[admin.ImportDataRequest]) (*connect_go.Response[admin.ImportDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ImportData is not implemented"))
}

func (UnimplementedAdminServiceHandler) ExportData(context.Context, *connect_go.Request[admin.ExportDataRequest]) (*connect_go.Response[admin.ExportDataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ExportData is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListEventTypes(context.Context, *connect_go.Request[admin.ListEventTypesRequest]) (*connect_go.Response[admin.ListEventTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListEventTypes is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListEvents(context.Context, *connect_go.Request[admin.ListEventsRequest]) (*connect_go.Response[admin.ListEventsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListEvents is not implemented"))
}

func (UnimplementedAdminServiceHandler) ListAggregateTypes(context.Context, *connect_go.Request[admin.ListAggregateTypesRequest]) (*connect_go.Response[admin.ListAggregateTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.admin.v1.AdminService.ListAggregateTypes is not implemented"))
}
