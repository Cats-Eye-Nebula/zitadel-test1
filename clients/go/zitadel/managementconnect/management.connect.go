// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: zitadel/management.proto

package managementconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	management "github.com/zitadel/zitadel/pkg/grpc/management"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "zitadel.management.v1.ManagementService"
)

// ManagementServiceClient is a client for the zitadel.management.v1.ManagementService service.
type ManagementServiceClient interface {
	Healthz(context.Context, *connect_go.Request[management.HealthzRequest]) (*connect_go.Response[management.HealthzResponse], error)
	GetOIDCInformation(context.Context, *connect_go.Request[management.GetOIDCInformationRequest]) (*connect_go.Response[management.GetOIDCInformationResponse], error)
	// Returns some needed settings of the IAM (Global Organisation ID, Zitadel Project ID)
	GetIAM(context.Context, *connect_go.Request[management.GetIAMRequest]) (*connect_go.Response[management.GetIAMResponse], error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *connect_go.Request[management.GetSupportedLanguagesRequest]) (*connect_go.Response[management.GetSupportedLanguagesResponse], error)
	// Returns the requested full blown user (human or machine)
	GetUserByID(context.Context, *connect_go.Request[management.GetUserByIDRequest]) (*connect_go.Response[management.GetUserByIDResponse], error)
	// Searches a user over all organisations
	// the login name has to match exactly
	GetUserByLoginNameGlobal(context.Context, *connect_go.Request[management.GetUserByLoginNameGlobalRequest]) (*connect_go.Response[management.GetUserByLoginNameGlobalResponse], error)
	// Return the users matching the query
	// Limit should always be set, there is a default limit set by the service
	ListUsers(context.Context, *connect_go.Request[management.ListUsersRequest]) (*connect_go.Response[management.ListUsersResponse], error)
	// Returns the history of the user (each event)
	// Limit should always be set, there is a default limit set by the service
	ListUserChanges(context.Context, *connect_go.Request[management.ListUserChangesRequest]) (*connect_go.Response[management.ListUserChangesResponse], error)
	// Returns if a user with the searched email or username is unique
	IsUserUnique(context.Context, *connect_go.Request[management.IsUserUniqueRequest]) (*connect_go.Response[management.IsUserUniqueResponse], error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user has to change on the next login
	AddHumanUser(context.Context, *connect_go.Request[management.AddHumanUserRequest]) (*connect_go.Response[management.AddHumanUserResponse], error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user doesn't have to change on the next login
	ImportHumanUser(context.Context, *connect_go.Request[management.ImportHumanUserRequest]) (*connect_go.Response[management.ImportHumanUserResponse], error)
	// Create a user of the type machine
	AddMachineUser(context.Context, *connect_go.Request[management.AddMachineUserRequest]) (*connect_go.Response[management.AddMachineUserResponse], error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already deactivated
	DeactivateUser(context.Context, *connect_go.Request[management.DeactivateUserRequest]) (*connect_go.Response[management.DeactivateUserResponse], error)
	// Changes the user state to active
	// returns an error if user state is not deactivated
	ReactivateUser(context.Context, *connect_go.Request[management.ReactivateUserRequest]) (*connect_go.Response[management.ReactivateUserResponse], error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already locked
	LockUser(context.Context, *connect_go.Request[management.LockUserRequest]) (*connect_go.Response[management.LockUserResponse], error)
	// Changes the user state to active
	// returns an error if user state is not locked
	UnlockUser(context.Context, *connect_go.Request[management.UnlockUserRequest]) (*connect_go.Response[management.UnlockUserResponse], error)
	// Changes the user state to deleted
	RemoveUser(context.Context, *connect_go.Request[management.RemoveUserRequest]) (*connect_go.Response[management.RemoveUserResponse], error)
	// Changes the username
	UpdateUserName(context.Context, *connect_go.Request[management.UpdateUserNameRequest]) (*connect_go.Response[management.UpdateUserNameResponse], error)
	// Sets a user metadata by key
	SetUserMetadata(context.Context, *connect_go.Request[management.SetUserMetadataRequest]) (*connect_go.Response[management.SetUserMetadataResponse], error)
	// Set a list of user metadata
	BulkSetUserMetadata(context.Context, *connect_go.Request[management.BulkSetUserMetadataRequest]) (*connect_go.Response[management.BulkSetUserMetadataResponse], error)
	// Returns the user metadata
	ListUserMetadata(context.Context, *connect_go.Request[management.ListUserMetadataRequest]) (*connect_go.Response[management.ListUserMetadataResponse], error)
	// Returns the user metadata by key
	GetUserMetadata(context.Context, *connect_go.Request[management.GetUserMetadataRequest]) (*connect_go.Response[management.GetUserMetadataResponse], error)
	// Removes a user metadata by key
	RemoveUserMetadata(context.Context, *connect_go.Request[management.RemoveUserMetadataRequest]) (*connect_go.Response[management.RemoveUserMetadataResponse], error)
	// Set a list of user metadata
	BulkRemoveUserMetadata(context.Context, *connect_go.Request[management.BulkRemoveUserMetadataRequest]) (*connect_go.Response[management.BulkRemoveUserMetadataResponse], error)
	// Returns the profile of the human
	GetHumanProfile(context.Context, *connect_go.Request[management.GetHumanProfileRequest]) (*connect_go.Response[management.GetHumanProfileResponse], error)
	// Changes the profile of the human
	UpdateHumanProfile(context.Context, *connect_go.Request[management.UpdateHumanProfileRequest]) (*connect_go.Response[management.UpdateHumanProfileResponse], error)
	// GetHumanEmail returns the email and verified state of the human
	GetHumanEmail(context.Context, *connect_go.Request[management.GetHumanEmailRequest]) (*connect_go.Response[management.GetHumanEmailResponse], error)
	// Changes the email of the human
	// If state is not verified, the user will get a verification email
	UpdateHumanEmail(context.Context, *connect_go.Request[management.UpdateHumanEmailRequest]) (*connect_go.Response[management.UpdateHumanEmailResponse], error)
	// Resends an email to the given email address to finish the initialization process of the user
	// Changes the email address of the user if it is provided
	ResendHumanInitialization(context.Context, *connect_go.Request[management.ResendHumanInitializationRequest]) (*connect_go.Response[management.ResendHumanInitializationResponse], error)
	// Resends an email to the given email address to finish the email verification process of the user
	ResendHumanEmailVerification(context.Context, *connect_go.Request[management.ResendHumanEmailVerificationRequest]) (*connect_go.Response[management.ResendHumanEmailVerificationResponse], error)
	// Returns the phone and verified state of the human phone
	GetHumanPhone(context.Context, *connect_go.Request[management.GetHumanPhoneRequest]) (*connect_go.Response[management.GetHumanPhoneResponse], error)
	// Changes the phone number
	// If verified is not set, the user will get an sms to verify the number
	UpdateHumanPhone(context.Context, *connect_go.Request[management.UpdateHumanPhoneRequest]) (*connect_go.Response[management.UpdateHumanPhoneResponse], error)
	// Removes the phone number of the human
	RemoveHumanPhone(context.Context, *connect_go.Request[management.RemoveHumanPhoneRequest]) (*connect_go.Response[management.RemoveHumanPhoneResponse], error)
	// An sms will be sent to the given phone number to finish the phone verification process of the user
	ResendHumanPhoneVerification(context.Context, *connect_go.Request[management.ResendHumanPhoneVerificationRequest]) (*connect_go.Response[management.ResendHumanPhoneVerificationResponse], error)
	// Removes the avatar number of the human
	RemoveHumanAvatar(context.Context, *connect_go.Request[management.RemoveHumanAvatarRequest]) (*connect_go.Response[management.RemoveHumanAvatarResponse], error)
	// deprecated: use SetHumanPassword
	SetHumanInitialPassword(context.Context, *connect_go.Request[management.SetHumanInitialPasswordRequest]) (*connect_go.Response[management.SetHumanInitialPasswordResponse], error)
	// Set a new password for a user, on default the user has to change the password on the next login
	// Set no_change_required to true if the user does not have to change the password on the next login
	SetHumanPassword(context.Context, *connect_go.Request[management.SetHumanPasswordRequest]) (*connect_go.Response[management.SetHumanPasswordResponse], error)
	// An email will be sent to the given address to reset the password of the user
	SendHumanResetPasswordNotification(context.Context, *connect_go.Request[management.SendHumanResetPasswordNotificationRequest]) (*connect_go.Response[management.SendHumanResetPasswordNotificationResponse], error)
	// Returns a list of all factors (second and multi) which are configured on the user
	ListHumanAuthFactors(context.Context, *connect_go.Request[management.ListHumanAuthFactorsRequest]) (*connect_go.Response[management.ListHumanAuthFactorsResponse], error)
	// The otp second factor will be removed from the user
	// Because only one otp can be configured per user, the configured one will be removed
	RemoveHumanAuthFactorOTP(context.Context, *connect_go.Request[management.RemoveHumanAuthFactorOTPRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorOTPResponse], error)
	// The u2f (universial second factor) will be removed from the user
	RemoveHumanAuthFactorU2F(context.Context, *connect_go.Request[management.RemoveHumanAuthFactorU2FRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorU2FResponse], error)
	// Returns all configured passwordless authenticators
	ListHumanPasswordless(context.Context, *connect_go.Request[management.ListHumanPasswordlessRequest]) (*connect_go.Response[management.ListHumanPasswordlessResponse], error)
	// Adds a new passwordless authenticator link to the user and returns it directly
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	AddPasswordlessRegistration(context.Context, *connect_go.Request[management.AddPasswordlessRegistrationRequest]) (*connect_go.Response[management.AddPasswordlessRegistrationResponse], error)
	// Adds a new passwordless authenticator link to the user and sends it to the registered email address
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	SendPasswordlessRegistration(context.Context, *connect_go.Request[management.SendPasswordlessRegistrationRequest]) (*connect_go.Response[management.SendPasswordlessRegistrationResponse], error)
	// Removed a configured passwordless authenticator
	RemoveHumanPasswordless(context.Context, *connect_go.Request[management.RemoveHumanPasswordlessRequest]) (*connect_go.Response[management.RemoveHumanPasswordlessResponse], error)
	// Changes a machine user
	UpdateMachine(context.Context, *connect_go.Request[management.UpdateMachineRequest]) (*connect_go.Response[management.UpdateMachineResponse], error)
	// Generates and sets a new machine secret
	GenerateMachineSecret(context.Context, *connect_go.Request[management.GenerateMachineSecretRequest]) (*connect_go.Response[management.GenerateMachineSecretResponse], error)
	// Removes the machine secret
	RemoveMachineSecret(context.Context, *connect_go.Request[management.RemoveMachineSecretRequest]) (*connect_go.Response[management.RemoveMachineSecretResponse], error)
	// Returns a machine key of a (machine) user
	GetMachineKeyByIDs(context.Context, *connect_go.Request[management.GetMachineKeyByIDsRequest]) (*connect_go.Response[management.GetMachineKeyByIDsResponse], error)
	// Returns all machine keys of a (machine) user which match the query
	// Limit should always be set, there is a default limit set by the service
	ListMachineKeys(context.Context, *connect_go.Request[management.ListMachineKeysRequest]) (*connect_go.Response[management.ListMachineKeysResponse], error)
	// Generates a new machine key, details should be stored after return
	AddMachineKey(context.Context, *connect_go.Request[management.AddMachineKeyRequest]) (*connect_go.Response[management.AddMachineKeyResponse], error)
	// Removes a machine key
	RemoveMachineKey(context.Context, *connect_go.Request[management.RemoveMachineKeyRequest]) (*connect_go.Response[management.RemoveMachineKeyResponse], error)
	// Returns a personal access token of a (machine) user
	GetPersonalAccessTokenByIDs(context.Context, *connect_go.Request[management.GetPersonalAccessTokenByIDsRequest]) (*connect_go.Response[management.GetPersonalAccessTokenByIDsResponse], error)
	// Returns all personal access tokens of a (machine) user which match the query
	// Limit should always be set, there is a default limit set by the service
	ListPersonalAccessTokens(context.Context, *connect_go.Request[management.ListPersonalAccessTokensRequest]) (*connect_go.Response[management.ListPersonalAccessTokensResponse], error)
	// Generates a new personal access token for a machine user, details should be stored after return
	AddPersonalAccessToken(context.Context, *connect_go.Request[management.AddPersonalAccessTokenRequest]) (*connect_go.Response[management.AddPersonalAccessTokenResponse], error)
	// Removes a personal access token
	RemovePersonalAccessToken(context.Context, *connect_go.Request[management.RemovePersonalAccessTokenRequest]) (*connect_go.Response[management.RemovePersonalAccessTokenResponse], error)
	// Lists all identity providers (social logins) which a human has configured (e.g Google, Microsoft, AD, etc..)
	// Limit should always be set, there is a default limit set by the service
	ListHumanLinkedIDPs(context.Context, *connect_go.Request[management.ListHumanLinkedIDPsRequest]) (*connect_go.Response[management.ListHumanLinkedIDPsResponse], error)
	// Removed a configured identity provider (social login) of a human
	RemoveHumanLinkedIDP(context.Context, *connect_go.Request[management.RemoveHumanLinkedIDPRequest]) (*connect_go.Response[management.RemoveHumanLinkedIDPResponse], error)
	// Show all the permissions a user has iin ZITADEL (ZITADEL Manager)
	// Limit should always be set, there is a default limit set by the service
	ListUserMemberships(context.Context, *connect_go.Request[management.ListUserMembershipsRequest]) (*connect_go.Response[management.ListUserMembershipsResponse], error)
	// Returns the org given in the header
	GetMyOrg(context.Context, *connect_go.Request[management.GetMyOrgRequest]) (*connect_go.Response[management.GetMyOrgResponse], error)
	// Search a org over all organisations
	// Domain must match exactly
	GetOrgByDomainGlobal(context.Context, *connect_go.Request[management.GetOrgByDomainGlobalRequest]) (*connect_go.Response[management.GetOrgByDomainGlobalResponse], error)
	// Returns the history of my organisation (each event)
	// Limit should always be set, there is a default limit set by the service
	ListOrgChanges(context.Context, *connect_go.Request[management.ListOrgChangesRequest]) (*connect_go.Response[management.ListOrgChangesResponse], error)
	// Creates a new organisation
	AddOrg(context.Context, *connect_go.Request[management.AddOrgRequest]) (*connect_go.Response[management.AddOrgResponse], error)
	// Changes my organisation
	UpdateOrg(context.Context, *connect_go.Request[management.UpdateOrgRequest]) (*connect_go.Response[management.UpdateOrgResponse], error)
	// Sets the state of my organisation to deactivated
	// Users of this organisation will not be able login
	DeactivateOrg(context.Context, *connect_go.Request[management.DeactivateOrgRequest]) (*connect_go.Response[management.DeactivateOrgResponse], error)
	// Sets the state of my organisation to active
	ReactivateOrg(context.Context, *connect_go.Request[management.ReactivateOrgRequest]) (*connect_go.Response[management.ReactivateOrgResponse], error)
	// Sets the state of my organisation and all its resource (Users, Projects, Grants to and from the org) to removed
	// Users of this organisation will not be able login
	RemoveOrg(context.Context, *connect_go.Request[management.RemoveOrgRequest]) (*connect_go.Response[management.RemoveOrgResponse], error)
	// Sets a org metadata by key
	SetOrgMetadata(context.Context, *connect_go.Request[management.SetOrgMetadataRequest]) (*connect_go.Response[management.SetOrgMetadataResponse], error)
	// Set a list of org metadata
	BulkSetOrgMetadata(context.Context, *connect_go.Request[management.BulkSetOrgMetadataRequest]) (*connect_go.Response[management.BulkSetOrgMetadataResponse], error)
	// Returns the org metadata
	ListOrgMetadata(context.Context, *connect_go.Request[management.ListOrgMetadataRequest]) (*connect_go.Response[management.ListOrgMetadataResponse], error)
	// Returns the org metadata by key
	GetOrgMetadata(context.Context, *connect_go.Request[management.GetOrgMetadataRequest]) (*connect_go.Response[management.GetOrgMetadataResponse], error)
	// Removes a org metadata by key
	RemoveOrgMetadata(context.Context, *connect_go.Request[management.RemoveOrgMetadataRequest]) (*connect_go.Response[management.RemoveOrgMetadataResponse], error)
	// Set a list of org metadata
	BulkRemoveOrgMetadata(context.Context, *connect_go.Request[management.BulkRemoveOrgMetadataRequest]) (*connect_go.Response[management.BulkRemoveOrgMetadataResponse], error)
	// Returns all registered domains of my organisation
	// Limit should always be set, there is a default limit set by the service
	ListOrgDomains(context.Context, *connect_go.Request[management.ListOrgDomainsRequest]) (*connect_go.Response[management.ListOrgDomainsResponse], error)
	// Adds a new domain to my organisation
	AddOrgDomain(context.Context, *connect_go.Request[management.AddOrgDomainRequest]) (*connect_go.Response[management.AddOrgDomainResponse], error)
	// Removed the domain from my organisation
	RemoveOrgDomain(context.Context, *connect_go.Request[management.RemoveOrgDomainRequest]) (*connect_go.Response[management.RemoveOrgDomainResponse], error)
	// Generates a new file to validate you domain
	GenerateOrgDomainValidation(context.Context, *connect_go.Request[management.GenerateOrgDomainValidationRequest]) (*connect_go.Response[management.GenerateOrgDomainValidationResponse], error)
	// Validates your domain with the choosen method
	// Validated domains must be unique
	ValidateOrgDomain(context.Context, *connect_go.Request[management.ValidateOrgDomainRequest]) (*connect_go.Response[management.ValidateOrgDomainResponse], error)
	// Sets the domain as primary
	// Primary domain is shown as suffix on the preferred username on the users of the organisation
	SetPrimaryOrgDomain(context.Context, *connect_go.Request[management.SetPrimaryOrgDomainRequest]) (*connect_go.Response[management.SetPrimaryOrgDomainResponse], error)
	// Returns all ZITADEL roles which are for organisation managers
	ListOrgMemberRoles(context.Context, *connect_go.Request[management.ListOrgMemberRolesRequest]) (*connect_go.Response[management.ListOrgMemberRolesResponse], error)
	// Returns all ZITADEL managers of this organisation (Project and Project Grant managers not included)
	// Limit should always be set, there is a default limit set by the service
	ListOrgMembers(context.Context, *connect_go.Request[management.ListOrgMembersRequest]) (*connect_go.Response[management.ListOrgMembersResponse], error)
	// Adds a new organisation manager, which is allowed to administrate ZITADEL
	AddOrgMember(context.Context, *connect_go.Request[management.AddOrgMemberRequest]) (*connect_go.Response[management.AddOrgMemberResponse], error)
	// Changes the organisation manager
	UpdateOrgMember(context.Context, *connect_go.Request[management.UpdateOrgMemberRequest]) (*connect_go.Response[management.UpdateOrgMemberResponse], error)
	// Removes an organisation manager
	RemoveOrgMember(context.Context, *connect_go.Request[management.RemoveOrgMemberRequest]) (*connect_go.Response[management.RemoveOrgMemberResponse], error)
	// Returns a project from my organisation (no granted projects)
	GetProjectByID(context.Context, *connect_go.Request[management.GetProjectByIDRequest]) (*connect_go.Response[management.GetProjectByIDResponse], error)
	// returns a project my organisation got granted from another organisation
	GetGrantedProjectByID(context.Context, *connect_go.Request[management.GetGrantedProjectByIDRequest]) (*connect_go.Response[management.GetGrantedProjectByIDResponse], error)
	// Returns all projects my organisation is the owner (no granted projects)
	// Limit should always be set, there is a default limit set by the service
	ListProjects(context.Context, *connect_go.Request[management.ListProjectsRequest]) (*connect_go.Response[management.ListProjectsResponse], error)
	// returns all projects my organisation got granted from another organisation
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjects(context.Context, *connect_go.Request[management.ListGrantedProjectsRequest]) (*connect_go.Response[management.ListGrantedProjectsResponse], error)
	// returns all roles of a project grant
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjectRoles(context.Context, *connect_go.Request[management.ListGrantedProjectRolesRequest]) (*connect_go.Response[management.ListGrantedProjectRolesResponse], error)
	// Returns the history of the project (each event)
	// Limit should always be set, there is a default limit set by the service
	ListProjectChanges(context.Context, *connect_go.Request[management.ListProjectChangesRequest]) (*connect_go.Response[management.ListProjectChangesResponse], error)
	// Adds an new project to the organisation
	AddProject(context.Context, *connect_go.Request[management.AddProjectRequest]) (*connect_go.Response[management.AddProjectResponse], error)
	// Changes a project
	UpdateProject(context.Context, *connect_go.Request[management.UpdateProjectRequest]) (*connect_go.Response[management.UpdateProjectResponse], error)
	// Sets the state of a project to deactivated
	// Returns an error if project is already deactivated
	DeactivateProject(context.Context, *connect_go.Request[management.DeactivateProjectRequest]) (*connect_go.Response[management.DeactivateProjectResponse], error)
	// Sets the state of a project to active
	// Returns an error if project is not deactivated
	ReactivateProject(context.Context, *connect_go.Request[management.ReactivateProjectRequest]) (*connect_go.Response[management.ReactivateProjectResponse], error)
	// Removes a project
	// All project grants, applications and user grants for this project will be removed
	RemoveProject(context.Context, *connect_go.Request[management.RemoveProjectRequest]) (*connect_go.Response[management.RemoveProjectResponse], error)
	// Returns all roles of a project matching the search query
	// If no limit is requested, default limit will be set, if the limit is higher then the default an error will be returned
	ListProjectRoles(context.Context, *connect_go.Request[management.ListProjectRolesRequest]) (*connect_go.Response[management.ListProjectRolesResponse], error)
	// Adds a role to a project, key must be unique in the project
	AddProjectRole(context.Context, *connect_go.Request[management.AddProjectRoleRequest]) (*connect_go.Response[management.AddProjectRoleResponse], error)
	// add a list of project roles in one request
	BulkAddProjectRoles(context.Context, *connect_go.Request[management.BulkAddProjectRolesRequest]) (*connect_go.Response[management.BulkAddProjectRolesResponse], error)
	// Changes a project role, key is not editable
	// If a key should change, remove the role and create a new
	UpdateProjectRole(context.Context, *connect_go.Request[management.UpdateProjectRoleRequest]) (*connect_go.Response[management.UpdateProjectRoleResponse], error)
	// Removes role from UserGrants, ProjectGrants and from Project
	RemoveProjectRole(context.Context, *connect_go.Request[management.RemoveProjectRoleRequest]) (*connect_go.Response[management.RemoveProjectRoleResponse], error)
	// Returns all ZITADEL roles which are for project managers
	ListProjectMemberRoles(context.Context, *connect_go.Request[management.ListProjectMemberRolesRequest]) (*connect_go.Response[management.ListProjectMemberRolesResponse], error)
	// Returns all ZITADEL managers of a projects
	// Limit should always be set, there is a default limit set by the service
	ListProjectMembers(context.Context, *connect_go.Request[management.ListProjectMembersRequest]) (*connect_go.Response[management.ListProjectMembersResponse], error)
	// Adds a new project manager, which is allowed to administrate in ZITADEL
	AddProjectMember(context.Context, *connect_go.Request[management.AddProjectMemberRequest]) (*connect_go.Response[management.AddProjectMemberResponse], error)
	// Change project manager, which is allowed to administrate in ZITADEL
	UpdateProjectMember(context.Context, *connect_go.Request[management.UpdateProjectMemberRequest]) (*connect_go.Response[management.UpdateProjectMemberResponse], error)
	// Remove project manager, which is allowed to administrate in ZITADEL
	RemoveProjectMember(context.Context, *connect_go.Request[management.RemoveProjectMemberRequest]) (*connect_go.Response[management.RemoveProjectMemberResponse], error)
	// Returns an application (oidc or api)
	GetAppByID(context.Context, *connect_go.Request[management.GetAppByIDRequest]) (*connect_go.Response[management.GetAppByIDResponse], error)
	// Returns all applications of a project matching the query
	// Limit should always be set, there is a default limit set by the service
	ListApps(context.Context, *connect_go.Request[management.ListAppsRequest]) (*connect_go.Response[management.ListAppsResponse], error)
	// Returns the history of the application (each event)
	// Limit should always be set, there is a default limit set by the service
	ListAppChanges(context.Context, *connect_go.Request[management.ListAppChangesRequest]) (*connect_go.Response[management.ListAppChangesResponse], error)
	// Adds a new oidc client
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddOIDCApp(context.Context, *connect_go.Request[management.AddOIDCAppRequest]) (*connect_go.Response[management.AddOIDCAppResponse], error)
	// Adds a new saml service provider
	// Returns a entityID
	AddSAMLApp(context.Context, *connect_go.Request[management.AddSAMLAppRequest]) (*connect_go.Response[management.AddSAMLAppResponse], error)
	// Adds a new api application
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddAPIApp(context.Context, *connect_go.Request[management.AddAPIAppRequest]) (*connect_go.Response[management.AddAPIAppResponse], error)
	// Changes application
	UpdateApp(context.Context, *connect_go.Request[management.UpdateAppRequest]) (*connect_go.Response[management.UpdateAppResponse], error)
	// Changes the configuration of the oidc client
	UpdateOIDCAppConfig(context.Context, *connect_go.Request[management.UpdateOIDCAppConfigRequest]) (*connect_go.Response[management.UpdateOIDCAppConfigResponse], error)
	// Changes the configuration of the saml application
	UpdateSAMLAppConfig(context.Context, *connect_go.Request[management.UpdateSAMLAppConfigRequest]) (*connect_go.Response[management.UpdateSAMLAppConfigResponse], error)
	// Changes the configuration of the api application
	UpdateAPIAppConfig(context.Context, *connect_go.Request[management.UpdateAPIAppConfigRequest]) (*connect_go.Response[management.UpdateAPIAppConfigResponse], error)
	// Set the state to deactivated
	// Its not possible to request tokens for deactivated apps
	// Returns an error if already deactivated
	DeactivateApp(context.Context, *connect_go.Request[management.DeactivateAppRequest]) (*connect_go.Response[management.DeactivateAppResponse], error)
	// Set the state to active
	// Returns an error if not deactivated
	ReactivateApp(context.Context, *connect_go.Request[management.ReactivateAppRequest]) (*connect_go.Response[management.ReactivateAppResponse], error)
	// Removed the application
	RemoveApp(context.Context, *connect_go.Request[management.RemoveAppRequest]) (*connect_go.Response[management.RemoveAppResponse], error)
	// Generates a new client secret for the oidc client, make sure to save the response
	RegenerateOIDCClientSecret(context.Context, *connect_go.Request[management.RegenerateOIDCClientSecretRequest]) (*connect_go.Response[management.RegenerateOIDCClientSecretResponse], error)
	// Generates a new client secret for the api application, make sure to save the response
	RegenerateAPIClientSecret(context.Context, *connect_go.Request[management.RegenerateAPIClientSecretRequest]) (*connect_go.Response[management.RegenerateAPIClientSecretResponse], error)
	// Returns an application key
	GetAppKey(context.Context, *connect_go.Request[management.GetAppKeyRequest]) (*connect_go.Response[management.GetAppKeyResponse], error)
	// Returns all application keys matching the result
	// Limit should always be set, there is a default limit set by the service
	ListAppKeys(context.Context, *connect_go.Request[management.ListAppKeysRequest]) (*connect_go.Response[management.ListAppKeysResponse], error)
	// Creates a new app key
	// Will return key details in result, make sure to save it
	AddAppKey(context.Context, *connect_go.Request[management.AddAppKeyRequest]) (*connect_go.Response[management.AddAppKeyResponse], error)
	// Removes an app key
	RemoveAppKey(context.Context, *connect_go.Request[management.RemoveAppKeyRequest]) (*connect_go.Response[management.RemoveAppKeyResponse], error)
	// Returns the history of the project grant (each event)
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrantChanges(context.Context, *connect_go.Request[management.ListProjectGrantChangesRequest]) (*connect_go.Response[management.ListProjectGrantChangesResponse], error)
	// Returns a project grant (ProjectGrant = Grant another organisation for my project)
	GetProjectGrantByID(context.Context, *connect_go.Request[management.GetProjectGrantByIDRequest]) (*connect_go.Response[management.GetProjectGrantByIDResponse], error)
	// Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrants(context.Context, *connect_go.Request[management.ListProjectGrantsRequest]) (*connect_go.Response[management.ListProjectGrantsResponse], error)
	// Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
	// Limit should always be set, there is a default limit set by the service
	ListAllProjectGrants(context.Context, *connect_go.Request[management.ListAllProjectGrantsRequest]) (*connect_go.Response[management.ListAllProjectGrantsResponse], error)
	// Add a new project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	AddProjectGrant(context.Context, *connect_go.Request[management.AddProjectGrantRequest]) (*connect_go.Response[management.AddProjectGrantResponse], error)
	// Change project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	UpdateProjectGrant(context.Context, *connect_go.Request[management.UpdateProjectGrantRequest]) (*connect_go.Response[management.UpdateProjectGrantResponse], error)
	// Set state of project grant to deactivated (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not active
	DeactivateProjectGrant(context.Context, *connect_go.Request[management.DeactivateProjectGrantRequest]) (*connect_go.Response[management.DeactivateProjectGrantResponse], error)
	// Set state of project grant to active (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not deactivated
	ReactivateProjectGrant(context.Context, *connect_go.Request[management.ReactivateProjectGrantRequest]) (*connect_go.Response[management.ReactivateProjectGrantResponse], error)
	// Removes project grant and all user grants for this project grant
	RemoveProjectGrant(context.Context, *connect_go.Request[management.RemoveProjectGrantRequest]) (*connect_go.Response[management.RemoveProjectGrantResponse], error)
	// Returns all ZITADEL roles which are for project grant managers
	ListProjectGrantMemberRoles(context.Context, *connect_go.Request[management.ListProjectGrantMemberRolesRequest]) (*connect_go.Response[management.ListProjectGrantMemberRolesResponse], error)
	// Returns all ZITADEL managers of this project grant
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrantMembers(context.Context, *connect_go.Request[management.ListProjectGrantMembersRequest]) (*connect_go.Response[management.ListProjectGrantMembersResponse], error)
	// Adds a new project grant manager, which is allowed to administrate in ZITADEL
	AddProjectGrantMember(context.Context, *connect_go.Request[management.AddProjectGrantMemberRequest]) (*connect_go.Response[management.AddProjectGrantMemberResponse], error)
	// Changes project grant manager, which is allowed to administrate in ZITADEL
	UpdateProjectGrantMember(context.Context, *connect_go.Request[management.UpdateProjectGrantMemberRequest]) (*connect_go.Response[management.UpdateProjectGrantMemberResponse], error)
	// Removed project grant manager
	RemoveProjectGrantMember(context.Context, *connect_go.Request[management.RemoveProjectGrantMemberRequest]) (*connect_go.Response[management.RemoveProjectGrantMemberResponse], error)
	// Returns a user grant (authorization of a user for a project)
	GetUserGrantByID(context.Context, *connect_go.Request[management.GetUserGrantByIDRequest]) (*connect_go.Response[management.GetUserGrantByIDResponse], error)
	// Returns al user grant matching the query (authorizations of user for projects)
	// Limit should always be set, there is a default limit set by the service
	ListUserGrants(context.Context, *connect_go.Request[management.ListUserGrantRequest]) (*connect_go.Response[management.ListUserGrantResponse], error)
	// Creates a new user grant (authorization of a user for a project with specified roles)
	AddUserGrant(context.Context, *connect_go.Request[management.AddUserGrantRequest]) (*connect_go.Response[management.AddUserGrantResponse], error)
	// Changes a user grant (authorization of a user for a project with specified roles)
	UpdateUserGrant(context.Context, *connect_go.Request[management.UpdateUserGrantRequest]) (*connect_go.Response[management.UpdateUserGrantResponse], error)
	// Sets the state of a user grant to deactivated
	// User will not be able to use the granted project anymore
	// Returns an error if user grant is already deactivated
	DeactivateUserGrant(context.Context, *connect_go.Request[management.DeactivateUserGrantRequest]) (*connect_go.Response[management.DeactivateUserGrantResponse], error)
	// Sets the state of a user grant to active
	// Returns an error if user grant is not deactivated
	ReactivateUserGrant(context.Context, *connect_go.Request[management.ReactivateUserGrantRequest]) (*connect_go.Response[management.ReactivateUserGrantResponse], error)
	// Removes a user grant
	RemoveUserGrant(context.Context, *connect_go.Request[management.RemoveUserGrantRequest]) (*connect_go.Response[management.RemoveUserGrantResponse], error)
	// remove a list of user grants in one request
	BulkRemoveUserGrant(context.Context, *connect_go.Request[management.BulkRemoveUserGrantRequest]) (*connect_go.Response[management.BulkRemoveUserGrantResponse], error)
	// deprecated: please use DomainPolicy instead
	// Returns the domain policy (this policy is managed by the iam administrator)
	GetOrgIAMPolicy(context.Context, *connect_go.Request[management.GetOrgIAMPolicyRequest]) (*connect_go.Response[management.GetOrgIAMPolicyResponse], error)
	// Returns the domain policy (this policy is managed by the iam administrator)
	GetDomainPolicy(context.Context, *connect_go.Request[management.GetDomainPolicyRequest]) (*connect_go.Response[management.GetDomainPolicyResponse], error)
	// Returns the login policy of the organisation
	// With this policy the login gui can be configured
	GetLoginPolicy(context.Context, *connect_go.Request[management.GetLoginPolicyRequest]) (*connect_go.Response[management.GetLoginPolicyResponse], error)
	// Returns the default login policy configured in the IAM
	GetDefaultLoginPolicy(context.Context, *connect_go.Request[management.GetDefaultLoginPolicyRequest]) (*connect_go.Response[management.GetDefaultLoginPolicyResponse], error)
	// Add a custom login policy for the organisation
	// With this policy the login gui can be configured
	AddCustomLoginPolicy(context.Context, *connect_go.Request[management.AddCustomLoginPolicyRequest]) (*connect_go.Response[management.AddCustomLoginPolicyResponse], error)
	// Change the custom login policy for the organisation
	// With this policy the login gui can be configured
	UpdateCustomLoginPolicy(context.Context, *connect_go.Request[management.UpdateCustomLoginPolicyRequest]) (*connect_go.Response[management.UpdateCustomLoginPolicyResponse], error)
	// Removes the custom login policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLoginPolicyToDefault(context.Context, *connect_go.Request[management.ResetLoginPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLoginPolicyToDefaultResponse], error)
	// Lists all possible identity providers configured on the organisation
	// Limit should always be set, there is a default limit set by the service
	ListLoginPolicyIDPs(context.Context, *connect_go.Request[management.ListLoginPolicyIDPsRequest]) (*connect_go.Response[management.ListLoginPolicyIDPsResponse], error)
	// Add a (preconfigured) identity provider to the custom login policy
	AddIDPToLoginPolicy(context.Context, *connect_go.Request[management.AddIDPToLoginPolicyRequest]) (*connect_go.Response[management.AddIDPToLoginPolicyResponse], error)
	// Remove a identity provider from the custom login policy
	RemoveIDPFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveIDPFromLoginPolicyResponse], error)
	// Returns all configured second factors of the custom login policy
	ListLoginPolicySecondFactors(context.Context, *connect_go.Request[management.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[management.ListLoginPolicySecondFactorsResponse], error)
	// Adds a new second factor to the custom login policy
	AddSecondFactorToLoginPolicy(context.Context, *connect_go.Request[management.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddSecondFactorToLoginPolicyResponse], error)
	// Remove a second factor from the custom login policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveSecondFactorFromLoginPolicyResponse], error)
	// Returns all configured multi factors of the custom login policy
	ListLoginPolicyMultiFactors(context.Context, *connect_go.Request[management.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[management.ListLoginPolicyMultiFactorsResponse], error)
	// Adds a new multi factor to the custom login policy
	AddMultiFactorToLoginPolicy(context.Context, *connect_go.Request[management.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddMultiFactorToLoginPolicyResponse], error)
	// Remove a multi factor from the custom login policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveMultiFactorFromLoginPolicyResponse], error)
	// Returns the password complexity policy of the organisation
	// With this policy the password strength can be configured
	GetPasswordComplexityPolicy(context.Context, *connect_go.Request[management.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetPasswordComplexityPolicyResponse], error)
	// Returns the default password complexity policy of the IAM
	// With this policy the password strength can be configured
	GetDefaultPasswordComplexityPolicy(context.Context, *connect_go.Request[management.GetDefaultPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordComplexityPolicyResponse], error)
	// Add a custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	AddCustomPasswordComplexityPolicy(context.Context, *connect_go.Request[management.AddCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.AddCustomPasswordComplexityPolicyResponse], error)
	// Update the custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	UpdateCustomPasswordComplexityPolicy(context.Context, *connect_go.Request[management.UpdateCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordComplexityPolicyResponse], error)
	// Removes the custom password complexity policy of the organisation
	// The default policy of the IAM will trigger after
	ResetPasswordComplexityPolicyToDefault(context.Context, *connect_go.Request[management.ResetPasswordComplexityPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordComplexityPolicyToDefaultResponse], error)
	// The password age policy is not used at the moment
	GetPasswordAgePolicy(context.Context, *connect_go.Request[management.GetPasswordAgePolicyRequest]) (*connect_go.Response[management.GetPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	GetDefaultPasswordAgePolicy(context.Context, *connect_go.Request[management.GetDefaultPasswordAgePolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	AddCustomPasswordAgePolicy(context.Context, *connect_go.Request[management.AddCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.AddCustomPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	UpdateCustomPasswordAgePolicy(context.Context, *connect_go.Request[management.UpdateCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	ResetPasswordAgePolicyToDefault(context.Context, *connect_go.Request[management.ResetPasswordAgePolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordAgePolicyToDefaultResponse], error)
	GetLockoutPolicy(context.Context, *connect_go.Request[management.GetLockoutPolicyRequest]) (*connect_go.Response[management.GetLockoutPolicyResponse], error)
	GetDefaultLockoutPolicy(context.Context, *connect_go.Request[management.GetDefaultLockoutPolicyRequest]) (*connect_go.Response[management.GetDefaultLockoutPolicyResponse], error)
	AddCustomLockoutPolicy(context.Context, *connect_go.Request[management.AddCustomLockoutPolicyRequest]) (*connect_go.Response[management.AddCustomLockoutPolicyResponse], error)
	UpdateCustomLockoutPolicy(context.Context, *connect_go.Request[management.UpdateCustomLockoutPolicyRequest]) (*connect_go.Response[management.UpdateCustomLockoutPolicyResponse], error)
	ResetLockoutPolicyToDefault(context.Context, *connect_go.Request[management.ResetLockoutPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLockoutPolicyToDefaultResponse], error)
	// Returns the privacy policy of the organisation
	// With this policy privacy relevant things can be configured (e.g. tos link)
	GetPrivacyPolicy(context.Context, *connect_go.Request[management.GetPrivacyPolicyRequest]) (*connect_go.Response[management.GetPrivacyPolicyResponse], error)
	// Returns the default privacy policy of the IAM
	// With this policy the privacy relevant things can be configured (e.g tos link)
	GetDefaultPrivacyPolicy(context.Context, *connect_go.Request[management.GetDefaultPrivacyPolicyRequest]) (*connect_go.Response[management.GetDefaultPrivacyPolicyResponse], error)
	// Add a custom privacy policy for the organisation
	// With this policy privacy relevant things can be configured (e.g. tos link)
	// Variable {{.Lang}} can be set to have different links based on the language
	AddCustomPrivacyPolicy(context.Context, *connect_go.Request[management.AddCustomPrivacyPolicyRequest]) (*connect_go.Response[management.AddCustomPrivacyPolicyResponse], error)
	// Update the privacy policy for the organisation
	// With this policy privacy relevant things can be configured (e.g. tos link)
	// Variable {{.Lang}} can be set to have different links based on the language
	UpdateCustomPrivacyPolicy(context.Context, *connect_go.Request[management.UpdateCustomPrivacyPolicyRequest]) (*connect_go.Response[management.UpdateCustomPrivacyPolicyResponse], error)
	// Removes the privacy policy of the organisation
	// The default policy of the IAM will trigger after
	ResetPrivacyPolicyToDefault(context.Context, *connect_go.Request[management.ResetPrivacyPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPrivacyPolicyToDefaultResponse], error)
	// Returns the notification policy of the organisation
	// With this notification policy it can be configured how users should be notified
	GetNotificationPolicy(context.Context, *connect_go.Request[management.GetNotificationPolicyRequest]) (*connect_go.Response[management.GetNotificationPolicyResponse], error)
	// Returns the default notification policy of the IAM
	// With this notification privacy it can be configured how users should be notified
	GetDefaultNotificationPolicy(context.Context, *connect_go.Request[management.GetDefaultNotificationPolicyRequest]) (*connect_go.Response[management.GetDefaultNotificationPolicyResponse], error)
	// Add a custom notification policy for the organisation
	// With this notification privacy it can be configured how users should be notified
	AddCustomNotificationPolicy(context.Context, *connect_go.Request[management.AddCustomNotificationPolicyRequest]) (*connect_go.Response[management.AddCustomNotificationPolicyResponse], error)
	// Update the notification policy for the organisation
	// With this notification privacy it can be configured how users should be notified
	UpdateCustomNotificationPolicy(context.Context, *connect_go.Request[management.UpdateCustomNotificationPolicyRequest]) (*connect_go.Response[management.UpdateCustomNotificationPolicyResponse], error)
	// Removes the notification policy of the organisation
	// The default policy of the IAM will trigger after
	ResetNotificationPolicyToDefault(context.Context, *connect_go.Request[management.ResetNotificationPolicyToDefaultRequest]) (*connect_go.Response[management.ResetNotificationPolicyToDefaultResponse], error)
	// Returns the active label policy of the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	GetLabelPolicy(context.Context, *connect_go.Request[management.GetLabelPolicyRequest]) (*connect_go.Response[management.GetLabelPolicyResponse], error)
	// Returns the preview label policy of the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	GetPreviewLabelPolicy(context.Context, *connect_go.Request[management.GetPreviewLabelPolicyRequest]) (*connect_go.Response[management.GetPreviewLabelPolicyResponse], error)
	// Returns the default label policy of the IAM
	// With this policy the private labeling can be configured (colors, etc.)
	GetDefaultLabelPolicy(context.Context, *connect_go.Request[management.GetDefaultLabelPolicyRequest]) (*connect_go.Response[management.GetDefaultLabelPolicyResponse], error)
	// Add a custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	AddCustomLabelPolicy(context.Context, *connect_go.Request[management.AddCustomLabelPolicyRequest]) (*connect_go.Response[management.AddCustomLabelPolicyResponse], error)
	// Changes the custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	UpdateCustomLabelPolicy(context.Context, *connect_go.Request[management.UpdateCustomLabelPolicyRequest]) (*connect_go.Response[management.UpdateCustomLabelPolicyResponse], error)
	// Activates all changes of the label policy
	ActivateCustomLabelPolicy(context.Context, *connect_go.Request[management.ActivateCustomLabelPolicyRequest]) (*connect_go.Response[management.ActivateCustomLabelPolicyResponse], error)
	// Removes the logo of the label policy
	RemoveCustomLabelPolicyLogo(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyLogoRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoResponse], error)
	// Removes the logo dark of the label policy
	RemoveCustomLabelPolicyLogoDark(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyLogoDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoDarkResponse], error)
	// Removes the icon of the label policy
	RemoveCustomLabelPolicyIcon(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyIconRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconResponse], error)
	// Removes the logo dark of the label policy
	RemoveCustomLabelPolicyIconDark(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyIconDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconDarkResponse], error)
	// Removes the font of the label policy
	RemoveCustomLabelPolicyFont(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyFontRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyFontResponse], error)
	// Removes the custom label policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLabelPolicyToDefault(context.Context, *connect_go.Request[management.ResetLabelPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLabelPolicyToDefaultResponse], error)
	// Returns the custom text for initial message
	GetCustomInitMessageText(context.Context, *connect_go.Request[management.GetCustomInitMessageTextRequest]) (*connect_go.Response[management.GetCustomInitMessageTextResponse], error)
	// Returns the default text for initial message
	GetDefaultInitMessageText(context.Context, *connect_go.Request[management.GetDefaultInitMessageTextRequest]) (*connect_go.Response[management.GetDefaultInitMessageTextResponse], error)
	// Sets the custom text for initial message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetCustomInitMessageText(context.Context, *connect_go.Request[management.SetCustomInitMessageTextRequest]) (*connect_go.Response[management.SetCustomInitMessageTextResponse], error)
	// Removes the custom init message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomInitMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomInitMessageTextToDefaultResponse], error)
	// Returns the custom text for password reset message
	GetCustomPasswordResetMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordResetMessageTextResponse], error)
	// Returns the default text for password reset message
	GetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordResetMessageTextResponse], error)
	// Sets the custom text for password reset message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomPasswordResetMessageText(context.Context, *connect_go.Request[management.SetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordResetMessageTextResponse], error)
	// Removes the custom password reset message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordResetMessageTextToDefaultResponse], error)
	// Returns the custom text for verify email message
	GetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[management.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyEmailMessageTextResponse], error)
	// Returns the default text for verify email message
	GetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[management.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyEmailMessageTextResponse], error)
	// Sets the custom text for verify email message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[management.SetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyEmailMessageTextResponse], error)
	// Removes the custom verify email message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyEmailMessageTextToDefaultResponse], error)
	// Returns the custom text for verify email message
	GetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[management.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyPhoneMessageTextResponse], error)
	// Returns the custom text for verify email message
	GetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[management.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyPhoneMessageTextResponse], error)
	// Sets the default custom text for verify email message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[management.SetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyPhoneMessageTextResponse], error)
	// Removes the custom verify phone text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error)
	// Returns the custom text for domain claimed message
	GetCustomDomainClaimedMessageText(context.Context, *connect_go.Request[management.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetCustomDomainClaimedMessageTextResponse], error)
	// Returns the custom text for domain claimed message
	GetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[management.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetDefaultDomainClaimedMessageTextResponse], error)
	// Sets the custom text for domain claimed message
	// The Following Variables can be used:
	// {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomDomainClaimedMessageCustomText(context.Context, *connect_go.Request[management.SetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.SetCustomDomainClaimedMessageTextResponse], error)
	// Removes the custom domain claimed message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomDomainClaimedMessageTextToDefaultResponse], error)
	// Returns the custom text for passwordless link message
	GetCustomPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordlessRegistrationMessageTextResponse], error)
	// Returns the custom text for passwordless link message
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordlessRegistrationMessageTextResponse], error)
	// Sets the custom text for passwordless link message
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomPasswordlessRegistrationMessageCustomText(context.Context, *connect_go.Request[management.SetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordlessRegistrationMessageTextResponse], error)
	// Removes the custom passwordless link message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error)
	// Returns the custom text for password change message
	GetCustomPasswordChangeMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordChangeMessageTextResponse], error)
	// Returns the custom text for password change link message
	GetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordChangeMessageTextResponse], error)
	// Sets the custom text for password change message
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomPasswordChangeMessageCustomText(context.Context, *connect_go.Request[management.SetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordChangeMessageTextResponse], error)
	// Removes the custom password change message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomPasswordChangeMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordChangeMessageTextToDefaultResponse], error)
	// Returns the custom texts for login ui
	GetCustomLoginTexts(context.Context, *connect_go.Request[management.GetCustomLoginTextsRequest]) (*connect_go.Response[management.GetCustomLoginTextsResponse], error)
	// Returns the custom texts for login ui
	GetDefaultLoginTexts(context.Context, *connect_go.Request[management.GetDefaultLoginTextsRequest]) (*connect_go.Response[management.GetDefaultLoginTextsResponse], error)
	// Sets the default custom text for login ui
	// it impacts all organisations without customized login ui texts
	SetCustomLoginText(context.Context, *connect_go.Request[management.SetCustomLoginTextsRequest]) (*connect_go.Response[management.SetCustomLoginTextsResponse], error)
	// Removes the custom login text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomLoginTextToDefault(context.Context, *connect_go.Request[management.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[management.ResetCustomLoginTextsToDefaultResponse], error)
	// Returns a identity provider configuration of the organisation
	GetOrgIDPByID(context.Context, *connect_go.Request[management.GetOrgIDPByIDRequest]) (*connect_go.Response[management.GetOrgIDPByIDResponse], error)
	// Returns all identity provider configuration in the organisation, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListOrgIDPs(context.Context, *connect_go.Request[management.ListOrgIDPsRequest]) (*connect_go.Response[management.ListOrgIDPsResponse], error)
	// Add a new identity provider configuration in the organisation
	// Provider must be OIDC compliant
	AddOrgOIDCIDP(context.Context, *connect_go.Request[management.AddOrgOIDCIDPRequest]) (*connect_go.Response[management.AddOrgOIDCIDPResponse], error)
	// Add a new jwt identity provider configuration in the organisation
	AddOrgJWTIDP(context.Context, *connect_go.Request[management.AddOrgJWTIDPRequest]) (*connect_go.Response[management.AddOrgJWTIDPResponse], error)
	// Deactivate identity provider configuration
	// Users will not be able to use this provider for login (e.g Google, Microsoft, AD, etc)
	// Returns error if already deactivated
	DeactivateOrgIDP(context.Context, *connect_go.Request[management.DeactivateOrgIDPRequest]) (*connect_go.Response[management.DeactivateOrgIDPResponse], error)
	// Activate identity provider configuration
	// Returns error if not deactivated
	ReactivateOrgIDP(context.Context, *connect_go.Request[management.ReactivateOrgIDPRequest]) (*connect_go.Response[management.ReactivateOrgIDPResponse], error)
	// Removes identity provider configuration
	// Will remove all linked providers of this configuration on the users
	RemoveOrgIDP(context.Context, *connect_go.Request[management.RemoveOrgIDPRequest]) (*connect_go.Response[management.RemoveOrgIDPResponse], error)
	// Change identity provider configuration of the organisation
	UpdateOrgIDP(context.Context, *connect_go.Request[management.UpdateOrgIDPRequest]) (*connect_go.Response[management.UpdateOrgIDPResponse], error)
	// Change OIDC identity provider configuration of the organisation
	UpdateOrgIDPOIDCConfig(context.Context, *connect_go.Request[management.UpdateOrgIDPOIDCConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPOIDCConfigResponse], error)
	// Change JWT identity provider configuration of the organisation
	UpdateOrgIDPJWTConfig(context.Context, *connect_go.Request[management.UpdateOrgIDPJWTConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPJWTConfigResponse], error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(context.Context, *connect_go.Request[management.ListProvidersRequest]) (*connect_go.Response[management.ListProvidersResponse], error)
	// Returns an identity provider of the organisation
	GetProviderByID(context.Context, *connect_go.Request[management.GetProviderByIDRequest]) (*connect_go.Response[management.GetProviderByIDResponse], error)
	// Add a new ldap identity provider in the organisation
	AddLDAPProvider(context.Context, *connect_go.Request[management.AddLDAPProviderRequest]) (*connect_go.Response[management.AddLDAPProviderResponse], error)
	// Change an existing ldap identity provider in the organisation
	UpdateLDAPProvider(context.Context, *connect_go.Request[management.UpdateLDAPProviderRequest]) (*connect_go.Response[management.UpdateLDAPProviderResponse], error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(context.Context, *connect_go.Request[management.DeleteProviderRequest]) (*connect_go.Response[management.DeleteProviderResponse], error)
	ListActions(context.Context, *connect_go.Request[management.ListActionsRequest]) (*connect_go.Response[management.ListActionsResponse], error)
	GetAction(context.Context, *connect_go.Request[management.GetActionRequest]) (*connect_go.Response[management.GetActionResponse], error)
	CreateAction(context.Context, *connect_go.Request[management.CreateActionRequest]) (*connect_go.Response[management.CreateActionResponse], error)
	UpdateAction(context.Context, *connect_go.Request[management.UpdateActionRequest]) (*connect_go.Response[management.UpdateActionResponse], error)
	DeactivateAction(context.Context, *connect_go.Request[management.DeactivateActionRequest]) (*connect_go.Response[management.DeactivateActionResponse], error)
	ReactivateAction(context.Context, *connect_go.Request[management.ReactivateActionRequest]) (*connect_go.Response[management.ReactivateActionResponse], error)
	DeleteAction(context.Context, *connect_go.Request[management.DeleteActionRequest]) (*connect_go.Response[management.DeleteActionResponse], error)
	ListFlowTypes(context.Context, *connect_go.Request[management.ListFlowTypesRequest]) (*connect_go.Response[management.ListFlowTypesResponse], error)
	ListFlowTriggerTypes(context.Context, *connect_go.Request[management.ListFlowTriggerTypesRequest]) (*connect_go.Response[management.ListFlowTriggerTypesResponse], error)
	GetFlow(context.Context, *connect_go.Request[management.GetFlowRequest]) (*connect_go.Response[management.GetFlowResponse], error)
	ClearFlow(context.Context, *connect_go.Request[management.ClearFlowRequest]) (*connect_go.Response[management.ClearFlowResponse], error)
	SetTriggerActions(context.Context, *connect_go.Request[management.SetTriggerActionsRequest]) (*connect_go.Response[management.SetTriggerActionsResponse], error)
}

// NewManagementServiceClient constructs a client for the zitadel.management.v1.ManagementService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementServiceClient{
		healthz: connect_go.NewClient[management.HealthzRequest, management.HealthzResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/Healthz",
			opts...,
		),
		getOIDCInformation: connect_go.NewClient[management.GetOIDCInformationRequest, management.GetOIDCInformationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetOIDCInformation",
			opts...,
		),
		getIAM: connect_go.NewClient[management.GetIAMRequest, management.GetIAMResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetIAM",
			opts...,
		),
		getSupportedLanguages: connect_go.NewClient[management.GetSupportedLanguagesRequest, management.GetSupportedLanguagesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetSupportedLanguages",
			opts...,
		),
		getUserByID: connect_go.NewClient[management.GetUserByIDRequest, management.GetUserByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetUserByID",
			opts...,
		),
		getUserByLoginNameGlobal: connect_go.NewClient[management.GetUserByLoginNameGlobalRequest, management.GetUserByLoginNameGlobalResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal",
			opts...,
		),
		listUsers: connect_go.NewClient[management.ListUsersRequest, management.ListUsersResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListUsers",
			opts...,
		),
		listUserChanges: connect_go.NewClient[management.ListUserChangesRequest, management.ListUserChangesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListUserChanges",
			opts...,
		),
		isUserUnique: connect_go.NewClient[management.IsUserUniqueRequest, management.IsUserUniqueResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/IsUserUnique",
			opts...,
		),
		addHumanUser: connect_go.NewClient[management.AddHumanUserRequest, management.AddHumanUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddHumanUser",
			opts...,
		),
		importHumanUser: connect_go.NewClient[management.ImportHumanUserRequest, management.ImportHumanUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ImportHumanUser",
			opts...,
		),
		addMachineUser: connect_go.NewClient[management.AddMachineUserRequest, management.AddMachineUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddMachineUser",
			opts...,
		),
		deactivateUser: connect_go.NewClient[management.DeactivateUserRequest, management.DeactivateUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateUser",
			opts...,
		),
		reactivateUser: connect_go.NewClient[management.ReactivateUserRequest, management.ReactivateUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateUser",
			opts...,
		),
		lockUser: connect_go.NewClient[management.LockUserRequest, management.LockUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/LockUser",
			opts...,
		),
		unlockUser: connect_go.NewClient[management.UnlockUserRequest, management.UnlockUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UnlockUser",
			opts...,
		),
		removeUser: connect_go.NewClient[management.RemoveUserRequest, management.RemoveUserResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveUser",
			opts...,
		),
		updateUserName: connect_go.NewClient[management.UpdateUserNameRequest, management.UpdateUserNameResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateUserName",
			opts...,
		),
		setUserMetadata: connect_go.NewClient[management.SetUserMetadataRequest, management.SetUserMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetUserMetadata",
			opts...,
		),
		bulkSetUserMetadata: connect_go.NewClient[management.BulkSetUserMetadataRequest, management.BulkSetUserMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/BulkSetUserMetadata",
			opts...,
		),
		listUserMetadata: connect_go.NewClient[management.ListUserMetadataRequest, management.ListUserMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListUserMetadata",
			opts...,
		),
		getUserMetadata: connect_go.NewClient[management.GetUserMetadataRequest, management.GetUserMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetUserMetadata",
			opts...,
		),
		removeUserMetadata: connect_go.NewClient[management.RemoveUserMetadataRequest, management.RemoveUserMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveUserMetadata",
			opts...,
		),
		bulkRemoveUserMetadata: connect_go.NewClient[management.BulkRemoveUserMetadataRequest, management.BulkRemoveUserMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/BulkRemoveUserMetadata",
			opts...,
		),
		getHumanProfile: connect_go.NewClient[management.GetHumanProfileRequest, management.GetHumanProfileResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetHumanProfile",
			opts...,
		),
		updateHumanProfile: connect_go.NewClient[management.UpdateHumanProfileRequest, management.UpdateHumanProfileResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateHumanProfile",
			opts...,
		),
		getHumanEmail: connect_go.NewClient[management.GetHumanEmailRequest, management.GetHumanEmailResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetHumanEmail",
			opts...,
		),
		updateHumanEmail: connect_go.NewClient[management.UpdateHumanEmailRequest, management.UpdateHumanEmailResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateHumanEmail",
			opts...,
		),
		resendHumanInitialization: connect_go.NewClient[management.ResendHumanInitializationRequest, management.ResendHumanInitializationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResendHumanInitialization",
			opts...,
		),
		resendHumanEmailVerification: connect_go.NewClient[management.ResendHumanEmailVerificationRequest, management.ResendHumanEmailVerificationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResendHumanEmailVerification",
			opts...,
		),
		getHumanPhone: connect_go.NewClient[management.GetHumanPhoneRequest, management.GetHumanPhoneResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetHumanPhone",
			opts...,
		),
		updateHumanPhone: connect_go.NewClient[management.UpdateHumanPhoneRequest, management.UpdateHumanPhoneResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateHumanPhone",
			opts...,
		),
		removeHumanPhone: connect_go.NewClient[management.RemoveHumanPhoneRequest, management.RemoveHumanPhoneResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveHumanPhone",
			opts...,
		),
		resendHumanPhoneVerification: connect_go.NewClient[management.ResendHumanPhoneVerificationRequest, management.ResendHumanPhoneVerificationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification",
			opts...,
		),
		removeHumanAvatar: connect_go.NewClient[management.RemoveHumanAvatarRequest, management.RemoveHumanAvatarResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveHumanAvatar",
			opts...,
		),
		setHumanInitialPassword: connect_go.NewClient[management.SetHumanInitialPasswordRequest, management.SetHumanInitialPasswordResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetHumanInitialPassword",
			opts...,
		),
		setHumanPassword: connect_go.NewClient[management.SetHumanPasswordRequest, management.SetHumanPasswordResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetHumanPassword",
			opts...,
		),
		sendHumanResetPasswordNotification: connect_go.NewClient[management.SendHumanResetPasswordNotificationRequest, management.SendHumanResetPasswordNotificationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification",
			opts...,
		),
		listHumanAuthFactors: connect_go.NewClient[management.ListHumanAuthFactorsRequest, management.ListHumanAuthFactorsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListHumanAuthFactors",
			opts...,
		),
		removeHumanAuthFactorOTP: connect_go.NewClient[management.RemoveHumanAuthFactorOTPRequest, management.RemoveHumanAuthFactorOTPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP",
			opts...,
		),
		removeHumanAuthFactorU2F: connect_go.NewClient[management.RemoveHumanAuthFactorU2FRequest, management.RemoveHumanAuthFactorU2FResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F",
			opts...,
		),
		listHumanPasswordless: connect_go.NewClient[management.ListHumanPasswordlessRequest, management.ListHumanPasswordlessResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListHumanPasswordless",
			opts...,
		),
		addPasswordlessRegistration: connect_go.NewClient[management.AddPasswordlessRegistrationRequest, management.AddPasswordlessRegistrationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddPasswordlessRegistration",
			opts...,
		),
		sendPasswordlessRegistration: connect_go.NewClient[management.SendPasswordlessRegistrationRequest, management.SendPasswordlessRegistrationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SendPasswordlessRegistration",
			opts...,
		),
		removeHumanPasswordless: connect_go.NewClient[management.RemoveHumanPasswordlessRequest, management.RemoveHumanPasswordlessResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveHumanPasswordless",
			opts...,
		),
		updateMachine: connect_go.NewClient[management.UpdateMachineRequest, management.UpdateMachineResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateMachine",
			opts...,
		),
		generateMachineSecret: connect_go.NewClient[management.GenerateMachineSecretRequest, management.GenerateMachineSecretResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GenerateMachineSecret",
			opts...,
		),
		removeMachineSecret: connect_go.NewClient[management.RemoveMachineSecretRequest, management.RemoveMachineSecretResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveMachineSecret",
			opts...,
		),
		getMachineKeyByIDs: connect_go.NewClient[management.GetMachineKeyByIDsRequest, management.GetMachineKeyByIDsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetMachineKeyByIDs",
			opts...,
		),
		listMachineKeys: connect_go.NewClient[management.ListMachineKeysRequest, management.ListMachineKeysResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListMachineKeys",
			opts...,
		),
		addMachineKey: connect_go.NewClient[management.AddMachineKeyRequest, management.AddMachineKeyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddMachineKey",
			opts...,
		),
		removeMachineKey: connect_go.NewClient[management.RemoveMachineKeyRequest, management.RemoveMachineKeyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveMachineKey",
			opts...,
		),
		getPersonalAccessTokenByIDs: connect_go.NewClient[management.GetPersonalAccessTokenByIDsRequest, management.GetPersonalAccessTokenByIDsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetPersonalAccessTokenByIDs",
			opts...,
		),
		listPersonalAccessTokens: connect_go.NewClient[management.ListPersonalAccessTokensRequest, management.ListPersonalAccessTokensResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListPersonalAccessTokens",
			opts...,
		),
		addPersonalAccessToken: connect_go.NewClient[management.AddPersonalAccessTokenRequest, management.AddPersonalAccessTokenResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddPersonalAccessToken",
			opts...,
		),
		removePersonalAccessToken: connect_go.NewClient[management.RemovePersonalAccessTokenRequest, management.RemovePersonalAccessTokenResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemovePersonalAccessToken",
			opts...,
		),
		listHumanLinkedIDPs: connect_go.NewClient[management.ListHumanLinkedIDPsRequest, management.ListHumanLinkedIDPsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs",
			opts...,
		),
		removeHumanLinkedIDP: connect_go.NewClient[management.RemoveHumanLinkedIDPRequest, management.RemoveHumanLinkedIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP",
			opts...,
		),
		listUserMemberships: connect_go.NewClient[management.ListUserMembershipsRequest, management.ListUserMembershipsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListUserMemberships",
			opts...,
		),
		getMyOrg: connect_go.NewClient[management.GetMyOrgRequest, management.GetMyOrgResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetMyOrg",
			opts...,
		),
		getOrgByDomainGlobal: connect_go.NewClient[management.GetOrgByDomainGlobalRequest, management.GetOrgByDomainGlobalResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal",
			opts...,
		),
		listOrgChanges: connect_go.NewClient[management.ListOrgChangesRequest, management.ListOrgChangesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListOrgChanges",
			opts...,
		),
		addOrg: connect_go.NewClient[management.AddOrgRequest, management.AddOrgResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddOrg",
			opts...,
		),
		updateOrg: connect_go.NewClient[management.UpdateOrgRequest, management.UpdateOrgResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateOrg",
			opts...,
		),
		deactivateOrg: connect_go.NewClient[management.DeactivateOrgRequest, management.DeactivateOrgResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateOrg",
			opts...,
		),
		reactivateOrg: connect_go.NewClient[management.ReactivateOrgRequest, management.ReactivateOrgResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateOrg",
			opts...,
		),
		removeOrg: connect_go.NewClient[management.RemoveOrgRequest, management.RemoveOrgResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveOrg",
			opts...,
		),
		setOrgMetadata: connect_go.NewClient[management.SetOrgMetadataRequest, management.SetOrgMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetOrgMetadata",
			opts...,
		),
		bulkSetOrgMetadata: connect_go.NewClient[management.BulkSetOrgMetadataRequest, management.BulkSetOrgMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/BulkSetOrgMetadata",
			opts...,
		),
		listOrgMetadata: connect_go.NewClient[management.ListOrgMetadataRequest, management.ListOrgMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListOrgMetadata",
			opts...,
		),
		getOrgMetadata: connect_go.NewClient[management.GetOrgMetadataRequest, management.GetOrgMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetOrgMetadata",
			opts...,
		),
		removeOrgMetadata: connect_go.NewClient[management.RemoveOrgMetadataRequest, management.RemoveOrgMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveOrgMetadata",
			opts...,
		),
		bulkRemoveOrgMetadata: connect_go.NewClient[management.BulkRemoveOrgMetadataRequest, management.BulkRemoveOrgMetadataResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/BulkRemoveOrgMetadata",
			opts...,
		),
		listOrgDomains: connect_go.NewClient[management.ListOrgDomainsRequest, management.ListOrgDomainsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListOrgDomains",
			opts...,
		),
		addOrgDomain: connect_go.NewClient[management.AddOrgDomainRequest, management.AddOrgDomainResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddOrgDomain",
			opts...,
		),
		removeOrgDomain: connect_go.NewClient[management.RemoveOrgDomainRequest, management.RemoveOrgDomainResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveOrgDomain",
			opts...,
		),
		generateOrgDomainValidation: connect_go.NewClient[management.GenerateOrgDomainValidationRequest, management.GenerateOrgDomainValidationResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation",
			opts...,
		),
		validateOrgDomain: connect_go.NewClient[management.ValidateOrgDomainRequest, management.ValidateOrgDomainResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ValidateOrgDomain",
			opts...,
		),
		setPrimaryOrgDomain: connect_go.NewClient[management.SetPrimaryOrgDomainRequest, management.SetPrimaryOrgDomainResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain",
			opts...,
		),
		listOrgMemberRoles: connect_go.NewClient[management.ListOrgMemberRolesRequest, management.ListOrgMemberRolesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListOrgMemberRoles",
			opts...,
		),
		listOrgMembers: connect_go.NewClient[management.ListOrgMembersRequest, management.ListOrgMembersResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListOrgMembers",
			opts...,
		),
		addOrgMember: connect_go.NewClient[management.AddOrgMemberRequest, management.AddOrgMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddOrgMember",
			opts...,
		),
		updateOrgMember: connect_go.NewClient[management.UpdateOrgMemberRequest, management.UpdateOrgMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateOrgMember",
			opts...,
		),
		removeOrgMember: connect_go.NewClient[management.RemoveOrgMemberRequest, management.RemoveOrgMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveOrgMember",
			opts...,
		),
		getProjectByID: connect_go.NewClient[management.GetProjectByIDRequest, management.GetProjectByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetProjectByID",
			opts...,
		),
		getGrantedProjectByID: connect_go.NewClient[management.GetGrantedProjectByIDRequest, management.GetGrantedProjectByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetGrantedProjectByID",
			opts...,
		),
		listProjects: connect_go.NewClient[management.ListProjectsRequest, management.ListProjectsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjects",
			opts...,
		),
		listGrantedProjects: connect_go.NewClient[management.ListGrantedProjectsRequest, management.ListGrantedProjectsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListGrantedProjects",
			opts...,
		),
		listGrantedProjectRoles: connect_go.NewClient[management.ListGrantedProjectRolesRequest, management.ListGrantedProjectRolesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListGrantedProjectRoles",
			opts...,
		),
		listProjectChanges: connect_go.NewClient[management.ListProjectChangesRequest, management.ListProjectChangesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectChanges",
			opts...,
		),
		addProject: connect_go.NewClient[management.AddProjectRequest, management.AddProjectResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddProject",
			opts...,
		),
		updateProject: connect_go.NewClient[management.UpdateProjectRequest, management.UpdateProjectResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateProject",
			opts...,
		),
		deactivateProject: connect_go.NewClient[management.DeactivateProjectRequest, management.DeactivateProjectResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateProject",
			opts...,
		),
		reactivateProject: connect_go.NewClient[management.ReactivateProjectRequest, management.ReactivateProjectResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateProject",
			opts...,
		),
		removeProject: connect_go.NewClient[management.RemoveProjectRequest, management.RemoveProjectResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveProject",
			opts...,
		),
		listProjectRoles: connect_go.NewClient[management.ListProjectRolesRequest, management.ListProjectRolesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectRoles",
			opts...,
		),
		addProjectRole: connect_go.NewClient[management.AddProjectRoleRequest, management.AddProjectRoleResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddProjectRole",
			opts...,
		),
		bulkAddProjectRoles: connect_go.NewClient[management.BulkAddProjectRolesRequest, management.BulkAddProjectRolesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/BulkAddProjectRoles",
			opts...,
		),
		updateProjectRole: connect_go.NewClient[management.UpdateProjectRoleRequest, management.UpdateProjectRoleResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateProjectRole",
			opts...,
		),
		removeProjectRole: connect_go.NewClient[management.RemoveProjectRoleRequest, management.RemoveProjectRoleResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveProjectRole",
			opts...,
		),
		listProjectMemberRoles: connect_go.NewClient[management.ListProjectMemberRolesRequest, management.ListProjectMemberRolesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectMemberRoles",
			opts...,
		),
		listProjectMembers: connect_go.NewClient[management.ListProjectMembersRequest, management.ListProjectMembersResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectMembers",
			opts...,
		),
		addProjectMember: connect_go.NewClient[management.AddProjectMemberRequest, management.AddProjectMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddProjectMember",
			opts...,
		),
		updateProjectMember: connect_go.NewClient[management.UpdateProjectMemberRequest, management.UpdateProjectMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateProjectMember",
			opts...,
		),
		removeProjectMember: connect_go.NewClient[management.RemoveProjectMemberRequest, management.RemoveProjectMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveProjectMember",
			opts...,
		),
		getAppByID: connect_go.NewClient[management.GetAppByIDRequest, management.GetAppByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetAppByID",
			opts...,
		),
		listApps: connect_go.NewClient[management.ListAppsRequest, management.ListAppsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListApps",
			opts...,
		),
		listAppChanges: connect_go.NewClient[management.ListAppChangesRequest, management.ListAppChangesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListAppChanges",
			opts...,
		),
		addOIDCApp: connect_go.NewClient[management.AddOIDCAppRequest, management.AddOIDCAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddOIDCApp",
			opts...,
		),
		addSAMLApp: connect_go.NewClient[management.AddSAMLAppRequest, management.AddSAMLAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddSAMLApp",
			opts...,
		),
		addAPIApp: connect_go.NewClient[management.AddAPIAppRequest, management.AddAPIAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddAPIApp",
			opts...,
		),
		updateApp: connect_go.NewClient[management.UpdateAppRequest, management.UpdateAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateApp",
			opts...,
		),
		updateOIDCAppConfig: connect_go.NewClient[management.UpdateOIDCAppConfigRequest, management.UpdateOIDCAppConfigResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig",
			opts...,
		),
		updateSAMLAppConfig: connect_go.NewClient[management.UpdateSAMLAppConfigRequest, management.UpdateSAMLAppConfigResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateSAMLAppConfig",
			opts...,
		),
		updateAPIAppConfig: connect_go.NewClient[management.UpdateAPIAppConfigRequest, management.UpdateAPIAppConfigResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateAPIAppConfig",
			opts...,
		),
		deactivateApp: connect_go.NewClient[management.DeactivateAppRequest, management.DeactivateAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateApp",
			opts...,
		),
		reactivateApp: connect_go.NewClient[management.ReactivateAppRequest, management.ReactivateAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateApp",
			opts...,
		),
		removeApp: connect_go.NewClient[management.RemoveAppRequest, management.RemoveAppResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveApp",
			opts...,
		),
		regenerateOIDCClientSecret: connect_go.NewClient[management.RegenerateOIDCClientSecretRequest, management.RegenerateOIDCClientSecretResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret",
			opts...,
		),
		regenerateAPIClientSecret: connect_go.NewClient[management.RegenerateAPIClientSecretRequest, management.RegenerateAPIClientSecretResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret",
			opts...,
		),
		getAppKey: connect_go.NewClient[management.GetAppKeyRequest, management.GetAppKeyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetAppKey",
			opts...,
		),
		listAppKeys: connect_go.NewClient[management.ListAppKeysRequest, management.ListAppKeysResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListAppKeys",
			opts...,
		),
		addAppKey: connect_go.NewClient[management.AddAppKeyRequest, management.AddAppKeyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddAppKey",
			opts...,
		),
		removeAppKey: connect_go.NewClient[management.RemoveAppKeyRequest, management.RemoveAppKeyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveAppKey",
			opts...,
		),
		listProjectGrantChanges: connect_go.NewClient[management.ListProjectGrantChangesRequest, management.ListProjectGrantChangesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectGrantChanges",
			opts...,
		),
		getProjectGrantByID: connect_go.NewClient[management.GetProjectGrantByIDRequest, management.GetProjectGrantByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetProjectGrantByID",
			opts...,
		),
		listProjectGrants: connect_go.NewClient[management.ListProjectGrantsRequest, management.ListProjectGrantsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectGrants",
			opts...,
		),
		listAllProjectGrants: connect_go.NewClient[management.ListAllProjectGrantsRequest, management.ListAllProjectGrantsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListAllProjectGrants",
			opts...,
		),
		addProjectGrant: connect_go.NewClient[management.AddProjectGrantRequest, management.AddProjectGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddProjectGrant",
			opts...,
		),
		updateProjectGrant: connect_go.NewClient[management.UpdateProjectGrantRequest, management.UpdateProjectGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateProjectGrant",
			opts...,
		),
		deactivateProjectGrant: connect_go.NewClient[management.DeactivateProjectGrantRequest, management.DeactivateProjectGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateProjectGrant",
			opts...,
		),
		reactivateProjectGrant: connect_go.NewClient[management.ReactivateProjectGrantRequest, management.ReactivateProjectGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateProjectGrant",
			opts...,
		),
		removeProjectGrant: connect_go.NewClient[management.RemoveProjectGrantRequest, management.RemoveProjectGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveProjectGrant",
			opts...,
		),
		listProjectGrantMemberRoles: connect_go.NewClient[management.ListProjectGrantMemberRolesRequest, management.ListProjectGrantMemberRolesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles",
			opts...,
		),
		listProjectGrantMembers: connect_go.NewClient[management.ListProjectGrantMembersRequest, management.ListProjectGrantMembersResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProjectGrantMembers",
			opts...,
		),
		addProjectGrantMember: connect_go.NewClient[management.AddProjectGrantMemberRequest, management.AddProjectGrantMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddProjectGrantMember",
			opts...,
		),
		updateProjectGrantMember: connect_go.NewClient[management.UpdateProjectGrantMemberRequest, management.UpdateProjectGrantMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateProjectGrantMember",
			opts...,
		),
		removeProjectGrantMember: connect_go.NewClient[management.RemoveProjectGrantMemberRequest, management.RemoveProjectGrantMemberResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveProjectGrantMember",
			opts...,
		),
		getUserGrantByID: connect_go.NewClient[management.GetUserGrantByIDRequest, management.GetUserGrantByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetUserGrantByID",
			opts...,
		),
		listUserGrants: connect_go.NewClient[management.ListUserGrantRequest, management.ListUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListUserGrants",
			opts...,
		),
		addUserGrant: connect_go.NewClient[management.AddUserGrantRequest, management.AddUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddUserGrant",
			opts...,
		),
		updateUserGrant: connect_go.NewClient[management.UpdateUserGrantRequest, management.UpdateUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateUserGrant",
			opts...,
		),
		deactivateUserGrant: connect_go.NewClient[management.DeactivateUserGrantRequest, management.DeactivateUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateUserGrant",
			opts...,
		),
		reactivateUserGrant: connect_go.NewClient[management.ReactivateUserGrantRequest, management.ReactivateUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateUserGrant",
			opts...,
		),
		removeUserGrant: connect_go.NewClient[management.RemoveUserGrantRequest, management.RemoveUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveUserGrant",
			opts...,
		),
		bulkRemoveUserGrant: connect_go.NewClient[management.BulkRemoveUserGrantRequest, management.BulkRemoveUserGrantResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/BulkRemoveUserGrant",
			opts...,
		),
		getOrgIAMPolicy: connect_go.NewClient[management.GetOrgIAMPolicyRequest, management.GetOrgIAMPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetOrgIAMPolicy",
			opts...,
		),
		getDomainPolicy: connect_go.NewClient[management.GetDomainPolicyRequest, management.GetDomainPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDomainPolicy",
			opts...,
		),
		getLoginPolicy: connect_go.NewClient[management.GetLoginPolicyRequest, management.GetLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetLoginPolicy",
			opts...,
		),
		getDefaultLoginPolicy: connect_go.NewClient[management.GetDefaultLoginPolicyRequest, management.GetDefaultLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy",
			opts...,
		),
		addCustomLoginPolicy: connect_go.NewClient[management.AddCustomLoginPolicyRequest, management.AddCustomLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomLoginPolicy",
			opts...,
		),
		updateCustomLoginPolicy: connect_go.NewClient[management.UpdateCustomLoginPolicyRequest, management.UpdateCustomLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy",
			opts...,
		),
		resetLoginPolicyToDefault: connect_go.NewClient[management.ResetLoginPolicyToDefaultRequest, management.ResetLoginPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault",
			opts...,
		),
		listLoginPolicyIDPs: connect_go.NewClient[management.ListLoginPolicyIDPsRequest, management.ListLoginPolicyIDPsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs",
			opts...,
		),
		addIDPToLoginPolicy: connect_go.NewClient[management.AddIDPToLoginPolicyRequest, management.AddIDPToLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy",
			opts...,
		),
		removeIDPFromLoginPolicy: connect_go.NewClient[management.RemoveIDPFromLoginPolicyRequest, management.RemoveIDPFromLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy",
			opts...,
		),
		listLoginPolicySecondFactors: connect_go.NewClient[management.ListLoginPolicySecondFactorsRequest, management.ListLoginPolicySecondFactorsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors",
			opts...,
		),
		addSecondFactorToLoginPolicy: connect_go.NewClient[management.AddSecondFactorToLoginPolicyRequest, management.AddSecondFactorToLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy",
			opts...,
		),
		removeSecondFactorFromLoginPolicy: connect_go.NewClient[management.RemoveSecondFactorFromLoginPolicyRequest, management.RemoveSecondFactorFromLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy",
			opts...,
		),
		listLoginPolicyMultiFactors: connect_go.NewClient[management.ListLoginPolicyMultiFactorsRequest, management.ListLoginPolicyMultiFactorsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors",
			opts...,
		),
		addMultiFactorToLoginPolicy: connect_go.NewClient[management.AddMultiFactorToLoginPolicyRequest, management.AddMultiFactorToLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy",
			opts...,
		),
		removeMultiFactorFromLoginPolicy: connect_go.NewClient[management.RemoveMultiFactorFromLoginPolicyRequest, management.RemoveMultiFactorFromLoginPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy",
			opts...,
		),
		getPasswordComplexityPolicy: connect_go.NewClient[management.GetPasswordComplexityPolicyRequest, management.GetPasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy",
			opts...,
		),
		getDefaultPasswordComplexityPolicy: connect_go.NewClient[management.GetDefaultPasswordComplexityPolicyRequest, management.GetDefaultPasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy",
			opts...,
		),
		addCustomPasswordComplexityPolicy: connect_go.NewClient[management.AddCustomPasswordComplexityPolicyRequest, management.AddCustomPasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy",
			opts...,
		),
		updateCustomPasswordComplexityPolicy: connect_go.NewClient[management.UpdateCustomPasswordComplexityPolicyRequest, management.UpdateCustomPasswordComplexityPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy",
			opts...,
		),
		resetPasswordComplexityPolicyToDefault: connect_go.NewClient[management.ResetPasswordComplexityPolicyToDefaultRequest, management.ResetPasswordComplexityPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault",
			opts...,
		),
		getPasswordAgePolicy: connect_go.NewClient[management.GetPasswordAgePolicyRequest, management.GetPasswordAgePolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetPasswordAgePolicy",
			opts...,
		),
		getDefaultPasswordAgePolicy: connect_go.NewClient[management.GetDefaultPasswordAgePolicyRequest, management.GetDefaultPasswordAgePolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy",
			opts...,
		),
		addCustomPasswordAgePolicy: connect_go.NewClient[management.AddCustomPasswordAgePolicyRequest, management.AddCustomPasswordAgePolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy",
			opts...,
		),
		updateCustomPasswordAgePolicy: connect_go.NewClient[management.UpdateCustomPasswordAgePolicyRequest, management.UpdateCustomPasswordAgePolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy",
			opts...,
		),
		resetPasswordAgePolicyToDefault: connect_go.NewClient[management.ResetPasswordAgePolicyToDefaultRequest, management.ResetPasswordAgePolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault",
			opts...,
		),
		getLockoutPolicy: connect_go.NewClient[management.GetLockoutPolicyRequest, management.GetLockoutPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetLockoutPolicy",
			opts...,
		),
		getDefaultLockoutPolicy: connect_go.NewClient[management.GetDefaultLockoutPolicyRequest, management.GetDefaultLockoutPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultLockoutPolicy",
			opts...,
		),
		addCustomLockoutPolicy: connect_go.NewClient[management.AddCustomLockoutPolicyRequest, management.AddCustomLockoutPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomLockoutPolicy",
			opts...,
		),
		updateCustomLockoutPolicy: connect_go.NewClient[management.UpdateCustomLockoutPolicyRequest, management.UpdateCustomLockoutPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomLockoutPolicy",
			opts...,
		),
		resetLockoutPolicyToDefault: connect_go.NewClient[management.ResetLockoutPolicyToDefaultRequest, management.ResetLockoutPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetLockoutPolicyToDefault",
			opts...,
		),
		getPrivacyPolicy: connect_go.NewClient[management.GetPrivacyPolicyRequest, management.GetPrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetPrivacyPolicy",
			opts...,
		),
		getDefaultPrivacyPolicy: connect_go.NewClient[management.GetDefaultPrivacyPolicyRequest, management.GetDefaultPrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultPrivacyPolicy",
			opts...,
		),
		addCustomPrivacyPolicy: connect_go.NewClient[management.AddCustomPrivacyPolicyRequest, management.AddCustomPrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomPrivacyPolicy",
			opts...,
		),
		updateCustomPrivacyPolicy: connect_go.NewClient[management.UpdateCustomPrivacyPolicyRequest, management.UpdateCustomPrivacyPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomPrivacyPolicy",
			opts...,
		),
		resetPrivacyPolicyToDefault: connect_go.NewClient[management.ResetPrivacyPolicyToDefaultRequest, management.ResetPrivacyPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetPrivacyPolicyToDefault",
			opts...,
		),
		getNotificationPolicy: connect_go.NewClient[management.GetNotificationPolicyRequest, management.GetNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetNotificationPolicy",
			opts...,
		),
		getDefaultNotificationPolicy: connect_go.NewClient[management.GetDefaultNotificationPolicyRequest, management.GetDefaultNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultNotificationPolicy",
			opts...,
		),
		addCustomNotificationPolicy: connect_go.NewClient[management.AddCustomNotificationPolicyRequest, management.AddCustomNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomNotificationPolicy",
			opts...,
		),
		updateCustomNotificationPolicy: connect_go.NewClient[management.UpdateCustomNotificationPolicyRequest, management.UpdateCustomNotificationPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomNotificationPolicy",
			opts...,
		),
		resetNotificationPolicyToDefault: connect_go.NewClient[management.ResetNotificationPolicyToDefaultRequest, management.ResetNotificationPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetNotificationPolicyToDefault",
			opts...,
		),
		getLabelPolicy: connect_go.NewClient[management.GetLabelPolicyRequest, management.GetLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetLabelPolicy",
			opts...,
		),
		getPreviewLabelPolicy: connect_go.NewClient[management.GetPreviewLabelPolicyRequest, management.GetPreviewLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetPreviewLabelPolicy",
			opts...,
		),
		getDefaultLabelPolicy: connect_go.NewClient[management.GetDefaultLabelPolicyRequest, management.GetDefaultLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy",
			opts...,
		),
		addCustomLabelPolicy: connect_go.NewClient[management.AddCustomLabelPolicyRequest, management.AddCustomLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddCustomLabelPolicy",
			opts...,
		),
		updateCustomLabelPolicy: connect_go.NewClient[management.UpdateCustomLabelPolicyRequest, management.UpdateCustomLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy",
			opts...,
		),
		activateCustomLabelPolicy: connect_go.NewClient[management.ActivateCustomLabelPolicyRequest, management.ActivateCustomLabelPolicyResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ActivateCustomLabelPolicy",
			opts...,
		),
		removeCustomLabelPolicyLogo: connect_go.NewClient[management.RemoveCustomLabelPolicyLogoRequest, management.RemoveCustomLabelPolicyLogoResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogo",
			opts...,
		),
		removeCustomLabelPolicyLogoDark: connect_go.NewClient[management.RemoveCustomLabelPolicyLogoDarkRequest, management.RemoveCustomLabelPolicyLogoDarkResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogoDark",
			opts...,
		),
		removeCustomLabelPolicyIcon: connect_go.NewClient[management.RemoveCustomLabelPolicyIconRequest, management.RemoveCustomLabelPolicyIconResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIcon",
			opts...,
		),
		removeCustomLabelPolicyIconDark: connect_go.NewClient[management.RemoveCustomLabelPolicyIconDarkRequest, management.RemoveCustomLabelPolicyIconDarkResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIconDark",
			opts...,
		),
		removeCustomLabelPolicyFont: connect_go.NewClient[management.RemoveCustomLabelPolicyFontRequest, management.RemoveCustomLabelPolicyFontResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyFont",
			opts...,
		),
		resetLabelPolicyToDefault: connect_go.NewClient[management.ResetLabelPolicyToDefaultRequest, management.ResetLabelPolicyToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault",
			opts...,
		),
		getCustomInitMessageText: connect_go.NewClient[management.GetCustomInitMessageTextRequest, management.GetCustomInitMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomInitMessageText",
			opts...,
		),
		getDefaultInitMessageText: connect_go.NewClient[management.GetDefaultInitMessageTextRequest, management.GetDefaultInitMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultInitMessageText",
			opts...,
		),
		setCustomInitMessageText: connect_go.NewClient[management.SetCustomInitMessageTextRequest, management.SetCustomInitMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomInitMessageText",
			opts...,
		),
		resetCustomInitMessageTextToDefault: connect_go.NewClient[management.ResetCustomInitMessageTextToDefaultRequest, management.ResetCustomInitMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomInitMessageTextToDefault",
			opts...,
		),
		getCustomPasswordResetMessageText: connect_go.NewClient[management.GetCustomPasswordResetMessageTextRequest, management.GetCustomPasswordResetMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomPasswordResetMessageText",
			opts...,
		),
		getDefaultPasswordResetMessageText: connect_go.NewClient[management.GetDefaultPasswordResetMessageTextRequest, management.GetDefaultPasswordResetMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultPasswordResetMessageText",
			opts...,
		),
		setCustomPasswordResetMessageText: connect_go.NewClient[management.SetCustomPasswordResetMessageTextRequest, management.SetCustomPasswordResetMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomPasswordResetMessageText",
			opts...,
		),
		resetCustomPasswordResetMessageTextToDefault: connect_go.NewClient[management.ResetCustomPasswordResetMessageTextToDefaultRequest, management.ResetCustomPasswordResetMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomPasswordResetMessageTextToDefault",
			opts...,
		),
		getCustomVerifyEmailMessageText: connect_go.NewClient[management.GetCustomVerifyEmailMessageTextRequest, management.GetCustomVerifyEmailMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomVerifyEmailMessageText",
			opts...,
		),
		getDefaultVerifyEmailMessageText: connect_go.NewClient[management.GetDefaultVerifyEmailMessageTextRequest, management.GetDefaultVerifyEmailMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailMessageText",
			opts...,
		),
		setCustomVerifyEmailMessageText: connect_go.NewClient[management.SetCustomVerifyEmailMessageTextRequest, management.SetCustomVerifyEmailMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomVerifyEmailMessageText",
			opts...,
		),
		resetCustomVerifyEmailMessageTextToDefault: connect_go.NewClient[management.ResetCustomVerifyEmailMessageTextToDefaultRequest, management.ResetCustomVerifyEmailMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailMessageTextToDefault",
			opts...,
		),
		getCustomVerifyPhoneMessageText: connect_go.NewClient[management.GetCustomVerifyPhoneMessageTextRequest, management.GetCustomVerifyPhoneMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomVerifyPhoneMessageText",
			opts...,
		),
		getDefaultVerifyPhoneMessageText: connect_go.NewClient[management.GetDefaultVerifyPhoneMessageTextRequest, management.GetDefaultVerifyPhoneMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultVerifyPhoneMessageText",
			opts...,
		),
		setCustomVerifyPhoneMessageText: connect_go.NewClient[management.SetCustomVerifyPhoneMessageTextRequest, management.SetCustomVerifyPhoneMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomVerifyPhoneMessageText",
			opts...,
		),
		resetCustomVerifyPhoneMessageTextToDefault: connect_go.NewClient[management.ResetCustomVerifyPhoneMessageTextToDefaultRequest, management.ResetCustomVerifyPhoneMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomVerifyPhoneMessageTextToDefault",
			opts...,
		),
		getCustomDomainClaimedMessageText: connect_go.NewClient[management.GetCustomDomainClaimedMessageTextRequest, management.GetCustomDomainClaimedMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomDomainClaimedMessageText",
			opts...,
		),
		getDefaultDomainClaimedMessageText: connect_go.NewClient[management.GetDefaultDomainClaimedMessageTextRequest, management.GetDefaultDomainClaimedMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultDomainClaimedMessageText",
			opts...,
		),
		setCustomDomainClaimedMessageCustomText: connect_go.NewClient[management.SetCustomDomainClaimedMessageTextRequest, management.SetCustomDomainClaimedMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomDomainClaimedMessageCustomText",
			opts...,
		),
		resetCustomDomainClaimedMessageTextToDefault: connect_go.NewClient[management.ResetCustomDomainClaimedMessageTextToDefaultRequest, management.ResetCustomDomainClaimedMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomDomainClaimedMessageTextToDefault",
			opts...,
		),
		getCustomPasswordlessRegistrationMessageText: connect_go.NewClient[management.GetCustomPasswordlessRegistrationMessageTextRequest, management.GetCustomPasswordlessRegistrationMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomPasswordlessRegistrationMessageText",
			opts...,
		),
		getDefaultPasswordlessRegistrationMessageText: connect_go.NewClient[management.GetDefaultPasswordlessRegistrationMessageTextRequest, management.GetDefaultPasswordlessRegistrationMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultPasswordlessRegistrationMessageText",
			opts...,
		),
		setCustomPasswordlessRegistrationMessageCustomText: connect_go.NewClient[management.SetCustomPasswordlessRegistrationMessageTextRequest, management.SetCustomPasswordlessRegistrationMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomPasswordlessRegistrationMessageCustomText",
			opts...,
		),
		resetCustomPasswordlessRegistrationMessageTextToDefault: connect_go.NewClient[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, management.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomPasswordlessRegistrationMessageTextToDefault",
			opts...,
		),
		getCustomPasswordChangeMessageText: connect_go.NewClient[management.GetCustomPasswordChangeMessageTextRequest, management.GetCustomPasswordChangeMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomPasswordChangeMessageText",
			opts...,
		),
		getDefaultPasswordChangeMessageText: connect_go.NewClient[management.GetDefaultPasswordChangeMessageTextRequest, management.GetDefaultPasswordChangeMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultPasswordChangeMessageText",
			opts...,
		),
		setCustomPasswordChangeMessageCustomText: connect_go.NewClient[management.SetCustomPasswordChangeMessageTextRequest, management.SetCustomPasswordChangeMessageTextResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomPasswordChangeMessageCustomText",
			opts...,
		),
		resetCustomPasswordChangeMessageTextToDefault: connect_go.NewClient[management.ResetCustomPasswordChangeMessageTextToDefaultRequest, management.ResetCustomPasswordChangeMessageTextToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomPasswordChangeMessageTextToDefault",
			opts...,
		),
		getCustomLoginTexts: connect_go.NewClient[management.GetCustomLoginTextsRequest, management.GetCustomLoginTextsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetCustomLoginTexts",
			opts...,
		),
		getDefaultLoginTexts: connect_go.NewClient[management.GetDefaultLoginTextsRequest, management.GetDefaultLoginTextsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetDefaultLoginTexts",
			opts...,
		),
		setCustomLoginText: connect_go.NewClient[management.SetCustomLoginTextsRequest, management.SetCustomLoginTextsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetCustomLoginText",
			opts...,
		),
		resetCustomLoginTextToDefault: connect_go.NewClient[management.ResetCustomLoginTextsToDefaultRequest, management.ResetCustomLoginTextsToDefaultResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ResetCustomLoginTextToDefault",
			opts...,
		),
		getOrgIDPByID: connect_go.NewClient[management.GetOrgIDPByIDRequest, management.GetOrgIDPByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetOrgIDPByID",
			opts...,
		),
		listOrgIDPs: connect_go.NewClient[management.ListOrgIDPsRequest, management.ListOrgIDPsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListOrgIDPs",
			opts...,
		),
		addOrgOIDCIDP: connect_go.NewClient[management.AddOrgOIDCIDPRequest, management.AddOrgOIDCIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddOrgOIDCIDP",
			opts...,
		),
		addOrgJWTIDP: connect_go.NewClient[management.AddOrgJWTIDPRequest, management.AddOrgJWTIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddOrgJWTIDP",
			opts...,
		),
		deactivateOrgIDP: connect_go.NewClient[management.DeactivateOrgIDPRequest, management.DeactivateOrgIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateOrgIDP",
			opts...,
		),
		reactivateOrgIDP: connect_go.NewClient[management.ReactivateOrgIDPRequest, management.ReactivateOrgIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateOrgIDP",
			opts...,
		),
		removeOrgIDP: connect_go.NewClient[management.RemoveOrgIDPRequest, management.RemoveOrgIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/RemoveOrgIDP",
			opts...,
		),
		updateOrgIDP: connect_go.NewClient[management.UpdateOrgIDPRequest, management.UpdateOrgIDPResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateOrgIDP",
			opts...,
		),
		updateOrgIDPOIDCConfig: connect_go.NewClient[management.UpdateOrgIDPOIDCConfigRequest, management.UpdateOrgIDPOIDCConfigResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig",
			opts...,
		),
		updateOrgIDPJWTConfig: connect_go.NewClient[management.UpdateOrgIDPJWTConfigRequest, management.UpdateOrgIDPJWTConfigResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateOrgIDPJWTConfig",
			opts...,
		),
		listProviders: connect_go.NewClient[management.ListProvidersRequest, management.ListProvidersResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListProviders",
			opts...,
		),
		getProviderByID: connect_go.NewClient[management.GetProviderByIDRequest, management.GetProviderByIDResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetProviderByID",
			opts...,
		),
		addLDAPProvider: connect_go.NewClient[management.AddLDAPProviderRequest, management.AddLDAPProviderResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/AddLDAPProvider",
			opts...,
		),
		updateLDAPProvider: connect_go.NewClient[management.UpdateLDAPProviderRequest, management.UpdateLDAPProviderResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateLDAPProvider",
			opts...,
		),
		deleteProvider: connect_go.NewClient[management.DeleteProviderRequest, management.DeleteProviderResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeleteProvider",
			opts...,
		),
		listActions: connect_go.NewClient[management.ListActionsRequest, management.ListActionsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListActions",
			opts...,
		),
		getAction: connect_go.NewClient[management.GetActionRequest, management.GetActionResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetAction",
			opts...,
		),
		createAction: connect_go.NewClient[management.CreateActionRequest, management.CreateActionResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/CreateAction",
			opts...,
		),
		updateAction: connect_go.NewClient[management.UpdateActionRequest, management.UpdateActionResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/UpdateAction",
			opts...,
		),
		deactivateAction: connect_go.NewClient[management.DeactivateActionRequest, management.DeactivateActionResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeactivateAction",
			opts...,
		),
		reactivateAction: connect_go.NewClient[management.ReactivateActionRequest, management.ReactivateActionResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ReactivateAction",
			opts...,
		),
		deleteAction: connect_go.NewClient[management.DeleteActionRequest, management.DeleteActionResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/DeleteAction",
			opts...,
		),
		listFlowTypes: connect_go.NewClient[management.ListFlowTypesRequest, management.ListFlowTypesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListFlowTypes",
			opts...,
		),
		listFlowTriggerTypes: connect_go.NewClient[management.ListFlowTriggerTypesRequest, management.ListFlowTriggerTypesResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ListFlowTriggerTypes",
			opts...,
		),
		getFlow: connect_go.NewClient[management.GetFlowRequest, management.GetFlowResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/GetFlow",
			opts...,
		),
		clearFlow: connect_go.NewClient[management.ClearFlowRequest, management.ClearFlowResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/ClearFlow",
			opts...,
		),
		setTriggerActions: connect_go.NewClient[management.SetTriggerActionsRequest, management.SetTriggerActionsResponse](
			httpClient,
			baseURL+"/zitadel.management.v1.ManagementService/SetTriggerActions",
			opts...,
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	healthz                                                 *connect_go.Client[management.HealthzRequest, management.HealthzResponse]
	getOIDCInformation                                      *connect_go.Client[management.GetOIDCInformationRequest, management.GetOIDCInformationResponse]
	getIAM                                                  *connect_go.Client[management.GetIAMRequest, management.GetIAMResponse]
	getSupportedLanguages                                   *connect_go.Client[management.GetSupportedLanguagesRequest, management.GetSupportedLanguagesResponse]
	getUserByID                                             *connect_go.Client[management.GetUserByIDRequest, management.GetUserByIDResponse]
	getUserByLoginNameGlobal                                *connect_go.Client[management.GetUserByLoginNameGlobalRequest, management.GetUserByLoginNameGlobalResponse]
	listUsers                                               *connect_go.Client[management.ListUsersRequest, management.ListUsersResponse]
	listUserChanges                                         *connect_go.Client[management.ListUserChangesRequest, management.ListUserChangesResponse]
	isUserUnique                                            *connect_go.Client[management.IsUserUniqueRequest, management.IsUserUniqueResponse]
	addHumanUser                                            *connect_go.Client[management.AddHumanUserRequest, management.AddHumanUserResponse]
	importHumanUser                                         *connect_go.Client[management.ImportHumanUserRequest, management.ImportHumanUserResponse]
	addMachineUser                                          *connect_go.Client[management.AddMachineUserRequest, management.AddMachineUserResponse]
	deactivateUser                                          *connect_go.Client[management.DeactivateUserRequest, management.DeactivateUserResponse]
	reactivateUser                                          *connect_go.Client[management.ReactivateUserRequest, management.ReactivateUserResponse]
	lockUser                                                *connect_go.Client[management.LockUserRequest, management.LockUserResponse]
	unlockUser                                              *connect_go.Client[management.UnlockUserRequest, management.UnlockUserResponse]
	removeUser                                              *connect_go.Client[management.RemoveUserRequest, management.RemoveUserResponse]
	updateUserName                                          *connect_go.Client[management.UpdateUserNameRequest, management.UpdateUserNameResponse]
	setUserMetadata                                         *connect_go.Client[management.SetUserMetadataRequest, management.SetUserMetadataResponse]
	bulkSetUserMetadata                                     *connect_go.Client[management.BulkSetUserMetadataRequest, management.BulkSetUserMetadataResponse]
	listUserMetadata                                        *connect_go.Client[management.ListUserMetadataRequest, management.ListUserMetadataResponse]
	getUserMetadata                                         *connect_go.Client[management.GetUserMetadataRequest, management.GetUserMetadataResponse]
	removeUserMetadata                                      *connect_go.Client[management.RemoveUserMetadataRequest, management.RemoveUserMetadataResponse]
	bulkRemoveUserMetadata                                  *connect_go.Client[management.BulkRemoveUserMetadataRequest, management.BulkRemoveUserMetadataResponse]
	getHumanProfile                                         *connect_go.Client[management.GetHumanProfileRequest, management.GetHumanProfileResponse]
	updateHumanProfile                                      *connect_go.Client[management.UpdateHumanProfileRequest, management.UpdateHumanProfileResponse]
	getHumanEmail                                           *connect_go.Client[management.GetHumanEmailRequest, management.GetHumanEmailResponse]
	updateHumanEmail                                        *connect_go.Client[management.UpdateHumanEmailRequest, management.UpdateHumanEmailResponse]
	resendHumanInitialization                               *connect_go.Client[management.ResendHumanInitializationRequest, management.ResendHumanInitializationResponse]
	resendHumanEmailVerification                            *connect_go.Client[management.ResendHumanEmailVerificationRequest, management.ResendHumanEmailVerificationResponse]
	getHumanPhone                                           *connect_go.Client[management.GetHumanPhoneRequest, management.GetHumanPhoneResponse]
	updateHumanPhone                                        *connect_go.Client[management.UpdateHumanPhoneRequest, management.UpdateHumanPhoneResponse]
	removeHumanPhone                                        *connect_go.Client[management.RemoveHumanPhoneRequest, management.RemoveHumanPhoneResponse]
	resendHumanPhoneVerification                            *connect_go.Client[management.ResendHumanPhoneVerificationRequest, management.ResendHumanPhoneVerificationResponse]
	removeHumanAvatar                                       *connect_go.Client[management.RemoveHumanAvatarRequest, management.RemoveHumanAvatarResponse]
	setHumanInitialPassword                                 *connect_go.Client[management.SetHumanInitialPasswordRequest, management.SetHumanInitialPasswordResponse]
	setHumanPassword                                        *connect_go.Client[management.SetHumanPasswordRequest, management.SetHumanPasswordResponse]
	sendHumanResetPasswordNotification                      *connect_go.Client[management.SendHumanResetPasswordNotificationRequest, management.SendHumanResetPasswordNotificationResponse]
	listHumanAuthFactors                                    *connect_go.Client[management.ListHumanAuthFactorsRequest, management.ListHumanAuthFactorsResponse]
	removeHumanAuthFactorOTP                                *connect_go.Client[management.RemoveHumanAuthFactorOTPRequest, management.RemoveHumanAuthFactorOTPResponse]
	removeHumanAuthFactorU2F                                *connect_go.Client[management.RemoveHumanAuthFactorU2FRequest, management.RemoveHumanAuthFactorU2FResponse]
	listHumanPasswordless                                   *connect_go.Client[management.ListHumanPasswordlessRequest, management.ListHumanPasswordlessResponse]
	addPasswordlessRegistration                             *connect_go.Client[management.AddPasswordlessRegistrationRequest, management.AddPasswordlessRegistrationResponse]
	sendPasswordlessRegistration                            *connect_go.Client[management.SendPasswordlessRegistrationRequest, management.SendPasswordlessRegistrationResponse]
	removeHumanPasswordless                                 *connect_go.Client[management.RemoveHumanPasswordlessRequest, management.RemoveHumanPasswordlessResponse]
	updateMachine                                           *connect_go.Client[management.UpdateMachineRequest, management.UpdateMachineResponse]
	generateMachineSecret                                   *connect_go.Client[management.GenerateMachineSecretRequest, management.GenerateMachineSecretResponse]
	removeMachineSecret                                     *connect_go.Client[management.RemoveMachineSecretRequest, management.RemoveMachineSecretResponse]
	getMachineKeyByIDs                                      *connect_go.Client[management.GetMachineKeyByIDsRequest, management.GetMachineKeyByIDsResponse]
	listMachineKeys                                         *connect_go.Client[management.ListMachineKeysRequest, management.ListMachineKeysResponse]
	addMachineKey                                           *connect_go.Client[management.AddMachineKeyRequest, management.AddMachineKeyResponse]
	removeMachineKey                                        *connect_go.Client[management.RemoveMachineKeyRequest, management.RemoveMachineKeyResponse]
	getPersonalAccessTokenByIDs                             *connect_go.Client[management.GetPersonalAccessTokenByIDsRequest, management.GetPersonalAccessTokenByIDsResponse]
	listPersonalAccessTokens                                *connect_go.Client[management.ListPersonalAccessTokensRequest, management.ListPersonalAccessTokensResponse]
	addPersonalAccessToken                                  *connect_go.Client[management.AddPersonalAccessTokenRequest, management.AddPersonalAccessTokenResponse]
	removePersonalAccessToken                               *connect_go.Client[management.RemovePersonalAccessTokenRequest, management.RemovePersonalAccessTokenResponse]
	listHumanLinkedIDPs                                     *connect_go.Client[management.ListHumanLinkedIDPsRequest, management.ListHumanLinkedIDPsResponse]
	removeHumanLinkedIDP                                    *connect_go.Client[management.RemoveHumanLinkedIDPRequest, management.RemoveHumanLinkedIDPResponse]
	listUserMemberships                                     *connect_go.Client[management.ListUserMembershipsRequest, management.ListUserMembershipsResponse]
	getMyOrg                                                *connect_go.Client[management.GetMyOrgRequest, management.GetMyOrgResponse]
	getOrgByDomainGlobal                                    *connect_go.Client[management.GetOrgByDomainGlobalRequest, management.GetOrgByDomainGlobalResponse]
	listOrgChanges                                          *connect_go.Client[management.ListOrgChangesRequest, management.ListOrgChangesResponse]
	addOrg                                                  *connect_go.Client[management.AddOrgRequest, management.AddOrgResponse]
	updateOrg                                               *connect_go.Client[management.UpdateOrgRequest, management.UpdateOrgResponse]
	deactivateOrg                                           *connect_go.Client[management.DeactivateOrgRequest, management.DeactivateOrgResponse]
	reactivateOrg                                           *connect_go.Client[management.ReactivateOrgRequest, management.ReactivateOrgResponse]
	removeOrg                                               *connect_go.Client[management.RemoveOrgRequest, management.RemoveOrgResponse]
	setOrgMetadata                                          *connect_go.Client[management.SetOrgMetadataRequest, management.SetOrgMetadataResponse]
	bulkSetOrgMetadata                                      *connect_go.Client[management.BulkSetOrgMetadataRequest, management.BulkSetOrgMetadataResponse]
	listOrgMetadata                                         *connect_go.Client[management.ListOrgMetadataRequest, management.ListOrgMetadataResponse]
	getOrgMetadata                                          *connect_go.Client[management.GetOrgMetadataRequest, management.GetOrgMetadataResponse]
	removeOrgMetadata                                       *connect_go.Client[management.RemoveOrgMetadataRequest, management.RemoveOrgMetadataResponse]
	bulkRemoveOrgMetadata                                   *connect_go.Client[management.BulkRemoveOrgMetadataRequest, management.BulkRemoveOrgMetadataResponse]
	listOrgDomains                                          *connect_go.Client[management.ListOrgDomainsRequest, management.ListOrgDomainsResponse]
	addOrgDomain                                            *connect_go.Client[management.AddOrgDomainRequest, management.AddOrgDomainResponse]
	removeOrgDomain                                         *connect_go.Client[management.RemoveOrgDomainRequest, management.RemoveOrgDomainResponse]
	generateOrgDomainValidation                             *connect_go.Client[management.GenerateOrgDomainValidationRequest, management.GenerateOrgDomainValidationResponse]
	validateOrgDomain                                       *connect_go.Client[management.ValidateOrgDomainRequest, management.ValidateOrgDomainResponse]
	setPrimaryOrgDomain                                     *connect_go.Client[management.SetPrimaryOrgDomainRequest, management.SetPrimaryOrgDomainResponse]
	listOrgMemberRoles                                      *connect_go.Client[management.ListOrgMemberRolesRequest, management.ListOrgMemberRolesResponse]
	listOrgMembers                                          *connect_go.Client[management.ListOrgMembersRequest, management.ListOrgMembersResponse]
	addOrgMember                                            *connect_go.Client[management.AddOrgMemberRequest, management.AddOrgMemberResponse]
	updateOrgMember                                         *connect_go.Client[management.UpdateOrgMemberRequest, management.UpdateOrgMemberResponse]
	removeOrgMember                                         *connect_go.Client[management.RemoveOrgMemberRequest, management.RemoveOrgMemberResponse]
	getProjectByID                                          *connect_go.Client[management.GetProjectByIDRequest, management.GetProjectByIDResponse]
	getGrantedProjectByID                                   *connect_go.Client[management.GetGrantedProjectByIDRequest, management.GetGrantedProjectByIDResponse]
	listProjects                                            *connect_go.Client[management.ListProjectsRequest, management.ListProjectsResponse]
	listGrantedProjects                                     *connect_go.Client[management.ListGrantedProjectsRequest, management.ListGrantedProjectsResponse]
	listGrantedProjectRoles                                 *connect_go.Client[management.ListGrantedProjectRolesRequest, management.ListGrantedProjectRolesResponse]
	listProjectChanges                                      *connect_go.Client[management.ListProjectChangesRequest, management.ListProjectChangesResponse]
	addProject                                              *connect_go.Client[management.AddProjectRequest, management.AddProjectResponse]
	updateProject                                           *connect_go.Client[management.UpdateProjectRequest, management.UpdateProjectResponse]
	deactivateProject                                       *connect_go.Client[management.DeactivateProjectRequest, management.DeactivateProjectResponse]
	reactivateProject                                       *connect_go.Client[management.ReactivateProjectRequest, management.ReactivateProjectResponse]
	removeProject                                           *connect_go.Client[management.RemoveProjectRequest, management.RemoveProjectResponse]
	listProjectRoles                                        *connect_go.Client[management.ListProjectRolesRequest, management.ListProjectRolesResponse]
	addProjectRole                                          *connect_go.Client[management.AddProjectRoleRequest, management.AddProjectRoleResponse]
	bulkAddProjectRoles                                     *connect_go.Client[management.BulkAddProjectRolesRequest, management.BulkAddProjectRolesResponse]
	updateProjectRole                                       *connect_go.Client[management.UpdateProjectRoleRequest, management.UpdateProjectRoleResponse]
	removeProjectRole                                       *connect_go.Client[management.RemoveProjectRoleRequest, management.RemoveProjectRoleResponse]
	listProjectMemberRoles                                  *connect_go.Client[management.ListProjectMemberRolesRequest, management.ListProjectMemberRolesResponse]
	listProjectMembers                                      *connect_go.Client[management.ListProjectMembersRequest, management.ListProjectMembersResponse]
	addProjectMember                                        *connect_go.Client[management.AddProjectMemberRequest, management.AddProjectMemberResponse]
	updateProjectMember                                     *connect_go.Client[management.UpdateProjectMemberRequest, management.UpdateProjectMemberResponse]
	removeProjectMember                                     *connect_go.Client[management.RemoveProjectMemberRequest, management.RemoveProjectMemberResponse]
	getAppByID                                              *connect_go.Client[management.GetAppByIDRequest, management.GetAppByIDResponse]
	listApps                                                *connect_go.Client[management.ListAppsRequest, management.ListAppsResponse]
	listAppChanges                                          *connect_go.Client[management.ListAppChangesRequest, management.ListAppChangesResponse]
	addOIDCApp                                              *connect_go.Client[management.AddOIDCAppRequest, management.AddOIDCAppResponse]
	addSAMLApp                                              *connect_go.Client[management.AddSAMLAppRequest, management.AddSAMLAppResponse]
	addAPIApp                                               *connect_go.Client[management.AddAPIAppRequest, management.AddAPIAppResponse]
	updateApp                                               *connect_go.Client[management.UpdateAppRequest, management.UpdateAppResponse]
	updateOIDCAppConfig                                     *connect_go.Client[management.UpdateOIDCAppConfigRequest, management.UpdateOIDCAppConfigResponse]
	updateSAMLAppConfig                                     *connect_go.Client[management.UpdateSAMLAppConfigRequest, management.UpdateSAMLAppConfigResponse]
	updateAPIAppConfig                                      *connect_go.Client[management.UpdateAPIAppConfigRequest, management.UpdateAPIAppConfigResponse]
	deactivateApp                                           *connect_go.Client[management.DeactivateAppRequest, management.DeactivateAppResponse]
	reactivateApp                                           *connect_go.Client[management.ReactivateAppRequest, management.ReactivateAppResponse]
	removeApp                                               *connect_go.Client[management.RemoveAppRequest, management.RemoveAppResponse]
	regenerateOIDCClientSecret                              *connect_go.Client[management.RegenerateOIDCClientSecretRequest, management.RegenerateOIDCClientSecretResponse]
	regenerateAPIClientSecret                               *connect_go.Client[management.RegenerateAPIClientSecretRequest, management.RegenerateAPIClientSecretResponse]
	getAppKey                                               *connect_go.Client[management.GetAppKeyRequest, management.GetAppKeyResponse]
	listAppKeys                                             *connect_go.Client[management.ListAppKeysRequest, management.ListAppKeysResponse]
	addAppKey                                               *connect_go.Client[management.AddAppKeyRequest, management.AddAppKeyResponse]
	removeAppKey                                            *connect_go.Client[management.RemoveAppKeyRequest, management.RemoveAppKeyResponse]
	listProjectGrantChanges                                 *connect_go.Client[management.ListProjectGrantChangesRequest, management.ListProjectGrantChangesResponse]
	getProjectGrantByID                                     *connect_go.Client[management.GetProjectGrantByIDRequest, management.GetProjectGrantByIDResponse]
	listProjectGrants                                       *connect_go.Client[management.ListProjectGrantsRequest, management.ListProjectGrantsResponse]
	listAllProjectGrants                                    *connect_go.Client[management.ListAllProjectGrantsRequest, management.ListAllProjectGrantsResponse]
	addProjectGrant                                         *connect_go.Client[management.AddProjectGrantRequest, management.AddProjectGrantResponse]
	updateProjectGrant                                      *connect_go.Client[management.UpdateProjectGrantRequest, management.UpdateProjectGrantResponse]
	deactivateProjectGrant                                  *connect_go.Client[management.DeactivateProjectGrantRequest, management.DeactivateProjectGrantResponse]
	reactivateProjectGrant                                  *connect_go.Client[management.ReactivateProjectGrantRequest, management.ReactivateProjectGrantResponse]
	removeProjectGrant                                      *connect_go.Client[management.RemoveProjectGrantRequest, management.RemoveProjectGrantResponse]
	listProjectGrantMemberRoles                             *connect_go.Client[management.ListProjectGrantMemberRolesRequest, management.ListProjectGrantMemberRolesResponse]
	listProjectGrantMembers                                 *connect_go.Client[management.ListProjectGrantMembersRequest, management.ListProjectGrantMembersResponse]
	addProjectGrantMember                                   *connect_go.Client[management.AddProjectGrantMemberRequest, management.AddProjectGrantMemberResponse]
	updateProjectGrantMember                                *connect_go.Client[management.UpdateProjectGrantMemberRequest, management.UpdateProjectGrantMemberResponse]
	removeProjectGrantMember                                *connect_go.Client[management.RemoveProjectGrantMemberRequest, management.RemoveProjectGrantMemberResponse]
	getUserGrantByID                                        *connect_go.Client[management.GetUserGrantByIDRequest, management.GetUserGrantByIDResponse]
	listUserGrants                                          *connect_go.Client[management.ListUserGrantRequest, management.ListUserGrantResponse]
	addUserGrant                                            *connect_go.Client[management.AddUserGrantRequest, management.AddUserGrantResponse]
	updateUserGrant                                         *connect_go.Client[management.UpdateUserGrantRequest, management.UpdateUserGrantResponse]
	deactivateUserGrant                                     *connect_go.Client[management.DeactivateUserGrantRequest, management.DeactivateUserGrantResponse]
	reactivateUserGrant                                     *connect_go.Client[management.ReactivateUserGrantRequest, management.ReactivateUserGrantResponse]
	removeUserGrant                                         *connect_go.Client[management.RemoveUserGrantRequest, management.RemoveUserGrantResponse]
	bulkRemoveUserGrant                                     *connect_go.Client[management.BulkRemoveUserGrantRequest, management.BulkRemoveUserGrantResponse]
	getOrgIAMPolicy                                         *connect_go.Client[management.GetOrgIAMPolicyRequest, management.GetOrgIAMPolicyResponse]
	getDomainPolicy                                         *connect_go.Client[management.GetDomainPolicyRequest, management.GetDomainPolicyResponse]
	getLoginPolicy                                          *connect_go.Client[management.GetLoginPolicyRequest, management.GetLoginPolicyResponse]
	getDefaultLoginPolicy                                   *connect_go.Client[management.GetDefaultLoginPolicyRequest, management.GetDefaultLoginPolicyResponse]
	addCustomLoginPolicy                                    *connect_go.Client[management.AddCustomLoginPolicyRequest, management.AddCustomLoginPolicyResponse]
	updateCustomLoginPolicy                                 *connect_go.Client[management.UpdateCustomLoginPolicyRequest, management.UpdateCustomLoginPolicyResponse]
	resetLoginPolicyToDefault                               *connect_go.Client[management.ResetLoginPolicyToDefaultRequest, management.ResetLoginPolicyToDefaultResponse]
	listLoginPolicyIDPs                                     *connect_go.Client[management.ListLoginPolicyIDPsRequest, management.ListLoginPolicyIDPsResponse]
	addIDPToLoginPolicy                                     *connect_go.Client[management.AddIDPToLoginPolicyRequest, management.AddIDPToLoginPolicyResponse]
	removeIDPFromLoginPolicy                                *connect_go.Client[management.RemoveIDPFromLoginPolicyRequest, management.RemoveIDPFromLoginPolicyResponse]
	listLoginPolicySecondFactors                            *connect_go.Client[management.ListLoginPolicySecondFactorsRequest, management.ListLoginPolicySecondFactorsResponse]
	addSecondFactorToLoginPolicy                            *connect_go.Client[management.AddSecondFactorToLoginPolicyRequest, management.AddSecondFactorToLoginPolicyResponse]
	removeSecondFactorFromLoginPolicy                       *connect_go.Client[management.RemoveSecondFactorFromLoginPolicyRequest, management.RemoveSecondFactorFromLoginPolicyResponse]
	listLoginPolicyMultiFactors                             *connect_go.Client[management.ListLoginPolicyMultiFactorsRequest, management.ListLoginPolicyMultiFactorsResponse]
	addMultiFactorToLoginPolicy                             *connect_go.Client[management.AddMultiFactorToLoginPolicyRequest, management.AddMultiFactorToLoginPolicyResponse]
	removeMultiFactorFromLoginPolicy                        *connect_go.Client[management.RemoveMultiFactorFromLoginPolicyRequest, management.RemoveMultiFactorFromLoginPolicyResponse]
	getPasswordComplexityPolicy                             *connect_go.Client[management.GetPasswordComplexityPolicyRequest, management.GetPasswordComplexityPolicyResponse]
	getDefaultPasswordComplexityPolicy                      *connect_go.Client[management.GetDefaultPasswordComplexityPolicyRequest, management.GetDefaultPasswordComplexityPolicyResponse]
	addCustomPasswordComplexityPolicy                       *connect_go.Client[management.AddCustomPasswordComplexityPolicyRequest, management.AddCustomPasswordComplexityPolicyResponse]
	updateCustomPasswordComplexityPolicy                    *connect_go.Client[management.UpdateCustomPasswordComplexityPolicyRequest, management.UpdateCustomPasswordComplexityPolicyResponse]
	resetPasswordComplexityPolicyToDefault                  *connect_go.Client[management.ResetPasswordComplexityPolicyToDefaultRequest, management.ResetPasswordComplexityPolicyToDefaultResponse]
	getPasswordAgePolicy                                    *connect_go.Client[management.GetPasswordAgePolicyRequest, management.GetPasswordAgePolicyResponse]
	getDefaultPasswordAgePolicy                             *connect_go.Client[management.GetDefaultPasswordAgePolicyRequest, management.GetDefaultPasswordAgePolicyResponse]
	addCustomPasswordAgePolicy                              *connect_go.Client[management.AddCustomPasswordAgePolicyRequest, management.AddCustomPasswordAgePolicyResponse]
	updateCustomPasswordAgePolicy                           *connect_go.Client[management.UpdateCustomPasswordAgePolicyRequest, management.UpdateCustomPasswordAgePolicyResponse]
	resetPasswordAgePolicyToDefault                         *connect_go.Client[management.ResetPasswordAgePolicyToDefaultRequest, management.ResetPasswordAgePolicyToDefaultResponse]
	getLockoutPolicy                                        *connect_go.Client[management.GetLockoutPolicyRequest, management.GetLockoutPolicyResponse]
	getDefaultLockoutPolicy                                 *connect_go.Client[management.GetDefaultLockoutPolicyRequest, management.GetDefaultLockoutPolicyResponse]
	addCustomLockoutPolicy                                  *connect_go.Client[management.AddCustomLockoutPolicyRequest, management.AddCustomLockoutPolicyResponse]
	updateCustomLockoutPolicy                               *connect_go.Client[management.UpdateCustomLockoutPolicyRequest, management.UpdateCustomLockoutPolicyResponse]
	resetLockoutPolicyToDefault                             *connect_go.Client[management.ResetLockoutPolicyToDefaultRequest, management.ResetLockoutPolicyToDefaultResponse]
	getPrivacyPolicy                                        *connect_go.Client[management.GetPrivacyPolicyRequest, management.GetPrivacyPolicyResponse]
	getDefaultPrivacyPolicy                                 *connect_go.Client[management.GetDefaultPrivacyPolicyRequest, management.GetDefaultPrivacyPolicyResponse]
	addCustomPrivacyPolicy                                  *connect_go.Client[management.AddCustomPrivacyPolicyRequest, management.AddCustomPrivacyPolicyResponse]
	updateCustomPrivacyPolicy                               *connect_go.Client[management.UpdateCustomPrivacyPolicyRequest, management.UpdateCustomPrivacyPolicyResponse]
	resetPrivacyPolicyToDefault                             *connect_go.Client[management.ResetPrivacyPolicyToDefaultRequest, management.ResetPrivacyPolicyToDefaultResponse]
	getNotificationPolicy                                   *connect_go.Client[management.GetNotificationPolicyRequest, management.GetNotificationPolicyResponse]
	getDefaultNotificationPolicy                            *connect_go.Client[management.GetDefaultNotificationPolicyRequest, management.GetDefaultNotificationPolicyResponse]
	addCustomNotificationPolicy                             *connect_go.Client[management.AddCustomNotificationPolicyRequest, management.AddCustomNotificationPolicyResponse]
	updateCustomNotificationPolicy                          *connect_go.Client[management.UpdateCustomNotificationPolicyRequest, management.UpdateCustomNotificationPolicyResponse]
	resetNotificationPolicyToDefault                        *connect_go.Client[management.ResetNotificationPolicyToDefaultRequest, management.ResetNotificationPolicyToDefaultResponse]
	getLabelPolicy                                          *connect_go.Client[management.GetLabelPolicyRequest, management.GetLabelPolicyResponse]
	getPreviewLabelPolicy                                   *connect_go.Client[management.GetPreviewLabelPolicyRequest, management.GetPreviewLabelPolicyResponse]
	getDefaultLabelPolicy                                   *connect_go.Client[management.GetDefaultLabelPolicyRequest, management.GetDefaultLabelPolicyResponse]
	addCustomLabelPolicy                                    *connect_go.Client[management.AddCustomLabelPolicyRequest, management.AddCustomLabelPolicyResponse]
	updateCustomLabelPolicy                                 *connect_go.Client[management.UpdateCustomLabelPolicyRequest, management.UpdateCustomLabelPolicyResponse]
	activateCustomLabelPolicy                               *connect_go.Client[management.ActivateCustomLabelPolicyRequest, management.ActivateCustomLabelPolicyResponse]
	removeCustomLabelPolicyLogo                             *connect_go.Client[management.RemoveCustomLabelPolicyLogoRequest, management.RemoveCustomLabelPolicyLogoResponse]
	removeCustomLabelPolicyLogoDark                         *connect_go.Client[management.RemoveCustomLabelPolicyLogoDarkRequest, management.RemoveCustomLabelPolicyLogoDarkResponse]
	removeCustomLabelPolicyIcon                             *connect_go.Client[management.RemoveCustomLabelPolicyIconRequest, management.RemoveCustomLabelPolicyIconResponse]
	removeCustomLabelPolicyIconDark                         *connect_go.Client[management.RemoveCustomLabelPolicyIconDarkRequest, management.RemoveCustomLabelPolicyIconDarkResponse]
	removeCustomLabelPolicyFont                             *connect_go.Client[management.RemoveCustomLabelPolicyFontRequest, management.RemoveCustomLabelPolicyFontResponse]
	resetLabelPolicyToDefault                               *connect_go.Client[management.ResetLabelPolicyToDefaultRequest, management.ResetLabelPolicyToDefaultResponse]
	getCustomInitMessageText                                *connect_go.Client[management.GetCustomInitMessageTextRequest, management.GetCustomInitMessageTextResponse]
	getDefaultInitMessageText                               *connect_go.Client[management.GetDefaultInitMessageTextRequest, management.GetDefaultInitMessageTextResponse]
	setCustomInitMessageText                                *connect_go.Client[management.SetCustomInitMessageTextRequest, management.SetCustomInitMessageTextResponse]
	resetCustomInitMessageTextToDefault                     *connect_go.Client[management.ResetCustomInitMessageTextToDefaultRequest, management.ResetCustomInitMessageTextToDefaultResponse]
	getCustomPasswordResetMessageText                       *connect_go.Client[management.GetCustomPasswordResetMessageTextRequest, management.GetCustomPasswordResetMessageTextResponse]
	getDefaultPasswordResetMessageText                      *connect_go.Client[management.GetDefaultPasswordResetMessageTextRequest, management.GetDefaultPasswordResetMessageTextResponse]
	setCustomPasswordResetMessageText                       *connect_go.Client[management.SetCustomPasswordResetMessageTextRequest, management.SetCustomPasswordResetMessageTextResponse]
	resetCustomPasswordResetMessageTextToDefault            *connect_go.Client[management.ResetCustomPasswordResetMessageTextToDefaultRequest, management.ResetCustomPasswordResetMessageTextToDefaultResponse]
	getCustomVerifyEmailMessageText                         *connect_go.Client[management.GetCustomVerifyEmailMessageTextRequest, management.GetCustomVerifyEmailMessageTextResponse]
	getDefaultVerifyEmailMessageText                        *connect_go.Client[management.GetDefaultVerifyEmailMessageTextRequest, management.GetDefaultVerifyEmailMessageTextResponse]
	setCustomVerifyEmailMessageText                         *connect_go.Client[management.SetCustomVerifyEmailMessageTextRequest, management.SetCustomVerifyEmailMessageTextResponse]
	resetCustomVerifyEmailMessageTextToDefault              *connect_go.Client[management.ResetCustomVerifyEmailMessageTextToDefaultRequest, management.ResetCustomVerifyEmailMessageTextToDefaultResponse]
	getCustomVerifyPhoneMessageText                         *connect_go.Client[management.GetCustomVerifyPhoneMessageTextRequest, management.GetCustomVerifyPhoneMessageTextResponse]
	getDefaultVerifyPhoneMessageText                        *connect_go.Client[management.GetDefaultVerifyPhoneMessageTextRequest, management.GetDefaultVerifyPhoneMessageTextResponse]
	setCustomVerifyPhoneMessageText                         *connect_go.Client[management.SetCustomVerifyPhoneMessageTextRequest, management.SetCustomVerifyPhoneMessageTextResponse]
	resetCustomVerifyPhoneMessageTextToDefault              *connect_go.Client[management.ResetCustomVerifyPhoneMessageTextToDefaultRequest, management.ResetCustomVerifyPhoneMessageTextToDefaultResponse]
	getCustomDomainClaimedMessageText                       *connect_go.Client[management.GetCustomDomainClaimedMessageTextRequest, management.GetCustomDomainClaimedMessageTextResponse]
	getDefaultDomainClaimedMessageText                      *connect_go.Client[management.GetDefaultDomainClaimedMessageTextRequest, management.GetDefaultDomainClaimedMessageTextResponse]
	setCustomDomainClaimedMessageCustomText                 *connect_go.Client[management.SetCustomDomainClaimedMessageTextRequest, management.SetCustomDomainClaimedMessageTextResponse]
	resetCustomDomainClaimedMessageTextToDefault            *connect_go.Client[management.ResetCustomDomainClaimedMessageTextToDefaultRequest, management.ResetCustomDomainClaimedMessageTextToDefaultResponse]
	getCustomPasswordlessRegistrationMessageText            *connect_go.Client[management.GetCustomPasswordlessRegistrationMessageTextRequest, management.GetCustomPasswordlessRegistrationMessageTextResponse]
	getDefaultPasswordlessRegistrationMessageText           *connect_go.Client[management.GetDefaultPasswordlessRegistrationMessageTextRequest, management.GetDefaultPasswordlessRegistrationMessageTextResponse]
	setCustomPasswordlessRegistrationMessageCustomText      *connect_go.Client[management.SetCustomPasswordlessRegistrationMessageTextRequest, management.SetCustomPasswordlessRegistrationMessageTextResponse]
	resetCustomPasswordlessRegistrationMessageTextToDefault *connect_go.Client[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, management.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse]
	getCustomPasswordChangeMessageText                      *connect_go.Client[management.GetCustomPasswordChangeMessageTextRequest, management.GetCustomPasswordChangeMessageTextResponse]
	getDefaultPasswordChangeMessageText                     *connect_go.Client[management.GetDefaultPasswordChangeMessageTextRequest, management.GetDefaultPasswordChangeMessageTextResponse]
	setCustomPasswordChangeMessageCustomText                *connect_go.Client[management.SetCustomPasswordChangeMessageTextRequest, management.SetCustomPasswordChangeMessageTextResponse]
	resetCustomPasswordChangeMessageTextToDefault           *connect_go.Client[management.ResetCustomPasswordChangeMessageTextToDefaultRequest, management.ResetCustomPasswordChangeMessageTextToDefaultResponse]
	getCustomLoginTexts                                     *connect_go.Client[management.GetCustomLoginTextsRequest, management.GetCustomLoginTextsResponse]
	getDefaultLoginTexts                                    *connect_go.Client[management.GetDefaultLoginTextsRequest, management.GetDefaultLoginTextsResponse]
	setCustomLoginText                                      *connect_go.Client[management.SetCustomLoginTextsRequest, management.SetCustomLoginTextsResponse]
	resetCustomLoginTextToDefault                           *connect_go.Client[management.ResetCustomLoginTextsToDefaultRequest, management.ResetCustomLoginTextsToDefaultResponse]
	getOrgIDPByID                                           *connect_go.Client[management.GetOrgIDPByIDRequest, management.GetOrgIDPByIDResponse]
	listOrgIDPs                                             *connect_go.Client[management.ListOrgIDPsRequest, management.ListOrgIDPsResponse]
	addOrgOIDCIDP                                           *connect_go.Client[management.AddOrgOIDCIDPRequest, management.AddOrgOIDCIDPResponse]
	addOrgJWTIDP                                            *connect_go.Client[management.AddOrgJWTIDPRequest, management.AddOrgJWTIDPResponse]
	deactivateOrgIDP                                        *connect_go.Client[management.DeactivateOrgIDPRequest, management.DeactivateOrgIDPResponse]
	reactivateOrgIDP                                        *connect_go.Client[management.ReactivateOrgIDPRequest, management.ReactivateOrgIDPResponse]
	removeOrgIDP                                            *connect_go.Client[management.RemoveOrgIDPRequest, management.RemoveOrgIDPResponse]
	updateOrgIDP                                            *connect_go.Client[management.UpdateOrgIDPRequest, management.UpdateOrgIDPResponse]
	updateOrgIDPOIDCConfig                                  *connect_go.Client[management.UpdateOrgIDPOIDCConfigRequest, management.UpdateOrgIDPOIDCConfigResponse]
	updateOrgIDPJWTConfig                                   *connect_go.Client[management.UpdateOrgIDPJWTConfigRequest, management.UpdateOrgIDPJWTConfigResponse]
	listProviders                                           *connect_go.Client[management.ListProvidersRequest, management.ListProvidersResponse]
	getProviderByID                                         *connect_go.Client[management.GetProviderByIDRequest, management.GetProviderByIDResponse]
	addLDAPProvider                                         *connect_go.Client[management.AddLDAPProviderRequest, management.AddLDAPProviderResponse]
	updateLDAPProvider                                      *connect_go.Client[management.UpdateLDAPProviderRequest, management.UpdateLDAPProviderResponse]
	deleteProvider                                          *connect_go.Client[management.DeleteProviderRequest, management.DeleteProviderResponse]
	listActions                                             *connect_go.Client[management.ListActionsRequest, management.ListActionsResponse]
	getAction                                               *connect_go.Client[management.GetActionRequest, management.GetActionResponse]
	createAction                                            *connect_go.Client[management.CreateActionRequest, management.CreateActionResponse]
	updateAction                                            *connect_go.Client[management.UpdateActionRequest, management.UpdateActionResponse]
	deactivateAction                                        *connect_go.Client[management.DeactivateActionRequest, management.DeactivateActionResponse]
	reactivateAction                                        *connect_go.Client[management.ReactivateActionRequest, management.ReactivateActionResponse]
	deleteAction                                            *connect_go.Client[management.DeleteActionRequest, management.DeleteActionResponse]
	listFlowTypes                                           *connect_go.Client[management.ListFlowTypesRequest, management.ListFlowTypesResponse]
	listFlowTriggerTypes                                    *connect_go.Client[management.ListFlowTriggerTypesRequest, management.ListFlowTriggerTypesResponse]
	getFlow                                                 *connect_go.Client[management.GetFlowRequest, management.GetFlowResponse]
	clearFlow                                               *connect_go.Client[management.ClearFlowRequest, management.ClearFlowResponse]
	setTriggerActions                                       *connect_go.Client[management.SetTriggerActionsRequest, management.SetTriggerActionsResponse]
}

// Healthz calls zitadel.management.v1.ManagementService.Healthz.
func (c *managementServiceClient) Healthz(ctx context.Context, req *connect_go.Request[management.HealthzRequest]) (*connect_go.Response[management.HealthzResponse], error) {
	return c.healthz.CallUnary(ctx, req)
}

// GetOIDCInformation calls zitadel.management.v1.ManagementService.GetOIDCInformation.
func (c *managementServiceClient) GetOIDCInformation(ctx context.Context, req *connect_go.Request[management.GetOIDCInformationRequest]) (*connect_go.Response[management.GetOIDCInformationResponse], error) {
	return c.getOIDCInformation.CallUnary(ctx, req)
}

// GetIAM calls zitadel.management.v1.ManagementService.GetIAM.
func (c *managementServiceClient) GetIAM(ctx context.Context, req *connect_go.Request[management.GetIAMRequest]) (*connect_go.Response[management.GetIAMResponse], error) {
	return c.getIAM.CallUnary(ctx, req)
}

// GetSupportedLanguages calls zitadel.management.v1.ManagementService.GetSupportedLanguages.
func (c *managementServiceClient) GetSupportedLanguages(ctx context.Context, req *connect_go.Request[management.GetSupportedLanguagesRequest]) (*connect_go.Response[management.GetSupportedLanguagesResponse], error) {
	return c.getSupportedLanguages.CallUnary(ctx, req)
}

// GetUserByID calls zitadel.management.v1.ManagementService.GetUserByID.
func (c *managementServiceClient) GetUserByID(ctx context.Context, req *connect_go.Request[management.GetUserByIDRequest]) (*connect_go.Response[management.GetUserByIDResponse], error) {
	return c.getUserByID.CallUnary(ctx, req)
}

// GetUserByLoginNameGlobal calls zitadel.management.v1.ManagementService.GetUserByLoginNameGlobal.
func (c *managementServiceClient) GetUserByLoginNameGlobal(ctx context.Context, req *connect_go.Request[management.GetUserByLoginNameGlobalRequest]) (*connect_go.Response[management.GetUserByLoginNameGlobalResponse], error) {
	return c.getUserByLoginNameGlobal.CallUnary(ctx, req)
}

// ListUsers calls zitadel.management.v1.ManagementService.ListUsers.
func (c *managementServiceClient) ListUsers(ctx context.Context, req *connect_go.Request[management.ListUsersRequest]) (*connect_go.Response[management.ListUsersResponse], error) {
	return c.listUsers.CallUnary(ctx, req)
}

// ListUserChanges calls zitadel.management.v1.ManagementService.ListUserChanges.
func (c *managementServiceClient) ListUserChanges(ctx context.Context, req *connect_go.Request[management.ListUserChangesRequest]) (*connect_go.Response[management.ListUserChangesResponse], error) {
	return c.listUserChanges.CallUnary(ctx, req)
}

// IsUserUnique calls zitadel.management.v1.ManagementService.IsUserUnique.
func (c *managementServiceClient) IsUserUnique(ctx context.Context, req *connect_go.Request[management.IsUserUniqueRequest]) (*connect_go.Response[management.IsUserUniqueResponse], error) {
	return c.isUserUnique.CallUnary(ctx, req)
}

// AddHumanUser calls zitadel.management.v1.ManagementService.AddHumanUser.
func (c *managementServiceClient) AddHumanUser(ctx context.Context, req *connect_go.Request[management.AddHumanUserRequest]) (*connect_go.Response[management.AddHumanUserResponse], error) {
	return c.addHumanUser.CallUnary(ctx, req)
}

// ImportHumanUser calls zitadel.management.v1.ManagementService.ImportHumanUser.
func (c *managementServiceClient) ImportHumanUser(ctx context.Context, req *connect_go.Request[management.ImportHumanUserRequest]) (*connect_go.Response[management.ImportHumanUserResponse], error) {
	return c.importHumanUser.CallUnary(ctx, req)
}

// AddMachineUser calls zitadel.management.v1.ManagementService.AddMachineUser.
func (c *managementServiceClient) AddMachineUser(ctx context.Context, req *connect_go.Request[management.AddMachineUserRequest]) (*connect_go.Response[management.AddMachineUserResponse], error) {
	return c.addMachineUser.CallUnary(ctx, req)
}

// DeactivateUser calls zitadel.management.v1.ManagementService.DeactivateUser.
func (c *managementServiceClient) DeactivateUser(ctx context.Context, req *connect_go.Request[management.DeactivateUserRequest]) (*connect_go.Response[management.DeactivateUserResponse], error) {
	return c.deactivateUser.CallUnary(ctx, req)
}

// ReactivateUser calls zitadel.management.v1.ManagementService.ReactivateUser.
func (c *managementServiceClient) ReactivateUser(ctx context.Context, req *connect_go.Request[management.ReactivateUserRequest]) (*connect_go.Response[management.ReactivateUserResponse], error) {
	return c.reactivateUser.CallUnary(ctx, req)
}

// LockUser calls zitadel.management.v1.ManagementService.LockUser.
func (c *managementServiceClient) LockUser(ctx context.Context, req *connect_go.Request[management.LockUserRequest]) (*connect_go.Response[management.LockUserResponse], error) {
	return c.lockUser.CallUnary(ctx, req)
}

// UnlockUser calls zitadel.management.v1.ManagementService.UnlockUser.
func (c *managementServiceClient) UnlockUser(ctx context.Context, req *connect_go.Request[management.UnlockUserRequest]) (*connect_go.Response[management.UnlockUserResponse], error) {
	return c.unlockUser.CallUnary(ctx, req)
}

// RemoveUser calls zitadel.management.v1.ManagementService.RemoveUser.
func (c *managementServiceClient) RemoveUser(ctx context.Context, req *connect_go.Request[management.RemoveUserRequest]) (*connect_go.Response[management.RemoveUserResponse], error) {
	return c.removeUser.CallUnary(ctx, req)
}

// UpdateUserName calls zitadel.management.v1.ManagementService.UpdateUserName.
func (c *managementServiceClient) UpdateUserName(ctx context.Context, req *connect_go.Request[management.UpdateUserNameRequest]) (*connect_go.Response[management.UpdateUserNameResponse], error) {
	return c.updateUserName.CallUnary(ctx, req)
}

// SetUserMetadata calls zitadel.management.v1.ManagementService.SetUserMetadata.
func (c *managementServiceClient) SetUserMetadata(ctx context.Context, req *connect_go.Request[management.SetUserMetadataRequest]) (*connect_go.Response[management.SetUserMetadataResponse], error) {
	return c.setUserMetadata.CallUnary(ctx, req)
}

// BulkSetUserMetadata calls zitadel.management.v1.ManagementService.BulkSetUserMetadata.
func (c *managementServiceClient) BulkSetUserMetadata(ctx context.Context, req *connect_go.Request[management.BulkSetUserMetadataRequest]) (*connect_go.Response[management.BulkSetUserMetadataResponse], error) {
	return c.bulkSetUserMetadata.CallUnary(ctx, req)
}

// ListUserMetadata calls zitadel.management.v1.ManagementService.ListUserMetadata.
func (c *managementServiceClient) ListUserMetadata(ctx context.Context, req *connect_go.Request[management.ListUserMetadataRequest]) (*connect_go.Response[management.ListUserMetadataResponse], error) {
	return c.listUserMetadata.CallUnary(ctx, req)
}

// GetUserMetadata calls zitadel.management.v1.ManagementService.GetUserMetadata.
func (c *managementServiceClient) GetUserMetadata(ctx context.Context, req *connect_go.Request[management.GetUserMetadataRequest]) (*connect_go.Response[management.GetUserMetadataResponse], error) {
	return c.getUserMetadata.CallUnary(ctx, req)
}

// RemoveUserMetadata calls zitadel.management.v1.ManagementService.RemoveUserMetadata.
func (c *managementServiceClient) RemoveUserMetadata(ctx context.Context, req *connect_go.Request[management.RemoveUserMetadataRequest]) (*connect_go.Response[management.RemoveUserMetadataResponse], error) {
	return c.removeUserMetadata.CallUnary(ctx, req)
}

// BulkRemoveUserMetadata calls zitadel.management.v1.ManagementService.BulkRemoveUserMetadata.
func (c *managementServiceClient) BulkRemoveUserMetadata(ctx context.Context, req *connect_go.Request[management.BulkRemoveUserMetadataRequest]) (*connect_go.Response[management.BulkRemoveUserMetadataResponse], error) {
	return c.bulkRemoveUserMetadata.CallUnary(ctx, req)
}

// GetHumanProfile calls zitadel.management.v1.ManagementService.GetHumanProfile.
func (c *managementServiceClient) GetHumanProfile(ctx context.Context, req *connect_go.Request[management.GetHumanProfileRequest]) (*connect_go.Response[management.GetHumanProfileResponse], error) {
	return c.getHumanProfile.CallUnary(ctx, req)
}

// UpdateHumanProfile calls zitadel.management.v1.ManagementService.UpdateHumanProfile.
func (c *managementServiceClient) UpdateHumanProfile(ctx context.Context, req *connect_go.Request[management.UpdateHumanProfileRequest]) (*connect_go.Response[management.UpdateHumanProfileResponse], error) {
	return c.updateHumanProfile.CallUnary(ctx, req)
}

// GetHumanEmail calls zitadel.management.v1.ManagementService.GetHumanEmail.
func (c *managementServiceClient) GetHumanEmail(ctx context.Context, req *connect_go.Request[management.GetHumanEmailRequest]) (*connect_go.Response[management.GetHumanEmailResponse], error) {
	return c.getHumanEmail.CallUnary(ctx, req)
}

// UpdateHumanEmail calls zitadel.management.v1.ManagementService.UpdateHumanEmail.
func (c *managementServiceClient) UpdateHumanEmail(ctx context.Context, req *connect_go.Request[management.UpdateHumanEmailRequest]) (*connect_go.Response[management.UpdateHumanEmailResponse], error) {
	return c.updateHumanEmail.CallUnary(ctx, req)
}

// ResendHumanInitialization calls
// zitadel.management.v1.ManagementService.ResendHumanInitialization.
func (c *managementServiceClient) ResendHumanInitialization(ctx context.Context, req *connect_go.Request[management.ResendHumanInitializationRequest]) (*connect_go.Response[management.ResendHumanInitializationResponse], error) {
	return c.resendHumanInitialization.CallUnary(ctx, req)
}

// ResendHumanEmailVerification calls
// zitadel.management.v1.ManagementService.ResendHumanEmailVerification.
func (c *managementServiceClient) ResendHumanEmailVerification(ctx context.Context, req *connect_go.Request[management.ResendHumanEmailVerificationRequest]) (*connect_go.Response[management.ResendHumanEmailVerificationResponse], error) {
	return c.resendHumanEmailVerification.CallUnary(ctx, req)
}

// GetHumanPhone calls zitadel.management.v1.ManagementService.GetHumanPhone.
func (c *managementServiceClient) GetHumanPhone(ctx context.Context, req *connect_go.Request[management.GetHumanPhoneRequest]) (*connect_go.Response[management.GetHumanPhoneResponse], error) {
	return c.getHumanPhone.CallUnary(ctx, req)
}

// UpdateHumanPhone calls zitadel.management.v1.ManagementService.UpdateHumanPhone.
func (c *managementServiceClient) UpdateHumanPhone(ctx context.Context, req *connect_go.Request[management.UpdateHumanPhoneRequest]) (*connect_go.Response[management.UpdateHumanPhoneResponse], error) {
	return c.updateHumanPhone.CallUnary(ctx, req)
}

// RemoveHumanPhone calls zitadel.management.v1.ManagementService.RemoveHumanPhone.
func (c *managementServiceClient) RemoveHumanPhone(ctx context.Context, req *connect_go.Request[management.RemoveHumanPhoneRequest]) (*connect_go.Response[management.RemoveHumanPhoneResponse], error) {
	return c.removeHumanPhone.CallUnary(ctx, req)
}

// ResendHumanPhoneVerification calls
// zitadel.management.v1.ManagementService.ResendHumanPhoneVerification.
func (c *managementServiceClient) ResendHumanPhoneVerification(ctx context.Context, req *connect_go.Request[management.ResendHumanPhoneVerificationRequest]) (*connect_go.Response[management.ResendHumanPhoneVerificationResponse], error) {
	return c.resendHumanPhoneVerification.CallUnary(ctx, req)
}

// RemoveHumanAvatar calls zitadel.management.v1.ManagementService.RemoveHumanAvatar.
func (c *managementServiceClient) RemoveHumanAvatar(ctx context.Context, req *connect_go.Request[management.RemoveHumanAvatarRequest]) (*connect_go.Response[management.RemoveHumanAvatarResponse], error) {
	return c.removeHumanAvatar.CallUnary(ctx, req)
}

// SetHumanInitialPassword calls zitadel.management.v1.ManagementService.SetHumanInitialPassword.
func (c *managementServiceClient) SetHumanInitialPassword(ctx context.Context, req *connect_go.Request[management.SetHumanInitialPasswordRequest]) (*connect_go.Response[management.SetHumanInitialPasswordResponse], error) {
	return c.setHumanInitialPassword.CallUnary(ctx, req)
}

// SetHumanPassword calls zitadel.management.v1.ManagementService.SetHumanPassword.
func (c *managementServiceClient) SetHumanPassword(ctx context.Context, req *connect_go.Request[management.SetHumanPasswordRequest]) (*connect_go.Response[management.SetHumanPasswordResponse], error) {
	return c.setHumanPassword.CallUnary(ctx, req)
}

// SendHumanResetPasswordNotification calls
// zitadel.management.v1.ManagementService.SendHumanResetPasswordNotification.
func (c *managementServiceClient) SendHumanResetPasswordNotification(ctx context.Context, req *connect_go.Request[management.SendHumanResetPasswordNotificationRequest]) (*connect_go.Response[management.SendHumanResetPasswordNotificationResponse], error) {
	return c.sendHumanResetPasswordNotification.CallUnary(ctx, req)
}

// ListHumanAuthFactors calls zitadel.management.v1.ManagementService.ListHumanAuthFactors.
func (c *managementServiceClient) ListHumanAuthFactors(ctx context.Context, req *connect_go.Request[management.ListHumanAuthFactorsRequest]) (*connect_go.Response[management.ListHumanAuthFactorsResponse], error) {
	return c.listHumanAuthFactors.CallUnary(ctx, req)
}

// RemoveHumanAuthFactorOTP calls zitadel.management.v1.ManagementService.RemoveHumanAuthFactorOTP.
func (c *managementServiceClient) RemoveHumanAuthFactorOTP(ctx context.Context, req *connect_go.Request[management.RemoveHumanAuthFactorOTPRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorOTPResponse], error) {
	return c.removeHumanAuthFactorOTP.CallUnary(ctx, req)
}

// RemoveHumanAuthFactorU2F calls zitadel.management.v1.ManagementService.RemoveHumanAuthFactorU2F.
func (c *managementServiceClient) RemoveHumanAuthFactorU2F(ctx context.Context, req *connect_go.Request[management.RemoveHumanAuthFactorU2FRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorU2FResponse], error) {
	return c.removeHumanAuthFactorU2F.CallUnary(ctx, req)
}

// ListHumanPasswordless calls zitadel.management.v1.ManagementService.ListHumanPasswordless.
func (c *managementServiceClient) ListHumanPasswordless(ctx context.Context, req *connect_go.Request[management.ListHumanPasswordlessRequest]) (*connect_go.Response[management.ListHumanPasswordlessResponse], error) {
	return c.listHumanPasswordless.CallUnary(ctx, req)
}

// AddPasswordlessRegistration calls
// zitadel.management.v1.ManagementService.AddPasswordlessRegistration.
func (c *managementServiceClient) AddPasswordlessRegistration(ctx context.Context, req *connect_go.Request[management.AddPasswordlessRegistrationRequest]) (*connect_go.Response[management.AddPasswordlessRegistrationResponse], error) {
	return c.addPasswordlessRegistration.CallUnary(ctx, req)
}

// SendPasswordlessRegistration calls
// zitadel.management.v1.ManagementService.SendPasswordlessRegistration.
func (c *managementServiceClient) SendPasswordlessRegistration(ctx context.Context, req *connect_go.Request[management.SendPasswordlessRegistrationRequest]) (*connect_go.Response[management.SendPasswordlessRegistrationResponse], error) {
	return c.sendPasswordlessRegistration.CallUnary(ctx, req)
}

// RemoveHumanPasswordless calls zitadel.management.v1.ManagementService.RemoveHumanPasswordless.
func (c *managementServiceClient) RemoveHumanPasswordless(ctx context.Context, req *connect_go.Request[management.RemoveHumanPasswordlessRequest]) (*connect_go.Response[management.RemoveHumanPasswordlessResponse], error) {
	return c.removeHumanPasswordless.CallUnary(ctx, req)
}

// UpdateMachine calls zitadel.management.v1.ManagementService.UpdateMachine.
func (c *managementServiceClient) UpdateMachine(ctx context.Context, req *connect_go.Request[management.UpdateMachineRequest]) (*connect_go.Response[management.UpdateMachineResponse], error) {
	return c.updateMachine.CallUnary(ctx, req)
}

// GenerateMachineSecret calls zitadel.management.v1.ManagementService.GenerateMachineSecret.
func (c *managementServiceClient) GenerateMachineSecret(ctx context.Context, req *connect_go.Request[management.GenerateMachineSecretRequest]) (*connect_go.Response[management.GenerateMachineSecretResponse], error) {
	return c.generateMachineSecret.CallUnary(ctx, req)
}

// RemoveMachineSecret calls zitadel.management.v1.ManagementService.RemoveMachineSecret.
func (c *managementServiceClient) RemoveMachineSecret(ctx context.Context, req *connect_go.Request[management.RemoveMachineSecretRequest]) (*connect_go.Response[management.RemoveMachineSecretResponse], error) {
	return c.removeMachineSecret.CallUnary(ctx, req)
}

// GetMachineKeyByIDs calls zitadel.management.v1.ManagementService.GetMachineKeyByIDs.
func (c *managementServiceClient) GetMachineKeyByIDs(ctx context.Context, req *connect_go.Request[management.GetMachineKeyByIDsRequest]) (*connect_go.Response[management.GetMachineKeyByIDsResponse], error) {
	return c.getMachineKeyByIDs.CallUnary(ctx, req)
}

// ListMachineKeys calls zitadel.management.v1.ManagementService.ListMachineKeys.
func (c *managementServiceClient) ListMachineKeys(ctx context.Context, req *connect_go.Request[management.ListMachineKeysRequest]) (*connect_go.Response[management.ListMachineKeysResponse], error) {
	return c.listMachineKeys.CallUnary(ctx, req)
}

// AddMachineKey calls zitadel.management.v1.ManagementService.AddMachineKey.
func (c *managementServiceClient) AddMachineKey(ctx context.Context, req *connect_go.Request[management.AddMachineKeyRequest]) (*connect_go.Response[management.AddMachineKeyResponse], error) {
	return c.addMachineKey.CallUnary(ctx, req)
}

// RemoveMachineKey calls zitadel.management.v1.ManagementService.RemoveMachineKey.
func (c *managementServiceClient) RemoveMachineKey(ctx context.Context, req *connect_go.Request[management.RemoveMachineKeyRequest]) (*connect_go.Response[management.RemoveMachineKeyResponse], error) {
	return c.removeMachineKey.CallUnary(ctx, req)
}

// GetPersonalAccessTokenByIDs calls
// zitadel.management.v1.ManagementService.GetPersonalAccessTokenByIDs.
func (c *managementServiceClient) GetPersonalAccessTokenByIDs(ctx context.Context, req *connect_go.Request[management.GetPersonalAccessTokenByIDsRequest]) (*connect_go.Response[management.GetPersonalAccessTokenByIDsResponse], error) {
	return c.getPersonalAccessTokenByIDs.CallUnary(ctx, req)
}

// ListPersonalAccessTokens calls zitadel.management.v1.ManagementService.ListPersonalAccessTokens.
func (c *managementServiceClient) ListPersonalAccessTokens(ctx context.Context, req *connect_go.Request[management.ListPersonalAccessTokensRequest]) (*connect_go.Response[management.ListPersonalAccessTokensResponse], error) {
	return c.listPersonalAccessTokens.CallUnary(ctx, req)
}

// AddPersonalAccessToken calls zitadel.management.v1.ManagementService.AddPersonalAccessToken.
func (c *managementServiceClient) AddPersonalAccessToken(ctx context.Context, req *connect_go.Request[management.AddPersonalAccessTokenRequest]) (*connect_go.Response[management.AddPersonalAccessTokenResponse], error) {
	return c.addPersonalAccessToken.CallUnary(ctx, req)
}

// RemovePersonalAccessToken calls
// zitadel.management.v1.ManagementService.RemovePersonalAccessToken.
func (c *managementServiceClient) RemovePersonalAccessToken(ctx context.Context, req *connect_go.Request[management.RemovePersonalAccessTokenRequest]) (*connect_go.Response[management.RemovePersonalAccessTokenResponse], error) {
	return c.removePersonalAccessToken.CallUnary(ctx, req)
}

// ListHumanLinkedIDPs calls zitadel.management.v1.ManagementService.ListHumanLinkedIDPs.
func (c *managementServiceClient) ListHumanLinkedIDPs(ctx context.Context, req *connect_go.Request[management.ListHumanLinkedIDPsRequest]) (*connect_go.Response[management.ListHumanLinkedIDPsResponse], error) {
	return c.listHumanLinkedIDPs.CallUnary(ctx, req)
}

// RemoveHumanLinkedIDP calls zitadel.management.v1.ManagementService.RemoveHumanLinkedIDP.
func (c *managementServiceClient) RemoveHumanLinkedIDP(ctx context.Context, req *connect_go.Request[management.RemoveHumanLinkedIDPRequest]) (*connect_go.Response[management.RemoveHumanLinkedIDPResponse], error) {
	return c.removeHumanLinkedIDP.CallUnary(ctx, req)
}

// ListUserMemberships calls zitadel.management.v1.ManagementService.ListUserMemberships.
func (c *managementServiceClient) ListUserMemberships(ctx context.Context, req *connect_go.Request[management.ListUserMembershipsRequest]) (*connect_go.Response[management.ListUserMembershipsResponse], error) {
	return c.listUserMemberships.CallUnary(ctx, req)
}

// GetMyOrg calls zitadel.management.v1.ManagementService.GetMyOrg.
func (c *managementServiceClient) GetMyOrg(ctx context.Context, req *connect_go.Request[management.GetMyOrgRequest]) (*connect_go.Response[management.GetMyOrgResponse], error) {
	return c.getMyOrg.CallUnary(ctx, req)
}

// GetOrgByDomainGlobal calls zitadel.management.v1.ManagementService.GetOrgByDomainGlobal.
func (c *managementServiceClient) GetOrgByDomainGlobal(ctx context.Context, req *connect_go.Request[management.GetOrgByDomainGlobalRequest]) (*connect_go.Response[management.GetOrgByDomainGlobalResponse], error) {
	return c.getOrgByDomainGlobal.CallUnary(ctx, req)
}

// ListOrgChanges calls zitadel.management.v1.ManagementService.ListOrgChanges.
func (c *managementServiceClient) ListOrgChanges(ctx context.Context, req *connect_go.Request[management.ListOrgChangesRequest]) (*connect_go.Response[management.ListOrgChangesResponse], error) {
	return c.listOrgChanges.CallUnary(ctx, req)
}

// AddOrg calls zitadel.management.v1.ManagementService.AddOrg.
func (c *managementServiceClient) AddOrg(ctx context.Context, req *connect_go.Request[management.AddOrgRequest]) (*connect_go.Response[management.AddOrgResponse], error) {
	return c.addOrg.CallUnary(ctx, req)
}

// UpdateOrg calls zitadel.management.v1.ManagementService.UpdateOrg.
func (c *managementServiceClient) UpdateOrg(ctx context.Context, req *connect_go.Request[management.UpdateOrgRequest]) (*connect_go.Response[management.UpdateOrgResponse], error) {
	return c.updateOrg.CallUnary(ctx, req)
}

// DeactivateOrg calls zitadel.management.v1.ManagementService.DeactivateOrg.
func (c *managementServiceClient) DeactivateOrg(ctx context.Context, req *connect_go.Request[management.DeactivateOrgRequest]) (*connect_go.Response[management.DeactivateOrgResponse], error) {
	return c.deactivateOrg.CallUnary(ctx, req)
}

// ReactivateOrg calls zitadel.management.v1.ManagementService.ReactivateOrg.
func (c *managementServiceClient) ReactivateOrg(ctx context.Context, req *connect_go.Request[management.ReactivateOrgRequest]) (*connect_go.Response[management.ReactivateOrgResponse], error) {
	return c.reactivateOrg.CallUnary(ctx, req)
}

// RemoveOrg calls zitadel.management.v1.ManagementService.RemoveOrg.
func (c *managementServiceClient) RemoveOrg(ctx context.Context, req *connect_go.Request[management.RemoveOrgRequest]) (*connect_go.Response[management.RemoveOrgResponse], error) {
	return c.removeOrg.CallUnary(ctx, req)
}

// SetOrgMetadata calls zitadel.management.v1.ManagementService.SetOrgMetadata.
func (c *managementServiceClient) SetOrgMetadata(ctx context.Context, req *connect_go.Request[management.SetOrgMetadataRequest]) (*connect_go.Response[management.SetOrgMetadataResponse], error) {
	return c.setOrgMetadata.CallUnary(ctx, req)
}

// BulkSetOrgMetadata calls zitadel.management.v1.ManagementService.BulkSetOrgMetadata.
func (c *managementServiceClient) BulkSetOrgMetadata(ctx context.Context, req *connect_go.Request[management.BulkSetOrgMetadataRequest]) (*connect_go.Response[management.BulkSetOrgMetadataResponse], error) {
	return c.bulkSetOrgMetadata.CallUnary(ctx, req)
}

// ListOrgMetadata calls zitadel.management.v1.ManagementService.ListOrgMetadata.
func (c *managementServiceClient) ListOrgMetadata(ctx context.Context, req *connect_go.Request[management.ListOrgMetadataRequest]) (*connect_go.Response[management.ListOrgMetadataResponse], error) {
	return c.listOrgMetadata.CallUnary(ctx, req)
}

// GetOrgMetadata calls zitadel.management.v1.ManagementService.GetOrgMetadata.
func (c *managementServiceClient) GetOrgMetadata(ctx context.Context, req *connect_go.Request[management.GetOrgMetadataRequest]) (*connect_go.Response[management.GetOrgMetadataResponse], error) {
	return c.getOrgMetadata.CallUnary(ctx, req)
}

// RemoveOrgMetadata calls zitadel.management.v1.ManagementService.RemoveOrgMetadata.
func (c *managementServiceClient) RemoveOrgMetadata(ctx context.Context, req *connect_go.Request[management.RemoveOrgMetadataRequest]) (*connect_go.Response[management.RemoveOrgMetadataResponse], error) {
	return c.removeOrgMetadata.CallUnary(ctx, req)
}

// BulkRemoveOrgMetadata calls zitadel.management.v1.ManagementService.BulkRemoveOrgMetadata.
func (c *managementServiceClient) BulkRemoveOrgMetadata(ctx context.Context, req *connect_go.Request[management.BulkRemoveOrgMetadataRequest]) (*connect_go.Response[management.BulkRemoveOrgMetadataResponse], error) {
	return c.bulkRemoveOrgMetadata.CallUnary(ctx, req)
}

// ListOrgDomains calls zitadel.management.v1.ManagementService.ListOrgDomains.
func (c *managementServiceClient) ListOrgDomains(ctx context.Context, req *connect_go.Request[management.ListOrgDomainsRequest]) (*connect_go.Response[management.ListOrgDomainsResponse], error) {
	return c.listOrgDomains.CallUnary(ctx, req)
}

// AddOrgDomain calls zitadel.management.v1.ManagementService.AddOrgDomain.
func (c *managementServiceClient) AddOrgDomain(ctx context.Context, req *connect_go.Request[management.AddOrgDomainRequest]) (*connect_go.Response[management.AddOrgDomainResponse], error) {
	return c.addOrgDomain.CallUnary(ctx, req)
}

// RemoveOrgDomain calls zitadel.management.v1.ManagementService.RemoveOrgDomain.
func (c *managementServiceClient) RemoveOrgDomain(ctx context.Context, req *connect_go.Request[management.RemoveOrgDomainRequest]) (*connect_go.Response[management.RemoveOrgDomainResponse], error) {
	return c.removeOrgDomain.CallUnary(ctx, req)
}

// GenerateOrgDomainValidation calls
// zitadel.management.v1.ManagementService.GenerateOrgDomainValidation.
func (c *managementServiceClient) GenerateOrgDomainValidation(ctx context.Context, req *connect_go.Request[management.GenerateOrgDomainValidationRequest]) (*connect_go.Response[management.GenerateOrgDomainValidationResponse], error) {
	return c.generateOrgDomainValidation.CallUnary(ctx, req)
}

// ValidateOrgDomain calls zitadel.management.v1.ManagementService.ValidateOrgDomain.
func (c *managementServiceClient) ValidateOrgDomain(ctx context.Context, req *connect_go.Request[management.ValidateOrgDomainRequest]) (*connect_go.Response[management.ValidateOrgDomainResponse], error) {
	return c.validateOrgDomain.CallUnary(ctx, req)
}

// SetPrimaryOrgDomain calls zitadel.management.v1.ManagementService.SetPrimaryOrgDomain.
func (c *managementServiceClient) SetPrimaryOrgDomain(ctx context.Context, req *connect_go.Request[management.SetPrimaryOrgDomainRequest]) (*connect_go.Response[management.SetPrimaryOrgDomainResponse], error) {
	return c.setPrimaryOrgDomain.CallUnary(ctx, req)
}

// ListOrgMemberRoles calls zitadel.management.v1.ManagementService.ListOrgMemberRoles.
func (c *managementServiceClient) ListOrgMemberRoles(ctx context.Context, req *connect_go.Request[management.ListOrgMemberRolesRequest]) (*connect_go.Response[management.ListOrgMemberRolesResponse], error) {
	return c.listOrgMemberRoles.CallUnary(ctx, req)
}

// ListOrgMembers calls zitadel.management.v1.ManagementService.ListOrgMembers.
func (c *managementServiceClient) ListOrgMembers(ctx context.Context, req *connect_go.Request[management.ListOrgMembersRequest]) (*connect_go.Response[management.ListOrgMembersResponse], error) {
	return c.listOrgMembers.CallUnary(ctx, req)
}

// AddOrgMember calls zitadel.management.v1.ManagementService.AddOrgMember.
func (c *managementServiceClient) AddOrgMember(ctx context.Context, req *connect_go.Request[management.AddOrgMemberRequest]) (*connect_go.Response[management.AddOrgMemberResponse], error) {
	return c.addOrgMember.CallUnary(ctx, req)
}

// UpdateOrgMember calls zitadel.management.v1.ManagementService.UpdateOrgMember.
func (c *managementServiceClient) UpdateOrgMember(ctx context.Context, req *connect_go.Request[management.UpdateOrgMemberRequest]) (*connect_go.Response[management.UpdateOrgMemberResponse], error) {
	return c.updateOrgMember.CallUnary(ctx, req)
}

// RemoveOrgMember calls zitadel.management.v1.ManagementService.RemoveOrgMember.
func (c *managementServiceClient) RemoveOrgMember(ctx context.Context, req *connect_go.Request[management.RemoveOrgMemberRequest]) (*connect_go.Response[management.RemoveOrgMemberResponse], error) {
	return c.removeOrgMember.CallUnary(ctx, req)
}

// GetProjectByID calls zitadel.management.v1.ManagementService.GetProjectByID.
func (c *managementServiceClient) GetProjectByID(ctx context.Context, req *connect_go.Request[management.GetProjectByIDRequest]) (*connect_go.Response[management.GetProjectByIDResponse], error) {
	return c.getProjectByID.CallUnary(ctx, req)
}

// GetGrantedProjectByID calls zitadel.management.v1.ManagementService.GetGrantedProjectByID.
func (c *managementServiceClient) GetGrantedProjectByID(ctx context.Context, req *connect_go.Request[management.GetGrantedProjectByIDRequest]) (*connect_go.Response[management.GetGrantedProjectByIDResponse], error) {
	return c.getGrantedProjectByID.CallUnary(ctx, req)
}

// ListProjects calls zitadel.management.v1.ManagementService.ListProjects.
func (c *managementServiceClient) ListProjects(ctx context.Context, req *connect_go.Request[management.ListProjectsRequest]) (*connect_go.Response[management.ListProjectsResponse], error) {
	return c.listProjects.CallUnary(ctx, req)
}

// ListGrantedProjects calls zitadel.management.v1.ManagementService.ListGrantedProjects.
func (c *managementServiceClient) ListGrantedProjects(ctx context.Context, req *connect_go.Request[management.ListGrantedProjectsRequest]) (*connect_go.Response[management.ListGrantedProjectsResponse], error) {
	return c.listGrantedProjects.CallUnary(ctx, req)
}

// ListGrantedProjectRoles calls zitadel.management.v1.ManagementService.ListGrantedProjectRoles.
func (c *managementServiceClient) ListGrantedProjectRoles(ctx context.Context, req *connect_go.Request[management.ListGrantedProjectRolesRequest]) (*connect_go.Response[management.ListGrantedProjectRolesResponse], error) {
	return c.listGrantedProjectRoles.CallUnary(ctx, req)
}

// ListProjectChanges calls zitadel.management.v1.ManagementService.ListProjectChanges.
func (c *managementServiceClient) ListProjectChanges(ctx context.Context, req *connect_go.Request[management.ListProjectChangesRequest]) (*connect_go.Response[management.ListProjectChangesResponse], error) {
	return c.listProjectChanges.CallUnary(ctx, req)
}

// AddProject calls zitadel.management.v1.ManagementService.AddProject.
func (c *managementServiceClient) AddProject(ctx context.Context, req *connect_go.Request[management.AddProjectRequest]) (*connect_go.Response[management.AddProjectResponse], error) {
	return c.addProject.CallUnary(ctx, req)
}

// UpdateProject calls zitadel.management.v1.ManagementService.UpdateProject.
func (c *managementServiceClient) UpdateProject(ctx context.Context, req *connect_go.Request[management.UpdateProjectRequest]) (*connect_go.Response[management.UpdateProjectResponse], error) {
	return c.updateProject.CallUnary(ctx, req)
}

// DeactivateProject calls zitadel.management.v1.ManagementService.DeactivateProject.
func (c *managementServiceClient) DeactivateProject(ctx context.Context, req *connect_go.Request[management.DeactivateProjectRequest]) (*connect_go.Response[management.DeactivateProjectResponse], error) {
	return c.deactivateProject.CallUnary(ctx, req)
}

// ReactivateProject calls zitadel.management.v1.ManagementService.ReactivateProject.
func (c *managementServiceClient) ReactivateProject(ctx context.Context, req *connect_go.Request[management.ReactivateProjectRequest]) (*connect_go.Response[management.ReactivateProjectResponse], error) {
	return c.reactivateProject.CallUnary(ctx, req)
}

// RemoveProject calls zitadel.management.v1.ManagementService.RemoveProject.
func (c *managementServiceClient) RemoveProject(ctx context.Context, req *connect_go.Request[management.RemoveProjectRequest]) (*connect_go.Response[management.RemoveProjectResponse], error) {
	return c.removeProject.CallUnary(ctx, req)
}

// ListProjectRoles calls zitadel.management.v1.ManagementService.ListProjectRoles.
func (c *managementServiceClient) ListProjectRoles(ctx context.Context, req *connect_go.Request[management.ListProjectRolesRequest]) (*connect_go.Response[management.ListProjectRolesResponse], error) {
	return c.listProjectRoles.CallUnary(ctx, req)
}

// AddProjectRole calls zitadel.management.v1.ManagementService.AddProjectRole.
func (c *managementServiceClient) AddProjectRole(ctx context.Context, req *connect_go.Request[management.AddProjectRoleRequest]) (*connect_go.Response[management.AddProjectRoleResponse], error) {
	return c.addProjectRole.CallUnary(ctx, req)
}

// BulkAddProjectRoles calls zitadel.management.v1.ManagementService.BulkAddProjectRoles.
func (c *managementServiceClient) BulkAddProjectRoles(ctx context.Context, req *connect_go.Request[management.BulkAddProjectRolesRequest]) (*connect_go.Response[management.BulkAddProjectRolesResponse], error) {
	return c.bulkAddProjectRoles.CallUnary(ctx, req)
}

// UpdateProjectRole calls zitadel.management.v1.ManagementService.UpdateProjectRole.
func (c *managementServiceClient) UpdateProjectRole(ctx context.Context, req *connect_go.Request[management.UpdateProjectRoleRequest]) (*connect_go.Response[management.UpdateProjectRoleResponse], error) {
	return c.updateProjectRole.CallUnary(ctx, req)
}

// RemoveProjectRole calls zitadel.management.v1.ManagementService.RemoveProjectRole.
func (c *managementServiceClient) RemoveProjectRole(ctx context.Context, req *connect_go.Request[management.RemoveProjectRoleRequest]) (*connect_go.Response[management.RemoveProjectRoleResponse], error) {
	return c.removeProjectRole.CallUnary(ctx, req)
}

// ListProjectMemberRoles calls zitadel.management.v1.ManagementService.ListProjectMemberRoles.
func (c *managementServiceClient) ListProjectMemberRoles(ctx context.Context, req *connect_go.Request[management.ListProjectMemberRolesRequest]) (*connect_go.Response[management.ListProjectMemberRolesResponse], error) {
	return c.listProjectMemberRoles.CallUnary(ctx, req)
}

// ListProjectMembers calls zitadel.management.v1.ManagementService.ListProjectMembers.
func (c *managementServiceClient) ListProjectMembers(ctx context.Context, req *connect_go.Request[management.ListProjectMembersRequest]) (*connect_go.Response[management.ListProjectMembersResponse], error) {
	return c.listProjectMembers.CallUnary(ctx, req)
}

// AddProjectMember calls zitadel.management.v1.ManagementService.AddProjectMember.
func (c *managementServiceClient) AddProjectMember(ctx context.Context, req *connect_go.Request[management.AddProjectMemberRequest]) (*connect_go.Response[management.AddProjectMemberResponse], error) {
	return c.addProjectMember.CallUnary(ctx, req)
}

// UpdateProjectMember calls zitadel.management.v1.ManagementService.UpdateProjectMember.
func (c *managementServiceClient) UpdateProjectMember(ctx context.Context, req *connect_go.Request[management.UpdateProjectMemberRequest]) (*connect_go.Response[management.UpdateProjectMemberResponse], error) {
	return c.updateProjectMember.CallUnary(ctx, req)
}

// RemoveProjectMember calls zitadel.management.v1.ManagementService.RemoveProjectMember.
func (c *managementServiceClient) RemoveProjectMember(ctx context.Context, req *connect_go.Request[management.RemoveProjectMemberRequest]) (*connect_go.Response[management.RemoveProjectMemberResponse], error) {
	return c.removeProjectMember.CallUnary(ctx, req)
}

// GetAppByID calls zitadel.management.v1.ManagementService.GetAppByID.
func (c *managementServiceClient) GetAppByID(ctx context.Context, req *connect_go.Request[management.GetAppByIDRequest]) (*connect_go.Response[management.GetAppByIDResponse], error) {
	return c.getAppByID.CallUnary(ctx, req)
}

// ListApps calls zitadel.management.v1.ManagementService.ListApps.
func (c *managementServiceClient) ListApps(ctx context.Context, req *connect_go.Request[management.ListAppsRequest]) (*connect_go.Response[management.ListAppsResponse], error) {
	return c.listApps.CallUnary(ctx, req)
}

// ListAppChanges calls zitadel.management.v1.ManagementService.ListAppChanges.
func (c *managementServiceClient) ListAppChanges(ctx context.Context, req *connect_go.Request[management.ListAppChangesRequest]) (*connect_go.Response[management.ListAppChangesResponse], error) {
	return c.listAppChanges.CallUnary(ctx, req)
}

// AddOIDCApp calls zitadel.management.v1.ManagementService.AddOIDCApp.
func (c *managementServiceClient) AddOIDCApp(ctx context.Context, req *connect_go.Request[management.AddOIDCAppRequest]) (*connect_go.Response[management.AddOIDCAppResponse], error) {
	return c.addOIDCApp.CallUnary(ctx, req)
}

// AddSAMLApp calls zitadel.management.v1.ManagementService.AddSAMLApp.
func (c *managementServiceClient) AddSAMLApp(ctx context.Context, req *connect_go.Request[management.AddSAMLAppRequest]) (*connect_go.Response[management.AddSAMLAppResponse], error) {
	return c.addSAMLApp.CallUnary(ctx, req)
}

// AddAPIApp calls zitadel.management.v1.ManagementService.AddAPIApp.
func (c *managementServiceClient) AddAPIApp(ctx context.Context, req *connect_go.Request[management.AddAPIAppRequest]) (*connect_go.Response[management.AddAPIAppResponse], error) {
	return c.addAPIApp.CallUnary(ctx, req)
}

// UpdateApp calls zitadel.management.v1.ManagementService.UpdateApp.
func (c *managementServiceClient) UpdateApp(ctx context.Context, req *connect_go.Request[management.UpdateAppRequest]) (*connect_go.Response[management.UpdateAppResponse], error) {
	return c.updateApp.CallUnary(ctx, req)
}

// UpdateOIDCAppConfig calls zitadel.management.v1.ManagementService.UpdateOIDCAppConfig.
func (c *managementServiceClient) UpdateOIDCAppConfig(ctx context.Context, req *connect_go.Request[management.UpdateOIDCAppConfigRequest]) (*connect_go.Response[management.UpdateOIDCAppConfigResponse], error) {
	return c.updateOIDCAppConfig.CallUnary(ctx, req)
}

// UpdateSAMLAppConfig calls zitadel.management.v1.ManagementService.UpdateSAMLAppConfig.
func (c *managementServiceClient) UpdateSAMLAppConfig(ctx context.Context, req *connect_go.Request[management.UpdateSAMLAppConfigRequest]) (*connect_go.Response[management.UpdateSAMLAppConfigResponse], error) {
	return c.updateSAMLAppConfig.CallUnary(ctx, req)
}

// UpdateAPIAppConfig calls zitadel.management.v1.ManagementService.UpdateAPIAppConfig.
func (c *managementServiceClient) UpdateAPIAppConfig(ctx context.Context, req *connect_go.Request[management.UpdateAPIAppConfigRequest]) (*connect_go.Response[management.UpdateAPIAppConfigResponse], error) {
	return c.updateAPIAppConfig.CallUnary(ctx, req)
}

// DeactivateApp calls zitadel.management.v1.ManagementService.DeactivateApp.
func (c *managementServiceClient) DeactivateApp(ctx context.Context, req *connect_go.Request[management.DeactivateAppRequest]) (*connect_go.Response[management.DeactivateAppResponse], error) {
	return c.deactivateApp.CallUnary(ctx, req)
}

// ReactivateApp calls zitadel.management.v1.ManagementService.ReactivateApp.
func (c *managementServiceClient) ReactivateApp(ctx context.Context, req *connect_go.Request[management.ReactivateAppRequest]) (*connect_go.Response[management.ReactivateAppResponse], error) {
	return c.reactivateApp.CallUnary(ctx, req)
}

// RemoveApp calls zitadel.management.v1.ManagementService.RemoveApp.
func (c *managementServiceClient) RemoveApp(ctx context.Context, req *connect_go.Request[management.RemoveAppRequest]) (*connect_go.Response[management.RemoveAppResponse], error) {
	return c.removeApp.CallUnary(ctx, req)
}

// RegenerateOIDCClientSecret calls
// zitadel.management.v1.ManagementService.RegenerateOIDCClientSecret.
func (c *managementServiceClient) RegenerateOIDCClientSecret(ctx context.Context, req *connect_go.Request[management.RegenerateOIDCClientSecretRequest]) (*connect_go.Response[management.RegenerateOIDCClientSecretResponse], error) {
	return c.regenerateOIDCClientSecret.CallUnary(ctx, req)
}

// RegenerateAPIClientSecret calls
// zitadel.management.v1.ManagementService.RegenerateAPIClientSecret.
func (c *managementServiceClient) RegenerateAPIClientSecret(ctx context.Context, req *connect_go.Request[management.RegenerateAPIClientSecretRequest]) (*connect_go.Response[management.RegenerateAPIClientSecretResponse], error) {
	return c.regenerateAPIClientSecret.CallUnary(ctx, req)
}

// GetAppKey calls zitadel.management.v1.ManagementService.GetAppKey.
func (c *managementServiceClient) GetAppKey(ctx context.Context, req *connect_go.Request[management.GetAppKeyRequest]) (*connect_go.Response[management.GetAppKeyResponse], error) {
	return c.getAppKey.CallUnary(ctx, req)
}

// ListAppKeys calls zitadel.management.v1.ManagementService.ListAppKeys.
func (c *managementServiceClient) ListAppKeys(ctx context.Context, req *connect_go.Request[management.ListAppKeysRequest]) (*connect_go.Response[management.ListAppKeysResponse], error) {
	return c.listAppKeys.CallUnary(ctx, req)
}

// AddAppKey calls zitadel.management.v1.ManagementService.AddAppKey.
func (c *managementServiceClient) AddAppKey(ctx context.Context, req *connect_go.Request[management.AddAppKeyRequest]) (*connect_go.Response[management.AddAppKeyResponse], error) {
	return c.addAppKey.CallUnary(ctx, req)
}

// RemoveAppKey calls zitadel.management.v1.ManagementService.RemoveAppKey.
func (c *managementServiceClient) RemoveAppKey(ctx context.Context, req *connect_go.Request[management.RemoveAppKeyRequest]) (*connect_go.Response[management.RemoveAppKeyResponse], error) {
	return c.removeAppKey.CallUnary(ctx, req)
}

// ListProjectGrantChanges calls zitadel.management.v1.ManagementService.ListProjectGrantChanges.
func (c *managementServiceClient) ListProjectGrantChanges(ctx context.Context, req *connect_go.Request[management.ListProjectGrantChangesRequest]) (*connect_go.Response[management.ListProjectGrantChangesResponse], error) {
	return c.listProjectGrantChanges.CallUnary(ctx, req)
}

// GetProjectGrantByID calls zitadel.management.v1.ManagementService.GetProjectGrantByID.
func (c *managementServiceClient) GetProjectGrantByID(ctx context.Context, req *connect_go.Request[management.GetProjectGrantByIDRequest]) (*connect_go.Response[management.GetProjectGrantByIDResponse], error) {
	return c.getProjectGrantByID.CallUnary(ctx, req)
}

// ListProjectGrants calls zitadel.management.v1.ManagementService.ListProjectGrants.
func (c *managementServiceClient) ListProjectGrants(ctx context.Context, req *connect_go.Request[management.ListProjectGrantsRequest]) (*connect_go.Response[management.ListProjectGrantsResponse], error) {
	return c.listProjectGrants.CallUnary(ctx, req)
}

// ListAllProjectGrants calls zitadel.management.v1.ManagementService.ListAllProjectGrants.
func (c *managementServiceClient) ListAllProjectGrants(ctx context.Context, req *connect_go.Request[management.ListAllProjectGrantsRequest]) (*connect_go.Response[management.ListAllProjectGrantsResponse], error) {
	return c.listAllProjectGrants.CallUnary(ctx, req)
}

// AddProjectGrant calls zitadel.management.v1.ManagementService.AddProjectGrant.
func (c *managementServiceClient) AddProjectGrant(ctx context.Context, req *connect_go.Request[management.AddProjectGrantRequest]) (*connect_go.Response[management.AddProjectGrantResponse], error) {
	return c.addProjectGrant.CallUnary(ctx, req)
}

// UpdateProjectGrant calls zitadel.management.v1.ManagementService.UpdateProjectGrant.
func (c *managementServiceClient) UpdateProjectGrant(ctx context.Context, req *connect_go.Request[management.UpdateProjectGrantRequest]) (*connect_go.Response[management.UpdateProjectGrantResponse], error) {
	return c.updateProjectGrant.CallUnary(ctx, req)
}

// DeactivateProjectGrant calls zitadel.management.v1.ManagementService.DeactivateProjectGrant.
func (c *managementServiceClient) DeactivateProjectGrant(ctx context.Context, req *connect_go.Request[management.DeactivateProjectGrantRequest]) (*connect_go.Response[management.DeactivateProjectGrantResponse], error) {
	return c.deactivateProjectGrant.CallUnary(ctx, req)
}

// ReactivateProjectGrant calls zitadel.management.v1.ManagementService.ReactivateProjectGrant.
func (c *managementServiceClient) ReactivateProjectGrant(ctx context.Context, req *connect_go.Request[management.ReactivateProjectGrantRequest]) (*connect_go.Response[management.ReactivateProjectGrantResponse], error) {
	return c.reactivateProjectGrant.CallUnary(ctx, req)
}

// RemoveProjectGrant calls zitadel.management.v1.ManagementService.RemoveProjectGrant.
func (c *managementServiceClient) RemoveProjectGrant(ctx context.Context, req *connect_go.Request[management.RemoveProjectGrantRequest]) (*connect_go.Response[management.RemoveProjectGrantResponse], error) {
	return c.removeProjectGrant.CallUnary(ctx, req)
}

// ListProjectGrantMemberRoles calls
// zitadel.management.v1.ManagementService.ListProjectGrantMemberRoles.
func (c *managementServiceClient) ListProjectGrantMemberRoles(ctx context.Context, req *connect_go.Request[management.ListProjectGrantMemberRolesRequest]) (*connect_go.Response[management.ListProjectGrantMemberRolesResponse], error) {
	return c.listProjectGrantMemberRoles.CallUnary(ctx, req)
}

// ListProjectGrantMembers calls zitadel.management.v1.ManagementService.ListProjectGrantMembers.
func (c *managementServiceClient) ListProjectGrantMembers(ctx context.Context, req *connect_go.Request[management.ListProjectGrantMembersRequest]) (*connect_go.Response[management.ListProjectGrantMembersResponse], error) {
	return c.listProjectGrantMembers.CallUnary(ctx, req)
}

// AddProjectGrantMember calls zitadel.management.v1.ManagementService.AddProjectGrantMember.
func (c *managementServiceClient) AddProjectGrantMember(ctx context.Context, req *connect_go.Request[management.AddProjectGrantMemberRequest]) (*connect_go.Response[management.AddProjectGrantMemberResponse], error) {
	return c.addProjectGrantMember.CallUnary(ctx, req)
}

// UpdateProjectGrantMember calls zitadel.management.v1.ManagementService.UpdateProjectGrantMember.
func (c *managementServiceClient) UpdateProjectGrantMember(ctx context.Context, req *connect_go.Request[management.UpdateProjectGrantMemberRequest]) (*connect_go.Response[management.UpdateProjectGrantMemberResponse], error) {
	return c.updateProjectGrantMember.CallUnary(ctx, req)
}

// RemoveProjectGrantMember calls zitadel.management.v1.ManagementService.RemoveProjectGrantMember.
func (c *managementServiceClient) RemoveProjectGrantMember(ctx context.Context, req *connect_go.Request[management.RemoveProjectGrantMemberRequest]) (*connect_go.Response[management.RemoveProjectGrantMemberResponse], error) {
	return c.removeProjectGrantMember.CallUnary(ctx, req)
}

// GetUserGrantByID calls zitadel.management.v1.ManagementService.GetUserGrantByID.
func (c *managementServiceClient) GetUserGrantByID(ctx context.Context, req *connect_go.Request[management.GetUserGrantByIDRequest]) (*connect_go.Response[management.GetUserGrantByIDResponse], error) {
	return c.getUserGrantByID.CallUnary(ctx, req)
}

// ListUserGrants calls zitadel.management.v1.ManagementService.ListUserGrants.
func (c *managementServiceClient) ListUserGrants(ctx context.Context, req *connect_go.Request[management.ListUserGrantRequest]) (*connect_go.Response[management.ListUserGrantResponse], error) {
	return c.listUserGrants.CallUnary(ctx, req)
}

// AddUserGrant calls zitadel.management.v1.ManagementService.AddUserGrant.
func (c *managementServiceClient) AddUserGrant(ctx context.Context, req *connect_go.Request[management.AddUserGrantRequest]) (*connect_go.Response[management.AddUserGrantResponse], error) {
	return c.addUserGrant.CallUnary(ctx, req)
}

// UpdateUserGrant calls zitadel.management.v1.ManagementService.UpdateUserGrant.
func (c *managementServiceClient) UpdateUserGrant(ctx context.Context, req *connect_go.Request[management.UpdateUserGrantRequest]) (*connect_go.Response[management.UpdateUserGrantResponse], error) {
	return c.updateUserGrant.CallUnary(ctx, req)
}

// DeactivateUserGrant calls zitadel.management.v1.ManagementService.DeactivateUserGrant.
func (c *managementServiceClient) DeactivateUserGrant(ctx context.Context, req *connect_go.Request[management.DeactivateUserGrantRequest]) (*connect_go.Response[management.DeactivateUserGrantResponse], error) {
	return c.deactivateUserGrant.CallUnary(ctx, req)
}

// ReactivateUserGrant calls zitadel.management.v1.ManagementService.ReactivateUserGrant.
func (c *managementServiceClient) ReactivateUserGrant(ctx context.Context, req *connect_go.Request[management.ReactivateUserGrantRequest]) (*connect_go.Response[management.ReactivateUserGrantResponse], error) {
	return c.reactivateUserGrant.CallUnary(ctx, req)
}

// RemoveUserGrant calls zitadel.management.v1.ManagementService.RemoveUserGrant.
func (c *managementServiceClient) RemoveUserGrant(ctx context.Context, req *connect_go.Request[management.RemoveUserGrantRequest]) (*connect_go.Response[management.RemoveUserGrantResponse], error) {
	return c.removeUserGrant.CallUnary(ctx, req)
}

// BulkRemoveUserGrant calls zitadel.management.v1.ManagementService.BulkRemoveUserGrant.
func (c *managementServiceClient) BulkRemoveUserGrant(ctx context.Context, req *connect_go.Request[management.BulkRemoveUserGrantRequest]) (*connect_go.Response[management.BulkRemoveUserGrantResponse], error) {
	return c.bulkRemoveUserGrant.CallUnary(ctx, req)
}

// GetOrgIAMPolicy calls zitadel.management.v1.ManagementService.GetOrgIAMPolicy.
func (c *managementServiceClient) GetOrgIAMPolicy(ctx context.Context, req *connect_go.Request[management.GetOrgIAMPolicyRequest]) (*connect_go.Response[management.GetOrgIAMPolicyResponse], error) {
	return c.getOrgIAMPolicy.CallUnary(ctx, req)
}

// GetDomainPolicy calls zitadel.management.v1.ManagementService.GetDomainPolicy.
func (c *managementServiceClient) GetDomainPolicy(ctx context.Context, req *connect_go.Request[management.GetDomainPolicyRequest]) (*connect_go.Response[management.GetDomainPolicyResponse], error) {
	return c.getDomainPolicy.CallUnary(ctx, req)
}

// GetLoginPolicy calls zitadel.management.v1.ManagementService.GetLoginPolicy.
func (c *managementServiceClient) GetLoginPolicy(ctx context.Context, req *connect_go.Request[management.GetLoginPolicyRequest]) (*connect_go.Response[management.GetLoginPolicyResponse], error) {
	return c.getLoginPolicy.CallUnary(ctx, req)
}

// GetDefaultLoginPolicy calls zitadel.management.v1.ManagementService.GetDefaultLoginPolicy.
func (c *managementServiceClient) GetDefaultLoginPolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultLoginPolicyRequest]) (*connect_go.Response[management.GetDefaultLoginPolicyResponse], error) {
	return c.getDefaultLoginPolicy.CallUnary(ctx, req)
}

// AddCustomLoginPolicy calls zitadel.management.v1.ManagementService.AddCustomLoginPolicy.
func (c *managementServiceClient) AddCustomLoginPolicy(ctx context.Context, req *connect_go.Request[management.AddCustomLoginPolicyRequest]) (*connect_go.Response[management.AddCustomLoginPolicyResponse], error) {
	return c.addCustomLoginPolicy.CallUnary(ctx, req)
}

// UpdateCustomLoginPolicy calls zitadel.management.v1.ManagementService.UpdateCustomLoginPolicy.
func (c *managementServiceClient) UpdateCustomLoginPolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomLoginPolicyRequest]) (*connect_go.Response[management.UpdateCustomLoginPolicyResponse], error) {
	return c.updateCustomLoginPolicy.CallUnary(ctx, req)
}

// ResetLoginPolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetLoginPolicyToDefault.
func (c *managementServiceClient) ResetLoginPolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetLoginPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLoginPolicyToDefaultResponse], error) {
	return c.resetLoginPolicyToDefault.CallUnary(ctx, req)
}

// ListLoginPolicyIDPs calls zitadel.management.v1.ManagementService.ListLoginPolicyIDPs.
func (c *managementServiceClient) ListLoginPolicyIDPs(ctx context.Context, req *connect_go.Request[management.ListLoginPolicyIDPsRequest]) (*connect_go.Response[management.ListLoginPolicyIDPsResponse], error) {
	return c.listLoginPolicyIDPs.CallUnary(ctx, req)
}

// AddIDPToLoginPolicy calls zitadel.management.v1.ManagementService.AddIDPToLoginPolicy.
func (c *managementServiceClient) AddIDPToLoginPolicy(ctx context.Context, req *connect_go.Request[management.AddIDPToLoginPolicyRequest]) (*connect_go.Response[management.AddIDPToLoginPolicyResponse], error) {
	return c.addIDPToLoginPolicy.CallUnary(ctx, req)
}

// RemoveIDPFromLoginPolicy calls zitadel.management.v1.ManagementService.RemoveIDPFromLoginPolicy.
func (c *managementServiceClient) RemoveIDPFromLoginPolicy(ctx context.Context, req *connect_go.Request[management.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveIDPFromLoginPolicyResponse], error) {
	return c.removeIDPFromLoginPolicy.CallUnary(ctx, req)
}

// ListLoginPolicySecondFactors calls
// zitadel.management.v1.ManagementService.ListLoginPolicySecondFactors.
func (c *managementServiceClient) ListLoginPolicySecondFactors(ctx context.Context, req *connect_go.Request[management.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[management.ListLoginPolicySecondFactorsResponse], error) {
	return c.listLoginPolicySecondFactors.CallUnary(ctx, req)
}

// AddSecondFactorToLoginPolicy calls
// zitadel.management.v1.ManagementService.AddSecondFactorToLoginPolicy.
func (c *managementServiceClient) AddSecondFactorToLoginPolicy(ctx context.Context, req *connect_go.Request[management.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddSecondFactorToLoginPolicyResponse], error) {
	return c.addSecondFactorToLoginPolicy.CallUnary(ctx, req)
}

// RemoveSecondFactorFromLoginPolicy calls
// zitadel.management.v1.ManagementService.RemoveSecondFactorFromLoginPolicy.
func (c *managementServiceClient) RemoveSecondFactorFromLoginPolicy(ctx context.Context, req *connect_go.Request[management.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveSecondFactorFromLoginPolicyResponse], error) {
	return c.removeSecondFactorFromLoginPolicy.CallUnary(ctx, req)
}

// ListLoginPolicyMultiFactors calls
// zitadel.management.v1.ManagementService.ListLoginPolicyMultiFactors.
func (c *managementServiceClient) ListLoginPolicyMultiFactors(ctx context.Context, req *connect_go.Request[management.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[management.ListLoginPolicyMultiFactorsResponse], error) {
	return c.listLoginPolicyMultiFactors.CallUnary(ctx, req)
}

// AddMultiFactorToLoginPolicy calls
// zitadel.management.v1.ManagementService.AddMultiFactorToLoginPolicy.
func (c *managementServiceClient) AddMultiFactorToLoginPolicy(ctx context.Context, req *connect_go.Request[management.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddMultiFactorToLoginPolicyResponse], error) {
	return c.addMultiFactorToLoginPolicy.CallUnary(ctx, req)
}

// RemoveMultiFactorFromLoginPolicy calls
// zitadel.management.v1.ManagementService.RemoveMultiFactorFromLoginPolicy.
func (c *managementServiceClient) RemoveMultiFactorFromLoginPolicy(ctx context.Context, req *connect_go.Request[management.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveMultiFactorFromLoginPolicyResponse], error) {
	return c.removeMultiFactorFromLoginPolicy.CallUnary(ctx, req)
}

// GetPasswordComplexityPolicy calls
// zitadel.management.v1.ManagementService.GetPasswordComplexityPolicy.
func (c *managementServiceClient) GetPasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[management.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetPasswordComplexityPolicyResponse], error) {
	return c.getPasswordComplexityPolicy.CallUnary(ctx, req)
}

// GetDefaultPasswordComplexityPolicy calls
// zitadel.management.v1.ManagementService.GetDefaultPasswordComplexityPolicy.
func (c *managementServiceClient) GetDefaultPasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordComplexityPolicyResponse], error) {
	return c.getDefaultPasswordComplexityPolicy.CallUnary(ctx, req)
}

// AddCustomPasswordComplexityPolicy calls
// zitadel.management.v1.ManagementService.AddCustomPasswordComplexityPolicy.
func (c *managementServiceClient) AddCustomPasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[management.AddCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.AddCustomPasswordComplexityPolicyResponse], error) {
	return c.addCustomPasswordComplexityPolicy.CallUnary(ctx, req)
}

// UpdateCustomPasswordComplexityPolicy calls
// zitadel.management.v1.ManagementService.UpdateCustomPasswordComplexityPolicy.
func (c *managementServiceClient) UpdateCustomPasswordComplexityPolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordComplexityPolicyResponse], error) {
	return c.updateCustomPasswordComplexityPolicy.CallUnary(ctx, req)
}

// ResetPasswordComplexityPolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetPasswordComplexityPolicyToDefault.
func (c *managementServiceClient) ResetPasswordComplexityPolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetPasswordComplexityPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordComplexityPolicyToDefaultResponse], error) {
	return c.resetPasswordComplexityPolicyToDefault.CallUnary(ctx, req)
}

// GetPasswordAgePolicy calls zitadel.management.v1.ManagementService.GetPasswordAgePolicy.
func (c *managementServiceClient) GetPasswordAgePolicy(ctx context.Context, req *connect_go.Request[management.GetPasswordAgePolicyRequest]) (*connect_go.Response[management.GetPasswordAgePolicyResponse], error) {
	return c.getPasswordAgePolicy.CallUnary(ctx, req)
}

// GetDefaultPasswordAgePolicy calls
// zitadel.management.v1.ManagementService.GetDefaultPasswordAgePolicy.
func (c *managementServiceClient) GetDefaultPasswordAgePolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultPasswordAgePolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordAgePolicyResponse], error) {
	return c.getDefaultPasswordAgePolicy.CallUnary(ctx, req)
}

// AddCustomPasswordAgePolicy calls
// zitadel.management.v1.ManagementService.AddCustomPasswordAgePolicy.
func (c *managementServiceClient) AddCustomPasswordAgePolicy(ctx context.Context, req *connect_go.Request[management.AddCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.AddCustomPasswordAgePolicyResponse], error) {
	return c.addCustomPasswordAgePolicy.CallUnary(ctx, req)
}

// UpdateCustomPasswordAgePolicy calls
// zitadel.management.v1.ManagementService.UpdateCustomPasswordAgePolicy.
func (c *managementServiceClient) UpdateCustomPasswordAgePolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordAgePolicyResponse], error) {
	return c.updateCustomPasswordAgePolicy.CallUnary(ctx, req)
}

// ResetPasswordAgePolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetPasswordAgePolicyToDefault.
func (c *managementServiceClient) ResetPasswordAgePolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetPasswordAgePolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordAgePolicyToDefaultResponse], error) {
	return c.resetPasswordAgePolicyToDefault.CallUnary(ctx, req)
}

// GetLockoutPolicy calls zitadel.management.v1.ManagementService.GetLockoutPolicy.
func (c *managementServiceClient) GetLockoutPolicy(ctx context.Context, req *connect_go.Request[management.GetLockoutPolicyRequest]) (*connect_go.Response[management.GetLockoutPolicyResponse], error) {
	return c.getLockoutPolicy.CallUnary(ctx, req)
}

// GetDefaultLockoutPolicy calls zitadel.management.v1.ManagementService.GetDefaultLockoutPolicy.
func (c *managementServiceClient) GetDefaultLockoutPolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultLockoutPolicyRequest]) (*connect_go.Response[management.GetDefaultLockoutPolicyResponse], error) {
	return c.getDefaultLockoutPolicy.CallUnary(ctx, req)
}

// AddCustomLockoutPolicy calls zitadel.management.v1.ManagementService.AddCustomLockoutPolicy.
func (c *managementServiceClient) AddCustomLockoutPolicy(ctx context.Context, req *connect_go.Request[management.AddCustomLockoutPolicyRequest]) (*connect_go.Response[management.AddCustomLockoutPolicyResponse], error) {
	return c.addCustomLockoutPolicy.CallUnary(ctx, req)
}

// UpdateCustomLockoutPolicy calls
// zitadel.management.v1.ManagementService.UpdateCustomLockoutPolicy.
func (c *managementServiceClient) UpdateCustomLockoutPolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomLockoutPolicyRequest]) (*connect_go.Response[management.UpdateCustomLockoutPolicyResponse], error) {
	return c.updateCustomLockoutPolicy.CallUnary(ctx, req)
}

// ResetLockoutPolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetLockoutPolicyToDefault.
func (c *managementServiceClient) ResetLockoutPolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetLockoutPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLockoutPolicyToDefaultResponse], error) {
	return c.resetLockoutPolicyToDefault.CallUnary(ctx, req)
}

// GetPrivacyPolicy calls zitadel.management.v1.ManagementService.GetPrivacyPolicy.
func (c *managementServiceClient) GetPrivacyPolicy(ctx context.Context, req *connect_go.Request[management.GetPrivacyPolicyRequest]) (*connect_go.Response[management.GetPrivacyPolicyResponse], error) {
	return c.getPrivacyPolicy.CallUnary(ctx, req)
}

// GetDefaultPrivacyPolicy calls zitadel.management.v1.ManagementService.GetDefaultPrivacyPolicy.
func (c *managementServiceClient) GetDefaultPrivacyPolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultPrivacyPolicyRequest]) (*connect_go.Response[management.GetDefaultPrivacyPolicyResponse], error) {
	return c.getDefaultPrivacyPolicy.CallUnary(ctx, req)
}

// AddCustomPrivacyPolicy calls zitadel.management.v1.ManagementService.AddCustomPrivacyPolicy.
func (c *managementServiceClient) AddCustomPrivacyPolicy(ctx context.Context, req *connect_go.Request[management.AddCustomPrivacyPolicyRequest]) (*connect_go.Response[management.AddCustomPrivacyPolicyResponse], error) {
	return c.addCustomPrivacyPolicy.CallUnary(ctx, req)
}

// UpdateCustomPrivacyPolicy calls
// zitadel.management.v1.ManagementService.UpdateCustomPrivacyPolicy.
func (c *managementServiceClient) UpdateCustomPrivacyPolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomPrivacyPolicyRequest]) (*connect_go.Response[management.UpdateCustomPrivacyPolicyResponse], error) {
	return c.updateCustomPrivacyPolicy.CallUnary(ctx, req)
}

// ResetPrivacyPolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetPrivacyPolicyToDefault.
func (c *managementServiceClient) ResetPrivacyPolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetPrivacyPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPrivacyPolicyToDefaultResponse], error) {
	return c.resetPrivacyPolicyToDefault.CallUnary(ctx, req)
}

// GetNotificationPolicy calls zitadel.management.v1.ManagementService.GetNotificationPolicy.
func (c *managementServiceClient) GetNotificationPolicy(ctx context.Context, req *connect_go.Request[management.GetNotificationPolicyRequest]) (*connect_go.Response[management.GetNotificationPolicyResponse], error) {
	return c.getNotificationPolicy.CallUnary(ctx, req)
}

// GetDefaultNotificationPolicy calls
// zitadel.management.v1.ManagementService.GetDefaultNotificationPolicy.
func (c *managementServiceClient) GetDefaultNotificationPolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultNotificationPolicyRequest]) (*connect_go.Response[management.GetDefaultNotificationPolicyResponse], error) {
	return c.getDefaultNotificationPolicy.CallUnary(ctx, req)
}

// AddCustomNotificationPolicy calls
// zitadel.management.v1.ManagementService.AddCustomNotificationPolicy.
func (c *managementServiceClient) AddCustomNotificationPolicy(ctx context.Context, req *connect_go.Request[management.AddCustomNotificationPolicyRequest]) (*connect_go.Response[management.AddCustomNotificationPolicyResponse], error) {
	return c.addCustomNotificationPolicy.CallUnary(ctx, req)
}

// UpdateCustomNotificationPolicy calls
// zitadel.management.v1.ManagementService.UpdateCustomNotificationPolicy.
func (c *managementServiceClient) UpdateCustomNotificationPolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomNotificationPolicyRequest]) (*connect_go.Response[management.UpdateCustomNotificationPolicyResponse], error) {
	return c.updateCustomNotificationPolicy.CallUnary(ctx, req)
}

// ResetNotificationPolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetNotificationPolicyToDefault.
func (c *managementServiceClient) ResetNotificationPolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetNotificationPolicyToDefaultRequest]) (*connect_go.Response[management.ResetNotificationPolicyToDefaultResponse], error) {
	return c.resetNotificationPolicyToDefault.CallUnary(ctx, req)
}

// GetLabelPolicy calls zitadel.management.v1.ManagementService.GetLabelPolicy.
func (c *managementServiceClient) GetLabelPolicy(ctx context.Context, req *connect_go.Request[management.GetLabelPolicyRequest]) (*connect_go.Response[management.GetLabelPolicyResponse], error) {
	return c.getLabelPolicy.CallUnary(ctx, req)
}

// GetPreviewLabelPolicy calls zitadel.management.v1.ManagementService.GetPreviewLabelPolicy.
func (c *managementServiceClient) GetPreviewLabelPolicy(ctx context.Context, req *connect_go.Request[management.GetPreviewLabelPolicyRequest]) (*connect_go.Response[management.GetPreviewLabelPolicyResponse], error) {
	return c.getPreviewLabelPolicy.CallUnary(ctx, req)
}

// GetDefaultLabelPolicy calls zitadel.management.v1.ManagementService.GetDefaultLabelPolicy.
func (c *managementServiceClient) GetDefaultLabelPolicy(ctx context.Context, req *connect_go.Request[management.GetDefaultLabelPolicyRequest]) (*connect_go.Response[management.GetDefaultLabelPolicyResponse], error) {
	return c.getDefaultLabelPolicy.CallUnary(ctx, req)
}

// AddCustomLabelPolicy calls zitadel.management.v1.ManagementService.AddCustomLabelPolicy.
func (c *managementServiceClient) AddCustomLabelPolicy(ctx context.Context, req *connect_go.Request[management.AddCustomLabelPolicyRequest]) (*connect_go.Response[management.AddCustomLabelPolicyResponse], error) {
	return c.addCustomLabelPolicy.CallUnary(ctx, req)
}

// UpdateCustomLabelPolicy calls zitadel.management.v1.ManagementService.UpdateCustomLabelPolicy.
func (c *managementServiceClient) UpdateCustomLabelPolicy(ctx context.Context, req *connect_go.Request[management.UpdateCustomLabelPolicyRequest]) (*connect_go.Response[management.UpdateCustomLabelPolicyResponse], error) {
	return c.updateCustomLabelPolicy.CallUnary(ctx, req)
}

// ActivateCustomLabelPolicy calls
// zitadel.management.v1.ManagementService.ActivateCustomLabelPolicy.
func (c *managementServiceClient) ActivateCustomLabelPolicy(ctx context.Context, req *connect_go.Request[management.ActivateCustomLabelPolicyRequest]) (*connect_go.Response[management.ActivateCustomLabelPolicyResponse], error) {
	return c.activateCustomLabelPolicy.CallUnary(ctx, req)
}

// RemoveCustomLabelPolicyLogo calls
// zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyLogo.
func (c *managementServiceClient) RemoveCustomLabelPolicyLogo(ctx context.Context, req *connect_go.Request[management.RemoveCustomLabelPolicyLogoRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoResponse], error) {
	return c.removeCustomLabelPolicyLogo.CallUnary(ctx, req)
}

// RemoveCustomLabelPolicyLogoDark calls
// zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyLogoDark.
func (c *managementServiceClient) RemoveCustomLabelPolicyLogoDark(ctx context.Context, req *connect_go.Request[management.RemoveCustomLabelPolicyLogoDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoDarkResponse], error) {
	return c.removeCustomLabelPolicyLogoDark.CallUnary(ctx, req)
}

// RemoveCustomLabelPolicyIcon calls
// zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyIcon.
func (c *managementServiceClient) RemoveCustomLabelPolicyIcon(ctx context.Context, req *connect_go.Request[management.RemoveCustomLabelPolicyIconRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconResponse], error) {
	return c.removeCustomLabelPolicyIcon.CallUnary(ctx, req)
}

// RemoveCustomLabelPolicyIconDark calls
// zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyIconDark.
func (c *managementServiceClient) RemoveCustomLabelPolicyIconDark(ctx context.Context, req *connect_go.Request[management.RemoveCustomLabelPolicyIconDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconDarkResponse], error) {
	return c.removeCustomLabelPolicyIconDark.CallUnary(ctx, req)
}

// RemoveCustomLabelPolicyFont calls
// zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyFont.
func (c *managementServiceClient) RemoveCustomLabelPolicyFont(ctx context.Context, req *connect_go.Request[management.RemoveCustomLabelPolicyFontRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyFontResponse], error) {
	return c.removeCustomLabelPolicyFont.CallUnary(ctx, req)
}

// ResetLabelPolicyToDefault calls
// zitadel.management.v1.ManagementService.ResetLabelPolicyToDefault.
func (c *managementServiceClient) ResetLabelPolicyToDefault(ctx context.Context, req *connect_go.Request[management.ResetLabelPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLabelPolicyToDefaultResponse], error) {
	return c.resetLabelPolicyToDefault.CallUnary(ctx, req)
}

// GetCustomInitMessageText calls zitadel.management.v1.ManagementService.GetCustomInitMessageText.
func (c *managementServiceClient) GetCustomInitMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomInitMessageTextRequest]) (*connect_go.Response[management.GetCustomInitMessageTextResponse], error) {
	return c.getCustomInitMessageText.CallUnary(ctx, req)
}

// GetDefaultInitMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultInitMessageText.
func (c *managementServiceClient) GetDefaultInitMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultInitMessageTextRequest]) (*connect_go.Response[management.GetDefaultInitMessageTextResponse], error) {
	return c.getDefaultInitMessageText.CallUnary(ctx, req)
}

// SetCustomInitMessageText calls zitadel.management.v1.ManagementService.SetCustomInitMessageText.
func (c *managementServiceClient) SetCustomInitMessageText(ctx context.Context, req *connect_go.Request[management.SetCustomInitMessageTextRequest]) (*connect_go.Response[management.SetCustomInitMessageTextResponse], error) {
	return c.setCustomInitMessageText.CallUnary(ctx, req)
}

// ResetCustomInitMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomInitMessageTextToDefault.
func (c *managementServiceClient) ResetCustomInitMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomInitMessageTextToDefaultResponse], error) {
	return c.resetCustomInitMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomPasswordResetMessageText calls
// zitadel.management.v1.ManagementService.GetCustomPasswordResetMessageText.
func (c *managementServiceClient) GetCustomPasswordResetMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordResetMessageTextResponse], error) {
	return c.getCustomPasswordResetMessageText.CallUnary(ctx, req)
}

// GetDefaultPasswordResetMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultPasswordResetMessageText.
func (c *managementServiceClient) GetDefaultPasswordResetMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordResetMessageTextResponse], error) {
	return c.getDefaultPasswordResetMessageText.CallUnary(ctx, req)
}

// SetCustomPasswordResetMessageText calls
// zitadel.management.v1.ManagementService.SetCustomPasswordResetMessageText.
func (c *managementServiceClient) SetCustomPasswordResetMessageText(ctx context.Context, req *connect_go.Request[management.SetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordResetMessageTextResponse], error) {
	return c.setCustomPasswordResetMessageText.CallUnary(ctx, req)
}

// ResetCustomPasswordResetMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomPasswordResetMessageTextToDefault.
func (c *managementServiceClient) ResetCustomPasswordResetMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordResetMessageTextToDefaultResponse], error) {
	return c.resetCustomPasswordResetMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomVerifyEmailMessageText calls
// zitadel.management.v1.ManagementService.GetCustomVerifyEmailMessageText.
func (c *managementServiceClient) GetCustomVerifyEmailMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyEmailMessageTextResponse], error) {
	return c.getCustomVerifyEmailMessageText.CallUnary(ctx, req)
}

// GetDefaultVerifyEmailMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultVerifyEmailMessageText.
func (c *managementServiceClient) GetDefaultVerifyEmailMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyEmailMessageTextResponse], error) {
	return c.getDefaultVerifyEmailMessageText.CallUnary(ctx, req)
}

// SetCustomVerifyEmailMessageText calls
// zitadel.management.v1.ManagementService.SetCustomVerifyEmailMessageText.
func (c *managementServiceClient) SetCustomVerifyEmailMessageText(ctx context.Context, req *connect_go.Request[management.SetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyEmailMessageTextResponse], error) {
	return c.setCustomVerifyEmailMessageText.CallUnary(ctx, req)
}

// ResetCustomVerifyEmailMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomVerifyEmailMessageTextToDefault.
func (c *managementServiceClient) ResetCustomVerifyEmailMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyEmailMessageTextToDefaultResponse], error) {
	return c.resetCustomVerifyEmailMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomVerifyPhoneMessageText calls
// zitadel.management.v1.ManagementService.GetCustomVerifyPhoneMessageText.
func (c *managementServiceClient) GetCustomVerifyPhoneMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyPhoneMessageTextResponse], error) {
	return c.getCustomVerifyPhoneMessageText.CallUnary(ctx, req)
}

// GetDefaultVerifyPhoneMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultVerifyPhoneMessageText.
func (c *managementServiceClient) GetDefaultVerifyPhoneMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyPhoneMessageTextResponse], error) {
	return c.getDefaultVerifyPhoneMessageText.CallUnary(ctx, req)
}

// SetCustomVerifyPhoneMessageText calls
// zitadel.management.v1.ManagementService.SetCustomVerifyPhoneMessageText.
func (c *managementServiceClient) SetCustomVerifyPhoneMessageText(ctx context.Context, req *connect_go.Request[management.SetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyPhoneMessageTextResponse], error) {
	return c.setCustomVerifyPhoneMessageText.CallUnary(ctx, req)
}

// ResetCustomVerifyPhoneMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomVerifyPhoneMessageTextToDefault.
func (c *managementServiceClient) ResetCustomVerifyPhoneMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error) {
	return c.resetCustomVerifyPhoneMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomDomainClaimedMessageText calls
// zitadel.management.v1.ManagementService.GetCustomDomainClaimedMessageText.
func (c *managementServiceClient) GetCustomDomainClaimedMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetCustomDomainClaimedMessageTextResponse], error) {
	return c.getCustomDomainClaimedMessageText.CallUnary(ctx, req)
}

// GetDefaultDomainClaimedMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultDomainClaimedMessageText.
func (c *managementServiceClient) GetDefaultDomainClaimedMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetDefaultDomainClaimedMessageTextResponse], error) {
	return c.getDefaultDomainClaimedMessageText.CallUnary(ctx, req)
}

// SetCustomDomainClaimedMessageCustomText calls
// zitadel.management.v1.ManagementService.SetCustomDomainClaimedMessageCustomText.
func (c *managementServiceClient) SetCustomDomainClaimedMessageCustomText(ctx context.Context, req *connect_go.Request[management.SetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.SetCustomDomainClaimedMessageTextResponse], error) {
	return c.setCustomDomainClaimedMessageCustomText.CallUnary(ctx, req)
}

// ResetCustomDomainClaimedMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomDomainClaimedMessageTextToDefault.
func (c *managementServiceClient) ResetCustomDomainClaimedMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomDomainClaimedMessageTextToDefaultResponse], error) {
	return c.resetCustomDomainClaimedMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomPasswordlessRegistrationMessageText calls
// zitadel.management.v1.ManagementService.GetCustomPasswordlessRegistrationMessageText.
func (c *managementServiceClient) GetCustomPasswordlessRegistrationMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordlessRegistrationMessageTextResponse], error) {
	return c.getCustomPasswordlessRegistrationMessageText.CallUnary(ctx, req)
}

// GetDefaultPasswordlessRegistrationMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultPasswordlessRegistrationMessageText.
func (c *managementServiceClient) GetDefaultPasswordlessRegistrationMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordlessRegistrationMessageTextResponse], error) {
	return c.getDefaultPasswordlessRegistrationMessageText.CallUnary(ctx, req)
}

// SetCustomPasswordlessRegistrationMessageCustomText calls
// zitadel.management.v1.ManagementService.SetCustomPasswordlessRegistrationMessageCustomText.
func (c *managementServiceClient) SetCustomPasswordlessRegistrationMessageCustomText(ctx context.Context, req *connect_go.Request[management.SetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordlessRegistrationMessageTextResponse], error) {
	return c.setCustomPasswordlessRegistrationMessageCustomText.CallUnary(ctx, req)
}

// ResetCustomPasswordlessRegistrationMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomPasswordlessRegistrationMessageTextToDefault.
func (c *managementServiceClient) ResetCustomPasswordlessRegistrationMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error) {
	return c.resetCustomPasswordlessRegistrationMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomPasswordChangeMessageText calls
// zitadel.management.v1.ManagementService.GetCustomPasswordChangeMessageText.
func (c *managementServiceClient) GetCustomPasswordChangeMessageText(ctx context.Context, req *connect_go.Request[management.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordChangeMessageTextResponse], error) {
	return c.getCustomPasswordChangeMessageText.CallUnary(ctx, req)
}

// GetDefaultPasswordChangeMessageText calls
// zitadel.management.v1.ManagementService.GetDefaultPasswordChangeMessageText.
func (c *managementServiceClient) GetDefaultPasswordChangeMessageText(ctx context.Context, req *connect_go.Request[management.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordChangeMessageTextResponse], error) {
	return c.getDefaultPasswordChangeMessageText.CallUnary(ctx, req)
}

// SetCustomPasswordChangeMessageCustomText calls
// zitadel.management.v1.ManagementService.SetCustomPasswordChangeMessageCustomText.
func (c *managementServiceClient) SetCustomPasswordChangeMessageCustomText(ctx context.Context, req *connect_go.Request[management.SetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordChangeMessageTextResponse], error) {
	return c.setCustomPasswordChangeMessageCustomText.CallUnary(ctx, req)
}

// ResetCustomPasswordChangeMessageTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomPasswordChangeMessageTextToDefault.
func (c *managementServiceClient) ResetCustomPasswordChangeMessageTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordChangeMessageTextToDefaultResponse], error) {
	return c.resetCustomPasswordChangeMessageTextToDefault.CallUnary(ctx, req)
}

// GetCustomLoginTexts calls zitadel.management.v1.ManagementService.GetCustomLoginTexts.
func (c *managementServiceClient) GetCustomLoginTexts(ctx context.Context, req *connect_go.Request[management.GetCustomLoginTextsRequest]) (*connect_go.Response[management.GetCustomLoginTextsResponse], error) {
	return c.getCustomLoginTexts.CallUnary(ctx, req)
}

// GetDefaultLoginTexts calls zitadel.management.v1.ManagementService.GetDefaultLoginTexts.
func (c *managementServiceClient) GetDefaultLoginTexts(ctx context.Context, req *connect_go.Request[management.GetDefaultLoginTextsRequest]) (*connect_go.Response[management.GetDefaultLoginTextsResponse], error) {
	return c.getDefaultLoginTexts.CallUnary(ctx, req)
}

// SetCustomLoginText calls zitadel.management.v1.ManagementService.SetCustomLoginText.
func (c *managementServiceClient) SetCustomLoginText(ctx context.Context, req *connect_go.Request[management.SetCustomLoginTextsRequest]) (*connect_go.Response[management.SetCustomLoginTextsResponse], error) {
	return c.setCustomLoginText.CallUnary(ctx, req)
}

// ResetCustomLoginTextToDefault calls
// zitadel.management.v1.ManagementService.ResetCustomLoginTextToDefault.
func (c *managementServiceClient) ResetCustomLoginTextToDefault(ctx context.Context, req *connect_go.Request[management.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[management.ResetCustomLoginTextsToDefaultResponse], error) {
	return c.resetCustomLoginTextToDefault.CallUnary(ctx, req)
}

// GetOrgIDPByID calls zitadel.management.v1.ManagementService.GetOrgIDPByID.
func (c *managementServiceClient) GetOrgIDPByID(ctx context.Context, req *connect_go.Request[management.GetOrgIDPByIDRequest]) (*connect_go.Response[management.GetOrgIDPByIDResponse], error) {
	return c.getOrgIDPByID.CallUnary(ctx, req)
}

// ListOrgIDPs calls zitadel.management.v1.ManagementService.ListOrgIDPs.
func (c *managementServiceClient) ListOrgIDPs(ctx context.Context, req *connect_go.Request[management.ListOrgIDPsRequest]) (*connect_go.Response[management.ListOrgIDPsResponse], error) {
	return c.listOrgIDPs.CallUnary(ctx, req)
}

// AddOrgOIDCIDP calls zitadel.management.v1.ManagementService.AddOrgOIDCIDP.
func (c *managementServiceClient) AddOrgOIDCIDP(ctx context.Context, req *connect_go.Request[management.AddOrgOIDCIDPRequest]) (*connect_go.Response[management.AddOrgOIDCIDPResponse], error) {
	return c.addOrgOIDCIDP.CallUnary(ctx, req)
}

// AddOrgJWTIDP calls zitadel.management.v1.ManagementService.AddOrgJWTIDP.
func (c *managementServiceClient) AddOrgJWTIDP(ctx context.Context, req *connect_go.Request[management.AddOrgJWTIDPRequest]) (*connect_go.Response[management.AddOrgJWTIDPResponse], error) {
	return c.addOrgJWTIDP.CallUnary(ctx, req)
}

// DeactivateOrgIDP calls zitadel.management.v1.ManagementService.DeactivateOrgIDP.
func (c *managementServiceClient) DeactivateOrgIDP(ctx context.Context, req *connect_go.Request[management.DeactivateOrgIDPRequest]) (*connect_go.Response[management.DeactivateOrgIDPResponse], error) {
	return c.deactivateOrgIDP.CallUnary(ctx, req)
}

// ReactivateOrgIDP calls zitadel.management.v1.ManagementService.ReactivateOrgIDP.
func (c *managementServiceClient) ReactivateOrgIDP(ctx context.Context, req *connect_go.Request[management.ReactivateOrgIDPRequest]) (*connect_go.Response[management.ReactivateOrgIDPResponse], error) {
	return c.reactivateOrgIDP.CallUnary(ctx, req)
}

// RemoveOrgIDP calls zitadel.management.v1.ManagementService.RemoveOrgIDP.
func (c *managementServiceClient) RemoveOrgIDP(ctx context.Context, req *connect_go.Request[management.RemoveOrgIDPRequest]) (*connect_go.Response[management.RemoveOrgIDPResponse], error) {
	return c.removeOrgIDP.CallUnary(ctx, req)
}

// UpdateOrgIDP calls zitadel.management.v1.ManagementService.UpdateOrgIDP.
func (c *managementServiceClient) UpdateOrgIDP(ctx context.Context, req *connect_go.Request[management.UpdateOrgIDPRequest]) (*connect_go.Response[management.UpdateOrgIDPResponse], error) {
	return c.updateOrgIDP.CallUnary(ctx, req)
}

// UpdateOrgIDPOIDCConfig calls zitadel.management.v1.ManagementService.UpdateOrgIDPOIDCConfig.
func (c *managementServiceClient) UpdateOrgIDPOIDCConfig(ctx context.Context, req *connect_go.Request[management.UpdateOrgIDPOIDCConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPOIDCConfigResponse], error) {
	return c.updateOrgIDPOIDCConfig.CallUnary(ctx, req)
}

// UpdateOrgIDPJWTConfig calls zitadel.management.v1.ManagementService.UpdateOrgIDPJWTConfig.
func (c *managementServiceClient) UpdateOrgIDPJWTConfig(ctx context.Context, req *connect_go.Request[management.UpdateOrgIDPJWTConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPJWTConfigResponse], error) {
	return c.updateOrgIDPJWTConfig.CallUnary(ctx, req)
}

// ListProviders calls zitadel.management.v1.ManagementService.ListProviders.
func (c *managementServiceClient) ListProviders(ctx context.Context, req *connect_go.Request[management.ListProvidersRequest]) (*connect_go.Response[management.ListProvidersResponse], error) {
	return c.listProviders.CallUnary(ctx, req)
}

// GetProviderByID calls zitadel.management.v1.ManagementService.GetProviderByID.
func (c *managementServiceClient) GetProviderByID(ctx context.Context, req *connect_go.Request[management.GetProviderByIDRequest]) (*connect_go.Response[management.GetProviderByIDResponse], error) {
	return c.getProviderByID.CallUnary(ctx, req)
}

// AddLDAPProvider calls zitadel.management.v1.ManagementService.AddLDAPProvider.
func (c *managementServiceClient) AddLDAPProvider(ctx context.Context, req *connect_go.Request[management.AddLDAPProviderRequest]) (*connect_go.Response[management.AddLDAPProviderResponse], error) {
	return c.addLDAPProvider.CallUnary(ctx, req)
}

// UpdateLDAPProvider calls zitadel.management.v1.ManagementService.UpdateLDAPProvider.
func (c *managementServiceClient) UpdateLDAPProvider(ctx context.Context, req *connect_go.Request[management.UpdateLDAPProviderRequest]) (*connect_go.Response[management.UpdateLDAPProviderResponse], error) {
	return c.updateLDAPProvider.CallUnary(ctx, req)
}

// DeleteProvider calls zitadel.management.v1.ManagementService.DeleteProvider.
func (c *managementServiceClient) DeleteProvider(ctx context.Context, req *connect_go.Request[management.DeleteProviderRequest]) (*connect_go.Response[management.DeleteProviderResponse], error) {
	return c.deleteProvider.CallUnary(ctx, req)
}

// ListActions calls zitadel.management.v1.ManagementService.ListActions.
func (c *managementServiceClient) ListActions(ctx context.Context, req *connect_go.Request[management.ListActionsRequest]) (*connect_go.Response[management.ListActionsResponse], error) {
	return c.listActions.CallUnary(ctx, req)
}

// GetAction calls zitadel.management.v1.ManagementService.GetAction.
func (c *managementServiceClient) GetAction(ctx context.Context, req *connect_go.Request[management.GetActionRequest]) (*connect_go.Response[management.GetActionResponse], error) {
	return c.getAction.CallUnary(ctx, req)
}

// CreateAction calls zitadel.management.v1.ManagementService.CreateAction.
func (c *managementServiceClient) CreateAction(ctx context.Context, req *connect_go.Request[management.CreateActionRequest]) (*connect_go.Response[management.CreateActionResponse], error) {
	return c.createAction.CallUnary(ctx, req)
}

// UpdateAction calls zitadel.management.v1.ManagementService.UpdateAction.
func (c *managementServiceClient) UpdateAction(ctx context.Context, req *connect_go.Request[management.UpdateActionRequest]) (*connect_go.Response[management.UpdateActionResponse], error) {
	return c.updateAction.CallUnary(ctx, req)
}

// DeactivateAction calls zitadel.management.v1.ManagementService.DeactivateAction.
func (c *managementServiceClient) DeactivateAction(ctx context.Context, req *connect_go.Request[management.DeactivateActionRequest]) (*connect_go.Response[management.DeactivateActionResponse], error) {
	return c.deactivateAction.CallUnary(ctx, req)
}

// ReactivateAction calls zitadel.management.v1.ManagementService.ReactivateAction.
func (c *managementServiceClient) ReactivateAction(ctx context.Context, req *connect_go.Request[management.ReactivateActionRequest]) (*connect_go.Response[management.ReactivateActionResponse], error) {
	return c.reactivateAction.CallUnary(ctx, req)
}

// DeleteAction calls zitadel.management.v1.ManagementService.DeleteAction.
func (c *managementServiceClient) DeleteAction(ctx context.Context, req *connect_go.Request[management.DeleteActionRequest]) (*connect_go.Response[management.DeleteActionResponse], error) {
	return c.deleteAction.CallUnary(ctx, req)
}

// ListFlowTypes calls zitadel.management.v1.ManagementService.ListFlowTypes.
func (c *managementServiceClient) ListFlowTypes(ctx context.Context, req *connect_go.Request[management.ListFlowTypesRequest]) (*connect_go.Response[management.ListFlowTypesResponse], error) {
	return c.listFlowTypes.CallUnary(ctx, req)
}

// ListFlowTriggerTypes calls zitadel.management.v1.ManagementService.ListFlowTriggerTypes.
func (c *managementServiceClient) ListFlowTriggerTypes(ctx context.Context, req *connect_go.Request[management.ListFlowTriggerTypesRequest]) (*connect_go.Response[management.ListFlowTriggerTypesResponse], error) {
	return c.listFlowTriggerTypes.CallUnary(ctx, req)
}

// GetFlow calls zitadel.management.v1.ManagementService.GetFlow.
func (c *managementServiceClient) GetFlow(ctx context.Context, req *connect_go.Request[management.GetFlowRequest]) (*connect_go.Response[management.GetFlowResponse], error) {
	return c.getFlow.CallUnary(ctx, req)
}

// ClearFlow calls zitadel.management.v1.ManagementService.ClearFlow.
func (c *managementServiceClient) ClearFlow(ctx context.Context, req *connect_go.Request[management.ClearFlowRequest]) (*connect_go.Response[management.ClearFlowResponse], error) {
	return c.clearFlow.CallUnary(ctx, req)
}

// SetTriggerActions calls zitadel.management.v1.ManagementService.SetTriggerActions.
func (c *managementServiceClient) SetTriggerActions(ctx context.Context, req *connect_go.Request[management.SetTriggerActionsRequest]) (*connect_go.Response[management.SetTriggerActionsResponse], error) {
	return c.setTriggerActions.CallUnary(ctx, req)
}

// ManagementServiceHandler is an implementation of the zitadel.management.v1.ManagementService
// service.
type ManagementServiceHandler interface {
	Healthz(context.Context, *connect_go.Request[management.HealthzRequest]) (*connect_go.Response[management.HealthzResponse], error)
	GetOIDCInformation(context.Context, *connect_go.Request[management.GetOIDCInformationRequest]) (*connect_go.Response[management.GetOIDCInformationResponse], error)
	// Returns some needed settings of the IAM (Global Organisation ID, Zitadel Project ID)
	GetIAM(context.Context, *connect_go.Request[management.GetIAMRequest]) (*connect_go.Response[management.GetIAMResponse], error)
	// Returns the default languages
	GetSupportedLanguages(context.Context, *connect_go.Request[management.GetSupportedLanguagesRequest]) (*connect_go.Response[management.GetSupportedLanguagesResponse], error)
	// Returns the requested full blown user (human or machine)
	GetUserByID(context.Context, *connect_go.Request[management.GetUserByIDRequest]) (*connect_go.Response[management.GetUserByIDResponse], error)
	// Searches a user over all organisations
	// the login name has to match exactly
	GetUserByLoginNameGlobal(context.Context, *connect_go.Request[management.GetUserByLoginNameGlobalRequest]) (*connect_go.Response[management.GetUserByLoginNameGlobalResponse], error)
	// Return the users matching the query
	// Limit should always be set, there is a default limit set by the service
	ListUsers(context.Context, *connect_go.Request[management.ListUsersRequest]) (*connect_go.Response[management.ListUsersResponse], error)
	// Returns the history of the user (each event)
	// Limit should always be set, there is a default limit set by the service
	ListUserChanges(context.Context, *connect_go.Request[management.ListUserChangesRequest]) (*connect_go.Response[management.ListUserChangesResponse], error)
	// Returns if a user with the searched email or username is unique
	IsUserUnique(context.Context, *connect_go.Request[management.IsUserUniqueRequest]) (*connect_go.Response[management.IsUserUniqueResponse], error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user has to change on the next login
	AddHumanUser(context.Context, *connect_go.Request[management.AddHumanUserRequest]) (*connect_go.Response[management.AddHumanUserResponse], error)
	// Create a user of the type human
	// A email will be sent to the user if email is not verified or no password is set
	// If a password is given, the user doesn't have to change on the next login
	ImportHumanUser(context.Context, *connect_go.Request[management.ImportHumanUserRequest]) (*connect_go.Response[management.ImportHumanUserResponse], error)
	// Create a user of the type machine
	AddMachineUser(context.Context, *connect_go.Request[management.AddMachineUserRequest]) (*connect_go.Response[management.AddMachineUserResponse], error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already deactivated
	DeactivateUser(context.Context, *connect_go.Request[management.DeactivateUserRequest]) (*connect_go.Response[management.DeactivateUserResponse], error)
	// Changes the user state to active
	// returns an error if user state is not deactivated
	ReactivateUser(context.Context, *connect_go.Request[management.ReactivateUserRequest]) (*connect_go.Response[management.ReactivateUserResponse], error)
	// Changes the user state to deactivated
	// The user will not be able to login
	// returns an error if user state is already locked
	LockUser(context.Context, *connect_go.Request[management.LockUserRequest]) (*connect_go.Response[management.LockUserResponse], error)
	// Changes the user state to active
	// returns an error if user state is not locked
	UnlockUser(context.Context, *connect_go.Request[management.UnlockUserRequest]) (*connect_go.Response[management.UnlockUserResponse], error)
	// Changes the user state to deleted
	RemoveUser(context.Context, *connect_go.Request[management.RemoveUserRequest]) (*connect_go.Response[management.RemoveUserResponse], error)
	// Changes the username
	UpdateUserName(context.Context, *connect_go.Request[management.UpdateUserNameRequest]) (*connect_go.Response[management.UpdateUserNameResponse], error)
	// Sets a user metadata by key
	SetUserMetadata(context.Context, *connect_go.Request[management.SetUserMetadataRequest]) (*connect_go.Response[management.SetUserMetadataResponse], error)
	// Set a list of user metadata
	BulkSetUserMetadata(context.Context, *connect_go.Request[management.BulkSetUserMetadataRequest]) (*connect_go.Response[management.BulkSetUserMetadataResponse], error)
	// Returns the user metadata
	ListUserMetadata(context.Context, *connect_go.Request[management.ListUserMetadataRequest]) (*connect_go.Response[management.ListUserMetadataResponse], error)
	// Returns the user metadata by key
	GetUserMetadata(context.Context, *connect_go.Request[management.GetUserMetadataRequest]) (*connect_go.Response[management.GetUserMetadataResponse], error)
	// Removes a user metadata by key
	RemoveUserMetadata(context.Context, *connect_go.Request[management.RemoveUserMetadataRequest]) (*connect_go.Response[management.RemoveUserMetadataResponse], error)
	// Set a list of user metadata
	BulkRemoveUserMetadata(context.Context, *connect_go.Request[management.BulkRemoveUserMetadataRequest]) (*connect_go.Response[management.BulkRemoveUserMetadataResponse], error)
	// Returns the profile of the human
	GetHumanProfile(context.Context, *connect_go.Request[management.GetHumanProfileRequest]) (*connect_go.Response[management.GetHumanProfileResponse], error)
	// Changes the profile of the human
	UpdateHumanProfile(context.Context, *connect_go.Request[management.UpdateHumanProfileRequest]) (*connect_go.Response[management.UpdateHumanProfileResponse], error)
	// GetHumanEmail returns the email and verified state of the human
	GetHumanEmail(context.Context, *connect_go.Request[management.GetHumanEmailRequest]) (*connect_go.Response[management.GetHumanEmailResponse], error)
	// Changes the email of the human
	// If state is not verified, the user will get a verification email
	UpdateHumanEmail(context.Context, *connect_go.Request[management.UpdateHumanEmailRequest]) (*connect_go.Response[management.UpdateHumanEmailResponse], error)
	// Resends an email to the given email address to finish the initialization process of the user
	// Changes the email address of the user if it is provided
	ResendHumanInitialization(context.Context, *connect_go.Request[management.ResendHumanInitializationRequest]) (*connect_go.Response[management.ResendHumanInitializationResponse], error)
	// Resends an email to the given email address to finish the email verification process of the user
	ResendHumanEmailVerification(context.Context, *connect_go.Request[management.ResendHumanEmailVerificationRequest]) (*connect_go.Response[management.ResendHumanEmailVerificationResponse], error)
	// Returns the phone and verified state of the human phone
	GetHumanPhone(context.Context, *connect_go.Request[management.GetHumanPhoneRequest]) (*connect_go.Response[management.GetHumanPhoneResponse], error)
	// Changes the phone number
	// If verified is not set, the user will get an sms to verify the number
	UpdateHumanPhone(context.Context, *connect_go.Request[management.UpdateHumanPhoneRequest]) (*connect_go.Response[management.UpdateHumanPhoneResponse], error)
	// Removes the phone number of the human
	RemoveHumanPhone(context.Context, *connect_go.Request[management.RemoveHumanPhoneRequest]) (*connect_go.Response[management.RemoveHumanPhoneResponse], error)
	// An sms will be sent to the given phone number to finish the phone verification process of the user
	ResendHumanPhoneVerification(context.Context, *connect_go.Request[management.ResendHumanPhoneVerificationRequest]) (*connect_go.Response[management.ResendHumanPhoneVerificationResponse], error)
	// Removes the avatar number of the human
	RemoveHumanAvatar(context.Context, *connect_go.Request[management.RemoveHumanAvatarRequest]) (*connect_go.Response[management.RemoveHumanAvatarResponse], error)
	// deprecated: use SetHumanPassword
	SetHumanInitialPassword(context.Context, *connect_go.Request[management.SetHumanInitialPasswordRequest]) (*connect_go.Response[management.SetHumanInitialPasswordResponse], error)
	// Set a new password for a user, on default the user has to change the password on the next login
	// Set no_change_required to true if the user does not have to change the password on the next login
	SetHumanPassword(context.Context, *connect_go.Request[management.SetHumanPasswordRequest]) (*connect_go.Response[management.SetHumanPasswordResponse], error)
	// An email will be sent to the given address to reset the password of the user
	SendHumanResetPasswordNotification(context.Context, *connect_go.Request[management.SendHumanResetPasswordNotificationRequest]) (*connect_go.Response[management.SendHumanResetPasswordNotificationResponse], error)
	// Returns a list of all factors (second and multi) which are configured on the user
	ListHumanAuthFactors(context.Context, *connect_go.Request[management.ListHumanAuthFactorsRequest]) (*connect_go.Response[management.ListHumanAuthFactorsResponse], error)
	// The otp second factor will be removed from the user
	// Because only one otp can be configured per user, the configured one will be removed
	RemoveHumanAuthFactorOTP(context.Context, *connect_go.Request[management.RemoveHumanAuthFactorOTPRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorOTPResponse], error)
	// The u2f (universial second factor) will be removed from the user
	RemoveHumanAuthFactorU2F(context.Context, *connect_go.Request[management.RemoveHumanAuthFactorU2FRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorU2FResponse], error)
	// Returns all configured passwordless authenticators
	ListHumanPasswordless(context.Context, *connect_go.Request[management.ListHumanPasswordlessRequest]) (*connect_go.Response[management.ListHumanPasswordlessResponse], error)
	// Adds a new passwordless authenticator link to the user and returns it directly
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	AddPasswordlessRegistration(context.Context, *connect_go.Request[management.AddPasswordlessRegistrationRequest]) (*connect_go.Response[management.AddPasswordlessRegistrationResponse], error)
	// Adds a new passwordless authenticator link to the user and sends it to the registered email address
	// This link enables the user to register a new device if current passwordless devices are all platform authenticators
	// e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
	SendPasswordlessRegistration(context.Context, *connect_go.Request[management.SendPasswordlessRegistrationRequest]) (*connect_go.Response[management.SendPasswordlessRegistrationResponse], error)
	// Removed a configured passwordless authenticator
	RemoveHumanPasswordless(context.Context, *connect_go.Request[management.RemoveHumanPasswordlessRequest]) (*connect_go.Response[management.RemoveHumanPasswordlessResponse], error)
	// Changes a machine user
	UpdateMachine(context.Context, *connect_go.Request[management.UpdateMachineRequest]) (*connect_go.Response[management.UpdateMachineResponse], error)
	// Generates and sets a new machine secret
	GenerateMachineSecret(context.Context, *connect_go.Request[management.GenerateMachineSecretRequest]) (*connect_go.Response[management.GenerateMachineSecretResponse], error)
	// Removes the machine secret
	RemoveMachineSecret(context.Context, *connect_go.Request[management.RemoveMachineSecretRequest]) (*connect_go.Response[management.RemoveMachineSecretResponse], error)
	// Returns a machine key of a (machine) user
	GetMachineKeyByIDs(context.Context, *connect_go.Request[management.GetMachineKeyByIDsRequest]) (*connect_go.Response[management.GetMachineKeyByIDsResponse], error)
	// Returns all machine keys of a (machine) user which match the query
	// Limit should always be set, there is a default limit set by the service
	ListMachineKeys(context.Context, *connect_go.Request[management.ListMachineKeysRequest]) (*connect_go.Response[management.ListMachineKeysResponse], error)
	// Generates a new machine key, details should be stored after return
	AddMachineKey(context.Context, *connect_go.Request[management.AddMachineKeyRequest]) (*connect_go.Response[management.AddMachineKeyResponse], error)
	// Removes a machine key
	RemoveMachineKey(context.Context, *connect_go.Request[management.RemoveMachineKeyRequest]) (*connect_go.Response[management.RemoveMachineKeyResponse], error)
	// Returns a personal access token of a (machine) user
	GetPersonalAccessTokenByIDs(context.Context, *connect_go.Request[management.GetPersonalAccessTokenByIDsRequest]) (*connect_go.Response[management.GetPersonalAccessTokenByIDsResponse], error)
	// Returns all personal access tokens of a (machine) user which match the query
	// Limit should always be set, there is a default limit set by the service
	ListPersonalAccessTokens(context.Context, *connect_go.Request[management.ListPersonalAccessTokensRequest]) (*connect_go.Response[management.ListPersonalAccessTokensResponse], error)
	// Generates a new personal access token for a machine user, details should be stored after return
	AddPersonalAccessToken(context.Context, *connect_go.Request[management.AddPersonalAccessTokenRequest]) (*connect_go.Response[management.AddPersonalAccessTokenResponse], error)
	// Removes a personal access token
	RemovePersonalAccessToken(context.Context, *connect_go.Request[management.RemovePersonalAccessTokenRequest]) (*connect_go.Response[management.RemovePersonalAccessTokenResponse], error)
	// Lists all identity providers (social logins) which a human has configured (e.g Google, Microsoft, AD, etc..)
	// Limit should always be set, there is a default limit set by the service
	ListHumanLinkedIDPs(context.Context, *connect_go.Request[management.ListHumanLinkedIDPsRequest]) (*connect_go.Response[management.ListHumanLinkedIDPsResponse], error)
	// Removed a configured identity provider (social login) of a human
	RemoveHumanLinkedIDP(context.Context, *connect_go.Request[management.RemoveHumanLinkedIDPRequest]) (*connect_go.Response[management.RemoveHumanLinkedIDPResponse], error)
	// Show all the permissions a user has iin ZITADEL (ZITADEL Manager)
	// Limit should always be set, there is a default limit set by the service
	ListUserMemberships(context.Context, *connect_go.Request[management.ListUserMembershipsRequest]) (*connect_go.Response[management.ListUserMembershipsResponse], error)
	// Returns the org given in the header
	GetMyOrg(context.Context, *connect_go.Request[management.GetMyOrgRequest]) (*connect_go.Response[management.GetMyOrgResponse], error)
	// Search a org over all organisations
	// Domain must match exactly
	GetOrgByDomainGlobal(context.Context, *connect_go.Request[management.GetOrgByDomainGlobalRequest]) (*connect_go.Response[management.GetOrgByDomainGlobalResponse], error)
	// Returns the history of my organisation (each event)
	// Limit should always be set, there is a default limit set by the service
	ListOrgChanges(context.Context, *connect_go.Request[management.ListOrgChangesRequest]) (*connect_go.Response[management.ListOrgChangesResponse], error)
	// Creates a new organisation
	AddOrg(context.Context, *connect_go.Request[management.AddOrgRequest]) (*connect_go.Response[management.AddOrgResponse], error)
	// Changes my organisation
	UpdateOrg(context.Context, *connect_go.Request[management.UpdateOrgRequest]) (*connect_go.Response[management.UpdateOrgResponse], error)
	// Sets the state of my organisation to deactivated
	// Users of this organisation will not be able login
	DeactivateOrg(context.Context, *connect_go.Request[management.DeactivateOrgRequest]) (*connect_go.Response[management.DeactivateOrgResponse], error)
	// Sets the state of my organisation to active
	ReactivateOrg(context.Context, *connect_go.Request[management.ReactivateOrgRequest]) (*connect_go.Response[management.ReactivateOrgResponse], error)
	// Sets the state of my organisation and all its resource (Users, Projects, Grants to and from the org) to removed
	// Users of this organisation will not be able login
	RemoveOrg(context.Context, *connect_go.Request[management.RemoveOrgRequest]) (*connect_go.Response[management.RemoveOrgResponse], error)
	// Sets a org metadata by key
	SetOrgMetadata(context.Context, *connect_go.Request[management.SetOrgMetadataRequest]) (*connect_go.Response[management.SetOrgMetadataResponse], error)
	// Set a list of org metadata
	BulkSetOrgMetadata(context.Context, *connect_go.Request[management.BulkSetOrgMetadataRequest]) (*connect_go.Response[management.BulkSetOrgMetadataResponse], error)
	// Returns the org metadata
	ListOrgMetadata(context.Context, *connect_go.Request[management.ListOrgMetadataRequest]) (*connect_go.Response[management.ListOrgMetadataResponse], error)
	// Returns the org metadata by key
	GetOrgMetadata(context.Context, *connect_go.Request[management.GetOrgMetadataRequest]) (*connect_go.Response[management.GetOrgMetadataResponse], error)
	// Removes a org metadata by key
	RemoveOrgMetadata(context.Context, *connect_go.Request[management.RemoveOrgMetadataRequest]) (*connect_go.Response[management.RemoveOrgMetadataResponse], error)
	// Set a list of org metadata
	BulkRemoveOrgMetadata(context.Context, *connect_go.Request[management.BulkRemoveOrgMetadataRequest]) (*connect_go.Response[management.BulkRemoveOrgMetadataResponse], error)
	// Returns all registered domains of my organisation
	// Limit should always be set, there is a default limit set by the service
	ListOrgDomains(context.Context, *connect_go.Request[management.ListOrgDomainsRequest]) (*connect_go.Response[management.ListOrgDomainsResponse], error)
	// Adds a new domain to my organisation
	AddOrgDomain(context.Context, *connect_go.Request[management.AddOrgDomainRequest]) (*connect_go.Response[management.AddOrgDomainResponse], error)
	// Removed the domain from my organisation
	RemoveOrgDomain(context.Context, *connect_go.Request[management.RemoveOrgDomainRequest]) (*connect_go.Response[management.RemoveOrgDomainResponse], error)
	// Generates a new file to validate you domain
	GenerateOrgDomainValidation(context.Context, *connect_go.Request[management.GenerateOrgDomainValidationRequest]) (*connect_go.Response[management.GenerateOrgDomainValidationResponse], error)
	// Validates your domain with the choosen method
	// Validated domains must be unique
	ValidateOrgDomain(context.Context, *connect_go.Request[management.ValidateOrgDomainRequest]) (*connect_go.Response[management.ValidateOrgDomainResponse], error)
	// Sets the domain as primary
	// Primary domain is shown as suffix on the preferred username on the users of the organisation
	SetPrimaryOrgDomain(context.Context, *connect_go.Request[management.SetPrimaryOrgDomainRequest]) (*connect_go.Response[management.SetPrimaryOrgDomainResponse], error)
	// Returns all ZITADEL roles which are for organisation managers
	ListOrgMemberRoles(context.Context, *connect_go.Request[management.ListOrgMemberRolesRequest]) (*connect_go.Response[management.ListOrgMemberRolesResponse], error)
	// Returns all ZITADEL managers of this organisation (Project and Project Grant managers not included)
	// Limit should always be set, there is a default limit set by the service
	ListOrgMembers(context.Context, *connect_go.Request[management.ListOrgMembersRequest]) (*connect_go.Response[management.ListOrgMembersResponse], error)
	// Adds a new organisation manager, which is allowed to administrate ZITADEL
	AddOrgMember(context.Context, *connect_go.Request[management.AddOrgMemberRequest]) (*connect_go.Response[management.AddOrgMemberResponse], error)
	// Changes the organisation manager
	UpdateOrgMember(context.Context, *connect_go.Request[management.UpdateOrgMemberRequest]) (*connect_go.Response[management.UpdateOrgMemberResponse], error)
	// Removes an organisation manager
	RemoveOrgMember(context.Context, *connect_go.Request[management.RemoveOrgMemberRequest]) (*connect_go.Response[management.RemoveOrgMemberResponse], error)
	// Returns a project from my organisation (no granted projects)
	GetProjectByID(context.Context, *connect_go.Request[management.GetProjectByIDRequest]) (*connect_go.Response[management.GetProjectByIDResponse], error)
	// returns a project my organisation got granted from another organisation
	GetGrantedProjectByID(context.Context, *connect_go.Request[management.GetGrantedProjectByIDRequest]) (*connect_go.Response[management.GetGrantedProjectByIDResponse], error)
	// Returns all projects my organisation is the owner (no granted projects)
	// Limit should always be set, there is a default limit set by the service
	ListProjects(context.Context, *connect_go.Request[management.ListProjectsRequest]) (*connect_go.Response[management.ListProjectsResponse], error)
	// returns all projects my organisation got granted from another organisation
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjects(context.Context, *connect_go.Request[management.ListGrantedProjectsRequest]) (*connect_go.Response[management.ListGrantedProjectsResponse], error)
	// returns all roles of a project grant
	// Limit should always be set, there is a default limit set by the service
	ListGrantedProjectRoles(context.Context, *connect_go.Request[management.ListGrantedProjectRolesRequest]) (*connect_go.Response[management.ListGrantedProjectRolesResponse], error)
	// Returns the history of the project (each event)
	// Limit should always be set, there is a default limit set by the service
	ListProjectChanges(context.Context, *connect_go.Request[management.ListProjectChangesRequest]) (*connect_go.Response[management.ListProjectChangesResponse], error)
	// Adds an new project to the organisation
	AddProject(context.Context, *connect_go.Request[management.AddProjectRequest]) (*connect_go.Response[management.AddProjectResponse], error)
	// Changes a project
	UpdateProject(context.Context, *connect_go.Request[management.UpdateProjectRequest]) (*connect_go.Response[management.UpdateProjectResponse], error)
	// Sets the state of a project to deactivated
	// Returns an error if project is already deactivated
	DeactivateProject(context.Context, *connect_go.Request[management.DeactivateProjectRequest]) (*connect_go.Response[management.DeactivateProjectResponse], error)
	// Sets the state of a project to active
	// Returns an error if project is not deactivated
	ReactivateProject(context.Context, *connect_go.Request[management.ReactivateProjectRequest]) (*connect_go.Response[management.ReactivateProjectResponse], error)
	// Removes a project
	// All project grants, applications and user grants for this project will be removed
	RemoveProject(context.Context, *connect_go.Request[management.RemoveProjectRequest]) (*connect_go.Response[management.RemoveProjectResponse], error)
	// Returns all roles of a project matching the search query
	// If no limit is requested, default limit will be set, if the limit is higher then the default an error will be returned
	ListProjectRoles(context.Context, *connect_go.Request[management.ListProjectRolesRequest]) (*connect_go.Response[management.ListProjectRolesResponse], error)
	// Adds a role to a project, key must be unique in the project
	AddProjectRole(context.Context, *connect_go.Request[management.AddProjectRoleRequest]) (*connect_go.Response[management.AddProjectRoleResponse], error)
	// add a list of project roles in one request
	BulkAddProjectRoles(context.Context, *connect_go.Request[management.BulkAddProjectRolesRequest]) (*connect_go.Response[management.BulkAddProjectRolesResponse], error)
	// Changes a project role, key is not editable
	// If a key should change, remove the role and create a new
	UpdateProjectRole(context.Context, *connect_go.Request[management.UpdateProjectRoleRequest]) (*connect_go.Response[management.UpdateProjectRoleResponse], error)
	// Removes role from UserGrants, ProjectGrants and from Project
	RemoveProjectRole(context.Context, *connect_go.Request[management.RemoveProjectRoleRequest]) (*connect_go.Response[management.RemoveProjectRoleResponse], error)
	// Returns all ZITADEL roles which are for project managers
	ListProjectMemberRoles(context.Context, *connect_go.Request[management.ListProjectMemberRolesRequest]) (*connect_go.Response[management.ListProjectMemberRolesResponse], error)
	// Returns all ZITADEL managers of a projects
	// Limit should always be set, there is a default limit set by the service
	ListProjectMembers(context.Context, *connect_go.Request[management.ListProjectMembersRequest]) (*connect_go.Response[management.ListProjectMembersResponse], error)
	// Adds a new project manager, which is allowed to administrate in ZITADEL
	AddProjectMember(context.Context, *connect_go.Request[management.AddProjectMemberRequest]) (*connect_go.Response[management.AddProjectMemberResponse], error)
	// Change project manager, which is allowed to administrate in ZITADEL
	UpdateProjectMember(context.Context, *connect_go.Request[management.UpdateProjectMemberRequest]) (*connect_go.Response[management.UpdateProjectMemberResponse], error)
	// Remove project manager, which is allowed to administrate in ZITADEL
	RemoveProjectMember(context.Context, *connect_go.Request[management.RemoveProjectMemberRequest]) (*connect_go.Response[management.RemoveProjectMemberResponse], error)
	// Returns an application (oidc or api)
	GetAppByID(context.Context, *connect_go.Request[management.GetAppByIDRequest]) (*connect_go.Response[management.GetAppByIDResponse], error)
	// Returns all applications of a project matching the query
	// Limit should always be set, there is a default limit set by the service
	ListApps(context.Context, *connect_go.Request[management.ListAppsRequest]) (*connect_go.Response[management.ListAppsResponse], error)
	// Returns the history of the application (each event)
	// Limit should always be set, there is a default limit set by the service
	ListAppChanges(context.Context, *connect_go.Request[management.ListAppChangesRequest]) (*connect_go.Response[management.ListAppChangesResponse], error)
	// Adds a new oidc client
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddOIDCApp(context.Context, *connect_go.Request[management.AddOIDCAppRequest]) (*connect_go.Response[management.AddOIDCAppResponse], error)
	// Adds a new saml service provider
	// Returns a entityID
	AddSAMLApp(context.Context, *connect_go.Request[management.AddSAMLAppRequest]) (*connect_go.Response[management.AddSAMLAppResponse], error)
	// Adds a new api application
	// Returns a client id
	// Returns a new generated secret if needed (Depending on the configuration)
	AddAPIApp(context.Context, *connect_go.Request[management.AddAPIAppRequest]) (*connect_go.Response[management.AddAPIAppResponse], error)
	// Changes application
	UpdateApp(context.Context, *connect_go.Request[management.UpdateAppRequest]) (*connect_go.Response[management.UpdateAppResponse], error)
	// Changes the configuration of the oidc client
	UpdateOIDCAppConfig(context.Context, *connect_go.Request[management.UpdateOIDCAppConfigRequest]) (*connect_go.Response[management.UpdateOIDCAppConfigResponse], error)
	// Changes the configuration of the saml application
	UpdateSAMLAppConfig(context.Context, *connect_go.Request[management.UpdateSAMLAppConfigRequest]) (*connect_go.Response[management.UpdateSAMLAppConfigResponse], error)
	// Changes the configuration of the api application
	UpdateAPIAppConfig(context.Context, *connect_go.Request[management.UpdateAPIAppConfigRequest]) (*connect_go.Response[management.UpdateAPIAppConfigResponse], error)
	// Set the state to deactivated
	// Its not possible to request tokens for deactivated apps
	// Returns an error if already deactivated
	DeactivateApp(context.Context, *connect_go.Request[management.DeactivateAppRequest]) (*connect_go.Response[management.DeactivateAppResponse], error)
	// Set the state to active
	// Returns an error if not deactivated
	ReactivateApp(context.Context, *connect_go.Request[management.ReactivateAppRequest]) (*connect_go.Response[management.ReactivateAppResponse], error)
	// Removed the application
	RemoveApp(context.Context, *connect_go.Request[management.RemoveAppRequest]) (*connect_go.Response[management.RemoveAppResponse], error)
	// Generates a new client secret for the oidc client, make sure to save the response
	RegenerateOIDCClientSecret(context.Context, *connect_go.Request[management.RegenerateOIDCClientSecretRequest]) (*connect_go.Response[management.RegenerateOIDCClientSecretResponse], error)
	// Generates a new client secret for the api application, make sure to save the response
	RegenerateAPIClientSecret(context.Context, *connect_go.Request[management.RegenerateAPIClientSecretRequest]) (*connect_go.Response[management.RegenerateAPIClientSecretResponse], error)
	// Returns an application key
	GetAppKey(context.Context, *connect_go.Request[management.GetAppKeyRequest]) (*connect_go.Response[management.GetAppKeyResponse], error)
	// Returns all application keys matching the result
	// Limit should always be set, there is a default limit set by the service
	ListAppKeys(context.Context, *connect_go.Request[management.ListAppKeysRequest]) (*connect_go.Response[management.ListAppKeysResponse], error)
	// Creates a new app key
	// Will return key details in result, make sure to save it
	AddAppKey(context.Context, *connect_go.Request[management.AddAppKeyRequest]) (*connect_go.Response[management.AddAppKeyResponse], error)
	// Removes an app key
	RemoveAppKey(context.Context, *connect_go.Request[management.RemoveAppKeyRequest]) (*connect_go.Response[management.RemoveAppKeyResponse], error)
	// Returns the history of the project grant (each event)
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrantChanges(context.Context, *connect_go.Request[management.ListProjectGrantChangesRequest]) (*connect_go.Response[management.ListProjectGrantChangesResponse], error)
	// Returns a project grant (ProjectGrant = Grant another organisation for my project)
	GetProjectGrantByID(context.Context, *connect_go.Request[management.GetProjectGrantByIDRequest]) (*connect_go.Response[management.GetProjectGrantByIDResponse], error)
	// Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrants(context.Context, *connect_go.Request[management.ListProjectGrantsRequest]) (*connect_go.Response[management.ListProjectGrantsResponse], error)
	// Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
	// Limit should always be set, there is a default limit set by the service
	ListAllProjectGrants(context.Context, *connect_go.Request[management.ListAllProjectGrantsRequest]) (*connect_go.Response[management.ListAllProjectGrantsResponse], error)
	// Add a new project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	AddProjectGrant(context.Context, *connect_go.Request[management.AddProjectGrantRequest]) (*connect_go.Response[management.AddProjectGrantResponse], error)
	// Change project grant (ProjectGrant = Grant another organisation for my project)
	// Project Grant will be listed in granted project of the other organisation
	UpdateProjectGrant(context.Context, *connect_go.Request[management.UpdateProjectGrantRequest]) (*connect_go.Response[management.UpdateProjectGrantResponse], error)
	// Set state of project grant to deactivated (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not active
	DeactivateProjectGrant(context.Context, *connect_go.Request[management.DeactivateProjectGrantRequest]) (*connect_go.Response[management.DeactivateProjectGrantResponse], error)
	// Set state of project grant to active (ProjectGrant = Grant another organisation for my project)
	// Returns error if project not deactivated
	ReactivateProjectGrant(context.Context, *connect_go.Request[management.ReactivateProjectGrantRequest]) (*connect_go.Response[management.ReactivateProjectGrantResponse], error)
	// Removes project grant and all user grants for this project grant
	RemoveProjectGrant(context.Context, *connect_go.Request[management.RemoveProjectGrantRequest]) (*connect_go.Response[management.RemoveProjectGrantResponse], error)
	// Returns all ZITADEL roles which are for project grant managers
	ListProjectGrantMemberRoles(context.Context, *connect_go.Request[management.ListProjectGrantMemberRolesRequest]) (*connect_go.Response[management.ListProjectGrantMemberRolesResponse], error)
	// Returns all ZITADEL managers of this project grant
	// Limit should always be set, there is a default limit set by the service
	ListProjectGrantMembers(context.Context, *connect_go.Request[management.ListProjectGrantMembersRequest]) (*connect_go.Response[management.ListProjectGrantMembersResponse], error)
	// Adds a new project grant manager, which is allowed to administrate in ZITADEL
	AddProjectGrantMember(context.Context, *connect_go.Request[management.AddProjectGrantMemberRequest]) (*connect_go.Response[management.AddProjectGrantMemberResponse], error)
	// Changes project grant manager, which is allowed to administrate in ZITADEL
	UpdateProjectGrantMember(context.Context, *connect_go.Request[management.UpdateProjectGrantMemberRequest]) (*connect_go.Response[management.UpdateProjectGrantMemberResponse], error)
	// Removed project grant manager
	RemoveProjectGrantMember(context.Context, *connect_go.Request[management.RemoveProjectGrantMemberRequest]) (*connect_go.Response[management.RemoveProjectGrantMemberResponse], error)
	// Returns a user grant (authorization of a user for a project)
	GetUserGrantByID(context.Context, *connect_go.Request[management.GetUserGrantByIDRequest]) (*connect_go.Response[management.GetUserGrantByIDResponse], error)
	// Returns al user grant matching the query (authorizations of user for projects)
	// Limit should always be set, there is a default limit set by the service
	ListUserGrants(context.Context, *connect_go.Request[management.ListUserGrantRequest]) (*connect_go.Response[management.ListUserGrantResponse], error)
	// Creates a new user grant (authorization of a user for a project with specified roles)
	AddUserGrant(context.Context, *connect_go.Request[management.AddUserGrantRequest]) (*connect_go.Response[management.AddUserGrantResponse], error)
	// Changes a user grant (authorization of a user for a project with specified roles)
	UpdateUserGrant(context.Context, *connect_go.Request[management.UpdateUserGrantRequest]) (*connect_go.Response[management.UpdateUserGrantResponse], error)
	// Sets the state of a user grant to deactivated
	// User will not be able to use the granted project anymore
	// Returns an error if user grant is already deactivated
	DeactivateUserGrant(context.Context, *connect_go.Request[management.DeactivateUserGrantRequest]) (*connect_go.Response[management.DeactivateUserGrantResponse], error)
	// Sets the state of a user grant to active
	// Returns an error if user grant is not deactivated
	ReactivateUserGrant(context.Context, *connect_go.Request[management.ReactivateUserGrantRequest]) (*connect_go.Response[management.ReactivateUserGrantResponse], error)
	// Removes a user grant
	RemoveUserGrant(context.Context, *connect_go.Request[management.RemoveUserGrantRequest]) (*connect_go.Response[management.RemoveUserGrantResponse], error)
	// remove a list of user grants in one request
	BulkRemoveUserGrant(context.Context, *connect_go.Request[management.BulkRemoveUserGrantRequest]) (*connect_go.Response[management.BulkRemoveUserGrantResponse], error)
	// deprecated: please use DomainPolicy instead
	// Returns the domain policy (this policy is managed by the iam administrator)
	GetOrgIAMPolicy(context.Context, *connect_go.Request[management.GetOrgIAMPolicyRequest]) (*connect_go.Response[management.GetOrgIAMPolicyResponse], error)
	// Returns the domain policy (this policy is managed by the iam administrator)
	GetDomainPolicy(context.Context, *connect_go.Request[management.GetDomainPolicyRequest]) (*connect_go.Response[management.GetDomainPolicyResponse], error)
	// Returns the login policy of the organisation
	// With this policy the login gui can be configured
	GetLoginPolicy(context.Context, *connect_go.Request[management.GetLoginPolicyRequest]) (*connect_go.Response[management.GetLoginPolicyResponse], error)
	// Returns the default login policy configured in the IAM
	GetDefaultLoginPolicy(context.Context, *connect_go.Request[management.GetDefaultLoginPolicyRequest]) (*connect_go.Response[management.GetDefaultLoginPolicyResponse], error)
	// Add a custom login policy for the organisation
	// With this policy the login gui can be configured
	AddCustomLoginPolicy(context.Context, *connect_go.Request[management.AddCustomLoginPolicyRequest]) (*connect_go.Response[management.AddCustomLoginPolicyResponse], error)
	// Change the custom login policy for the organisation
	// With this policy the login gui can be configured
	UpdateCustomLoginPolicy(context.Context, *connect_go.Request[management.UpdateCustomLoginPolicyRequest]) (*connect_go.Response[management.UpdateCustomLoginPolicyResponse], error)
	// Removes the custom login policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLoginPolicyToDefault(context.Context, *connect_go.Request[management.ResetLoginPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLoginPolicyToDefaultResponse], error)
	// Lists all possible identity providers configured on the organisation
	// Limit should always be set, there is a default limit set by the service
	ListLoginPolicyIDPs(context.Context, *connect_go.Request[management.ListLoginPolicyIDPsRequest]) (*connect_go.Response[management.ListLoginPolicyIDPsResponse], error)
	// Add a (preconfigured) identity provider to the custom login policy
	AddIDPToLoginPolicy(context.Context, *connect_go.Request[management.AddIDPToLoginPolicyRequest]) (*connect_go.Response[management.AddIDPToLoginPolicyResponse], error)
	// Remove a identity provider from the custom login policy
	RemoveIDPFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveIDPFromLoginPolicyResponse], error)
	// Returns all configured second factors of the custom login policy
	ListLoginPolicySecondFactors(context.Context, *connect_go.Request[management.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[management.ListLoginPolicySecondFactorsResponse], error)
	// Adds a new second factor to the custom login policy
	AddSecondFactorToLoginPolicy(context.Context, *connect_go.Request[management.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddSecondFactorToLoginPolicyResponse], error)
	// Remove a second factor from the custom login policy
	RemoveSecondFactorFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveSecondFactorFromLoginPolicyResponse], error)
	// Returns all configured multi factors of the custom login policy
	ListLoginPolicyMultiFactors(context.Context, *connect_go.Request[management.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[management.ListLoginPolicyMultiFactorsResponse], error)
	// Adds a new multi factor to the custom login policy
	AddMultiFactorToLoginPolicy(context.Context, *connect_go.Request[management.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddMultiFactorToLoginPolicyResponse], error)
	// Remove a multi factor from the custom login policy
	RemoveMultiFactorFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveMultiFactorFromLoginPolicyResponse], error)
	// Returns the password complexity policy of the organisation
	// With this policy the password strength can be configured
	GetPasswordComplexityPolicy(context.Context, *connect_go.Request[management.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetPasswordComplexityPolicyResponse], error)
	// Returns the default password complexity policy of the IAM
	// With this policy the password strength can be configured
	GetDefaultPasswordComplexityPolicy(context.Context, *connect_go.Request[management.GetDefaultPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordComplexityPolicyResponse], error)
	// Add a custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	AddCustomPasswordComplexityPolicy(context.Context, *connect_go.Request[management.AddCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.AddCustomPasswordComplexityPolicyResponse], error)
	// Update the custom password complexity policy for the organisation
	// With this policy the password strength can be configured
	UpdateCustomPasswordComplexityPolicy(context.Context, *connect_go.Request[management.UpdateCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordComplexityPolicyResponse], error)
	// Removes the custom password complexity policy of the organisation
	// The default policy of the IAM will trigger after
	ResetPasswordComplexityPolicyToDefault(context.Context, *connect_go.Request[management.ResetPasswordComplexityPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordComplexityPolicyToDefaultResponse], error)
	// The password age policy is not used at the moment
	GetPasswordAgePolicy(context.Context, *connect_go.Request[management.GetPasswordAgePolicyRequest]) (*connect_go.Response[management.GetPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	GetDefaultPasswordAgePolicy(context.Context, *connect_go.Request[management.GetDefaultPasswordAgePolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	AddCustomPasswordAgePolicy(context.Context, *connect_go.Request[management.AddCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.AddCustomPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	UpdateCustomPasswordAgePolicy(context.Context, *connect_go.Request[management.UpdateCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordAgePolicyResponse], error)
	// The password age policy is not used at the moment
	ResetPasswordAgePolicyToDefault(context.Context, *connect_go.Request[management.ResetPasswordAgePolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordAgePolicyToDefaultResponse], error)
	GetLockoutPolicy(context.Context, *connect_go.Request[management.GetLockoutPolicyRequest]) (*connect_go.Response[management.GetLockoutPolicyResponse], error)
	GetDefaultLockoutPolicy(context.Context, *connect_go.Request[management.GetDefaultLockoutPolicyRequest]) (*connect_go.Response[management.GetDefaultLockoutPolicyResponse], error)
	AddCustomLockoutPolicy(context.Context, *connect_go.Request[management.AddCustomLockoutPolicyRequest]) (*connect_go.Response[management.AddCustomLockoutPolicyResponse], error)
	UpdateCustomLockoutPolicy(context.Context, *connect_go.Request[management.UpdateCustomLockoutPolicyRequest]) (*connect_go.Response[management.UpdateCustomLockoutPolicyResponse], error)
	ResetLockoutPolicyToDefault(context.Context, *connect_go.Request[management.ResetLockoutPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLockoutPolicyToDefaultResponse], error)
	// Returns the privacy policy of the organisation
	// With this policy privacy relevant things can be configured (e.g. tos link)
	GetPrivacyPolicy(context.Context, *connect_go.Request[management.GetPrivacyPolicyRequest]) (*connect_go.Response[management.GetPrivacyPolicyResponse], error)
	// Returns the default privacy policy of the IAM
	// With this policy the privacy relevant things can be configured (e.g tos link)
	GetDefaultPrivacyPolicy(context.Context, *connect_go.Request[management.GetDefaultPrivacyPolicyRequest]) (*connect_go.Response[management.GetDefaultPrivacyPolicyResponse], error)
	// Add a custom privacy policy for the organisation
	// With this policy privacy relevant things can be configured (e.g. tos link)
	// Variable {{.Lang}} can be set to have different links based on the language
	AddCustomPrivacyPolicy(context.Context, *connect_go.Request[management.AddCustomPrivacyPolicyRequest]) (*connect_go.Response[management.AddCustomPrivacyPolicyResponse], error)
	// Update the privacy policy for the organisation
	// With this policy privacy relevant things can be configured (e.g. tos link)
	// Variable {{.Lang}} can be set to have different links based on the language
	UpdateCustomPrivacyPolicy(context.Context, *connect_go.Request[management.UpdateCustomPrivacyPolicyRequest]) (*connect_go.Response[management.UpdateCustomPrivacyPolicyResponse], error)
	// Removes the privacy policy of the organisation
	// The default policy of the IAM will trigger after
	ResetPrivacyPolicyToDefault(context.Context, *connect_go.Request[management.ResetPrivacyPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPrivacyPolicyToDefaultResponse], error)
	// Returns the notification policy of the organisation
	// With this notification policy it can be configured how users should be notified
	GetNotificationPolicy(context.Context, *connect_go.Request[management.GetNotificationPolicyRequest]) (*connect_go.Response[management.GetNotificationPolicyResponse], error)
	// Returns the default notification policy of the IAM
	// With this notification privacy it can be configured how users should be notified
	GetDefaultNotificationPolicy(context.Context, *connect_go.Request[management.GetDefaultNotificationPolicyRequest]) (*connect_go.Response[management.GetDefaultNotificationPolicyResponse], error)
	// Add a custom notification policy for the organisation
	// With this notification privacy it can be configured how users should be notified
	AddCustomNotificationPolicy(context.Context, *connect_go.Request[management.AddCustomNotificationPolicyRequest]) (*connect_go.Response[management.AddCustomNotificationPolicyResponse], error)
	// Update the notification policy for the organisation
	// With this notification privacy it can be configured how users should be notified
	UpdateCustomNotificationPolicy(context.Context, *connect_go.Request[management.UpdateCustomNotificationPolicyRequest]) (*connect_go.Response[management.UpdateCustomNotificationPolicyResponse], error)
	// Removes the notification policy of the organisation
	// The default policy of the IAM will trigger after
	ResetNotificationPolicyToDefault(context.Context, *connect_go.Request[management.ResetNotificationPolicyToDefaultRequest]) (*connect_go.Response[management.ResetNotificationPolicyToDefaultResponse], error)
	// Returns the active label policy of the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	GetLabelPolicy(context.Context, *connect_go.Request[management.GetLabelPolicyRequest]) (*connect_go.Response[management.GetLabelPolicyResponse], error)
	// Returns the preview label policy of the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	GetPreviewLabelPolicy(context.Context, *connect_go.Request[management.GetPreviewLabelPolicyRequest]) (*connect_go.Response[management.GetPreviewLabelPolicyResponse], error)
	// Returns the default label policy of the IAM
	// With this policy the private labeling can be configured (colors, etc.)
	GetDefaultLabelPolicy(context.Context, *connect_go.Request[management.GetDefaultLabelPolicyRequest]) (*connect_go.Response[management.GetDefaultLabelPolicyResponse], error)
	// Add a custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	AddCustomLabelPolicy(context.Context, *connect_go.Request[management.AddCustomLabelPolicyRequest]) (*connect_go.Response[management.AddCustomLabelPolicyResponse], error)
	// Changes the custom label policy for the organisation
	// With this policy the private labeling can be configured (colors, etc.)
	UpdateCustomLabelPolicy(context.Context, *connect_go.Request[management.UpdateCustomLabelPolicyRequest]) (*connect_go.Response[management.UpdateCustomLabelPolicyResponse], error)
	// Activates all changes of the label policy
	ActivateCustomLabelPolicy(context.Context, *connect_go.Request[management.ActivateCustomLabelPolicyRequest]) (*connect_go.Response[management.ActivateCustomLabelPolicyResponse], error)
	// Removes the logo of the label policy
	RemoveCustomLabelPolicyLogo(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyLogoRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoResponse], error)
	// Removes the logo dark of the label policy
	RemoveCustomLabelPolicyLogoDark(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyLogoDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoDarkResponse], error)
	// Removes the icon of the label policy
	RemoveCustomLabelPolicyIcon(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyIconRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconResponse], error)
	// Removes the logo dark of the label policy
	RemoveCustomLabelPolicyIconDark(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyIconDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconDarkResponse], error)
	// Removes the font of the label policy
	RemoveCustomLabelPolicyFont(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyFontRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyFontResponse], error)
	// Removes the custom label policy of the organisation
	// The default policy of the IAM will trigger after
	ResetLabelPolicyToDefault(context.Context, *connect_go.Request[management.ResetLabelPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLabelPolicyToDefaultResponse], error)
	// Returns the custom text for initial message
	GetCustomInitMessageText(context.Context, *connect_go.Request[management.GetCustomInitMessageTextRequest]) (*connect_go.Response[management.GetCustomInitMessageTextResponse], error)
	// Returns the default text for initial message
	GetDefaultInitMessageText(context.Context, *connect_go.Request[management.GetDefaultInitMessageTextRequest]) (*connect_go.Response[management.GetDefaultInitMessageTextResponse], error)
	// Sets the custom text for initial message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
	SetCustomInitMessageText(context.Context, *connect_go.Request[management.SetCustomInitMessageTextRequest]) (*connect_go.Response[management.SetCustomInitMessageTextResponse], error)
	// Removes the custom init message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomInitMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomInitMessageTextToDefaultResponse], error)
	// Returns the custom text for password reset message
	GetCustomPasswordResetMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordResetMessageTextResponse], error)
	// Returns the default text for password reset message
	GetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordResetMessageTextResponse], error)
	// Sets the custom text for password reset message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomPasswordResetMessageText(context.Context, *connect_go.Request[management.SetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordResetMessageTextResponse], error)
	// Removes the custom password reset message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomPasswordResetMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordResetMessageTextToDefaultResponse], error)
	// Returns the custom text for verify email message
	GetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[management.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyEmailMessageTextResponse], error)
	// Returns the default text for verify email message
	GetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[management.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyEmailMessageTextResponse], error)
	// Sets the custom text for verify email message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[management.SetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyEmailMessageTextResponse], error)
	// Removes the custom verify email message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomVerifyEmailMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyEmailMessageTextToDefaultResponse], error)
	// Returns the custom text for verify email message
	GetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[management.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyPhoneMessageTextResponse], error)
	// Returns the custom text for verify email message
	GetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[management.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyPhoneMessageTextResponse], error)
	// Sets the default custom text for verify email message
	// The Following Variables can be used:
	// {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[management.SetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyPhoneMessageTextResponse], error)
	// Removes the custom verify phone text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error)
	// Returns the custom text for domain claimed message
	GetCustomDomainClaimedMessageText(context.Context, *connect_go.Request[management.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetCustomDomainClaimedMessageTextResponse], error)
	// Returns the custom text for domain claimed message
	GetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[management.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetDefaultDomainClaimedMessageTextResponse], error)
	// Sets the custom text for domain claimed message
	// The Following Variables can be used:
	// {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomDomainClaimedMessageCustomText(context.Context, *connect_go.Request[management.SetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.SetCustomDomainClaimedMessageTextResponse], error)
	// Removes the custom domain claimed message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomDomainClaimedMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomDomainClaimedMessageTextToDefaultResponse], error)
	// Returns the custom text for passwordless link message
	GetCustomPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordlessRegistrationMessageTextResponse], error)
	// Returns the custom text for passwordless link message
	GetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordlessRegistrationMessageTextResponse], error)
	// Sets the custom text for passwordless link message
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomPasswordlessRegistrationMessageCustomText(context.Context, *connect_go.Request[management.SetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordlessRegistrationMessageTextResponse], error)
	// Removes the custom passwordless link message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error)
	// Returns the custom text for password change message
	GetCustomPasswordChangeMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordChangeMessageTextResponse], error)
	// Returns the custom text for password change link message
	GetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordChangeMessageTextResponse], error)
	// Sets the custom text for password change message
	// The Following Variables can be used:
	// {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
	SetCustomPasswordChangeMessageCustomText(context.Context, *connect_go.Request[management.SetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordChangeMessageTextResponse], error)
	// Removes the custom password change message text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomPasswordChangeMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordChangeMessageTextToDefaultResponse], error)
	// Returns the custom texts for login ui
	GetCustomLoginTexts(context.Context, *connect_go.Request[management.GetCustomLoginTextsRequest]) (*connect_go.Response[management.GetCustomLoginTextsResponse], error)
	// Returns the custom texts for login ui
	GetDefaultLoginTexts(context.Context, *connect_go.Request[management.GetDefaultLoginTextsRequest]) (*connect_go.Response[management.GetDefaultLoginTextsResponse], error)
	// Sets the default custom text for login ui
	// it impacts all organisations without customized login ui texts
	SetCustomLoginText(context.Context, *connect_go.Request[management.SetCustomLoginTextsRequest]) (*connect_go.Response[management.SetCustomLoginTextsResponse], error)
	// Removes the custom login text of the organisation
	// The default text of the IAM will trigger after
	ResetCustomLoginTextToDefault(context.Context, *connect_go.Request[management.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[management.ResetCustomLoginTextsToDefaultResponse], error)
	// Returns a identity provider configuration of the organisation
	GetOrgIDPByID(context.Context, *connect_go.Request[management.GetOrgIDPByIDRequest]) (*connect_go.Response[management.GetOrgIDPByIDResponse], error)
	// Returns all identity provider configuration in the organisation, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListOrgIDPs(context.Context, *connect_go.Request[management.ListOrgIDPsRequest]) (*connect_go.Response[management.ListOrgIDPsResponse], error)
	// Add a new identity provider configuration in the organisation
	// Provider must be OIDC compliant
	AddOrgOIDCIDP(context.Context, *connect_go.Request[management.AddOrgOIDCIDPRequest]) (*connect_go.Response[management.AddOrgOIDCIDPResponse], error)
	// Add a new jwt identity provider configuration in the organisation
	AddOrgJWTIDP(context.Context, *connect_go.Request[management.AddOrgJWTIDPRequest]) (*connect_go.Response[management.AddOrgJWTIDPResponse], error)
	// Deactivate identity provider configuration
	// Users will not be able to use this provider for login (e.g Google, Microsoft, AD, etc)
	// Returns error if already deactivated
	DeactivateOrgIDP(context.Context, *connect_go.Request[management.DeactivateOrgIDPRequest]) (*connect_go.Response[management.DeactivateOrgIDPResponse], error)
	// Activate identity provider configuration
	// Returns error if not deactivated
	ReactivateOrgIDP(context.Context, *connect_go.Request[management.ReactivateOrgIDPRequest]) (*connect_go.Response[management.ReactivateOrgIDPResponse], error)
	// Removes identity provider configuration
	// Will remove all linked providers of this configuration on the users
	RemoveOrgIDP(context.Context, *connect_go.Request[management.RemoveOrgIDPRequest]) (*connect_go.Response[management.RemoveOrgIDPResponse], error)
	// Change identity provider configuration of the organisation
	UpdateOrgIDP(context.Context, *connect_go.Request[management.UpdateOrgIDPRequest]) (*connect_go.Response[management.UpdateOrgIDPResponse], error)
	// Change OIDC identity provider configuration of the organisation
	UpdateOrgIDPOIDCConfig(context.Context, *connect_go.Request[management.UpdateOrgIDPOIDCConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPOIDCConfigResponse], error)
	// Change JWT identity provider configuration of the organisation
	UpdateOrgIDPJWTConfig(context.Context, *connect_go.Request[management.UpdateOrgIDPJWTConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPJWTConfigResponse], error)
	// Returns all identity providers, which match the query
	// Limit should always be set, there is a default limit set by the service
	ListProviders(context.Context, *connect_go.Request[management.ListProvidersRequest]) (*connect_go.Response[management.ListProvidersResponse], error)
	// Returns an identity provider of the organisation
	GetProviderByID(context.Context, *connect_go.Request[management.GetProviderByIDRequest]) (*connect_go.Response[management.GetProviderByIDResponse], error)
	// Add a new ldap identity provider in the organisation
	AddLDAPProvider(context.Context, *connect_go.Request[management.AddLDAPProviderRequest]) (*connect_go.Response[management.AddLDAPProviderResponse], error)
	// Change an existing ldap identity provider in the organisation
	UpdateLDAPProvider(context.Context, *connect_go.Request[management.UpdateLDAPProviderRequest]) (*connect_go.Response[management.UpdateLDAPProviderResponse], error)
	// Remove an identity provider
	// Will remove all linked providers of this configuration on the users
	DeleteProvider(context.Context, *connect_go.Request[management.DeleteProviderRequest]) (*connect_go.Response[management.DeleteProviderResponse], error)
	ListActions(context.Context, *connect_go.Request[management.ListActionsRequest]) (*connect_go.Response[management.ListActionsResponse], error)
	GetAction(context.Context, *connect_go.Request[management.GetActionRequest]) (*connect_go.Response[management.GetActionResponse], error)
	CreateAction(context.Context, *connect_go.Request[management.CreateActionRequest]) (*connect_go.Response[management.CreateActionResponse], error)
	UpdateAction(context.Context, *connect_go.Request[management.UpdateActionRequest]) (*connect_go.Response[management.UpdateActionResponse], error)
	DeactivateAction(context.Context, *connect_go.Request[management.DeactivateActionRequest]) (*connect_go.Response[management.DeactivateActionResponse], error)
	ReactivateAction(context.Context, *connect_go.Request[management.ReactivateActionRequest]) (*connect_go.Response[management.ReactivateActionResponse], error)
	DeleteAction(context.Context, *connect_go.Request[management.DeleteActionRequest]) (*connect_go.Response[management.DeleteActionResponse], error)
	ListFlowTypes(context.Context, *connect_go.Request[management.ListFlowTypesRequest]) (*connect_go.Response[management.ListFlowTypesResponse], error)
	ListFlowTriggerTypes(context.Context, *connect_go.Request[management.ListFlowTriggerTypesRequest]) (*connect_go.Response[management.ListFlowTriggerTypesResponse], error)
	GetFlow(context.Context, *connect_go.Request[management.GetFlowRequest]) (*connect_go.Response[management.GetFlowResponse], error)
	ClearFlow(context.Context, *connect_go.Request[management.ClearFlowRequest]) (*connect_go.Response[management.ClearFlowResponse], error)
	SetTriggerActions(context.Context, *connect_go.Request[management.SetTriggerActionsRequest]) (*connect_go.Response[management.SetTriggerActionsResponse], error)
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/zitadel.management.v1.ManagementService/Healthz", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/Healthz",
		svc.Healthz,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetOIDCInformation", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetOIDCInformation",
		svc.GetOIDCInformation,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetIAM", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetIAM",
		svc.GetIAM,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetSupportedLanguages", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetSupportedLanguages",
		svc.GetSupportedLanguages,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetUserByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetUserByID",
		svc.GetUserByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetUserByLoginNameGlobal",
		svc.GetUserByLoginNameGlobal,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListUsers", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListUsers",
		svc.ListUsers,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListUserChanges", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListUserChanges",
		svc.ListUserChanges,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/IsUserUnique", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/IsUserUnique",
		svc.IsUserUnique,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddHumanUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddHumanUser",
		svc.AddHumanUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ImportHumanUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ImportHumanUser",
		svc.ImportHumanUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddMachineUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddMachineUser",
		svc.AddMachineUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateUser",
		svc.DeactivateUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateUser",
		svc.ReactivateUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/LockUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/LockUser",
		svc.LockUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UnlockUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UnlockUser",
		svc.UnlockUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveUser", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveUser",
		svc.RemoveUser,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateUserName", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateUserName",
		svc.UpdateUserName,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetUserMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetUserMetadata",
		svc.SetUserMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/BulkSetUserMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/BulkSetUserMetadata",
		svc.BulkSetUserMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListUserMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListUserMetadata",
		svc.ListUserMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetUserMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetUserMetadata",
		svc.GetUserMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveUserMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveUserMetadata",
		svc.RemoveUserMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/BulkRemoveUserMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/BulkRemoveUserMetadata",
		svc.BulkRemoveUserMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetHumanProfile", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetHumanProfile",
		svc.GetHumanProfile,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateHumanProfile", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateHumanProfile",
		svc.UpdateHumanProfile,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetHumanEmail", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetHumanEmail",
		svc.GetHumanEmail,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateHumanEmail", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateHumanEmail",
		svc.UpdateHumanEmail,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResendHumanInitialization", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResendHumanInitialization",
		svc.ResendHumanInitialization,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResendHumanEmailVerification", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResendHumanEmailVerification",
		svc.ResendHumanEmailVerification,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetHumanPhone", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetHumanPhone",
		svc.GetHumanPhone,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateHumanPhone", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateHumanPhone",
		svc.UpdateHumanPhone,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveHumanPhone", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveHumanPhone",
		svc.RemoveHumanPhone,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResendHumanPhoneVerification",
		svc.ResendHumanPhoneVerification,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveHumanAvatar", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveHumanAvatar",
		svc.RemoveHumanAvatar,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetHumanInitialPassword", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetHumanInitialPassword",
		svc.SetHumanInitialPassword,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetHumanPassword", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetHumanPassword",
		svc.SetHumanPassword,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SendHumanResetPasswordNotification",
		svc.SendHumanResetPasswordNotification,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListHumanAuthFactors", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListHumanAuthFactors",
		svc.ListHumanAuthFactors,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorOTP",
		svc.RemoveHumanAuthFactorOTP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveHumanAuthFactorU2F",
		svc.RemoveHumanAuthFactorU2F,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListHumanPasswordless", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListHumanPasswordless",
		svc.ListHumanPasswordless,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddPasswordlessRegistration", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddPasswordlessRegistration",
		svc.AddPasswordlessRegistration,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SendPasswordlessRegistration", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SendPasswordlessRegistration",
		svc.SendPasswordlessRegistration,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveHumanPasswordless", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveHumanPasswordless",
		svc.RemoveHumanPasswordless,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateMachine", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateMachine",
		svc.UpdateMachine,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GenerateMachineSecret", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GenerateMachineSecret",
		svc.GenerateMachineSecret,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveMachineSecret", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveMachineSecret",
		svc.RemoveMachineSecret,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetMachineKeyByIDs", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetMachineKeyByIDs",
		svc.GetMachineKeyByIDs,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListMachineKeys", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListMachineKeys",
		svc.ListMachineKeys,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddMachineKey", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddMachineKey",
		svc.AddMachineKey,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveMachineKey", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveMachineKey",
		svc.RemoveMachineKey,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetPersonalAccessTokenByIDs", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetPersonalAccessTokenByIDs",
		svc.GetPersonalAccessTokenByIDs,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListPersonalAccessTokens", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListPersonalAccessTokens",
		svc.ListPersonalAccessTokens,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddPersonalAccessToken", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddPersonalAccessToken",
		svc.AddPersonalAccessToken,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemovePersonalAccessToken", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemovePersonalAccessToken",
		svc.RemovePersonalAccessToken,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListHumanLinkedIDPs",
		svc.ListHumanLinkedIDPs,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveHumanLinkedIDP",
		svc.RemoveHumanLinkedIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListUserMemberships", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListUserMemberships",
		svc.ListUserMemberships,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetMyOrg", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetMyOrg",
		svc.GetMyOrg,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetOrgByDomainGlobal",
		svc.GetOrgByDomainGlobal,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListOrgChanges", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListOrgChanges",
		svc.ListOrgChanges,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddOrg", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddOrg",
		svc.AddOrg,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateOrg", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateOrg",
		svc.UpdateOrg,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateOrg", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateOrg",
		svc.DeactivateOrg,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateOrg", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateOrg",
		svc.ReactivateOrg,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveOrg", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveOrg",
		svc.RemoveOrg,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetOrgMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetOrgMetadata",
		svc.SetOrgMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/BulkSetOrgMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/BulkSetOrgMetadata",
		svc.BulkSetOrgMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListOrgMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListOrgMetadata",
		svc.ListOrgMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetOrgMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetOrgMetadata",
		svc.GetOrgMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveOrgMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveOrgMetadata",
		svc.RemoveOrgMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/BulkRemoveOrgMetadata", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/BulkRemoveOrgMetadata",
		svc.BulkRemoveOrgMetadata,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListOrgDomains", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListOrgDomains",
		svc.ListOrgDomains,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddOrgDomain", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddOrgDomain",
		svc.AddOrgDomain,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveOrgDomain", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveOrgDomain",
		svc.RemoveOrgDomain,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GenerateOrgDomainValidation",
		svc.GenerateOrgDomainValidation,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ValidateOrgDomain", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ValidateOrgDomain",
		svc.ValidateOrgDomain,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetPrimaryOrgDomain",
		svc.SetPrimaryOrgDomain,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListOrgMemberRoles", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListOrgMemberRoles",
		svc.ListOrgMemberRoles,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListOrgMembers", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListOrgMembers",
		svc.ListOrgMembers,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddOrgMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddOrgMember",
		svc.AddOrgMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateOrgMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateOrgMember",
		svc.UpdateOrgMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveOrgMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveOrgMember",
		svc.RemoveOrgMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetProjectByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetProjectByID",
		svc.GetProjectByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetGrantedProjectByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetGrantedProjectByID",
		svc.GetGrantedProjectByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjects", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjects",
		svc.ListProjects,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListGrantedProjects", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListGrantedProjects",
		svc.ListGrantedProjects,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListGrantedProjectRoles", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListGrantedProjectRoles",
		svc.ListGrantedProjectRoles,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectChanges", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectChanges",
		svc.ListProjectChanges,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddProject", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddProject",
		svc.AddProject,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateProject", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateProject",
		svc.UpdateProject,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateProject", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateProject",
		svc.DeactivateProject,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateProject", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateProject",
		svc.ReactivateProject,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveProject", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveProject",
		svc.RemoveProject,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectRoles", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectRoles",
		svc.ListProjectRoles,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddProjectRole", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddProjectRole",
		svc.AddProjectRole,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/BulkAddProjectRoles", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/BulkAddProjectRoles",
		svc.BulkAddProjectRoles,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateProjectRole", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateProjectRole",
		svc.UpdateProjectRole,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveProjectRole", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveProjectRole",
		svc.RemoveProjectRole,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectMemberRoles", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectMemberRoles",
		svc.ListProjectMemberRoles,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectMembers", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectMembers",
		svc.ListProjectMembers,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddProjectMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddProjectMember",
		svc.AddProjectMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateProjectMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateProjectMember",
		svc.UpdateProjectMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveProjectMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveProjectMember",
		svc.RemoveProjectMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetAppByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetAppByID",
		svc.GetAppByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListApps", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListApps",
		svc.ListApps,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListAppChanges", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListAppChanges",
		svc.ListAppChanges,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddOIDCApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddOIDCApp",
		svc.AddOIDCApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddSAMLApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddSAMLApp",
		svc.AddSAMLApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddAPIApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddAPIApp",
		svc.AddAPIApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateApp",
		svc.UpdateApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateOIDCAppConfig",
		svc.UpdateOIDCAppConfig,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateSAMLAppConfig", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateSAMLAppConfig",
		svc.UpdateSAMLAppConfig,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateAPIAppConfig", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateAPIAppConfig",
		svc.UpdateAPIAppConfig,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateApp",
		svc.DeactivateApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateApp",
		svc.ReactivateApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveApp", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveApp",
		svc.RemoveApp,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RegenerateOIDCClientSecret",
		svc.RegenerateOIDCClientSecret,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RegenerateAPIClientSecret",
		svc.RegenerateAPIClientSecret,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetAppKey", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetAppKey",
		svc.GetAppKey,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListAppKeys", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListAppKeys",
		svc.ListAppKeys,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddAppKey", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddAppKey",
		svc.AddAppKey,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveAppKey", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveAppKey",
		svc.RemoveAppKey,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectGrantChanges", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectGrantChanges",
		svc.ListProjectGrantChanges,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetProjectGrantByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetProjectGrantByID",
		svc.GetProjectGrantByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectGrants", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectGrants",
		svc.ListProjectGrants,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListAllProjectGrants", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListAllProjectGrants",
		svc.ListAllProjectGrants,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddProjectGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddProjectGrant",
		svc.AddProjectGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateProjectGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateProjectGrant",
		svc.UpdateProjectGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateProjectGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateProjectGrant",
		svc.DeactivateProjectGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateProjectGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateProjectGrant",
		svc.ReactivateProjectGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveProjectGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveProjectGrant",
		svc.RemoveProjectGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectGrantMemberRoles",
		svc.ListProjectGrantMemberRoles,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProjectGrantMembers", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProjectGrantMembers",
		svc.ListProjectGrantMembers,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddProjectGrantMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddProjectGrantMember",
		svc.AddProjectGrantMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateProjectGrantMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateProjectGrantMember",
		svc.UpdateProjectGrantMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveProjectGrantMember", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveProjectGrantMember",
		svc.RemoveProjectGrantMember,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetUserGrantByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetUserGrantByID",
		svc.GetUserGrantByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListUserGrants", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListUserGrants",
		svc.ListUserGrants,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddUserGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddUserGrant",
		svc.AddUserGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateUserGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateUserGrant",
		svc.UpdateUserGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateUserGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateUserGrant",
		svc.DeactivateUserGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateUserGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateUserGrant",
		svc.ReactivateUserGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveUserGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveUserGrant",
		svc.RemoveUserGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/BulkRemoveUserGrant", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/BulkRemoveUserGrant",
		svc.BulkRemoveUserGrant,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetOrgIAMPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetOrgIAMPolicy",
		svc.GetOrgIAMPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDomainPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDomainPolicy",
		svc.GetDomainPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetLoginPolicy",
		svc.GetLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultLoginPolicy",
		svc.GetDefaultLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomLoginPolicy",
		svc.AddCustomLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomLoginPolicy",
		svc.UpdateCustomLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetLoginPolicyToDefault",
		svc.ResetLoginPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListLoginPolicyIDPs",
		svc.ListLoginPolicyIDPs,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddIDPToLoginPolicy",
		svc.AddIDPToLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveIDPFromLoginPolicy",
		svc.RemoveIDPFromLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListLoginPolicySecondFactors",
		svc.ListLoginPolicySecondFactors,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddSecondFactorToLoginPolicy",
		svc.AddSecondFactorToLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveSecondFactorFromLoginPolicy",
		svc.RemoveSecondFactorFromLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListLoginPolicyMultiFactors",
		svc.ListLoginPolicyMultiFactors,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddMultiFactorToLoginPolicy",
		svc.AddMultiFactorToLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveMultiFactorFromLoginPolicy",
		svc.RemoveMultiFactorFromLoginPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetPasswordComplexityPolicy",
		svc.GetPasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultPasswordComplexityPolicy",
		svc.GetDefaultPasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomPasswordComplexityPolicy",
		svc.AddCustomPasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomPasswordComplexityPolicy",
		svc.UpdateCustomPasswordComplexityPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetPasswordComplexityPolicyToDefault",
		svc.ResetPasswordComplexityPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetPasswordAgePolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetPasswordAgePolicy",
		svc.GetPasswordAgePolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultPasswordAgePolicy",
		svc.GetDefaultPasswordAgePolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomPasswordAgePolicy",
		svc.AddCustomPasswordAgePolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomPasswordAgePolicy",
		svc.UpdateCustomPasswordAgePolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetPasswordAgePolicyToDefault",
		svc.ResetPasswordAgePolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetLockoutPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetLockoutPolicy",
		svc.GetLockoutPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultLockoutPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultLockoutPolicy",
		svc.GetDefaultLockoutPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomLockoutPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomLockoutPolicy",
		svc.AddCustomLockoutPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomLockoutPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomLockoutPolicy",
		svc.UpdateCustomLockoutPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetLockoutPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetLockoutPolicyToDefault",
		svc.ResetLockoutPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetPrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetPrivacyPolicy",
		svc.GetPrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultPrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultPrivacyPolicy",
		svc.GetDefaultPrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomPrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomPrivacyPolicy",
		svc.AddCustomPrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomPrivacyPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomPrivacyPolicy",
		svc.UpdateCustomPrivacyPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetPrivacyPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetPrivacyPolicyToDefault",
		svc.ResetPrivacyPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetNotificationPolicy",
		svc.GetNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultNotificationPolicy",
		svc.GetDefaultNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomNotificationPolicy",
		svc.AddCustomNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomNotificationPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomNotificationPolicy",
		svc.UpdateCustomNotificationPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetNotificationPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetNotificationPolicyToDefault",
		svc.ResetNotificationPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetLabelPolicy",
		svc.GetLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetPreviewLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetPreviewLabelPolicy",
		svc.GetPreviewLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultLabelPolicy",
		svc.GetDefaultLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddCustomLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddCustomLabelPolicy",
		svc.AddCustomLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateCustomLabelPolicy",
		svc.UpdateCustomLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ActivateCustomLabelPolicy", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ActivateCustomLabelPolicy",
		svc.ActivateCustomLabelPolicy,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogo", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogo",
		svc.RemoveCustomLabelPolicyLogo,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogoDark", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyLogoDark",
		svc.RemoveCustomLabelPolicyLogoDark,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIcon", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIcon",
		svc.RemoveCustomLabelPolicyIcon,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIconDark", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyIconDark",
		svc.RemoveCustomLabelPolicyIconDark,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyFont", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveCustomLabelPolicyFont",
		svc.RemoveCustomLabelPolicyFont,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetLabelPolicyToDefault",
		svc.ResetLabelPolicyToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomInitMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomInitMessageText",
		svc.GetCustomInitMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultInitMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultInitMessageText",
		svc.GetDefaultInitMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomInitMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomInitMessageText",
		svc.SetCustomInitMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomInitMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomInitMessageTextToDefault",
		svc.ResetCustomInitMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomPasswordResetMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomPasswordResetMessageText",
		svc.GetCustomPasswordResetMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultPasswordResetMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultPasswordResetMessageText",
		svc.GetDefaultPasswordResetMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomPasswordResetMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomPasswordResetMessageText",
		svc.SetCustomPasswordResetMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomPasswordResetMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomPasswordResetMessageTextToDefault",
		svc.ResetCustomPasswordResetMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomVerifyEmailMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomVerifyEmailMessageText",
		svc.GetCustomVerifyEmailMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultVerifyEmailMessageText",
		svc.GetDefaultVerifyEmailMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomVerifyEmailMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomVerifyEmailMessageText",
		svc.SetCustomVerifyEmailMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomVerifyEmailMessageTextToDefault",
		svc.ResetCustomVerifyEmailMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomVerifyPhoneMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomVerifyPhoneMessageText",
		svc.GetCustomVerifyPhoneMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultVerifyPhoneMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultVerifyPhoneMessageText",
		svc.GetDefaultVerifyPhoneMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomVerifyPhoneMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomVerifyPhoneMessageText",
		svc.SetCustomVerifyPhoneMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomVerifyPhoneMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomVerifyPhoneMessageTextToDefault",
		svc.ResetCustomVerifyPhoneMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomDomainClaimedMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomDomainClaimedMessageText",
		svc.GetCustomDomainClaimedMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultDomainClaimedMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultDomainClaimedMessageText",
		svc.GetDefaultDomainClaimedMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomDomainClaimedMessageCustomText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomDomainClaimedMessageCustomText",
		svc.SetCustomDomainClaimedMessageCustomText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomDomainClaimedMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomDomainClaimedMessageTextToDefault",
		svc.ResetCustomDomainClaimedMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomPasswordlessRegistrationMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomPasswordlessRegistrationMessageText",
		svc.GetCustomPasswordlessRegistrationMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultPasswordlessRegistrationMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultPasswordlessRegistrationMessageText",
		svc.GetDefaultPasswordlessRegistrationMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomPasswordlessRegistrationMessageCustomText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomPasswordlessRegistrationMessageCustomText",
		svc.SetCustomPasswordlessRegistrationMessageCustomText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomPasswordlessRegistrationMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomPasswordlessRegistrationMessageTextToDefault",
		svc.ResetCustomPasswordlessRegistrationMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomPasswordChangeMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomPasswordChangeMessageText",
		svc.GetCustomPasswordChangeMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultPasswordChangeMessageText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultPasswordChangeMessageText",
		svc.GetDefaultPasswordChangeMessageText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomPasswordChangeMessageCustomText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomPasswordChangeMessageCustomText",
		svc.SetCustomPasswordChangeMessageCustomText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomPasswordChangeMessageTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomPasswordChangeMessageTextToDefault",
		svc.ResetCustomPasswordChangeMessageTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetCustomLoginTexts", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetCustomLoginTexts",
		svc.GetCustomLoginTexts,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetDefaultLoginTexts", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetDefaultLoginTexts",
		svc.GetDefaultLoginTexts,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetCustomLoginText", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetCustomLoginText",
		svc.SetCustomLoginText,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ResetCustomLoginTextToDefault", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ResetCustomLoginTextToDefault",
		svc.ResetCustomLoginTextToDefault,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetOrgIDPByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetOrgIDPByID",
		svc.GetOrgIDPByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListOrgIDPs", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListOrgIDPs",
		svc.ListOrgIDPs,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddOrgOIDCIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddOrgOIDCIDP",
		svc.AddOrgOIDCIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddOrgJWTIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddOrgJWTIDP",
		svc.AddOrgJWTIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateOrgIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateOrgIDP",
		svc.DeactivateOrgIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateOrgIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateOrgIDP",
		svc.ReactivateOrgIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/RemoveOrgIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/RemoveOrgIDP",
		svc.RemoveOrgIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateOrgIDP", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateOrgIDP",
		svc.UpdateOrgIDP,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateOrgIDPOIDCConfig",
		svc.UpdateOrgIDPOIDCConfig,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateOrgIDPJWTConfig", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateOrgIDPJWTConfig",
		svc.UpdateOrgIDPJWTConfig,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListProviders", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListProviders",
		svc.ListProviders,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetProviderByID", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetProviderByID",
		svc.GetProviderByID,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/AddLDAPProvider", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/AddLDAPProvider",
		svc.AddLDAPProvider,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateLDAPProvider", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateLDAPProvider",
		svc.UpdateLDAPProvider,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeleteProvider", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeleteProvider",
		svc.DeleteProvider,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListActions", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListActions",
		svc.ListActions,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetAction", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetAction",
		svc.GetAction,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/CreateAction", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/CreateAction",
		svc.CreateAction,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/UpdateAction", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/UpdateAction",
		svc.UpdateAction,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeactivateAction", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeactivateAction",
		svc.DeactivateAction,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ReactivateAction", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ReactivateAction",
		svc.ReactivateAction,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/DeleteAction", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/DeleteAction",
		svc.DeleteAction,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListFlowTypes", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListFlowTypes",
		svc.ListFlowTypes,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ListFlowTriggerTypes", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ListFlowTriggerTypes",
		svc.ListFlowTriggerTypes,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/GetFlow", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/GetFlow",
		svc.GetFlow,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/ClearFlow", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/ClearFlow",
		svc.ClearFlow,
		opts...,
	))
	mux.Handle("/zitadel.management.v1.ManagementService/SetTriggerActions", connect_go.NewUnaryHandler(
		"/zitadel.management.v1.ManagementService/SetTriggerActions",
		svc.SetTriggerActions,
		opts...,
	))
	return "/zitadel.management.v1.ManagementService/", mux
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) Healthz(context.Context, *connect_go.Request[management.HealthzRequest]) (*connect_go.Response[management.HealthzResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.Healthz is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetOIDCInformation(context.Context, *connect_go.Request[management.GetOIDCInformationRequest]) (*connect_go.Response[management.GetOIDCInformationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetOIDCInformation is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetIAM(context.Context, *connect_go.Request[management.GetIAMRequest]) (*connect_go.Response[management.GetIAMResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetIAM is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetSupportedLanguages(context.Context, *connect_go.Request[management.GetSupportedLanguagesRequest]) (*connect_go.Response[management.GetSupportedLanguagesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetSupportedLanguages is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUserByID(context.Context, *connect_go.Request[management.GetUserByIDRequest]) (*connect_go.Response[management.GetUserByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetUserByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUserByLoginNameGlobal(context.Context, *connect_go.Request[management.GetUserByLoginNameGlobalRequest]) (*connect_go.Response[management.GetUserByLoginNameGlobalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetUserByLoginNameGlobal is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListUsers(context.Context, *connect_go.Request[management.ListUsersRequest]) (*connect_go.Response[management.ListUsersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListUsers is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListUserChanges(context.Context, *connect_go.Request[management.ListUserChangesRequest]) (*connect_go.Response[management.ListUserChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListUserChanges is not implemented"))
}

func (UnimplementedManagementServiceHandler) IsUserUnique(context.Context, *connect_go.Request[management.IsUserUniqueRequest]) (*connect_go.Response[management.IsUserUniqueResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.IsUserUnique is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddHumanUser(context.Context, *connect_go.Request[management.AddHumanUserRequest]) (*connect_go.Response[management.AddHumanUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddHumanUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) ImportHumanUser(context.Context, *connect_go.Request[management.ImportHumanUserRequest]) (*connect_go.Response[management.ImportHumanUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ImportHumanUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddMachineUser(context.Context, *connect_go.Request[management.AddMachineUserRequest]) (*connect_go.Response[management.AddMachineUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddMachineUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateUser(context.Context, *connect_go.Request[management.DeactivateUserRequest]) (*connect_go.Response[management.DeactivateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateUser(context.Context, *connect_go.Request[management.ReactivateUserRequest]) (*connect_go.Response[management.ReactivateUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) LockUser(context.Context, *connect_go.Request[management.LockUserRequest]) (*connect_go.Response[management.LockUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.LockUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) UnlockUser(context.Context, *connect_go.Request[management.UnlockUserRequest]) (*connect_go.Response[management.UnlockUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UnlockUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveUser(context.Context, *connect_go.Request[management.RemoveUserRequest]) (*connect_go.Response[management.RemoveUserResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveUser is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateUserName(context.Context, *connect_go.Request[management.UpdateUserNameRequest]) (*connect_go.Response[management.UpdateUserNameResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateUserName is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetUserMetadata(context.Context, *connect_go.Request[management.SetUserMetadataRequest]) (*connect_go.Response[management.SetUserMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetUserMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) BulkSetUserMetadata(context.Context, *connect_go.Request[management.BulkSetUserMetadataRequest]) (*connect_go.Response[management.BulkSetUserMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.BulkSetUserMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListUserMetadata(context.Context, *connect_go.Request[management.ListUserMetadataRequest]) (*connect_go.Response[management.ListUserMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListUserMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUserMetadata(context.Context, *connect_go.Request[management.GetUserMetadataRequest]) (*connect_go.Response[management.GetUserMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetUserMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveUserMetadata(context.Context, *connect_go.Request[management.RemoveUserMetadataRequest]) (*connect_go.Response[management.RemoveUserMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveUserMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) BulkRemoveUserMetadata(context.Context, *connect_go.Request[management.BulkRemoveUserMetadataRequest]) (*connect_go.Response[management.BulkRemoveUserMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.BulkRemoveUserMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetHumanProfile(context.Context, *connect_go.Request[management.GetHumanProfileRequest]) (*connect_go.Response[management.GetHumanProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetHumanProfile is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateHumanProfile(context.Context, *connect_go.Request[management.UpdateHumanProfileRequest]) (*connect_go.Response[management.UpdateHumanProfileResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateHumanProfile is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetHumanEmail(context.Context, *connect_go.Request[management.GetHumanEmailRequest]) (*connect_go.Response[management.GetHumanEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetHumanEmail is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateHumanEmail(context.Context, *connect_go.Request[management.UpdateHumanEmailRequest]) (*connect_go.Response[management.UpdateHumanEmailResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateHumanEmail is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResendHumanInitialization(context.Context, *connect_go.Request[management.ResendHumanInitializationRequest]) (*connect_go.Response[management.ResendHumanInitializationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResendHumanInitialization is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResendHumanEmailVerification(context.Context, *connect_go.Request[management.ResendHumanEmailVerificationRequest]) (*connect_go.Response[management.ResendHumanEmailVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResendHumanEmailVerification is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetHumanPhone(context.Context, *connect_go.Request[management.GetHumanPhoneRequest]) (*connect_go.Response[management.GetHumanPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetHumanPhone is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateHumanPhone(context.Context, *connect_go.Request[management.UpdateHumanPhoneRequest]) (*connect_go.Response[management.UpdateHumanPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateHumanPhone is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveHumanPhone(context.Context, *connect_go.Request[management.RemoveHumanPhoneRequest]) (*connect_go.Response[management.RemoveHumanPhoneResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveHumanPhone is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResendHumanPhoneVerification(context.Context, *connect_go.Request[management.ResendHumanPhoneVerificationRequest]) (*connect_go.Response[management.ResendHumanPhoneVerificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResendHumanPhoneVerification is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveHumanAvatar(context.Context, *connect_go.Request[management.RemoveHumanAvatarRequest]) (*connect_go.Response[management.RemoveHumanAvatarResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveHumanAvatar is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetHumanInitialPassword(context.Context, *connect_go.Request[management.SetHumanInitialPasswordRequest]) (*connect_go.Response[management.SetHumanInitialPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetHumanInitialPassword is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetHumanPassword(context.Context, *connect_go.Request[management.SetHumanPasswordRequest]) (*connect_go.Response[management.SetHumanPasswordResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetHumanPassword is not implemented"))
}

func (UnimplementedManagementServiceHandler) SendHumanResetPasswordNotification(context.Context, *connect_go.Request[management.SendHumanResetPasswordNotificationRequest]) (*connect_go.Response[management.SendHumanResetPasswordNotificationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SendHumanResetPasswordNotification is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListHumanAuthFactors(context.Context, *connect_go.Request[management.ListHumanAuthFactorsRequest]) (*connect_go.Response[management.ListHumanAuthFactorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListHumanAuthFactors is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveHumanAuthFactorOTP(context.Context, *connect_go.Request[management.RemoveHumanAuthFactorOTPRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorOTPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveHumanAuthFactorOTP is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveHumanAuthFactorU2F(context.Context, *connect_go.Request[management.RemoveHumanAuthFactorU2FRequest]) (*connect_go.Response[management.RemoveHumanAuthFactorU2FResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveHumanAuthFactorU2F is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListHumanPasswordless(context.Context, *connect_go.Request[management.ListHumanPasswordlessRequest]) (*connect_go.Response[management.ListHumanPasswordlessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListHumanPasswordless is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddPasswordlessRegistration(context.Context, *connect_go.Request[management.AddPasswordlessRegistrationRequest]) (*connect_go.Response[management.AddPasswordlessRegistrationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddPasswordlessRegistration is not implemented"))
}

func (UnimplementedManagementServiceHandler) SendPasswordlessRegistration(context.Context, *connect_go.Request[management.SendPasswordlessRegistrationRequest]) (*connect_go.Response[management.SendPasswordlessRegistrationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SendPasswordlessRegistration is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveHumanPasswordless(context.Context, *connect_go.Request[management.RemoveHumanPasswordlessRequest]) (*connect_go.Response[management.RemoveHumanPasswordlessResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveHumanPasswordless is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateMachine(context.Context, *connect_go.Request[management.UpdateMachineRequest]) (*connect_go.Response[management.UpdateMachineResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateMachine is not implemented"))
}

func (UnimplementedManagementServiceHandler) GenerateMachineSecret(context.Context, *connect_go.Request[management.GenerateMachineSecretRequest]) (*connect_go.Response[management.GenerateMachineSecretResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GenerateMachineSecret is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveMachineSecret(context.Context, *connect_go.Request[management.RemoveMachineSecretRequest]) (*connect_go.Response[management.RemoveMachineSecretResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveMachineSecret is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetMachineKeyByIDs(context.Context, *connect_go.Request[management.GetMachineKeyByIDsRequest]) (*connect_go.Response[management.GetMachineKeyByIDsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetMachineKeyByIDs is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListMachineKeys(context.Context, *connect_go.Request[management.ListMachineKeysRequest]) (*connect_go.Response[management.ListMachineKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListMachineKeys is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddMachineKey(context.Context, *connect_go.Request[management.AddMachineKeyRequest]) (*connect_go.Response[management.AddMachineKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddMachineKey is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveMachineKey(context.Context, *connect_go.Request[management.RemoveMachineKeyRequest]) (*connect_go.Response[management.RemoveMachineKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveMachineKey is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetPersonalAccessTokenByIDs(context.Context, *connect_go.Request[management.GetPersonalAccessTokenByIDsRequest]) (*connect_go.Response[management.GetPersonalAccessTokenByIDsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetPersonalAccessTokenByIDs is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListPersonalAccessTokens(context.Context, *connect_go.Request[management.ListPersonalAccessTokensRequest]) (*connect_go.Response[management.ListPersonalAccessTokensResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListPersonalAccessTokens is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddPersonalAccessToken(context.Context, *connect_go.Request[management.AddPersonalAccessTokenRequest]) (*connect_go.Response[management.AddPersonalAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddPersonalAccessToken is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemovePersonalAccessToken(context.Context, *connect_go.Request[management.RemovePersonalAccessTokenRequest]) (*connect_go.Response[management.RemovePersonalAccessTokenResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemovePersonalAccessToken is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListHumanLinkedIDPs(context.Context, *connect_go.Request[management.ListHumanLinkedIDPsRequest]) (*connect_go.Response[management.ListHumanLinkedIDPsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListHumanLinkedIDPs is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveHumanLinkedIDP(context.Context, *connect_go.Request[management.RemoveHumanLinkedIDPRequest]) (*connect_go.Response[management.RemoveHumanLinkedIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveHumanLinkedIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListUserMemberships(context.Context, *connect_go.Request[management.ListUserMembershipsRequest]) (*connect_go.Response[management.ListUserMembershipsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListUserMemberships is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetMyOrg(context.Context, *connect_go.Request[management.GetMyOrgRequest]) (*connect_go.Response[management.GetMyOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetMyOrg is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetOrgByDomainGlobal(context.Context, *connect_go.Request[management.GetOrgByDomainGlobalRequest]) (*connect_go.Response[management.GetOrgByDomainGlobalResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetOrgByDomainGlobal is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListOrgChanges(context.Context, *connect_go.Request[management.ListOrgChangesRequest]) (*connect_go.Response[management.ListOrgChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListOrgChanges is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddOrg(context.Context, *connect_go.Request[management.AddOrgRequest]) (*connect_go.Response[management.AddOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddOrg is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateOrg(context.Context, *connect_go.Request[management.UpdateOrgRequest]) (*connect_go.Response[management.UpdateOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateOrg is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateOrg(context.Context, *connect_go.Request[management.DeactivateOrgRequest]) (*connect_go.Response[management.DeactivateOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateOrg is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateOrg(context.Context, *connect_go.Request[management.ReactivateOrgRequest]) (*connect_go.Response[management.ReactivateOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateOrg is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveOrg(context.Context, *connect_go.Request[management.RemoveOrgRequest]) (*connect_go.Response[management.RemoveOrgResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveOrg is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetOrgMetadata(context.Context, *connect_go.Request[management.SetOrgMetadataRequest]) (*connect_go.Response[management.SetOrgMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetOrgMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) BulkSetOrgMetadata(context.Context, *connect_go.Request[management.BulkSetOrgMetadataRequest]) (*connect_go.Response[management.BulkSetOrgMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.BulkSetOrgMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListOrgMetadata(context.Context, *connect_go.Request[management.ListOrgMetadataRequest]) (*connect_go.Response[management.ListOrgMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListOrgMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetOrgMetadata(context.Context, *connect_go.Request[management.GetOrgMetadataRequest]) (*connect_go.Response[management.GetOrgMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetOrgMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveOrgMetadata(context.Context, *connect_go.Request[management.RemoveOrgMetadataRequest]) (*connect_go.Response[management.RemoveOrgMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveOrgMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) BulkRemoveOrgMetadata(context.Context, *connect_go.Request[management.BulkRemoveOrgMetadataRequest]) (*connect_go.Response[management.BulkRemoveOrgMetadataResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.BulkRemoveOrgMetadata is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListOrgDomains(context.Context, *connect_go.Request[management.ListOrgDomainsRequest]) (*connect_go.Response[management.ListOrgDomainsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListOrgDomains is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddOrgDomain(context.Context, *connect_go.Request[management.AddOrgDomainRequest]) (*connect_go.Response[management.AddOrgDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddOrgDomain is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveOrgDomain(context.Context, *connect_go.Request[management.RemoveOrgDomainRequest]) (*connect_go.Response[management.RemoveOrgDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveOrgDomain is not implemented"))
}

func (UnimplementedManagementServiceHandler) GenerateOrgDomainValidation(context.Context, *connect_go.Request[management.GenerateOrgDomainValidationRequest]) (*connect_go.Response[management.GenerateOrgDomainValidationResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GenerateOrgDomainValidation is not implemented"))
}

func (UnimplementedManagementServiceHandler) ValidateOrgDomain(context.Context, *connect_go.Request[management.ValidateOrgDomainRequest]) (*connect_go.Response[management.ValidateOrgDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ValidateOrgDomain is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetPrimaryOrgDomain(context.Context, *connect_go.Request[management.SetPrimaryOrgDomainRequest]) (*connect_go.Response[management.SetPrimaryOrgDomainResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetPrimaryOrgDomain is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListOrgMemberRoles(context.Context, *connect_go.Request[management.ListOrgMemberRolesRequest]) (*connect_go.Response[management.ListOrgMemberRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListOrgMemberRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListOrgMembers(context.Context, *connect_go.Request[management.ListOrgMembersRequest]) (*connect_go.Response[management.ListOrgMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListOrgMembers is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddOrgMember(context.Context, *connect_go.Request[management.AddOrgMemberRequest]) (*connect_go.Response[management.AddOrgMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddOrgMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateOrgMember(context.Context, *connect_go.Request[management.UpdateOrgMemberRequest]) (*connect_go.Response[management.UpdateOrgMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateOrgMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveOrgMember(context.Context, *connect_go.Request[management.RemoveOrgMemberRequest]) (*connect_go.Response[management.RemoveOrgMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveOrgMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetProjectByID(context.Context, *connect_go.Request[management.GetProjectByIDRequest]) (*connect_go.Response[management.GetProjectByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetProjectByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetGrantedProjectByID(context.Context, *connect_go.Request[management.GetGrantedProjectByIDRequest]) (*connect_go.Response[management.GetGrantedProjectByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetGrantedProjectByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjects(context.Context, *connect_go.Request[management.ListProjectsRequest]) (*connect_go.Response[management.ListProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjects is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListGrantedProjects(context.Context, *connect_go.Request[management.ListGrantedProjectsRequest]) (*connect_go.Response[management.ListGrantedProjectsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListGrantedProjects is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListGrantedProjectRoles(context.Context, *connect_go.Request[management.ListGrantedProjectRolesRequest]) (*connect_go.Response[management.ListGrantedProjectRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListGrantedProjectRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectChanges(context.Context, *connect_go.Request[management.ListProjectChangesRequest]) (*connect_go.Response[management.ListProjectChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectChanges is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddProject(context.Context, *connect_go.Request[management.AddProjectRequest]) (*connect_go.Response[management.AddProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddProject is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateProject(context.Context, *connect_go.Request[management.UpdateProjectRequest]) (*connect_go.Response[management.UpdateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateProject is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateProject(context.Context, *connect_go.Request[management.DeactivateProjectRequest]) (*connect_go.Response[management.DeactivateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateProject is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateProject(context.Context, *connect_go.Request[management.ReactivateProjectRequest]) (*connect_go.Response[management.ReactivateProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateProject is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveProject(context.Context, *connect_go.Request[management.RemoveProjectRequest]) (*connect_go.Response[management.RemoveProjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveProject is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectRoles(context.Context, *connect_go.Request[management.ListProjectRolesRequest]) (*connect_go.Response[management.ListProjectRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddProjectRole(context.Context, *connect_go.Request[management.AddProjectRoleRequest]) (*connect_go.Response[management.AddProjectRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddProjectRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) BulkAddProjectRoles(context.Context, *connect_go.Request[management.BulkAddProjectRolesRequest]) (*connect_go.Response[management.BulkAddProjectRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.BulkAddProjectRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateProjectRole(context.Context, *connect_go.Request[management.UpdateProjectRoleRequest]) (*connect_go.Response[management.UpdateProjectRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateProjectRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveProjectRole(context.Context, *connect_go.Request[management.RemoveProjectRoleRequest]) (*connect_go.Response[management.RemoveProjectRoleResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveProjectRole is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectMemberRoles(context.Context, *connect_go.Request[management.ListProjectMemberRolesRequest]) (*connect_go.Response[management.ListProjectMemberRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectMemberRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectMembers(context.Context, *connect_go.Request[management.ListProjectMembersRequest]) (*connect_go.Response[management.ListProjectMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectMembers is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddProjectMember(context.Context, *connect_go.Request[management.AddProjectMemberRequest]) (*connect_go.Response[management.AddProjectMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddProjectMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateProjectMember(context.Context, *connect_go.Request[management.UpdateProjectMemberRequest]) (*connect_go.Response[management.UpdateProjectMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateProjectMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveProjectMember(context.Context, *connect_go.Request[management.RemoveProjectMemberRequest]) (*connect_go.Response[management.RemoveProjectMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveProjectMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetAppByID(context.Context, *connect_go.Request[management.GetAppByIDRequest]) (*connect_go.Response[management.GetAppByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetAppByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListApps(context.Context, *connect_go.Request[management.ListAppsRequest]) (*connect_go.Response[management.ListAppsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListApps is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListAppChanges(context.Context, *connect_go.Request[management.ListAppChangesRequest]) (*connect_go.Response[management.ListAppChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListAppChanges is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddOIDCApp(context.Context, *connect_go.Request[management.AddOIDCAppRequest]) (*connect_go.Response[management.AddOIDCAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddOIDCApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddSAMLApp(context.Context, *connect_go.Request[management.AddSAMLAppRequest]) (*connect_go.Response[management.AddSAMLAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddSAMLApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddAPIApp(context.Context, *connect_go.Request[management.AddAPIAppRequest]) (*connect_go.Response[management.AddAPIAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddAPIApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateApp(context.Context, *connect_go.Request[management.UpdateAppRequest]) (*connect_go.Response[management.UpdateAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateOIDCAppConfig(context.Context, *connect_go.Request[management.UpdateOIDCAppConfigRequest]) (*connect_go.Response[management.UpdateOIDCAppConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateOIDCAppConfig is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateSAMLAppConfig(context.Context, *connect_go.Request[management.UpdateSAMLAppConfigRequest]) (*connect_go.Response[management.UpdateSAMLAppConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateSAMLAppConfig is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateAPIAppConfig(context.Context, *connect_go.Request[management.UpdateAPIAppConfigRequest]) (*connect_go.Response[management.UpdateAPIAppConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateAPIAppConfig is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateApp(context.Context, *connect_go.Request[management.DeactivateAppRequest]) (*connect_go.Response[management.DeactivateAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateApp(context.Context, *connect_go.Request[management.ReactivateAppRequest]) (*connect_go.Response[management.ReactivateAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveApp(context.Context, *connect_go.Request[management.RemoveAppRequest]) (*connect_go.Response[management.RemoveAppResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveApp is not implemented"))
}

func (UnimplementedManagementServiceHandler) RegenerateOIDCClientSecret(context.Context, *connect_go.Request[management.RegenerateOIDCClientSecretRequest]) (*connect_go.Response[management.RegenerateOIDCClientSecretResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RegenerateOIDCClientSecret is not implemented"))
}

func (UnimplementedManagementServiceHandler) RegenerateAPIClientSecret(context.Context, *connect_go.Request[management.RegenerateAPIClientSecretRequest]) (*connect_go.Response[management.RegenerateAPIClientSecretResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RegenerateAPIClientSecret is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetAppKey(context.Context, *connect_go.Request[management.GetAppKeyRequest]) (*connect_go.Response[management.GetAppKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetAppKey is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListAppKeys(context.Context, *connect_go.Request[management.ListAppKeysRequest]) (*connect_go.Response[management.ListAppKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListAppKeys is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddAppKey(context.Context, *connect_go.Request[management.AddAppKeyRequest]) (*connect_go.Response[management.AddAppKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddAppKey is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveAppKey(context.Context, *connect_go.Request[management.RemoveAppKeyRequest]) (*connect_go.Response[management.RemoveAppKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveAppKey is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectGrantChanges(context.Context, *connect_go.Request[management.ListProjectGrantChangesRequest]) (*connect_go.Response[management.ListProjectGrantChangesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectGrantChanges is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetProjectGrantByID(context.Context, *connect_go.Request[management.GetProjectGrantByIDRequest]) (*connect_go.Response[management.GetProjectGrantByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetProjectGrantByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectGrants(context.Context, *connect_go.Request[management.ListProjectGrantsRequest]) (*connect_go.Response[management.ListProjectGrantsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectGrants is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListAllProjectGrants(context.Context, *connect_go.Request[management.ListAllProjectGrantsRequest]) (*connect_go.Response[management.ListAllProjectGrantsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListAllProjectGrants is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddProjectGrant(context.Context, *connect_go.Request[management.AddProjectGrantRequest]) (*connect_go.Response[management.AddProjectGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddProjectGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateProjectGrant(context.Context, *connect_go.Request[management.UpdateProjectGrantRequest]) (*connect_go.Response[management.UpdateProjectGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateProjectGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateProjectGrant(context.Context, *connect_go.Request[management.DeactivateProjectGrantRequest]) (*connect_go.Response[management.DeactivateProjectGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateProjectGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateProjectGrant(context.Context, *connect_go.Request[management.ReactivateProjectGrantRequest]) (*connect_go.Response[management.ReactivateProjectGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateProjectGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveProjectGrant(context.Context, *connect_go.Request[management.RemoveProjectGrantRequest]) (*connect_go.Response[management.RemoveProjectGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveProjectGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectGrantMemberRoles(context.Context, *connect_go.Request[management.ListProjectGrantMemberRolesRequest]) (*connect_go.Response[management.ListProjectGrantMemberRolesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectGrantMemberRoles is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProjectGrantMembers(context.Context, *connect_go.Request[management.ListProjectGrantMembersRequest]) (*connect_go.Response[management.ListProjectGrantMembersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProjectGrantMembers is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddProjectGrantMember(context.Context, *connect_go.Request[management.AddProjectGrantMemberRequest]) (*connect_go.Response[management.AddProjectGrantMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddProjectGrantMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateProjectGrantMember(context.Context, *connect_go.Request[management.UpdateProjectGrantMemberRequest]) (*connect_go.Response[management.UpdateProjectGrantMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateProjectGrantMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveProjectGrantMember(context.Context, *connect_go.Request[management.RemoveProjectGrantMemberRequest]) (*connect_go.Response[management.RemoveProjectGrantMemberResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveProjectGrantMember is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetUserGrantByID(context.Context, *connect_go.Request[management.GetUserGrantByIDRequest]) (*connect_go.Response[management.GetUserGrantByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetUserGrantByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListUserGrants(context.Context, *connect_go.Request[management.ListUserGrantRequest]) (*connect_go.Response[management.ListUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListUserGrants is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddUserGrant(context.Context, *connect_go.Request[management.AddUserGrantRequest]) (*connect_go.Response[management.AddUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddUserGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateUserGrant(context.Context, *connect_go.Request[management.UpdateUserGrantRequest]) (*connect_go.Response[management.UpdateUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateUserGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateUserGrant(context.Context, *connect_go.Request[management.DeactivateUserGrantRequest]) (*connect_go.Response[management.DeactivateUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateUserGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateUserGrant(context.Context, *connect_go.Request[management.ReactivateUserGrantRequest]) (*connect_go.Response[management.ReactivateUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateUserGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveUserGrant(context.Context, *connect_go.Request[management.RemoveUserGrantRequest]) (*connect_go.Response[management.RemoveUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveUserGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) BulkRemoveUserGrant(context.Context, *connect_go.Request[management.BulkRemoveUserGrantRequest]) (*connect_go.Response[management.BulkRemoveUserGrantResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.BulkRemoveUserGrant is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetOrgIAMPolicy(context.Context, *connect_go.Request[management.GetOrgIAMPolicyRequest]) (*connect_go.Response[management.GetOrgIAMPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetOrgIAMPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDomainPolicy(context.Context, *connect_go.Request[management.GetDomainPolicyRequest]) (*connect_go.Response[management.GetDomainPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDomainPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetLoginPolicy(context.Context, *connect_go.Request[management.GetLoginPolicyRequest]) (*connect_go.Response[management.GetLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultLoginPolicy(context.Context, *connect_go.Request[management.GetDefaultLoginPolicyRequest]) (*connect_go.Response[management.GetDefaultLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomLoginPolicy(context.Context, *connect_go.Request[management.AddCustomLoginPolicyRequest]) (*connect_go.Response[management.AddCustomLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomLoginPolicy(context.Context, *connect_go.Request[management.UpdateCustomLoginPolicyRequest]) (*connect_go.Response[management.UpdateCustomLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetLoginPolicyToDefault(context.Context, *connect_go.Request[management.ResetLoginPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLoginPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetLoginPolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListLoginPolicyIDPs(context.Context, *connect_go.Request[management.ListLoginPolicyIDPsRequest]) (*connect_go.Response[management.ListLoginPolicyIDPsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListLoginPolicyIDPs is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddIDPToLoginPolicy(context.Context, *connect_go.Request[management.AddIDPToLoginPolicyRequest]) (*connect_go.Response[management.AddIDPToLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddIDPToLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveIDPFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveIDPFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveIDPFromLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveIDPFromLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListLoginPolicySecondFactors(context.Context, *connect_go.Request[management.ListLoginPolicySecondFactorsRequest]) (*connect_go.Response[management.ListLoginPolicySecondFactorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListLoginPolicySecondFactors is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddSecondFactorToLoginPolicy(context.Context, *connect_go.Request[management.AddSecondFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddSecondFactorToLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddSecondFactorToLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveSecondFactorFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveSecondFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveSecondFactorFromLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveSecondFactorFromLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListLoginPolicyMultiFactors(context.Context, *connect_go.Request[management.ListLoginPolicyMultiFactorsRequest]) (*connect_go.Response[management.ListLoginPolicyMultiFactorsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListLoginPolicyMultiFactors is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddMultiFactorToLoginPolicy(context.Context, *connect_go.Request[management.AddMultiFactorToLoginPolicyRequest]) (*connect_go.Response[management.AddMultiFactorToLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddMultiFactorToLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveMultiFactorFromLoginPolicy(context.Context, *connect_go.Request[management.RemoveMultiFactorFromLoginPolicyRequest]) (*connect_go.Response[management.RemoveMultiFactorFromLoginPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveMultiFactorFromLoginPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetPasswordComplexityPolicy(context.Context, *connect_go.Request[management.GetPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetPasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetPasswordComplexityPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultPasswordComplexityPolicy(context.Context, *connect_go.Request[management.GetDefaultPasswordComplexityPolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultPasswordComplexityPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomPasswordComplexityPolicy(context.Context, *connect_go.Request[management.AddCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.AddCustomPasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomPasswordComplexityPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomPasswordComplexityPolicy(context.Context, *connect_go.Request[management.UpdateCustomPasswordComplexityPolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordComplexityPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomPasswordComplexityPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetPasswordComplexityPolicyToDefault(context.Context, *connect_go.Request[management.ResetPasswordComplexityPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordComplexityPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetPasswordComplexityPolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetPasswordAgePolicy(context.Context, *connect_go.Request[management.GetPasswordAgePolicyRequest]) (*connect_go.Response[management.GetPasswordAgePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetPasswordAgePolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultPasswordAgePolicy(context.Context, *connect_go.Request[management.GetDefaultPasswordAgePolicyRequest]) (*connect_go.Response[management.GetDefaultPasswordAgePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultPasswordAgePolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomPasswordAgePolicy(context.Context, *connect_go.Request[management.AddCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.AddCustomPasswordAgePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomPasswordAgePolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomPasswordAgePolicy(context.Context, *connect_go.Request[management.UpdateCustomPasswordAgePolicyRequest]) (*connect_go.Response[management.UpdateCustomPasswordAgePolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomPasswordAgePolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetPasswordAgePolicyToDefault(context.Context, *connect_go.Request[management.ResetPasswordAgePolicyToDefaultRequest]) (*connect_go.Response[management.ResetPasswordAgePolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetPasswordAgePolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetLockoutPolicy(context.Context, *connect_go.Request[management.GetLockoutPolicyRequest]) (*connect_go.Response[management.GetLockoutPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetLockoutPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultLockoutPolicy(context.Context, *connect_go.Request[management.GetDefaultLockoutPolicyRequest]) (*connect_go.Response[management.GetDefaultLockoutPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultLockoutPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomLockoutPolicy(context.Context, *connect_go.Request[management.AddCustomLockoutPolicyRequest]) (*connect_go.Response[management.AddCustomLockoutPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomLockoutPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomLockoutPolicy(context.Context, *connect_go.Request[management.UpdateCustomLockoutPolicyRequest]) (*connect_go.Response[management.UpdateCustomLockoutPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomLockoutPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetLockoutPolicyToDefault(context.Context, *connect_go.Request[management.ResetLockoutPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLockoutPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetLockoutPolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetPrivacyPolicy(context.Context, *connect_go.Request[management.GetPrivacyPolicyRequest]) (*connect_go.Response[management.GetPrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetPrivacyPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultPrivacyPolicy(context.Context, *connect_go.Request[management.GetDefaultPrivacyPolicyRequest]) (*connect_go.Response[management.GetDefaultPrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultPrivacyPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomPrivacyPolicy(context.Context, *connect_go.Request[management.AddCustomPrivacyPolicyRequest]) (*connect_go.Response[management.AddCustomPrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomPrivacyPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomPrivacyPolicy(context.Context, *connect_go.Request[management.UpdateCustomPrivacyPolicyRequest]) (*connect_go.Response[management.UpdateCustomPrivacyPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomPrivacyPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetPrivacyPolicyToDefault(context.Context, *connect_go.Request[management.ResetPrivacyPolicyToDefaultRequest]) (*connect_go.Response[management.ResetPrivacyPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetPrivacyPolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetNotificationPolicy(context.Context, *connect_go.Request[management.GetNotificationPolicyRequest]) (*connect_go.Response[management.GetNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetNotificationPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultNotificationPolicy(context.Context, *connect_go.Request[management.GetDefaultNotificationPolicyRequest]) (*connect_go.Response[management.GetDefaultNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultNotificationPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomNotificationPolicy(context.Context, *connect_go.Request[management.AddCustomNotificationPolicyRequest]) (*connect_go.Response[management.AddCustomNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomNotificationPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomNotificationPolicy(context.Context, *connect_go.Request[management.UpdateCustomNotificationPolicyRequest]) (*connect_go.Response[management.UpdateCustomNotificationPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomNotificationPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetNotificationPolicyToDefault(context.Context, *connect_go.Request[management.ResetNotificationPolicyToDefaultRequest]) (*connect_go.Response[management.ResetNotificationPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetNotificationPolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetLabelPolicy(context.Context, *connect_go.Request[management.GetLabelPolicyRequest]) (*connect_go.Response[management.GetLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetLabelPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetPreviewLabelPolicy(context.Context, *connect_go.Request[management.GetPreviewLabelPolicyRequest]) (*connect_go.Response[management.GetPreviewLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetPreviewLabelPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultLabelPolicy(context.Context, *connect_go.Request[management.GetDefaultLabelPolicyRequest]) (*connect_go.Response[management.GetDefaultLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultLabelPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddCustomLabelPolicy(context.Context, *connect_go.Request[management.AddCustomLabelPolicyRequest]) (*connect_go.Response[management.AddCustomLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddCustomLabelPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateCustomLabelPolicy(context.Context, *connect_go.Request[management.UpdateCustomLabelPolicyRequest]) (*connect_go.Response[management.UpdateCustomLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateCustomLabelPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) ActivateCustomLabelPolicy(context.Context, *connect_go.Request[management.ActivateCustomLabelPolicyRequest]) (*connect_go.Response[management.ActivateCustomLabelPolicyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ActivateCustomLabelPolicy is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveCustomLabelPolicyLogo(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyLogoRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyLogo is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveCustomLabelPolicyLogoDark(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyLogoDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyLogoDarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyLogoDark is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveCustomLabelPolicyIcon(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyIconRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyIcon is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveCustomLabelPolicyIconDark(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyIconDarkRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyIconDarkResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyIconDark is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveCustomLabelPolicyFont(context.Context, *connect_go.Request[management.RemoveCustomLabelPolicyFontRequest]) (*connect_go.Response[management.RemoveCustomLabelPolicyFontResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyFont is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetLabelPolicyToDefault(context.Context, *connect_go.Request[management.ResetLabelPolicyToDefaultRequest]) (*connect_go.Response[management.ResetLabelPolicyToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetLabelPolicyToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomInitMessageText(context.Context, *connect_go.Request[management.GetCustomInitMessageTextRequest]) (*connect_go.Response[management.GetCustomInitMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomInitMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultInitMessageText(context.Context, *connect_go.Request[management.GetDefaultInitMessageTextRequest]) (*connect_go.Response[management.GetDefaultInitMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultInitMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomInitMessageText(context.Context, *connect_go.Request[management.SetCustomInitMessageTextRequest]) (*connect_go.Response[management.SetCustomInitMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomInitMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomInitMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomInitMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomInitMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomInitMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomPasswordResetMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordResetMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomPasswordResetMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultPasswordResetMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordResetMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordResetMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultPasswordResetMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomPasswordResetMessageText(context.Context, *connect_go.Request[management.SetCustomPasswordResetMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordResetMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomPasswordResetMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomPasswordResetMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordResetMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordResetMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomPasswordResetMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[management.GetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyEmailMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomVerifyEmailMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultVerifyEmailMessageText(context.Context, *connect_go.Request[management.GetDefaultVerifyEmailMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyEmailMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultVerifyEmailMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomVerifyEmailMessageText(context.Context, *connect_go.Request[management.SetCustomVerifyEmailMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyEmailMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomVerifyEmailMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomVerifyEmailMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomVerifyEmailMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyEmailMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomVerifyEmailMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[management.GetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetCustomVerifyPhoneMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomVerifyPhoneMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultVerifyPhoneMessageText(context.Context, *connect_go.Request[management.GetDefaultVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.GetDefaultVerifyPhoneMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultVerifyPhoneMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomVerifyPhoneMessageText(context.Context, *connect_go.Request[management.SetCustomVerifyPhoneMessageTextRequest]) (*connect_go.Response[management.SetCustomVerifyPhoneMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomVerifyPhoneMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomVerifyPhoneMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomVerifyPhoneMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomVerifyPhoneMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomVerifyPhoneMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomDomainClaimedMessageText(context.Context, *connect_go.Request[management.GetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetCustomDomainClaimedMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomDomainClaimedMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultDomainClaimedMessageText(context.Context, *connect_go.Request[management.GetDefaultDomainClaimedMessageTextRequest]) (*connect_go.Response[management.GetDefaultDomainClaimedMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultDomainClaimedMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomDomainClaimedMessageCustomText(context.Context, *connect_go.Request[management.SetCustomDomainClaimedMessageTextRequest]) (*connect_go.Response[management.SetCustomDomainClaimedMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomDomainClaimedMessageCustomText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomDomainClaimedMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomDomainClaimedMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomDomainClaimedMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomDomainClaimedMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordlessRegistrationMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomPasswordlessRegistrationMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultPasswordlessRegistrationMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordlessRegistrationMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultPasswordlessRegistrationMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomPasswordlessRegistrationMessageCustomText(context.Context, *connect_go.Request[management.SetCustomPasswordlessRegistrationMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordlessRegistrationMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomPasswordlessRegistrationMessageCustomText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomPasswordlessRegistrationMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomPasswordlessRegistrationMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomPasswordChangeMessageText(context.Context, *connect_go.Request[management.GetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetCustomPasswordChangeMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomPasswordChangeMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultPasswordChangeMessageText(context.Context, *connect_go.Request[management.GetDefaultPasswordChangeMessageTextRequest]) (*connect_go.Response[management.GetDefaultPasswordChangeMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultPasswordChangeMessageText is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomPasswordChangeMessageCustomText(context.Context, *connect_go.Request[management.SetCustomPasswordChangeMessageTextRequest]) (*connect_go.Response[management.SetCustomPasswordChangeMessageTextResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomPasswordChangeMessageCustomText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomPasswordChangeMessageTextToDefault(context.Context, *connect_go.Request[management.ResetCustomPasswordChangeMessageTextToDefaultRequest]) (*connect_go.Response[management.ResetCustomPasswordChangeMessageTextToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomPasswordChangeMessageTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetCustomLoginTexts(context.Context, *connect_go.Request[management.GetCustomLoginTextsRequest]) (*connect_go.Response[management.GetCustomLoginTextsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetCustomLoginTexts is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetDefaultLoginTexts(context.Context, *connect_go.Request[management.GetDefaultLoginTextsRequest]) (*connect_go.Response[management.GetDefaultLoginTextsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetDefaultLoginTexts is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetCustomLoginText(context.Context, *connect_go.Request[management.SetCustomLoginTextsRequest]) (*connect_go.Response[management.SetCustomLoginTextsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetCustomLoginText is not implemented"))
}

func (UnimplementedManagementServiceHandler) ResetCustomLoginTextToDefault(context.Context, *connect_go.Request[management.ResetCustomLoginTextsToDefaultRequest]) (*connect_go.Response[management.ResetCustomLoginTextsToDefaultResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ResetCustomLoginTextToDefault is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetOrgIDPByID(context.Context, *connect_go.Request[management.GetOrgIDPByIDRequest]) (*connect_go.Response[management.GetOrgIDPByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetOrgIDPByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListOrgIDPs(context.Context, *connect_go.Request[management.ListOrgIDPsRequest]) (*connect_go.Response[management.ListOrgIDPsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListOrgIDPs is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddOrgOIDCIDP(context.Context, *connect_go.Request[management.AddOrgOIDCIDPRequest]) (*connect_go.Response[management.AddOrgOIDCIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddOrgOIDCIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddOrgJWTIDP(context.Context, *connect_go.Request[management.AddOrgJWTIDPRequest]) (*connect_go.Response[management.AddOrgJWTIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddOrgJWTIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateOrgIDP(context.Context, *connect_go.Request[management.DeactivateOrgIDPRequest]) (*connect_go.Response[management.DeactivateOrgIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateOrgIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateOrgIDP(context.Context, *connect_go.Request[management.ReactivateOrgIDPRequest]) (*connect_go.Response[management.ReactivateOrgIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateOrgIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) RemoveOrgIDP(context.Context, *connect_go.Request[management.RemoveOrgIDPRequest]) (*connect_go.Response[management.RemoveOrgIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.RemoveOrgIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateOrgIDP(context.Context, *connect_go.Request[management.UpdateOrgIDPRequest]) (*connect_go.Response[management.UpdateOrgIDPResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateOrgIDP is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateOrgIDPOIDCConfig(context.Context, *connect_go.Request[management.UpdateOrgIDPOIDCConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPOIDCConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateOrgIDPOIDCConfig is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateOrgIDPJWTConfig(context.Context, *connect_go.Request[management.UpdateOrgIDPJWTConfigRequest]) (*connect_go.Response[management.UpdateOrgIDPJWTConfigResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateOrgIDPJWTConfig is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListProviders(context.Context, *connect_go.Request[management.ListProvidersRequest]) (*connect_go.Response[management.ListProvidersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListProviders is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetProviderByID(context.Context, *connect_go.Request[management.GetProviderByIDRequest]) (*connect_go.Response[management.GetProviderByIDResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetProviderByID is not implemented"))
}

func (UnimplementedManagementServiceHandler) AddLDAPProvider(context.Context, *connect_go.Request[management.AddLDAPProviderRequest]) (*connect_go.Response[management.AddLDAPProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.AddLDAPProvider is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateLDAPProvider(context.Context, *connect_go.Request[management.UpdateLDAPProviderRequest]) (*connect_go.Response[management.UpdateLDAPProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateLDAPProvider is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteProvider(context.Context, *connect_go.Request[management.DeleteProviderRequest]) (*connect_go.Response[management.DeleteProviderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeleteProvider is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListActions(context.Context, *connect_go.Request[management.ListActionsRequest]) (*connect_go.Response[management.ListActionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListActions is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetAction(context.Context, *connect_go.Request[management.GetActionRequest]) (*connect_go.Response[management.GetActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetAction is not implemented"))
}

func (UnimplementedManagementServiceHandler) CreateAction(context.Context, *connect_go.Request[management.CreateActionRequest]) (*connect_go.Response[management.CreateActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.CreateAction is not implemented"))
}

func (UnimplementedManagementServiceHandler) UpdateAction(context.Context, *connect_go.Request[management.UpdateActionRequest]) (*connect_go.Response[management.UpdateActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.UpdateAction is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeactivateAction(context.Context, *connect_go.Request[management.DeactivateActionRequest]) (*connect_go.Response[management.DeactivateActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeactivateAction is not implemented"))
}

func (UnimplementedManagementServiceHandler) ReactivateAction(context.Context, *connect_go.Request[management.ReactivateActionRequest]) (*connect_go.Response[management.ReactivateActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ReactivateAction is not implemented"))
}

func (UnimplementedManagementServiceHandler) DeleteAction(context.Context, *connect_go.Request[management.DeleteActionRequest]) (*connect_go.Response[management.DeleteActionResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.DeleteAction is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListFlowTypes(context.Context, *connect_go.Request[management.ListFlowTypesRequest]) (*connect_go.Response[management.ListFlowTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListFlowTypes is not implemented"))
}

func (UnimplementedManagementServiceHandler) ListFlowTriggerTypes(context.Context, *connect_go.Request[management.ListFlowTriggerTypesRequest]) (*connect_go.Response[management.ListFlowTriggerTypesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ListFlowTriggerTypes is not implemented"))
}

func (UnimplementedManagementServiceHandler) GetFlow(context.Context, *connect_go.Request[management.GetFlowRequest]) (*connect_go.Response[management.GetFlowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.GetFlow is not implemented"))
}

func (UnimplementedManagementServiceHandler) ClearFlow(context.Context, *connect_go.Request[management.ClearFlowRequest]) (*connect_go.Response[management.ClearFlowResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.ClearFlow is not implemented"))
}

func (UnimplementedManagementServiceHandler) SetTriggerActions(context.Context, *connect_go.Request[management.SetTriggerActionsRequest]) (*connect_go.Response[management.SetTriggerActionsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("zitadel.management.v1.ManagementService.SetTriggerActions is not implemented"))
}
