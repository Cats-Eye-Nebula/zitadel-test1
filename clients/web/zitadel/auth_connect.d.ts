// @generated by protoc-gen-connect-es v0.7.0
// @generated from file zitadel/auth.proto (package zitadel.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddMyAuthFactorOTPRequest, AddMyAuthFactorOTPResponse, AddMyAuthFactorU2FRequest, AddMyAuthFactorU2FResponse, AddMyPasswordlessLinkRequest, AddMyPasswordlessLinkResponse, AddMyPasswordlessRequest, AddMyPasswordlessResponse, GetMyEmailRequest, GetMyEmailResponse, GetMyLabelPolicyRequest, GetMyLabelPolicyResponse, GetMyLoginPolicyRequest, GetMyLoginPolicyResponse, GetMyMetadataRequest, GetMyMetadataResponse, GetMyPasswordComplexityPolicyRequest, GetMyPasswordComplexityPolicyResponse, GetMyPhoneRequest, GetMyPhoneResponse, GetMyPrivacyPolicyRequest, GetMyPrivacyPolicyResponse, GetMyProfileRequest, GetMyProfileResponse, GetMyUserRequest, GetMyUserResponse, GetSupportedLanguagesRequest, GetSupportedLanguagesResponse, HealthzRequest, HealthzResponse, ListMyAuthFactorsRequest, ListMyAuthFactorsResponse, ListMyLinkedIDPsRequest, ListMyLinkedIDPsResponse, ListMyMembershipsRequest, ListMyMembershipsResponse, ListMyMetadataRequest, ListMyMetadataResponse, ListMyPasswordlessRequest, ListMyPasswordlessResponse, ListMyProjectOrgsRequest, ListMyProjectOrgsResponse, ListMyProjectPermissionsRequest, ListMyProjectPermissionsResponse, ListMyRefreshTokensRequest, ListMyRefreshTokensResponse, ListMyUserChangesRequest, ListMyUserChangesResponse, ListMyUserGrantsRequest, ListMyUserGrantsResponse, ListMyUserSessionsRequest, ListMyUserSessionsResponse, ListMyZitadelPermissionsRequest, ListMyZitadelPermissionsResponse, RemoveMyAuthFactorOTPRequest, RemoveMyAuthFactorOTPResponse, RemoveMyAuthFactorU2FRequest, RemoveMyAuthFactorU2FResponse, RemoveMyAvatarRequest, RemoveMyAvatarResponse, RemoveMyLinkedIDPRequest, RemoveMyLinkedIDPResponse, RemoveMyPasswordlessRequest, RemoveMyPasswordlessResponse, RemoveMyPhoneRequest, RemoveMyPhoneResponse, RemoveMyUserRequest, RemoveMyUserResponse, ResendMyEmailVerificationRequest, ResendMyEmailVerificationResponse, ResendMyPhoneVerificationRequest, ResendMyPhoneVerificationResponse, RevokeAllMyRefreshTokensRequest, RevokeAllMyRefreshTokensResponse, RevokeMyRefreshTokenRequest, RevokeMyRefreshTokenResponse, SendMyPasswordlessLinkRequest, SendMyPasswordlessLinkResponse, SetMyEmailRequest, SetMyEmailResponse, SetMyPhoneRequest, SetMyPhoneResponse, UpdateMyPasswordRequest, UpdateMyPasswordResponse, UpdateMyProfileRequest, UpdateMyProfileResponse, UpdateMyUserNameRequest, UpdateMyUserNameResponse, VerifyMyAuthFactorOTPRequest, VerifyMyAuthFactorOTPResponse, VerifyMyAuthFactorU2FRequest, VerifyMyAuthFactorU2FResponse, VerifyMyEmailRequest, VerifyMyEmailResponse, VerifyMyPasswordlessRequest, VerifyMyPasswordlessResponse, VerifyMyPhoneRequest, VerifyMyPhoneResponse } from "./auth_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service zitadel.auth.v1.AuthService
 */
export declare const AuthService: {
  readonly typeName: "zitadel.auth.v1.AuthService",
  readonly methods: {
    /**
     * @generated from rpc zitadel.auth.v1.AuthService.Healthz
     */
    readonly healthz: {
      readonly name: "Healthz",
      readonly I: typeof HealthzRequest,
      readonly O: typeof HealthzResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default languages
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetSupportedLanguages
     */
    readonly getSupportedLanguages: {
      readonly name: "GetSupportedLanguages",
      readonly I: typeof GetSupportedLanguagesRequest,
      readonly O: typeof GetSupportedLanguagesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns my full blown user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyUser
     */
    readonly getMyUser: {
      readonly name: "GetMyUser",
      readonly I: typeof GetMyUserRequest,
      readonly O: typeof GetMyUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to deleted
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyUser
     */
    readonly removeMyUser: {
      readonly name: "RemoveMyUser",
      readonly I: typeof RemoveMyUserRequest,
      readonly O: typeof RemoveMyUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the history of the authorized user (each event)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyUserChanges
     */
    readonly listMyUserChanges: {
      readonly name: "ListMyUserChanges",
      readonly I: typeof ListMyUserChangesRequest,
      readonly O: typeof ListMyUserChangesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the user sessions of the authorized user of the current useragent
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyUserSessions
     */
    readonly listMyUserSessions: {
      readonly name: "ListMyUserSessions",
      readonly I: typeof ListMyUserSessionsRequest,
      readonly O: typeof ListMyUserSessionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the user metadata of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyMetadata
     */
    readonly listMyMetadata: {
      readonly name: "ListMyMetadata",
      readonly I: typeof ListMyMetadataRequest,
      readonly O: typeof ListMyMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the user metadata by key of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyMetadata
     */
    readonly getMyMetadata: {
      readonly name: "GetMyMetadata",
      readonly I: typeof GetMyMetadataRequest,
      readonly O: typeof GetMyMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the refresh tokens of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyRefreshTokens
     */
    readonly listMyRefreshTokens: {
      readonly name: "ListMyRefreshTokens",
      readonly I: typeof ListMyRefreshTokensRequest,
      readonly O: typeof ListMyRefreshTokensResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Revokes a single refresh token of the authorized user by its (token) id
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RevokeMyRefreshToken
     */
    readonly revokeMyRefreshToken: {
      readonly name: "RevokeMyRefreshToken",
      readonly I: typeof RevokeMyRefreshTokenRequest,
      readonly O: typeof RevokeMyRefreshTokenResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Revokes all refresh tokens of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RevokeAllMyRefreshTokens
     */
    readonly revokeAllMyRefreshTokens: {
      readonly name: "RevokeAllMyRefreshTokens",
      readonly I: typeof RevokeAllMyRefreshTokensRequest,
      readonly O: typeof RevokeAllMyRefreshTokensResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change the user name of the authorize user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.UpdateMyUserName
     */
    readonly updateMyUserName: {
      readonly name: "UpdateMyUserName",
      readonly I: typeof UpdateMyUserNameRequest,
      readonly O: typeof UpdateMyUserNameResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the password complexity policy of my organisation
     * This policy defines how the password should look
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyPasswordComplexityPolicy
     */
    readonly getMyPasswordComplexityPolicy: {
      readonly name: "GetMyPasswordComplexityPolicy",
      readonly I: typeof GetMyPasswordComplexityPolicyRequest,
      readonly O: typeof GetMyPasswordComplexityPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change the password of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.UpdateMyPassword
     */
    readonly updateMyPassword: {
      readonly name: "UpdateMyPassword",
      readonly I: typeof UpdateMyPasswordRequest,
      readonly O: typeof UpdateMyPasswordResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the profile information of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyProfile
     */
    readonly getMyProfile: {
      readonly name: "GetMyProfile",
      readonly I: typeof GetMyProfileRequest,
      readonly O: typeof GetMyProfileResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the profile information of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.UpdateMyProfile
     */
    readonly updateMyProfile: {
      readonly name: "UpdateMyProfile",
      readonly I: typeof UpdateMyProfileRequest,
      readonly O: typeof UpdateMyProfileResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the email address of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyEmail
     */
    readonly getMyEmail: {
      readonly name: "GetMyEmail",
      readonly I: typeof GetMyEmailRequest,
      readonly O: typeof GetMyEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the email address of the authorized user
     * An email is sent to the given address, to verify it
     *
     * @generated from rpc zitadel.auth.v1.AuthService.SetMyEmail
     */
    readonly setMyEmail: {
      readonly name: "SetMyEmail",
      readonly I: typeof SetMyEmailRequest,
      readonly O: typeof SetMyEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the email address to verified
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyEmail
     */
    readonly verifyMyEmail: {
      readonly name: "VerifyMyEmail",
      readonly I: typeof VerifyMyEmailRequest,
      readonly O: typeof VerifyMyEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sends a new email to the last given address to verify it
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ResendMyEmailVerification
     */
    readonly resendMyEmailVerification: {
      readonly name: "ResendMyEmailVerification",
      readonly I: typeof ResendMyEmailVerificationRequest,
      readonly O: typeof ResendMyEmailVerificationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the phone number of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyPhone
     */
    readonly getMyPhone: {
      readonly name: "GetMyPhone",
      readonly I: typeof GetMyPhoneRequest,
      readonly O: typeof GetMyPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the phone number of the authorized user
     * An sms is sent to the number with a verification code
     *
     * @generated from rpc zitadel.auth.v1.AuthService.SetMyPhone
     */
    readonly setMyPhone: {
      readonly name: "SetMyPhone",
      readonly I: typeof SetMyPhoneRequest,
      readonly O: typeof SetMyPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the phone number to verified
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyPhone
     */
    readonly verifyMyPhone: {
      readonly name: "VerifyMyPhone",
      readonly I: typeof VerifyMyPhoneRequest,
      readonly O: typeof VerifyMyPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Resends a sms to the last given phone number, to verify it
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ResendMyPhoneVerification
     */
    readonly resendMyPhoneVerification: {
      readonly name: "ResendMyPhoneVerification",
      readonly I: typeof ResendMyPhoneVerificationRequest,
      readonly O: typeof ResendMyPhoneVerificationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed the phone number of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyPhone
     */
    readonly removeMyPhone: {
      readonly name: "RemoveMyPhone",
      readonly I: typeof RemoveMyPhoneRequest,
      readonly O: typeof RemoveMyPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove my avatar
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyAvatar
     */
    readonly removeMyAvatar: {
      readonly name: "RemoveMyAvatar",
      readonly I: typeof RemoveMyAvatarRequest,
      readonly O: typeof RemoveMyAvatarResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a list of all linked identity providers (social logins, eg. Google, Microsoft, AD, etc.)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyLinkedIDPs
     */
    readonly listMyLinkedIDPs: {
      readonly name: "ListMyLinkedIDPs",
      readonly I: typeof ListMyLinkedIDPsRequest,
      readonly O: typeof ListMyLinkedIDPsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a linked identity provider (social logins, eg. Google, Microsoft, AD, etc.)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyLinkedIDP
     */
    readonly removeMyLinkedIDP: {
      readonly name: "RemoveMyLinkedIDP",
      readonly I: typeof RemoveMyLinkedIDPRequest,
      readonly O: typeof RemoveMyLinkedIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all configured authentication factors (second and multi)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyAuthFactors
     */
    readonly listMyAuthFactors: {
      readonly name: "ListMyAuthFactors",
      readonly I: typeof ListMyAuthFactorsRequest,
      readonly O: typeof ListMyAuthFactorsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new OTP (One Time Password) Second Factor to the authorized user
     * Only one OTP can be configured per user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyAuthFactorOTP
     */
    readonly addMyAuthFactorOTP: {
      readonly name: "AddMyAuthFactorOTP",
      readonly I: typeof AddMyAuthFactorOTPRequest,
      readonly O: typeof AddMyAuthFactorOTPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verify the last added OTP (One Time Password)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyAuthFactorOTP
     */
    readonly verifyMyAuthFactorOTP: {
      readonly name: "VerifyMyAuthFactorOTP",
      readonly I: typeof VerifyMyAuthFactorOTPRequest,
      readonly O: typeof VerifyMyAuthFactorOTPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed the configured OTP (One Time Password) Factor
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyAuthFactorOTP
     */
    readonly removeMyAuthFactorOTP: {
      readonly name: "RemoveMyAuthFactorOTP",
      readonly I: typeof RemoveMyAuthFactorOTPRequest,
      readonly O: typeof RemoveMyAuthFactorOTPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new U2F (Universal Second Factor) to the authorized user
     * Multiple U2Fs can be configured
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyAuthFactorU2F
     */
    readonly addMyAuthFactorU2F: {
      readonly name: "AddMyAuthFactorU2F",
      readonly I: typeof AddMyAuthFactorU2FRequest,
      readonly O: typeof AddMyAuthFactorU2FResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verifies the last added U2F (Universal Second Factor) of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyAuthFactorU2F
     */
    readonly verifyMyAuthFactorU2F: {
      readonly name: "VerifyMyAuthFactorU2F",
      readonly I: typeof VerifyMyAuthFactorU2FRequest,
      readonly O: typeof VerifyMyAuthFactorU2FResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the U2F Authentication from the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyAuthFactorU2F
     */
    readonly removeMyAuthFactorU2F: {
      readonly name: "RemoveMyAuthFactorU2F",
      readonly I: typeof RemoveMyAuthFactorU2FRequest,
      readonly O: typeof RemoveMyAuthFactorU2FResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all configured passwordless authenticators of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyPasswordless
     */
    readonly listMyPasswordless: {
      readonly name: "ListMyPasswordless",
      readonly I: typeof ListMyPasswordlessRequest,
      readonly O: typeof ListMyPasswordlessResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator to the authorized user
     * Multiple passwordless authentications can be configured
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyPasswordless
     */
    readonly addMyPasswordless: {
      readonly name: "AddMyPasswordless",
      readonly I: typeof AddMyPasswordlessRequest,
      readonly O: typeof AddMyPasswordlessResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator link to the authorized user and returns it directly
     * This link enables the user to register a new device if current passwordless devices are all platform authenticators
     * e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyPasswordlessLink
     */
    readonly addMyPasswordlessLink: {
      readonly name: "AddMyPasswordlessLink",
      readonly I: typeof AddMyPasswordlessLinkRequest,
      readonly O: typeof AddMyPasswordlessLinkResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator link to the authorized user and sends it to the registered email address
     * This link enables the user to register a new device if current passwordless devices are all platform authenticators
     * e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
     *
     * @generated from rpc zitadel.auth.v1.AuthService.SendMyPasswordlessLink
     */
    readonly sendMyPasswordlessLink: {
      readonly name: "SendMyPasswordlessLink",
      readonly I: typeof SendMyPasswordlessLinkRequest,
      readonly O: typeof SendMyPasswordlessLinkResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Verifies the last added passwordless configuration
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyPasswordless
     */
    readonly verifyMyPasswordless: {
      readonly name: "VerifyMyPasswordless",
      readonly I: typeof VerifyMyPasswordlessRequest,
      readonly O: typeof VerifyMyPasswordlessResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the passwordless configuration from the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyPasswordless
     */
    readonly removeMyPasswordless: {
      readonly name: "RemoveMyPasswordless",
      readonly I: typeof RemoveMyPasswordlessRequest,
      readonly O: typeof RemoveMyPasswordlessResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all user grants (authorizations) of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyUserGrants
     */
    readonly listMyUserGrants: {
      readonly name: "ListMyUserGrants",
      readonly I: typeof ListMyUserGrantsRequest,
      readonly O: typeof ListMyUserGrantsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a list of organisations where the authorized user has a user grant (authorization) in the context of the requested project
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyProjectOrgs
     */
    readonly listMyProjectOrgs: {
      readonly name: "ListMyProjectOrgs",
      readonly I: typeof ListMyProjectOrgsRequest,
      readonly O: typeof ListMyProjectOrgsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the permissions the authorized user has in ZITADEL based on his manager roles (e.g ORG_OWNER)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyZitadelPermissions
     */
    readonly listMyZitadelPermissions: {
      readonly name: "ListMyZitadelPermissions",
      readonly I: typeof ListMyZitadelPermissionsRequest,
      readonly O: typeof ListMyZitadelPermissionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a list of roles for the authorized user and project
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyProjectPermissions
     */
    readonly listMyProjectPermissions: {
      readonly name: "ListMyProjectPermissions",
      readonly I: typeof ListMyProjectPermissionsRequest,
      readonly O: typeof ListMyProjectPermissionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Show all the permissions my user has in ZITADEL (ZITADEL Manager)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyMemberships
     */
    readonly listMyMemberships: {
      readonly name: "ListMyMemberships",
      readonly I: typeof ListMyMembershipsRequest,
      readonly O: typeof ListMyMembershipsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the label policy of the current organisation
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyLabelPolicy
     */
    readonly getMyLabelPolicy: {
      readonly name: "GetMyLabelPolicy",
      readonly I: typeof GetMyLabelPolicyRequest,
      readonly O: typeof GetMyLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the privacy policy of the current organisation
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyPrivacyPolicy
     */
    readonly getMyPrivacyPolicy: {
      readonly name: "GetMyPrivacyPolicy",
      readonly I: typeof GetMyPrivacyPolicyRequest,
      readonly O: typeof GetMyPrivacyPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the login policy of the current organisation
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyLoginPolicy
     */
    readonly getMyLoginPolicy: {
      readonly name: "GetMyLoginPolicy",
      readonly I: typeof GetMyLoginPolicyRequest,
      readonly O: typeof GetMyLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

