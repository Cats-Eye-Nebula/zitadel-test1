// @generated by protoc-gen-connect-es v0.7.0
// @generated from file zitadel/auth.proto (package zitadel.auth.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { AddMyAuthFactorOTPRequest, AddMyAuthFactorOTPResponse, AddMyAuthFactorU2FRequest, AddMyAuthFactorU2FResponse, AddMyPasswordlessLinkRequest, AddMyPasswordlessLinkResponse, AddMyPasswordlessRequest, AddMyPasswordlessResponse, GetMyEmailRequest, GetMyEmailResponse, GetMyLabelPolicyRequest, GetMyLabelPolicyResponse, GetMyLoginPolicyRequest, GetMyLoginPolicyResponse, GetMyMetadataRequest, GetMyMetadataResponse, GetMyPasswordComplexityPolicyRequest, GetMyPasswordComplexityPolicyResponse, GetMyPhoneRequest, GetMyPhoneResponse, GetMyPrivacyPolicyRequest, GetMyPrivacyPolicyResponse, GetMyProfileRequest, GetMyProfileResponse, GetMyUserRequest, GetMyUserResponse, GetSupportedLanguagesRequest, GetSupportedLanguagesResponse, HealthzRequest, HealthzResponse, ListMyAuthFactorsRequest, ListMyAuthFactorsResponse, ListMyLinkedIDPsRequest, ListMyLinkedIDPsResponse, ListMyMembershipsRequest, ListMyMembershipsResponse, ListMyMetadataRequest, ListMyMetadataResponse, ListMyPasswordlessRequest, ListMyPasswordlessResponse, ListMyProjectOrgsRequest, ListMyProjectOrgsResponse, ListMyProjectPermissionsRequest, ListMyProjectPermissionsResponse, ListMyRefreshTokensRequest, ListMyRefreshTokensResponse, ListMyUserChangesRequest, ListMyUserChangesResponse, ListMyUserGrantsRequest, ListMyUserGrantsResponse, ListMyUserSessionsRequest, ListMyUserSessionsResponse, ListMyZitadelPermissionsRequest, ListMyZitadelPermissionsResponse, RemoveMyAuthFactorOTPRequest, RemoveMyAuthFactorOTPResponse, RemoveMyAuthFactorU2FRequest, RemoveMyAuthFactorU2FResponse, RemoveMyAvatarRequest, RemoveMyAvatarResponse, RemoveMyLinkedIDPRequest, RemoveMyLinkedIDPResponse, RemoveMyPasswordlessRequest, RemoveMyPasswordlessResponse, RemoveMyPhoneRequest, RemoveMyPhoneResponse, RemoveMyUserRequest, RemoveMyUserResponse, ResendMyEmailVerificationRequest, ResendMyEmailVerificationResponse, ResendMyPhoneVerificationRequest, ResendMyPhoneVerificationResponse, RevokeAllMyRefreshTokensRequest, RevokeAllMyRefreshTokensResponse, RevokeMyRefreshTokenRequest, RevokeMyRefreshTokenResponse, SendMyPasswordlessLinkRequest, SendMyPasswordlessLinkResponse, SetMyEmailRequest, SetMyEmailResponse, SetMyPhoneRequest, SetMyPhoneResponse, UpdateMyPasswordRequest, UpdateMyPasswordResponse, UpdateMyProfileRequest, UpdateMyProfileResponse, UpdateMyUserNameRequest, UpdateMyUserNameResponse, VerifyMyAuthFactorOTPRequest, VerifyMyAuthFactorOTPResponse, VerifyMyAuthFactorU2FRequest, VerifyMyAuthFactorU2FResponse, VerifyMyEmailRequest, VerifyMyEmailResponse, VerifyMyPasswordlessRequest, VerifyMyPasswordlessResponse, VerifyMyPhoneRequest, VerifyMyPhoneResponse } from "./auth_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service zitadel.auth.v1.AuthService
 */
export const AuthService = {
  typeName: "zitadel.auth.v1.AuthService",
  methods: {
    /**
     * @generated from rpc zitadel.auth.v1.AuthService.Healthz
     */
    healthz: {
      name: "Healthz",
      I: HealthzRequest,
      O: HealthzResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the default languages
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetSupportedLanguages
     */
    getSupportedLanguages: {
      name: "GetSupportedLanguages",
      I: GetSupportedLanguagesRequest,
      O: GetSupportedLanguagesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns my full blown user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyUser
     */
    getMyUser: {
      name: "GetMyUser",
      I: GetMyUserRequest,
      O: GetMyUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to deleted
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyUser
     */
    removeMyUser: {
      name: "RemoveMyUser",
      I: RemoveMyUserRequest,
      O: RemoveMyUserResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the history of the authorized user (each event)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyUserChanges
     */
    listMyUserChanges: {
      name: "ListMyUserChanges",
      I: ListMyUserChangesRequest,
      O: ListMyUserChangesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the user sessions of the authorized user of the current useragent
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyUserSessions
     */
    listMyUserSessions: {
      name: "ListMyUserSessions",
      I: ListMyUserSessionsRequest,
      O: ListMyUserSessionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the user metadata of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyMetadata
     */
    listMyMetadata: {
      name: "ListMyMetadata",
      I: ListMyMetadataRequest,
      O: ListMyMetadataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the user metadata by key of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyMetadata
     */
    getMyMetadata: {
      name: "GetMyMetadata",
      I: GetMyMetadataRequest,
      O: GetMyMetadataResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the refresh tokens of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyRefreshTokens
     */
    listMyRefreshTokens: {
      name: "ListMyRefreshTokens",
      I: ListMyRefreshTokensRequest,
      O: ListMyRefreshTokensResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Revokes a single refresh token of the authorized user by its (token) id
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RevokeMyRefreshToken
     */
    revokeMyRefreshToken: {
      name: "RevokeMyRefreshToken",
      I: RevokeMyRefreshTokenRequest,
      O: RevokeMyRefreshTokenResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Revokes all refresh tokens of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RevokeAllMyRefreshTokens
     */
    revokeAllMyRefreshTokens: {
      name: "RevokeAllMyRefreshTokens",
      I: RevokeAllMyRefreshTokensRequest,
      O: RevokeAllMyRefreshTokensResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Change the user name of the authorize user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.UpdateMyUserName
     */
    updateMyUserName: {
      name: "UpdateMyUserName",
      I: UpdateMyUserNameRequest,
      O: UpdateMyUserNameResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the password complexity policy of my organisation
     * This policy defines how the password should look
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyPasswordComplexityPolicy
     */
    getMyPasswordComplexityPolicy: {
      name: "GetMyPasswordComplexityPolicy",
      I: GetMyPasswordComplexityPolicyRequest,
      O: GetMyPasswordComplexityPolicyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Change the password of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.UpdateMyPassword
     */
    updateMyPassword: {
      name: "UpdateMyPassword",
      I: UpdateMyPasswordRequest,
      O: UpdateMyPasswordResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the profile information of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyProfile
     */
    getMyProfile: {
      name: "GetMyProfile",
      I: GetMyProfileRequest,
      O: GetMyProfileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Changes the profile information of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.UpdateMyProfile
     */
    updateMyProfile: {
      name: "UpdateMyProfile",
      I: UpdateMyProfileRequest,
      O: UpdateMyProfileResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the email address of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyEmail
     */
    getMyEmail: {
      name: "GetMyEmail",
      I: GetMyEmailRequest,
      O: GetMyEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Changes the email address of the authorized user
     * An email is sent to the given address, to verify it
     *
     * @generated from rpc zitadel.auth.v1.AuthService.SetMyEmail
     */
    setMyEmail: {
      name: "SetMyEmail",
      I: SetMyEmailRequest,
      O: SetMyEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Sets the email address to verified
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyEmail
     */
    verifyMyEmail: {
      name: "VerifyMyEmail",
      I: VerifyMyEmailRequest,
      O: VerifyMyEmailResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Sends a new email to the last given address to verify it
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ResendMyEmailVerification
     */
    resendMyEmailVerification: {
      name: "ResendMyEmailVerification",
      I: ResendMyEmailVerificationRequest,
      O: ResendMyEmailVerificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the phone number of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyPhone
     */
    getMyPhone: {
      name: "GetMyPhone",
      I: GetMyPhoneRequest,
      O: GetMyPhoneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Sets the phone number of the authorized user
     * An sms is sent to the number with a verification code
     *
     * @generated from rpc zitadel.auth.v1.AuthService.SetMyPhone
     */
    setMyPhone: {
      name: "SetMyPhone",
      I: SetMyPhoneRequest,
      O: SetMyPhoneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Sets the phone number to verified
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyPhone
     */
    verifyMyPhone: {
      name: "VerifyMyPhone",
      I: VerifyMyPhoneRequest,
      O: VerifyMyPhoneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Resends a sms to the last given phone number, to verify it
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ResendMyPhoneVerification
     */
    resendMyPhoneVerification: {
      name: "ResendMyPhoneVerification",
      I: ResendMyPhoneVerificationRequest,
      O: ResendMyPhoneVerificationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removed the phone number of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyPhone
     */
    removeMyPhone: {
      name: "RemoveMyPhone",
      I: RemoveMyPhoneRequest,
      O: RemoveMyPhoneResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Remove my avatar
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyAvatar
     */
    removeMyAvatar: {
      name: "RemoveMyAvatar",
      I: RemoveMyAvatarRequest,
      O: RemoveMyAvatarResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a list of all linked identity providers (social logins, eg. Google, Microsoft, AD, etc.)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyLinkedIDPs
     */
    listMyLinkedIDPs: {
      name: "ListMyLinkedIDPs",
      I: ListMyLinkedIDPsRequest,
      O: ListMyLinkedIDPsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes a linked identity provider (social logins, eg. Google, Microsoft, AD, etc.)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyLinkedIDP
     */
    removeMyLinkedIDP: {
      name: "RemoveMyLinkedIDP",
      I: RemoveMyLinkedIDPRequest,
      O: RemoveMyLinkedIDPResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns all configured authentication factors (second and multi)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyAuthFactors
     */
    listMyAuthFactors: {
      name: "ListMyAuthFactors",
      I: ListMyAuthFactorsRequest,
      O: ListMyAuthFactorsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new OTP (One Time Password) Second Factor to the authorized user
     * Only one OTP can be configured per user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyAuthFactorOTP
     */
    addMyAuthFactorOTP: {
      name: "AddMyAuthFactorOTP",
      I: AddMyAuthFactorOTPRequest,
      O: AddMyAuthFactorOTPResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verify the last added OTP (One Time Password)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyAuthFactorOTP
     */
    verifyMyAuthFactorOTP: {
      name: "VerifyMyAuthFactorOTP",
      I: VerifyMyAuthFactorOTPRequest,
      O: VerifyMyAuthFactorOTPResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removed the configured OTP (One Time Password) Factor
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyAuthFactorOTP
     */
    removeMyAuthFactorOTP: {
      name: "RemoveMyAuthFactorOTP",
      I: RemoveMyAuthFactorOTPRequest,
      O: RemoveMyAuthFactorOTPResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new U2F (Universal Second Factor) to the authorized user
     * Multiple U2Fs can be configured
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyAuthFactorU2F
     */
    addMyAuthFactorU2F: {
      name: "AddMyAuthFactorU2F",
      I: AddMyAuthFactorU2FRequest,
      O: AddMyAuthFactorU2FResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verifies the last added U2F (Universal Second Factor) of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyAuthFactorU2F
     */
    verifyMyAuthFactorU2F: {
      name: "VerifyMyAuthFactorU2F",
      I: VerifyMyAuthFactorU2FRequest,
      O: VerifyMyAuthFactorU2FResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes the U2F Authentication from the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyAuthFactorU2F
     */
    removeMyAuthFactorU2F: {
      name: "RemoveMyAuthFactorU2F",
      I: RemoveMyAuthFactorU2FRequest,
      O: RemoveMyAuthFactorU2FResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns all configured passwordless authenticators of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyPasswordless
     */
    listMyPasswordless: {
      name: "ListMyPasswordless",
      I: ListMyPasswordlessRequest,
      O: ListMyPasswordlessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator to the authorized user
     * Multiple passwordless authentications can be configured
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyPasswordless
     */
    addMyPasswordless: {
      name: "AddMyPasswordless",
      I: AddMyPasswordlessRequest,
      O: AddMyPasswordlessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator link to the authorized user and returns it directly
     * This link enables the user to register a new device if current passwordless devices are all platform authenticators
     * e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
     *
     * @generated from rpc zitadel.auth.v1.AuthService.AddMyPasswordlessLink
     */
    addMyPasswordlessLink: {
      name: "AddMyPasswordlessLink",
      I: AddMyPasswordlessLinkRequest,
      O: AddMyPasswordlessLinkResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator link to the authorized user and sends it to the registered email address
     * This link enables the user to register a new device if current passwordless devices are all platform authenticators
     * e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
     *
     * @generated from rpc zitadel.auth.v1.AuthService.SendMyPasswordlessLink
     */
    sendMyPasswordlessLink: {
      name: "SendMyPasswordlessLink",
      I: SendMyPasswordlessLinkRequest,
      O: SendMyPasswordlessLinkResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Verifies the last added passwordless configuration
     *
     * @generated from rpc zitadel.auth.v1.AuthService.VerifyMyPasswordless
     */
    verifyMyPasswordless: {
      name: "VerifyMyPasswordless",
      I: VerifyMyPasswordlessRequest,
      O: VerifyMyPasswordlessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Removes the passwordless configuration from the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.RemoveMyPasswordless
     */
    removeMyPasswordless: {
      name: "RemoveMyPasswordless",
      I: RemoveMyPasswordlessRequest,
      O: RemoveMyPasswordlessResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns all user grants (authorizations) of the authorized user
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyUserGrants
     */
    listMyUserGrants: {
      name: "ListMyUserGrants",
      I: ListMyUserGrantsRequest,
      O: ListMyUserGrantsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a list of organisations where the authorized user has a user grant (authorization) in the context of the requested project
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyProjectOrgs
     */
    listMyProjectOrgs: {
      name: "ListMyProjectOrgs",
      I: ListMyProjectOrgsRequest,
      O: ListMyProjectOrgsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the permissions the authorized user has in ZITADEL based on his manager roles (e.g ORG_OWNER)
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyZitadelPermissions
     */
    listMyZitadelPermissions: {
      name: "ListMyZitadelPermissions",
      I: ListMyZitadelPermissionsRequest,
      O: ListMyZitadelPermissionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns a list of roles for the authorized user and project
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyProjectPermissions
     */
    listMyProjectPermissions: {
      name: "ListMyProjectPermissions",
      I: ListMyProjectPermissionsRequest,
      O: ListMyProjectPermissionsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Show all the permissions my user has in ZITADEL (ZITADEL Manager)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.auth.v1.AuthService.ListMyMemberships
     */
    listMyMemberships: {
      name: "ListMyMemberships",
      I: ListMyMembershipsRequest,
      O: ListMyMembershipsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the label policy of the current organisation
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyLabelPolicy
     */
    getMyLabelPolicy: {
      name: "GetMyLabelPolicy",
      I: GetMyLabelPolicyRequest,
      O: GetMyLabelPolicyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the privacy policy of the current organisation
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyPrivacyPolicy
     */
    getMyPrivacyPolicy: {
      name: "GetMyPrivacyPolicy",
      I: GetMyPrivacyPolicyRequest,
      O: GetMyPrivacyPolicyResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Returns the login policy of the current organisation
     *
     * @generated from rpc zitadel.auth.v1.AuthService.GetMyLoginPolicy
     */
    getMyLoginPolicy: {
      name: "GetMyLoginPolicy",
      I: GetMyLoginPolicyRequest,
      O: GetMyLoginPolicyResponse,
      kind: MethodKind.Unary,
    },
  }
};

