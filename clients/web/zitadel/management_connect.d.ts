// @generated by protoc-gen-connect-es v0.7.0
// @generated from file zitadel/management.proto (package zitadel.management.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { ActivateCustomLabelPolicyRequest, ActivateCustomLabelPolicyResponse, AddAPIAppRequest, AddAPIAppResponse, AddAppKeyRequest, AddAppKeyResponse, AddCustomLabelPolicyRequest, AddCustomLabelPolicyResponse, AddCustomLockoutPolicyRequest, AddCustomLockoutPolicyResponse, AddCustomLoginPolicyRequest, AddCustomLoginPolicyResponse, AddCustomNotificationPolicyRequest, AddCustomNotificationPolicyResponse, AddCustomPasswordAgePolicyRequest, AddCustomPasswordAgePolicyResponse, AddCustomPasswordComplexityPolicyRequest, AddCustomPasswordComplexityPolicyResponse, AddCustomPrivacyPolicyRequest, AddCustomPrivacyPolicyResponse, AddHumanUserRequest, AddHumanUserResponse, AddIDPToLoginPolicyRequest, AddIDPToLoginPolicyResponse, AddLDAPProviderRequest, AddLDAPProviderResponse, AddMachineKeyRequest, AddMachineKeyResponse, AddMachineUserRequest, AddMachineUserResponse, AddMultiFactorToLoginPolicyRequest, AddMultiFactorToLoginPolicyResponse, AddOIDCAppRequest, AddOIDCAppResponse, AddOrgDomainRequest, AddOrgDomainResponse, AddOrgJWTIDPRequest, AddOrgJWTIDPResponse, AddOrgMemberRequest, AddOrgMemberResponse, AddOrgOIDCIDPRequest, AddOrgOIDCIDPResponse, AddOrgRequest, AddOrgResponse, AddPasswordlessRegistrationRequest, AddPasswordlessRegistrationResponse, AddPersonalAccessTokenRequest, AddPersonalAccessTokenResponse, AddProjectGrantMemberRequest, AddProjectGrantMemberResponse, AddProjectGrantRequest, AddProjectGrantResponse, AddProjectMemberRequest, AddProjectMemberResponse, AddProjectRequest, AddProjectResponse, AddProjectRoleRequest, AddProjectRoleResponse, AddSAMLAppRequest, AddSAMLAppResponse, AddSecondFactorToLoginPolicyRequest, AddSecondFactorToLoginPolicyResponse, AddUserGrantRequest, AddUserGrantResponse, BulkAddProjectRolesRequest, BulkAddProjectRolesResponse, BulkRemoveOrgMetadataRequest, BulkRemoveOrgMetadataResponse, BulkRemoveUserGrantRequest, BulkRemoveUserGrantResponse, BulkRemoveUserMetadataRequest, BulkRemoveUserMetadataResponse, BulkSetOrgMetadataRequest, BulkSetOrgMetadataResponse, BulkSetUserMetadataRequest, BulkSetUserMetadataResponse, ClearFlowRequest, ClearFlowResponse, CreateActionRequest, CreateActionResponse, DeactivateActionRequest, DeactivateActionResponse, DeactivateAppRequest, DeactivateAppResponse, DeactivateOrgIDPRequest, DeactivateOrgIDPResponse, DeactivateOrgRequest, DeactivateOrgResponse, DeactivateProjectGrantRequest, DeactivateProjectGrantResponse, DeactivateProjectRequest, DeactivateProjectResponse, DeactivateUserGrantRequest, DeactivateUserGrantResponse, DeactivateUserRequest, DeactivateUserResponse, DeleteActionRequest, DeleteActionResponse, DeleteProviderRequest, DeleteProviderResponse, GenerateMachineSecretRequest, GenerateMachineSecretResponse, GenerateOrgDomainValidationRequest, GenerateOrgDomainValidationResponse, GetActionRequest, GetActionResponse, GetAppByIDRequest, GetAppByIDResponse, GetAppKeyRequest, GetAppKeyResponse, GetCustomDomainClaimedMessageTextRequest, GetCustomDomainClaimedMessageTextResponse, GetCustomInitMessageTextRequest, GetCustomInitMessageTextResponse, GetCustomLoginTextsRequest, GetCustomLoginTextsResponse, GetCustomPasswordChangeMessageTextRequest, GetCustomPasswordChangeMessageTextResponse, GetCustomPasswordlessRegistrationMessageTextRequest, GetCustomPasswordlessRegistrationMessageTextResponse, GetCustomPasswordResetMessageTextRequest, GetCustomPasswordResetMessageTextResponse, GetCustomVerifyEmailMessageTextRequest, GetCustomVerifyEmailMessageTextResponse, GetCustomVerifyPhoneMessageTextRequest, GetCustomVerifyPhoneMessageTextResponse, GetDefaultDomainClaimedMessageTextRequest, GetDefaultDomainClaimedMessageTextResponse, GetDefaultInitMessageTextRequest, GetDefaultInitMessageTextResponse, GetDefaultLabelPolicyRequest, GetDefaultLabelPolicyResponse, GetDefaultLockoutPolicyRequest, GetDefaultLockoutPolicyResponse, GetDefaultLoginPolicyRequest, GetDefaultLoginPolicyResponse, GetDefaultLoginTextsRequest, GetDefaultLoginTextsResponse, GetDefaultNotificationPolicyRequest, GetDefaultNotificationPolicyResponse, GetDefaultPasswordAgePolicyRequest, GetDefaultPasswordAgePolicyResponse, GetDefaultPasswordChangeMessageTextRequest, GetDefaultPasswordChangeMessageTextResponse, GetDefaultPasswordComplexityPolicyRequest, GetDefaultPasswordComplexityPolicyResponse, GetDefaultPasswordlessRegistrationMessageTextRequest, GetDefaultPasswordlessRegistrationMessageTextResponse, GetDefaultPasswordResetMessageTextRequest, GetDefaultPasswordResetMessageTextResponse, GetDefaultPrivacyPolicyRequest, GetDefaultPrivacyPolicyResponse, GetDefaultVerifyEmailMessageTextRequest, GetDefaultVerifyEmailMessageTextResponse, GetDefaultVerifyPhoneMessageTextRequest, GetDefaultVerifyPhoneMessageTextResponse, GetDomainPolicyRequest, GetDomainPolicyResponse, GetFlowRequest, GetFlowResponse, GetGrantedProjectByIDRequest, GetGrantedProjectByIDResponse, GetHumanEmailRequest, GetHumanEmailResponse, GetHumanPhoneRequest, GetHumanPhoneResponse, GetHumanProfileRequest, GetHumanProfileResponse, GetIAMRequest, GetIAMResponse, GetLabelPolicyRequest, GetLabelPolicyResponse, GetLockoutPolicyRequest, GetLockoutPolicyResponse, GetLoginPolicyRequest, GetLoginPolicyResponse, GetMachineKeyByIDsRequest, GetMachineKeyByIDsResponse, GetMyOrgRequest, GetMyOrgResponse, GetNotificationPolicyRequest, GetNotificationPolicyResponse, GetOIDCInformationRequest, GetOIDCInformationResponse, GetOrgByDomainGlobalRequest, GetOrgByDomainGlobalResponse, GetOrgIAMPolicyRequest, GetOrgIAMPolicyResponse, GetOrgIDPByIDRequest, GetOrgIDPByIDResponse, GetOrgMetadataRequest, GetOrgMetadataResponse, GetPasswordAgePolicyRequest, GetPasswordAgePolicyResponse, GetPasswordComplexityPolicyRequest, GetPasswordComplexityPolicyResponse, GetPersonalAccessTokenByIDsRequest, GetPersonalAccessTokenByIDsResponse, GetPreviewLabelPolicyRequest, GetPreviewLabelPolicyResponse, GetPrivacyPolicyRequest, GetPrivacyPolicyResponse, GetProjectByIDRequest, GetProjectByIDResponse, GetProjectGrantByIDRequest, GetProjectGrantByIDResponse, GetProviderByIDRequest, GetProviderByIDResponse, GetSupportedLanguagesRequest, GetSupportedLanguagesResponse, GetUserByIDRequest, GetUserByIDResponse, GetUserByLoginNameGlobalRequest, GetUserByLoginNameGlobalResponse, GetUserGrantByIDRequest, GetUserGrantByIDResponse, GetUserMetadataRequest, GetUserMetadataResponse, HealthzRequest, HealthzResponse, ImportHumanUserRequest, ImportHumanUserResponse, IsUserUniqueRequest, IsUserUniqueResponse, ListActionsRequest, ListActionsResponse, ListAllProjectGrantsRequest, ListAllProjectGrantsResponse, ListAppChangesRequest, ListAppChangesResponse, ListAppKeysRequest, ListAppKeysResponse, ListAppsRequest, ListAppsResponse, ListFlowTriggerTypesRequest, ListFlowTriggerTypesResponse, ListFlowTypesRequest, ListFlowTypesResponse, ListGrantedProjectRolesRequest, ListGrantedProjectRolesResponse, ListGrantedProjectsRequest, ListGrantedProjectsResponse, ListHumanAuthFactorsRequest, ListHumanAuthFactorsResponse, ListHumanLinkedIDPsRequest, ListHumanLinkedIDPsResponse, ListHumanPasswordlessRequest, ListHumanPasswordlessResponse, ListLoginPolicyIDPsRequest, ListLoginPolicyIDPsResponse, ListLoginPolicyMultiFactorsRequest, ListLoginPolicyMultiFactorsResponse, ListLoginPolicySecondFactorsRequest, ListLoginPolicySecondFactorsResponse, ListMachineKeysRequest, ListMachineKeysResponse, ListOrgChangesRequest, ListOrgChangesResponse, ListOrgDomainsRequest, ListOrgDomainsResponse, ListOrgIDPsRequest, ListOrgIDPsResponse, ListOrgMemberRolesRequest, ListOrgMemberRolesResponse, ListOrgMembersRequest, ListOrgMembersResponse, ListOrgMetadataRequest, ListOrgMetadataResponse, ListPersonalAccessTokensRequest, ListPersonalAccessTokensResponse, ListProjectChangesRequest, ListProjectChangesResponse, ListProjectGrantChangesRequest, ListProjectGrantChangesResponse, ListProjectGrantMemberRolesRequest, ListProjectGrantMemberRolesResponse, ListProjectGrantMembersRequest, ListProjectGrantMembersResponse, ListProjectGrantsRequest, ListProjectGrantsResponse, ListProjectMemberRolesRequest, ListProjectMemberRolesResponse, ListProjectMembersRequest, ListProjectMembersResponse, ListProjectRolesRequest, ListProjectRolesResponse, ListProjectsRequest, ListProjectsResponse, ListProvidersRequest, ListProvidersResponse, ListUserChangesRequest, ListUserChangesResponse, ListUserGrantRequest, ListUserGrantResponse, ListUserMembershipsRequest, ListUserMembershipsResponse, ListUserMetadataRequest, ListUserMetadataResponse, ListUsersRequest, ListUsersResponse, LockUserRequest, LockUserResponse, ReactivateActionRequest, ReactivateActionResponse, ReactivateAppRequest, ReactivateAppResponse, ReactivateOrgIDPRequest, ReactivateOrgIDPResponse, ReactivateOrgRequest, ReactivateOrgResponse, ReactivateProjectGrantRequest, ReactivateProjectGrantResponse, ReactivateProjectRequest, ReactivateProjectResponse, ReactivateUserGrantRequest, ReactivateUserGrantResponse, ReactivateUserRequest, ReactivateUserResponse, RegenerateAPIClientSecretRequest, RegenerateAPIClientSecretResponse, RegenerateOIDCClientSecretRequest, RegenerateOIDCClientSecretResponse, RemoveAppKeyRequest, RemoveAppKeyResponse, RemoveAppRequest, RemoveAppResponse, RemoveCustomLabelPolicyFontRequest, RemoveCustomLabelPolicyFontResponse, RemoveCustomLabelPolicyIconDarkRequest, RemoveCustomLabelPolicyIconDarkResponse, RemoveCustomLabelPolicyIconRequest, RemoveCustomLabelPolicyIconResponse, RemoveCustomLabelPolicyLogoDarkRequest, RemoveCustomLabelPolicyLogoDarkResponse, RemoveCustomLabelPolicyLogoRequest, RemoveCustomLabelPolicyLogoResponse, RemoveHumanAuthFactorOTPRequest, RemoveHumanAuthFactorOTPResponse, RemoveHumanAuthFactorU2FRequest, RemoveHumanAuthFactorU2FResponse, RemoveHumanAvatarRequest, RemoveHumanAvatarResponse, RemoveHumanLinkedIDPRequest, RemoveHumanLinkedIDPResponse, RemoveHumanPasswordlessRequest, RemoveHumanPasswordlessResponse, RemoveHumanPhoneRequest, RemoveHumanPhoneResponse, RemoveIDPFromLoginPolicyRequest, RemoveIDPFromLoginPolicyResponse, RemoveMachineKeyRequest, RemoveMachineKeyResponse, RemoveMachineSecretRequest, RemoveMachineSecretResponse, RemoveMultiFactorFromLoginPolicyRequest, RemoveMultiFactorFromLoginPolicyResponse, RemoveOrgDomainRequest, RemoveOrgDomainResponse, RemoveOrgIDPRequest, RemoveOrgIDPResponse, RemoveOrgMemberRequest, RemoveOrgMemberResponse, RemoveOrgMetadataRequest, RemoveOrgMetadataResponse, RemoveOrgRequest, RemoveOrgResponse, RemovePersonalAccessTokenRequest, RemovePersonalAccessTokenResponse, RemoveProjectGrantMemberRequest, RemoveProjectGrantMemberResponse, RemoveProjectGrantRequest, RemoveProjectGrantResponse, RemoveProjectMemberRequest, RemoveProjectMemberResponse, RemoveProjectRequest, RemoveProjectResponse, RemoveProjectRoleRequest, RemoveProjectRoleResponse, RemoveSecondFactorFromLoginPolicyRequest, RemoveSecondFactorFromLoginPolicyResponse, RemoveUserGrantRequest, RemoveUserGrantResponse, RemoveUserMetadataRequest, RemoveUserMetadataResponse, RemoveUserRequest, RemoveUserResponse, ResendHumanEmailVerificationRequest, ResendHumanEmailVerificationResponse, ResendHumanInitializationRequest, ResendHumanInitializationResponse, ResendHumanPhoneVerificationRequest, ResendHumanPhoneVerificationResponse, ResetCustomDomainClaimedMessageTextToDefaultRequest, ResetCustomDomainClaimedMessageTextToDefaultResponse, ResetCustomInitMessageTextToDefaultRequest, ResetCustomInitMessageTextToDefaultResponse, ResetCustomLoginTextsToDefaultRequest, ResetCustomLoginTextsToDefaultResponse, ResetCustomPasswordChangeMessageTextToDefaultRequest, ResetCustomPasswordChangeMessageTextToDefaultResponse, ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest, ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse, ResetCustomPasswordResetMessageTextToDefaultRequest, ResetCustomPasswordResetMessageTextToDefaultResponse, ResetCustomVerifyEmailMessageTextToDefaultRequest, ResetCustomVerifyEmailMessageTextToDefaultResponse, ResetCustomVerifyPhoneMessageTextToDefaultRequest, ResetCustomVerifyPhoneMessageTextToDefaultResponse, ResetLabelPolicyToDefaultRequest, ResetLabelPolicyToDefaultResponse, ResetLockoutPolicyToDefaultRequest, ResetLockoutPolicyToDefaultResponse, ResetLoginPolicyToDefaultRequest, ResetLoginPolicyToDefaultResponse, ResetNotificationPolicyToDefaultRequest, ResetNotificationPolicyToDefaultResponse, ResetPasswordAgePolicyToDefaultRequest, ResetPasswordAgePolicyToDefaultResponse, ResetPasswordComplexityPolicyToDefaultRequest, ResetPasswordComplexityPolicyToDefaultResponse, ResetPrivacyPolicyToDefaultRequest, ResetPrivacyPolicyToDefaultResponse, SendHumanResetPasswordNotificationRequest, SendHumanResetPasswordNotificationResponse, SendPasswordlessRegistrationRequest, SendPasswordlessRegistrationResponse, SetCustomDomainClaimedMessageTextRequest, SetCustomDomainClaimedMessageTextResponse, SetCustomInitMessageTextRequest, SetCustomInitMessageTextResponse, SetCustomLoginTextsRequest, SetCustomLoginTextsResponse, SetCustomPasswordChangeMessageTextRequest, SetCustomPasswordChangeMessageTextResponse, SetCustomPasswordlessRegistrationMessageTextRequest, SetCustomPasswordlessRegistrationMessageTextResponse, SetCustomPasswordResetMessageTextRequest, SetCustomPasswordResetMessageTextResponse, SetCustomVerifyEmailMessageTextRequest, SetCustomVerifyEmailMessageTextResponse, SetCustomVerifyPhoneMessageTextRequest, SetCustomVerifyPhoneMessageTextResponse, SetHumanInitialPasswordRequest, SetHumanInitialPasswordResponse, SetHumanPasswordRequest, SetHumanPasswordResponse, SetOrgMetadataRequest, SetOrgMetadataResponse, SetPrimaryOrgDomainRequest, SetPrimaryOrgDomainResponse, SetTriggerActionsRequest, SetTriggerActionsResponse, SetUserMetadataRequest, SetUserMetadataResponse, UnlockUserRequest, UnlockUserResponse, UpdateActionRequest, UpdateActionResponse, UpdateAPIAppConfigRequest, UpdateAPIAppConfigResponse, UpdateAppRequest, UpdateAppResponse, UpdateCustomLabelPolicyRequest, UpdateCustomLabelPolicyResponse, UpdateCustomLockoutPolicyRequest, UpdateCustomLockoutPolicyResponse, UpdateCustomLoginPolicyRequest, UpdateCustomLoginPolicyResponse, UpdateCustomNotificationPolicyRequest, UpdateCustomNotificationPolicyResponse, UpdateCustomPasswordAgePolicyRequest, UpdateCustomPasswordAgePolicyResponse, UpdateCustomPasswordComplexityPolicyRequest, UpdateCustomPasswordComplexityPolicyResponse, UpdateCustomPrivacyPolicyRequest, UpdateCustomPrivacyPolicyResponse, UpdateHumanEmailRequest, UpdateHumanEmailResponse, UpdateHumanPhoneRequest, UpdateHumanPhoneResponse, UpdateHumanProfileRequest, UpdateHumanProfileResponse, UpdateLDAPProviderRequest, UpdateLDAPProviderResponse, UpdateMachineRequest, UpdateMachineResponse, UpdateOIDCAppConfigRequest, UpdateOIDCAppConfigResponse, UpdateOrgIDPJWTConfigRequest, UpdateOrgIDPJWTConfigResponse, UpdateOrgIDPOIDCConfigRequest, UpdateOrgIDPOIDCConfigResponse, UpdateOrgIDPRequest, UpdateOrgIDPResponse, UpdateOrgMemberRequest, UpdateOrgMemberResponse, UpdateOrgRequest, UpdateOrgResponse, UpdateProjectGrantMemberRequest, UpdateProjectGrantMemberResponse, UpdateProjectGrantRequest, UpdateProjectGrantResponse, UpdateProjectMemberRequest, UpdateProjectMemberResponse, UpdateProjectRequest, UpdateProjectResponse, UpdateProjectRoleRequest, UpdateProjectRoleResponse, UpdateSAMLAppConfigRequest, UpdateSAMLAppConfigResponse, UpdateUserGrantRequest, UpdateUserGrantResponse, UpdateUserNameRequest, UpdateUserNameResponse, ValidateOrgDomainRequest, ValidateOrgDomainResponse } from "./management_pb.js";
import { MethodKind } from "@bufbuild/protobuf";

/**
 * @generated from service zitadel.management.v1.ManagementService
 */
export declare const ManagementService: {
  readonly typeName: "zitadel.management.v1.ManagementService",
  readonly methods: {
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.Healthz
     */
    readonly healthz: {
      readonly name: "Healthz",
      readonly I: typeof HealthzRequest,
      readonly O: typeof HealthzResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.GetOIDCInformation
     */
    readonly getOIDCInformation: {
      readonly name: "GetOIDCInformation",
      readonly I: typeof GetOIDCInformationRequest,
      readonly O: typeof GetOIDCInformationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns some needed settings of the IAM (Global Organisation ID, Zitadel Project ID)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetIAM
     */
    readonly getIAM: {
      readonly name: "GetIAM",
      readonly I: typeof GetIAMRequest,
      readonly O: typeof GetIAMResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default languages
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetSupportedLanguages
     */
    readonly getSupportedLanguages: {
      readonly name: "GetSupportedLanguages",
      readonly I: typeof GetSupportedLanguagesRequest,
      readonly O: typeof GetSupportedLanguagesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the requested full blown user (human or machine)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetUserByID
     */
    readonly getUserByID: {
      readonly name: "GetUserByID",
      readonly I: typeof GetUserByIDRequest,
      readonly O: typeof GetUserByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Searches a user over all organisations
     * the login name has to match exactly
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetUserByLoginNameGlobal
     */
    readonly getUserByLoginNameGlobal: {
      readonly name: "GetUserByLoginNameGlobal",
      readonly I: typeof GetUserByLoginNameGlobalRequest,
      readonly O: typeof GetUserByLoginNameGlobalResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Return the users matching the query
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListUsers
     */
    readonly listUsers: {
      readonly name: "ListUsers",
      readonly I: typeof ListUsersRequest,
      readonly O: typeof ListUsersResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the history of the user (each event)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListUserChanges
     */
    readonly listUserChanges: {
      readonly name: "ListUserChanges",
      readonly I: typeof ListUserChangesRequest,
      readonly O: typeof ListUserChangesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns if a user with the searched email or username is unique
     *
     * @generated from rpc zitadel.management.v1.ManagementService.IsUserUnique
     */
    readonly isUserUnique: {
      readonly name: "IsUserUnique",
      readonly I: typeof IsUserUniqueRequest,
      readonly O: typeof IsUserUniqueResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a user of the type human
     * A email will be sent to the user if email is not verified or no password is set
     * If a password is given, the user has to change on the next login
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddHumanUser
     */
    readonly addHumanUser: {
      readonly name: "AddHumanUser",
      readonly I: typeof AddHumanUserRequest,
      readonly O: typeof AddHumanUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a user of the type human
     * A email will be sent to the user if email is not verified or no password is set
     * If a password is given, the user doesn't have to change on the next login
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ImportHumanUser
     */
    readonly importHumanUser: {
      readonly name: "ImportHumanUser",
      readonly I: typeof ImportHumanUserRequest,
      readonly O: typeof ImportHumanUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Create a user of the type machine
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddMachineUser
     */
    readonly addMachineUser: {
      readonly name: "AddMachineUser",
      readonly I: typeof AddMachineUserRequest,
      readonly O: typeof AddMachineUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to deactivated
     * The user will not be able to login
     * returns an error if user state is already deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateUser
     */
    readonly deactivateUser: {
      readonly name: "DeactivateUser",
      readonly I: typeof DeactivateUserRequest,
      readonly O: typeof DeactivateUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to active
     * returns an error if user state is not deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateUser
     */
    readonly reactivateUser: {
      readonly name: "ReactivateUser",
      readonly I: typeof ReactivateUserRequest,
      readonly O: typeof ReactivateUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to deactivated
     * The user will not be able to login
     * returns an error if user state is already locked
     *
     * @generated from rpc zitadel.management.v1.ManagementService.LockUser
     */
    readonly lockUser: {
      readonly name: "LockUser",
      readonly I: typeof LockUserRequest,
      readonly O: typeof LockUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to active
     * returns an error if user state is not locked
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UnlockUser
     */
    readonly unlockUser: {
      readonly name: "UnlockUser",
      readonly I: typeof UnlockUserRequest,
      readonly O: typeof UnlockUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the user state to deleted
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveUser
     */
    readonly removeUser: {
      readonly name: "RemoveUser",
      readonly I: typeof RemoveUserRequest,
      readonly O: typeof RemoveUserResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the username
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateUserName
     */
    readonly updateUserName: {
      readonly name: "UpdateUserName",
      readonly I: typeof UpdateUserNameRequest,
      readonly O: typeof UpdateUserNameResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets a user metadata by key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetUserMetadata
     */
    readonly setUserMetadata: {
      readonly name: "SetUserMetadata",
      readonly I: typeof SetUserMetadataRequest,
      readonly O: typeof SetUserMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set a list of user metadata
     *
     * @generated from rpc zitadel.management.v1.ManagementService.BulkSetUserMetadata
     */
    readonly bulkSetUserMetadata: {
      readonly name: "BulkSetUserMetadata",
      readonly I: typeof BulkSetUserMetadataRequest,
      readonly O: typeof BulkSetUserMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the user metadata
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListUserMetadata
     */
    readonly listUserMetadata: {
      readonly name: "ListUserMetadata",
      readonly I: typeof ListUserMetadataRequest,
      readonly O: typeof ListUserMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the user metadata by key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetUserMetadata
     */
    readonly getUserMetadata: {
      readonly name: "GetUserMetadata",
      readonly I: typeof GetUserMetadataRequest,
      readonly O: typeof GetUserMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a user metadata by key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveUserMetadata
     */
    readonly removeUserMetadata: {
      readonly name: "RemoveUserMetadata",
      readonly I: typeof RemoveUserMetadataRequest,
      readonly O: typeof RemoveUserMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set a list of user metadata
     *
     * @generated from rpc zitadel.management.v1.ManagementService.BulkRemoveUserMetadata
     */
    readonly bulkRemoveUserMetadata: {
      readonly name: "BulkRemoveUserMetadata",
      readonly I: typeof BulkRemoveUserMetadataRequest,
      readonly O: typeof BulkRemoveUserMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the profile of the human
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetHumanProfile
     */
    readonly getHumanProfile: {
      readonly name: "GetHumanProfile",
      readonly I: typeof GetHumanProfileRequest,
      readonly O: typeof GetHumanProfileResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the profile of the human
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateHumanProfile
     */
    readonly updateHumanProfile: {
      readonly name: "UpdateHumanProfile",
      readonly I: typeof UpdateHumanProfileRequest,
      readonly O: typeof UpdateHumanProfileResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * GetHumanEmail returns the email and verified state of the human
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetHumanEmail
     */
    readonly getHumanEmail: {
      readonly name: "GetHumanEmail",
      readonly I: typeof GetHumanEmailRequest,
      readonly O: typeof GetHumanEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the email of the human
     * If state is not verified, the user will get a verification email
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateHumanEmail
     */
    readonly updateHumanEmail: {
      readonly name: "UpdateHumanEmail",
      readonly I: typeof UpdateHumanEmailRequest,
      readonly O: typeof UpdateHumanEmailResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Resends an email to the given email address to finish the initialization process of the user
     * Changes the email address of the user if it is provided
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResendHumanInitialization
     */
    readonly resendHumanInitialization: {
      readonly name: "ResendHumanInitialization",
      readonly I: typeof ResendHumanInitializationRequest,
      readonly O: typeof ResendHumanInitializationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Resends an email to the given email address to finish the email verification process of the user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResendHumanEmailVerification
     */
    readonly resendHumanEmailVerification: {
      readonly name: "ResendHumanEmailVerification",
      readonly I: typeof ResendHumanEmailVerificationRequest,
      readonly O: typeof ResendHumanEmailVerificationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the phone and verified state of the human phone
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetHumanPhone
     */
    readonly getHumanPhone: {
      readonly name: "GetHumanPhone",
      readonly I: typeof GetHumanPhoneRequest,
      readonly O: typeof GetHumanPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the phone number
     * If verified is not set, the user will get an sms to verify the number
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateHumanPhone
     */
    readonly updateHumanPhone: {
      readonly name: "UpdateHumanPhone",
      readonly I: typeof UpdateHumanPhoneRequest,
      readonly O: typeof UpdateHumanPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the phone number of the human
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveHumanPhone
     */
    readonly removeHumanPhone: {
      readonly name: "RemoveHumanPhone",
      readonly I: typeof RemoveHumanPhoneRequest,
      readonly O: typeof RemoveHumanPhoneResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * An sms will be sent to the given phone number to finish the phone verification process of the user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResendHumanPhoneVerification
     */
    readonly resendHumanPhoneVerification: {
      readonly name: "ResendHumanPhoneVerification",
      readonly I: typeof ResendHumanPhoneVerificationRequest,
      readonly O: typeof ResendHumanPhoneVerificationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the avatar number of the human
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveHumanAvatar
     */
    readonly removeHumanAvatar: {
      readonly name: "RemoveHumanAvatar",
      readonly I: typeof RemoveHumanAvatarRequest,
      readonly O: typeof RemoveHumanAvatarResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * deprecated: use SetHumanPassword
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetHumanInitialPassword
     */
    readonly setHumanInitialPassword: {
      readonly name: "SetHumanInitialPassword",
      readonly I: typeof SetHumanInitialPasswordRequest,
      readonly O: typeof SetHumanInitialPasswordResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set a new password for a user, on default the user has to change the password on the next login
     * Set no_change_required to true if the user does not have to change the password on the next login
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetHumanPassword
     */
    readonly setHumanPassword: {
      readonly name: "SetHumanPassword",
      readonly I: typeof SetHumanPasswordRequest,
      readonly O: typeof SetHumanPasswordResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * An email will be sent to the given address to reset the password of the user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SendHumanResetPasswordNotification
     */
    readonly sendHumanResetPasswordNotification: {
      readonly name: "SendHumanResetPasswordNotification",
      readonly I: typeof SendHumanResetPasswordNotificationRequest,
      readonly O: typeof SendHumanResetPasswordNotificationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a list of all factors (second and multi) which are configured on the user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListHumanAuthFactors
     */
    readonly listHumanAuthFactors: {
      readonly name: "ListHumanAuthFactors",
      readonly I: typeof ListHumanAuthFactorsRequest,
      readonly O: typeof ListHumanAuthFactorsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The otp second factor will be removed from the user
     * Because only one otp can be configured per user, the configured one will be removed
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveHumanAuthFactorOTP
     */
    readonly removeHumanAuthFactorOTP: {
      readonly name: "RemoveHumanAuthFactorOTP",
      readonly I: typeof RemoveHumanAuthFactorOTPRequest,
      readonly O: typeof RemoveHumanAuthFactorOTPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The u2f (universial second factor) will be removed from the user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveHumanAuthFactorU2F
     */
    readonly removeHumanAuthFactorU2F: {
      readonly name: "RemoveHumanAuthFactorU2F",
      readonly I: typeof RemoveHumanAuthFactorU2FRequest,
      readonly O: typeof RemoveHumanAuthFactorU2FResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all configured passwordless authenticators
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListHumanPasswordless
     */
    readonly listHumanPasswordless: {
      readonly name: "ListHumanPasswordless",
      readonly I: typeof ListHumanPasswordlessRequest,
      readonly O: typeof ListHumanPasswordlessResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator link to the user and returns it directly
     * This link enables the user to register a new device if current passwordless devices are all platform authenticators
     * e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddPasswordlessRegistration
     */
    readonly addPasswordlessRegistration: {
      readonly name: "AddPasswordlessRegistration",
      readonly I: typeof AddPasswordlessRegistrationRequest,
      readonly O: typeof AddPasswordlessRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new passwordless authenticator link to the user and sends it to the registered email address
     * This link enables the user to register a new device if current passwordless devices are all platform authenticators
     * e.g. User has already registered Windows Hello and wants to register FaceID on the iPhone
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SendPasswordlessRegistration
     */
    readonly sendPasswordlessRegistration: {
      readonly name: "SendPasswordlessRegistration",
      readonly I: typeof SendPasswordlessRegistrationRequest,
      readonly O: typeof SendPasswordlessRegistrationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed a configured passwordless authenticator
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveHumanPasswordless
     */
    readonly removeHumanPasswordless: {
      readonly name: "RemoveHumanPasswordless",
      readonly I: typeof RemoveHumanPasswordlessRequest,
      readonly O: typeof RemoveHumanPasswordlessResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes a machine user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateMachine
     */
    readonly updateMachine: {
      readonly name: "UpdateMachine",
      readonly I: typeof UpdateMachineRequest,
      readonly O: typeof UpdateMachineResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generates and sets a new machine secret
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GenerateMachineSecret
     */
    readonly generateMachineSecret: {
      readonly name: "GenerateMachineSecret",
      readonly I: typeof GenerateMachineSecretRequest,
      readonly O: typeof GenerateMachineSecretResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the machine secret
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveMachineSecret
     */
    readonly removeMachineSecret: {
      readonly name: "RemoveMachineSecret",
      readonly I: typeof RemoveMachineSecretRequest,
      readonly O: typeof RemoveMachineSecretResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a machine key of a (machine) user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetMachineKeyByIDs
     */
    readonly getMachineKeyByIDs: {
      readonly name: "GetMachineKeyByIDs",
      readonly I: typeof GetMachineKeyByIDsRequest,
      readonly O: typeof GetMachineKeyByIDsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all machine keys of a (machine) user which match the query
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListMachineKeys
     */
    readonly listMachineKeys: {
      readonly name: "ListMachineKeys",
      readonly I: typeof ListMachineKeysRequest,
      readonly O: typeof ListMachineKeysResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generates a new machine key, details should be stored after return
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddMachineKey
     */
    readonly addMachineKey: {
      readonly name: "AddMachineKey",
      readonly I: typeof AddMachineKeyRequest,
      readonly O: typeof AddMachineKeyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a machine key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveMachineKey
     */
    readonly removeMachineKey: {
      readonly name: "RemoveMachineKey",
      readonly I: typeof RemoveMachineKeyRequest,
      readonly O: typeof RemoveMachineKeyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a personal access token of a (machine) user
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetPersonalAccessTokenByIDs
     */
    readonly getPersonalAccessTokenByIDs: {
      readonly name: "GetPersonalAccessTokenByIDs",
      readonly I: typeof GetPersonalAccessTokenByIDsRequest,
      readonly O: typeof GetPersonalAccessTokenByIDsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all personal access tokens of a (machine) user which match the query
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListPersonalAccessTokens
     */
    readonly listPersonalAccessTokens: {
      readonly name: "ListPersonalAccessTokens",
      readonly I: typeof ListPersonalAccessTokensRequest,
      readonly O: typeof ListPersonalAccessTokensResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generates a new personal access token for a machine user, details should be stored after return
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddPersonalAccessToken
     */
    readonly addPersonalAccessToken: {
      readonly name: "AddPersonalAccessToken",
      readonly I: typeof AddPersonalAccessTokenRequest,
      readonly O: typeof AddPersonalAccessTokenResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a personal access token
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemovePersonalAccessToken
     */
    readonly removePersonalAccessToken: {
      readonly name: "RemovePersonalAccessToken",
      readonly I: typeof RemovePersonalAccessTokenRequest,
      readonly O: typeof RemovePersonalAccessTokenResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Lists all identity providers (social logins) which a human has configured (e.g Google, Microsoft, AD, etc..)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListHumanLinkedIDPs
     */
    readonly listHumanLinkedIDPs: {
      readonly name: "ListHumanLinkedIDPs",
      readonly I: typeof ListHumanLinkedIDPsRequest,
      readonly O: typeof ListHumanLinkedIDPsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed a configured identity provider (social login) of a human
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveHumanLinkedIDP
     */
    readonly removeHumanLinkedIDP: {
      readonly name: "RemoveHumanLinkedIDP",
      readonly I: typeof RemoveHumanLinkedIDPRequest,
      readonly O: typeof RemoveHumanLinkedIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Show all the permissions a user has iin ZITADEL (ZITADEL Manager)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListUserMemberships
     */
    readonly listUserMemberships: {
      readonly name: "ListUserMemberships",
      readonly I: typeof ListUserMembershipsRequest,
      readonly O: typeof ListUserMembershipsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the org given in the header
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetMyOrg
     */
    readonly getMyOrg: {
      readonly name: "GetMyOrg",
      readonly I: typeof GetMyOrgRequest,
      readonly O: typeof GetMyOrgResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Search a org over all organisations
     * Domain must match exactly
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetOrgByDomainGlobal
     */
    readonly getOrgByDomainGlobal: {
      readonly name: "GetOrgByDomainGlobal",
      readonly I: typeof GetOrgByDomainGlobalRequest,
      readonly O: typeof GetOrgByDomainGlobalResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the history of my organisation (each event)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListOrgChanges
     */
    readonly listOrgChanges: {
      readonly name: "ListOrgChanges",
      readonly I: typeof ListOrgChangesRequest,
      readonly O: typeof ListOrgChangesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates a new organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddOrg
     */
    readonly addOrg: {
      readonly name: "AddOrg",
      readonly I: typeof AddOrgRequest,
      readonly O: typeof AddOrgResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes my organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateOrg
     */
    readonly updateOrg: {
      readonly name: "UpdateOrg",
      readonly I: typeof UpdateOrgRequest,
      readonly O: typeof UpdateOrgResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of my organisation to deactivated
     * Users of this organisation will not be able login
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateOrg
     */
    readonly deactivateOrg: {
      readonly name: "DeactivateOrg",
      readonly I: typeof DeactivateOrgRequest,
      readonly O: typeof DeactivateOrgResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of my organisation to active
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateOrg
     */
    readonly reactivateOrg: {
      readonly name: "ReactivateOrg",
      readonly I: typeof ReactivateOrgRequest,
      readonly O: typeof ReactivateOrgResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of my organisation and all its resource (Users, Projects, Grants to and from the org) to removed
     * Users of this organisation will not be able login
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveOrg
     */
    readonly removeOrg: {
      readonly name: "RemoveOrg",
      readonly I: typeof RemoveOrgRequest,
      readonly O: typeof RemoveOrgResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets a org metadata by key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetOrgMetadata
     */
    readonly setOrgMetadata: {
      readonly name: "SetOrgMetadata",
      readonly I: typeof SetOrgMetadataRequest,
      readonly O: typeof SetOrgMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set a list of org metadata
     *
     * @generated from rpc zitadel.management.v1.ManagementService.BulkSetOrgMetadata
     */
    readonly bulkSetOrgMetadata: {
      readonly name: "BulkSetOrgMetadata",
      readonly I: typeof BulkSetOrgMetadataRequest,
      readonly O: typeof BulkSetOrgMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the org metadata
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListOrgMetadata
     */
    readonly listOrgMetadata: {
      readonly name: "ListOrgMetadata",
      readonly I: typeof ListOrgMetadataRequest,
      readonly O: typeof ListOrgMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the org metadata by key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetOrgMetadata
     */
    readonly getOrgMetadata: {
      readonly name: "GetOrgMetadata",
      readonly I: typeof GetOrgMetadataRequest,
      readonly O: typeof GetOrgMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a org metadata by key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveOrgMetadata
     */
    readonly removeOrgMetadata: {
      readonly name: "RemoveOrgMetadata",
      readonly I: typeof RemoveOrgMetadataRequest,
      readonly O: typeof RemoveOrgMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set a list of org metadata
     *
     * @generated from rpc zitadel.management.v1.ManagementService.BulkRemoveOrgMetadata
     */
    readonly bulkRemoveOrgMetadata: {
      readonly name: "BulkRemoveOrgMetadata",
      readonly I: typeof BulkRemoveOrgMetadataRequest,
      readonly O: typeof BulkRemoveOrgMetadataResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all registered domains of my organisation
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListOrgDomains
     */
    readonly listOrgDomains: {
      readonly name: "ListOrgDomains",
      readonly I: typeof ListOrgDomainsRequest,
      readonly O: typeof ListOrgDomainsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new domain to my organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddOrgDomain
     */
    readonly addOrgDomain: {
      readonly name: "AddOrgDomain",
      readonly I: typeof AddOrgDomainRequest,
      readonly O: typeof AddOrgDomainResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed the domain from my organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveOrgDomain
     */
    readonly removeOrgDomain: {
      readonly name: "RemoveOrgDomain",
      readonly I: typeof RemoveOrgDomainRequest,
      readonly O: typeof RemoveOrgDomainResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generates a new file to validate you domain
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GenerateOrgDomainValidation
     */
    readonly generateOrgDomainValidation: {
      readonly name: "GenerateOrgDomainValidation",
      readonly I: typeof GenerateOrgDomainValidationRequest,
      readonly O: typeof GenerateOrgDomainValidationResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Validates your domain with the choosen method
     * Validated domains must be unique
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ValidateOrgDomain
     */
    readonly validateOrgDomain: {
      readonly name: "ValidateOrgDomain",
      readonly I: typeof ValidateOrgDomainRequest,
      readonly O: typeof ValidateOrgDomainResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the domain as primary
     * Primary domain is shown as suffix on the preferred username on the users of the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetPrimaryOrgDomain
     */
    readonly setPrimaryOrgDomain: {
      readonly name: "SetPrimaryOrgDomain",
      readonly I: typeof SetPrimaryOrgDomainRequest,
      readonly O: typeof SetPrimaryOrgDomainResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all ZITADEL roles which are for organisation managers
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListOrgMemberRoles
     */
    readonly listOrgMemberRoles: {
      readonly name: "ListOrgMemberRoles",
      readonly I: typeof ListOrgMemberRolesRequest,
      readonly O: typeof ListOrgMemberRolesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all ZITADEL managers of this organisation (Project and Project Grant managers not included)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListOrgMembers
     */
    readonly listOrgMembers: {
      readonly name: "ListOrgMembers",
      readonly I: typeof ListOrgMembersRequest,
      readonly O: typeof ListOrgMembersResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new organisation manager, which is allowed to administrate ZITADEL
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddOrgMember
     */
    readonly addOrgMember: {
      readonly name: "AddOrgMember",
      readonly I: typeof AddOrgMemberRequest,
      readonly O: typeof AddOrgMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the organisation manager
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateOrgMember
     */
    readonly updateOrgMember: {
      readonly name: "UpdateOrgMember",
      readonly I: typeof UpdateOrgMemberRequest,
      readonly O: typeof UpdateOrgMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes an organisation manager
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveOrgMember
     */
    readonly removeOrgMember: {
      readonly name: "RemoveOrgMember",
      readonly I: typeof RemoveOrgMemberRequest,
      readonly O: typeof RemoveOrgMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a project from my organisation (no granted projects)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetProjectByID
     */
    readonly getProjectByID: {
      readonly name: "GetProjectByID",
      readonly I: typeof GetProjectByIDRequest,
      readonly O: typeof GetProjectByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * returns a project my organisation got granted from another organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetGrantedProjectByID
     */
    readonly getGrantedProjectByID: {
      readonly name: "GetGrantedProjectByID",
      readonly I: typeof GetGrantedProjectByIDRequest,
      readonly O: typeof GetGrantedProjectByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all projects my organisation is the owner (no granted projects)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjects
     */
    readonly listProjects: {
      readonly name: "ListProjects",
      readonly I: typeof ListProjectsRequest,
      readonly O: typeof ListProjectsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * returns all projects my organisation got granted from another organisation
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListGrantedProjects
     */
    readonly listGrantedProjects: {
      readonly name: "ListGrantedProjects",
      readonly I: typeof ListGrantedProjectsRequest,
      readonly O: typeof ListGrantedProjectsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * returns all roles of a project grant
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListGrantedProjectRoles
     */
    readonly listGrantedProjectRoles: {
      readonly name: "ListGrantedProjectRoles",
      readonly I: typeof ListGrantedProjectRolesRequest,
      readonly O: typeof ListGrantedProjectRolesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the history of the project (each event)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectChanges
     */
    readonly listProjectChanges: {
      readonly name: "ListProjectChanges",
      readonly I: typeof ListProjectChangesRequest,
      readonly O: typeof ListProjectChangesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds an new project to the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddProject
     */
    readonly addProject: {
      readonly name: "AddProject",
      readonly I: typeof AddProjectRequest,
      readonly O: typeof AddProjectResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes a project
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateProject
     */
    readonly updateProject: {
      readonly name: "UpdateProject",
      readonly I: typeof UpdateProjectRequest,
      readonly O: typeof UpdateProjectResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of a project to deactivated
     * Returns an error if project is already deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateProject
     */
    readonly deactivateProject: {
      readonly name: "DeactivateProject",
      readonly I: typeof DeactivateProjectRequest,
      readonly O: typeof DeactivateProjectResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of a project to active
     * Returns an error if project is not deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateProject
     */
    readonly reactivateProject: {
      readonly name: "ReactivateProject",
      readonly I: typeof ReactivateProjectRequest,
      readonly O: typeof ReactivateProjectResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a project
     * All project grants, applications and user grants for this project will be removed
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveProject
     */
    readonly removeProject: {
      readonly name: "RemoveProject",
      readonly I: typeof RemoveProjectRequest,
      readonly O: typeof RemoveProjectResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all roles of a project matching the search query
     * If no limit is requested, default limit will be set, if the limit is higher then the default an error will be returned
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectRoles
     */
    readonly listProjectRoles: {
      readonly name: "ListProjectRoles",
      readonly I: typeof ListProjectRolesRequest,
      readonly O: typeof ListProjectRolesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a role to a project, key must be unique in the project
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddProjectRole
     */
    readonly addProjectRole: {
      readonly name: "AddProjectRole",
      readonly I: typeof AddProjectRoleRequest,
      readonly O: typeof AddProjectRoleResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * add a list of project roles in one request
     *
     * @generated from rpc zitadel.management.v1.ManagementService.BulkAddProjectRoles
     */
    readonly bulkAddProjectRoles: {
      readonly name: "BulkAddProjectRoles",
      readonly I: typeof BulkAddProjectRolesRequest,
      readonly O: typeof BulkAddProjectRolesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes a project role, key is not editable
     * If a key should change, remove the role and create a new
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateProjectRole
     */
    readonly updateProjectRole: {
      readonly name: "UpdateProjectRole",
      readonly I: typeof UpdateProjectRoleRequest,
      readonly O: typeof UpdateProjectRoleResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes role from UserGrants, ProjectGrants and from Project
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveProjectRole
     */
    readonly removeProjectRole: {
      readonly name: "RemoveProjectRole",
      readonly I: typeof RemoveProjectRoleRequest,
      readonly O: typeof RemoveProjectRoleResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all ZITADEL roles which are for project managers
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectMemberRoles
     */
    readonly listProjectMemberRoles: {
      readonly name: "ListProjectMemberRoles",
      readonly I: typeof ListProjectMemberRolesRequest,
      readonly O: typeof ListProjectMemberRolesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all ZITADEL managers of a projects
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectMembers
     */
    readonly listProjectMembers: {
      readonly name: "ListProjectMembers",
      readonly I: typeof ListProjectMembersRequest,
      readonly O: typeof ListProjectMembersResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new project manager, which is allowed to administrate in ZITADEL
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddProjectMember
     */
    readonly addProjectMember: {
      readonly name: "AddProjectMember",
      readonly I: typeof AddProjectMemberRequest,
      readonly O: typeof AddProjectMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change project manager, which is allowed to administrate in ZITADEL
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateProjectMember
     */
    readonly updateProjectMember: {
      readonly name: "UpdateProjectMember",
      readonly I: typeof UpdateProjectMemberRequest,
      readonly O: typeof UpdateProjectMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove project manager, which is allowed to administrate in ZITADEL
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveProjectMember
     */
    readonly removeProjectMember: {
      readonly name: "RemoveProjectMember",
      readonly I: typeof RemoveProjectMemberRequest,
      readonly O: typeof RemoveProjectMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns an application (oidc or api)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetAppByID
     */
    readonly getAppByID: {
      readonly name: "GetAppByID",
      readonly I: typeof GetAppByIDRequest,
      readonly O: typeof GetAppByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all applications of a project matching the query
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListApps
     */
    readonly listApps: {
      readonly name: "ListApps",
      readonly I: typeof ListAppsRequest,
      readonly O: typeof ListAppsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the history of the application (each event)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListAppChanges
     */
    readonly listAppChanges: {
      readonly name: "ListAppChanges",
      readonly I: typeof ListAppChangesRequest,
      readonly O: typeof ListAppChangesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new oidc client
     * Returns a client id
     * Returns a new generated secret if needed (Depending on the configuration)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddOIDCApp
     */
    readonly addOIDCApp: {
      readonly name: "AddOIDCApp",
      readonly I: typeof AddOIDCAppRequest,
      readonly O: typeof AddOIDCAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new saml service provider
     * Returns a entityID
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddSAMLApp
     */
    readonly addSAMLApp: {
      readonly name: "AddSAMLApp",
      readonly I: typeof AddSAMLAppRequest,
      readonly O: typeof AddSAMLAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new api application
     * Returns a client id
     * Returns a new generated secret if needed (Depending on the configuration)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddAPIApp
     */
    readonly addAPIApp: {
      readonly name: "AddAPIApp",
      readonly I: typeof AddAPIAppRequest,
      readonly O: typeof AddAPIAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes application
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateApp
     */
    readonly updateApp: {
      readonly name: "UpdateApp",
      readonly I: typeof UpdateAppRequest,
      readonly O: typeof UpdateAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the configuration of the oidc client
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateOIDCAppConfig
     */
    readonly updateOIDCAppConfig: {
      readonly name: "UpdateOIDCAppConfig",
      readonly I: typeof UpdateOIDCAppConfigRequest,
      readonly O: typeof UpdateOIDCAppConfigResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the configuration of the saml application
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateSAMLAppConfig
     */
    readonly updateSAMLAppConfig: {
      readonly name: "UpdateSAMLAppConfig",
      readonly I: typeof UpdateSAMLAppConfigRequest,
      readonly O: typeof UpdateSAMLAppConfigResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the configuration of the api application
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateAPIAppConfig
     */
    readonly updateAPIAppConfig: {
      readonly name: "UpdateAPIAppConfig",
      readonly I: typeof UpdateAPIAppConfigRequest,
      readonly O: typeof UpdateAPIAppConfigResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set the state to deactivated
     * Its not possible to request tokens for deactivated apps
     * Returns an error if already deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateApp
     */
    readonly deactivateApp: {
      readonly name: "DeactivateApp",
      readonly I: typeof DeactivateAppRequest,
      readonly O: typeof DeactivateAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set the state to active
     * Returns an error if not deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateApp
     */
    readonly reactivateApp: {
      readonly name: "ReactivateApp",
      readonly I: typeof ReactivateAppRequest,
      readonly O: typeof ReactivateAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed the application
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveApp
     */
    readonly removeApp: {
      readonly name: "RemoveApp",
      readonly I: typeof RemoveAppRequest,
      readonly O: typeof RemoveAppResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generates a new client secret for the oidc client, make sure to save the response
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RegenerateOIDCClientSecret
     */
    readonly regenerateOIDCClientSecret: {
      readonly name: "RegenerateOIDCClientSecret",
      readonly I: typeof RegenerateOIDCClientSecretRequest,
      readonly O: typeof RegenerateOIDCClientSecretResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Generates a new client secret for the api application, make sure to save the response
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RegenerateAPIClientSecret
     */
    readonly regenerateAPIClientSecret: {
      readonly name: "RegenerateAPIClientSecret",
      readonly I: typeof RegenerateAPIClientSecretRequest,
      readonly O: typeof RegenerateAPIClientSecretResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns an application key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetAppKey
     */
    readonly getAppKey: {
      readonly name: "GetAppKey",
      readonly I: typeof GetAppKeyRequest,
      readonly O: typeof GetAppKeyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all application keys matching the result
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListAppKeys
     */
    readonly listAppKeys: {
      readonly name: "ListAppKeys",
      readonly I: typeof ListAppKeysRequest,
      readonly O: typeof ListAppKeysResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates a new app key
     * Will return key details in result, make sure to save it
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddAppKey
     */
    readonly addAppKey: {
      readonly name: "AddAppKey",
      readonly I: typeof AddAppKeyRequest,
      readonly O: typeof AddAppKeyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes an app key
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveAppKey
     */
    readonly removeAppKey: {
      readonly name: "RemoveAppKey",
      readonly I: typeof RemoveAppKeyRequest,
      readonly O: typeof RemoveAppKeyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the history of the project grant (each event)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectGrantChanges
     */
    readonly listProjectGrantChanges: {
      readonly name: "ListProjectGrantChanges",
      readonly I: typeof ListProjectGrantChangesRequest,
      readonly O: typeof ListProjectGrantChangesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a project grant (ProjectGrant = Grant another organisation for my project)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetProjectGrantByID
     */
    readonly getProjectGrantByID: {
      readonly name: "GetProjectGrantByID",
      readonly I: typeof GetProjectGrantByIDRequest,
      readonly O: typeof GetProjectGrantByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectGrants
     */
    readonly listProjectGrants: {
      readonly name: "ListProjectGrants",
      readonly I: typeof ListProjectGrantsRequest,
      readonly O: typeof ListProjectGrantsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all project grants matching the query, (ProjectGrant = Grant another organisation for my project)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListAllProjectGrants
     */
    readonly listAllProjectGrants: {
      readonly name: "ListAllProjectGrants",
      readonly I: typeof ListAllProjectGrantsRequest,
      readonly O: typeof ListAllProjectGrantsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a new project grant (ProjectGrant = Grant another organisation for my project)
     * Project Grant will be listed in granted project of the other organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddProjectGrant
     */
    readonly addProjectGrant: {
      readonly name: "AddProjectGrant",
      readonly I: typeof AddProjectGrantRequest,
      readonly O: typeof AddProjectGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change project grant (ProjectGrant = Grant another organisation for my project)
     * Project Grant will be listed in granted project of the other organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateProjectGrant
     */
    readonly updateProjectGrant: {
      readonly name: "UpdateProjectGrant",
      readonly I: typeof UpdateProjectGrantRequest,
      readonly O: typeof UpdateProjectGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set state of project grant to deactivated (ProjectGrant = Grant another organisation for my project)
     * Returns error if project not active
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateProjectGrant
     */
    readonly deactivateProjectGrant: {
      readonly name: "DeactivateProjectGrant",
      readonly I: typeof DeactivateProjectGrantRequest,
      readonly O: typeof DeactivateProjectGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Set state of project grant to active (ProjectGrant = Grant another organisation for my project)
     * Returns error if project not deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateProjectGrant
     */
    readonly reactivateProjectGrant: {
      readonly name: "ReactivateProjectGrant",
      readonly I: typeof ReactivateProjectGrantRequest,
      readonly O: typeof ReactivateProjectGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes project grant and all user grants for this project grant
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveProjectGrant
     */
    readonly removeProjectGrant: {
      readonly name: "RemoveProjectGrant",
      readonly I: typeof RemoveProjectGrantRequest,
      readonly O: typeof RemoveProjectGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all ZITADEL roles which are for project grant managers
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectGrantMemberRoles
     */
    readonly listProjectGrantMemberRoles: {
      readonly name: "ListProjectGrantMemberRoles",
      readonly I: typeof ListProjectGrantMemberRolesRequest,
      readonly O: typeof ListProjectGrantMemberRolesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all ZITADEL managers of this project grant
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProjectGrantMembers
     */
    readonly listProjectGrantMembers: {
      readonly name: "ListProjectGrantMembers",
      readonly I: typeof ListProjectGrantMembersRequest,
      readonly O: typeof ListProjectGrantMembersResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new project grant manager, which is allowed to administrate in ZITADEL
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddProjectGrantMember
     */
    readonly addProjectGrantMember: {
      readonly name: "AddProjectGrantMember",
      readonly I: typeof AddProjectGrantMemberRequest,
      readonly O: typeof AddProjectGrantMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes project grant manager, which is allowed to administrate in ZITADEL
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateProjectGrantMember
     */
    readonly updateProjectGrantMember: {
      readonly name: "UpdateProjectGrantMember",
      readonly I: typeof UpdateProjectGrantMemberRequest,
      readonly O: typeof UpdateProjectGrantMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removed project grant manager
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveProjectGrantMember
     */
    readonly removeProjectGrantMember: {
      readonly name: "RemoveProjectGrantMember",
      readonly I: typeof RemoveProjectGrantMemberRequest,
      readonly O: typeof RemoveProjectGrantMemberResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a user grant (authorization of a user for a project)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetUserGrantByID
     */
    readonly getUserGrantByID: {
      readonly name: "GetUserGrantByID",
      readonly I: typeof GetUserGrantByIDRequest,
      readonly O: typeof GetUserGrantByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns al user grant matching the query (authorizations of user for projects)
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListUserGrants
     */
    readonly listUserGrants: {
      readonly name: "ListUserGrants",
      readonly I: typeof ListUserGrantRequest,
      readonly O: typeof ListUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Creates a new user grant (authorization of a user for a project with specified roles)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddUserGrant
     */
    readonly addUserGrant: {
      readonly name: "AddUserGrant",
      readonly I: typeof AddUserGrantRequest,
      readonly O: typeof AddUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes a user grant (authorization of a user for a project with specified roles)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateUserGrant
     */
    readonly updateUserGrant: {
      readonly name: "UpdateUserGrant",
      readonly I: typeof UpdateUserGrantRequest,
      readonly O: typeof UpdateUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of a user grant to deactivated
     * User will not be able to use the granted project anymore
     * Returns an error if user grant is already deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateUserGrant
     */
    readonly deactivateUserGrant: {
      readonly name: "DeactivateUserGrant",
      readonly I: typeof DeactivateUserGrantRequest,
      readonly O: typeof DeactivateUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the state of a user grant to active
     * Returns an error if user grant is not deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateUserGrant
     */
    readonly reactivateUserGrant: {
      readonly name: "ReactivateUserGrant",
      readonly I: typeof ReactivateUserGrantRequest,
      readonly O: typeof ReactivateUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes a user grant
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveUserGrant
     */
    readonly removeUserGrant: {
      readonly name: "RemoveUserGrant",
      readonly I: typeof RemoveUserGrantRequest,
      readonly O: typeof RemoveUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * remove a list of user grants in one request
     *
     * @generated from rpc zitadel.management.v1.ManagementService.BulkRemoveUserGrant
     */
    readonly bulkRemoveUserGrant: {
      readonly name: "BulkRemoveUserGrant",
      readonly I: typeof BulkRemoveUserGrantRequest,
      readonly O: typeof BulkRemoveUserGrantResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * deprecated: please use DomainPolicy instead
     * Returns the domain policy (this policy is managed by the iam administrator)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetOrgIAMPolicy
     */
    readonly getOrgIAMPolicy: {
      readonly name: "GetOrgIAMPolicy",
      readonly I: typeof GetOrgIAMPolicyRequest,
      readonly O: typeof GetOrgIAMPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the domain policy (this policy is managed by the iam administrator)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDomainPolicy
     */
    readonly getDomainPolicy: {
      readonly name: "GetDomainPolicy",
      readonly I: typeof GetDomainPolicyRequest,
      readonly O: typeof GetDomainPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the login policy of the organisation
     * With this policy the login gui can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetLoginPolicy
     */
    readonly getLoginPolicy: {
      readonly name: "GetLoginPolicy",
      readonly I: typeof GetLoginPolicyRequest,
      readonly O: typeof GetLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default login policy configured in the IAM
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultLoginPolicy
     */
    readonly getDefaultLoginPolicy: {
      readonly name: "GetDefaultLoginPolicy",
      readonly I: typeof GetDefaultLoginPolicyRequest,
      readonly O: typeof GetDefaultLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a custom login policy for the organisation
     * With this policy the login gui can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomLoginPolicy
     */
    readonly addCustomLoginPolicy: {
      readonly name: "AddCustomLoginPolicy",
      readonly I: typeof AddCustomLoginPolicyRequest,
      readonly O: typeof AddCustomLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change the custom login policy for the organisation
     * With this policy the login gui can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomLoginPolicy
     */
    readonly updateCustomLoginPolicy: {
      readonly name: "UpdateCustomLoginPolicy",
      readonly I: typeof UpdateCustomLoginPolicyRequest,
      readonly O: typeof UpdateCustomLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom login policy of the organisation
     * The default policy of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetLoginPolicyToDefault
     */
    readonly resetLoginPolicyToDefault: {
      readonly name: "ResetLoginPolicyToDefault",
      readonly I: typeof ResetLoginPolicyToDefaultRequest,
      readonly O: typeof ResetLoginPolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Lists all possible identity providers configured on the organisation
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListLoginPolicyIDPs
     */
    readonly listLoginPolicyIDPs: {
      readonly name: "ListLoginPolicyIDPs",
      readonly I: typeof ListLoginPolicyIDPsRequest,
      readonly O: typeof ListLoginPolicyIDPsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a (preconfigured) identity provider to the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddIDPToLoginPolicy
     */
    readonly addIDPToLoginPolicy: {
      readonly name: "AddIDPToLoginPolicy",
      readonly I: typeof AddIDPToLoginPolicyRequest,
      readonly O: typeof AddIDPToLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a identity provider from the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveIDPFromLoginPolicy
     */
    readonly removeIDPFromLoginPolicy: {
      readonly name: "RemoveIDPFromLoginPolicy",
      readonly I: typeof RemoveIDPFromLoginPolicyRequest,
      readonly O: typeof RemoveIDPFromLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all configured second factors of the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListLoginPolicySecondFactors
     */
    readonly listLoginPolicySecondFactors: {
      readonly name: "ListLoginPolicySecondFactors",
      readonly I: typeof ListLoginPolicySecondFactorsRequest,
      readonly O: typeof ListLoginPolicySecondFactorsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new second factor to the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddSecondFactorToLoginPolicy
     */
    readonly addSecondFactorToLoginPolicy: {
      readonly name: "AddSecondFactorToLoginPolicy",
      readonly I: typeof AddSecondFactorToLoginPolicyRequest,
      readonly O: typeof AddSecondFactorToLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a second factor from the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveSecondFactorFromLoginPolicy
     */
    readonly removeSecondFactorFromLoginPolicy: {
      readonly name: "RemoveSecondFactorFromLoginPolicy",
      readonly I: typeof RemoveSecondFactorFromLoginPolicyRequest,
      readonly O: typeof RemoveSecondFactorFromLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all configured multi factors of the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListLoginPolicyMultiFactors
     */
    readonly listLoginPolicyMultiFactors: {
      readonly name: "ListLoginPolicyMultiFactors",
      readonly I: typeof ListLoginPolicyMultiFactorsRequest,
      readonly O: typeof ListLoginPolicyMultiFactorsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Adds a new multi factor to the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddMultiFactorToLoginPolicy
     */
    readonly addMultiFactorToLoginPolicy: {
      readonly name: "AddMultiFactorToLoginPolicy",
      readonly I: typeof AddMultiFactorToLoginPolicyRequest,
      readonly O: typeof AddMultiFactorToLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove a multi factor from the custom login policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveMultiFactorFromLoginPolicy
     */
    readonly removeMultiFactorFromLoginPolicy: {
      readonly name: "RemoveMultiFactorFromLoginPolicy",
      readonly I: typeof RemoveMultiFactorFromLoginPolicyRequest,
      readonly O: typeof RemoveMultiFactorFromLoginPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the password complexity policy of the organisation
     * With this policy the password strength can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetPasswordComplexityPolicy
     */
    readonly getPasswordComplexityPolicy: {
      readonly name: "GetPasswordComplexityPolicy",
      readonly I: typeof GetPasswordComplexityPolicyRequest,
      readonly O: typeof GetPasswordComplexityPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default password complexity policy of the IAM
     * With this policy the password strength can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultPasswordComplexityPolicy
     */
    readonly getDefaultPasswordComplexityPolicy: {
      readonly name: "GetDefaultPasswordComplexityPolicy",
      readonly I: typeof GetDefaultPasswordComplexityPolicyRequest,
      readonly O: typeof GetDefaultPasswordComplexityPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a custom password complexity policy for the organisation
     * With this policy the password strength can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomPasswordComplexityPolicy
     */
    readonly addCustomPasswordComplexityPolicy: {
      readonly name: "AddCustomPasswordComplexityPolicy",
      readonly I: typeof AddCustomPasswordComplexityPolicyRequest,
      readonly O: typeof AddCustomPasswordComplexityPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update the custom password complexity policy for the organisation
     * With this policy the password strength can be configured
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomPasswordComplexityPolicy
     */
    readonly updateCustomPasswordComplexityPolicy: {
      readonly name: "UpdateCustomPasswordComplexityPolicy",
      readonly I: typeof UpdateCustomPasswordComplexityPolicyRequest,
      readonly O: typeof UpdateCustomPasswordComplexityPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom password complexity policy of the organisation
     * The default policy of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetPasswordComplexityPolicyToDefault
     */
    readonly resetPasswordComplexityPolicyToDefault: {
      readonly name: "ResetPasswordComplexityPolicyToDefault",
      readonly I: typeof ResetPasswordComplexityPolicyToDefaultRequest,
      readonly O: typeof ResetPasswordComplexityPolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The password age policy is not used at the moment
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetPasswordAgePolicy
     */
    readonly getPasswordAgePolicy: {
      readonly name: "GetPasswordAgePolicy",
      readonly I: typeof GetPasswordAgePolicyRequest,
      readonly O: typeof GetPasswordAgePolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The password age policy is not used at the moment
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultPasswordAgePolicy
     */
    readonly getDefaultPasswordAgePolicy: {
      readonly name: "GetDefaultPasswordAgePolicy",
      readonly I: typeof GetDefaultPasswordAgePolicyRequest,
      readonly O: typeof GetDefaultPasswordAgePolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The password age policy is not used at the moment
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomPasswordAgePolicy
     */
    readonly addCustomPasswordAgePolicy: {
      readonly name: "AddCustomPasswordAgePolicy",
      readonly I: typeof AddCustomPasswordAgePolicyRequest,
      readonly O: typeof AddCustomPasswordAgePolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The password age policy is not used at the moment
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomPasswordAgePolicy
     */
    readonly updateCustomPasswordAgePolicy: {
      readonly name: "UpdateCustomPasswordAgePolicy",
      readonly I: typeof UpdateCustomPasswordAgePolicyRequest,
      readonly O: typeof UpdateCustomPasswordAgePolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * The password age policy is not used at the moment
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetPasswordAgePolicyToDefault
     */
    readonly resetPasswordAgePolicyToDefault: {
      readonly name: "ResetPasswordAgePolicyToDefault",
      readonly I: typeof ResetPasswordAgePolicyToDefaultRequest,
      readonly O: typeof ResetPasswordAgePolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.GetLockoutPolicy
     */
    readonly getLockoutPolicy: {
      readonly name: "GetLockoutPolicy",
      readonly I: typeof GetLockoutPolicyRequest,
      readonly O: typeof GetLockoutPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultLockoutPolicy
     */
    readonly getDefaultLockoutPolicy: {
      readonly name: "GetDefaultLockoutPolicy",
      readonly I: typeof GetDefaultLockoutPolicyRequest,
      readonly O: typeof GetDefaultLockoutPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomLockoutPolicy
     */
    readonly addCustomLockoutPolicy: {
      readonly name: "AddCustomLockoutPolicy",
      readonly I: typeof AddCustomLockoutPolicyRequest,
      readonly O: typeof AddCustomLockoutPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomLockoutPolicy
     */
    readonly updateCustomLockoutPolicy: {
      readonly name: "UpdateCustomLockoutPolicy",
      readonly I: typeof UpdateCustomLockoutPolicyRequest,
      readonly O: typeof UpdateCustomLockoutPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.ResetLockoutPolicyToDefault
     */
    readonly resetLockoutPolicyToDefault: {
      readonly name: "ResetLockoutPolicyToDefault",
      readonly I: typeof ResetLockoutPolicyToDefaultRequest,
      readonly O: typeof ResetLockoutPolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the privacy policy of the organisation
     * With this policy privacy relevant things can be configured (e.g. tos link)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetPrivacyPolicy
     */
    readonly getPrivacyPolicy: {
      readonly name: "GetPrivacyPolicy",
      readonly I: typeof GetPrivacyPolicyRequest,
      readonly O: typeof GetPrivacyPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default privacy policy of the IAM
     * With this policy the privacy relevant things can be configured (e.g tos link)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultPrivacyPolicy
     */
    readonly getDefaultPrivacyPolicy: {
      readonly name: "GetDefaultPrivacyPolicy",
      readonly I: typeof GetDefaultPrivacyPolicyRequest,
      readonly O: typeof GetDefaultPrivacyPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a custom privacy policy for the organisation
     * With this policy privacy relevant things can be configured (e.g. tos link)
     * Variable {{.Lang}} can be set to have different links based on the language
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomPrivacyPolicy
     */
    readonly addCustomPrivacyPolicy: {
      readonly name: "AddCustomPrivacyPolicy",
      readonly I: typeof AddCustomPrivacyPolicyRequest,
      readonly O: typeof AddCustomPrivacyPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update the privacy policy for the organisation
     * With this policy privacy relevant things can be configured (e.g. tos link)
     * Variable {{.Lang}} can be set to have different links based on the language
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomPrivacyPolicy
     */
    readonly updateCustomPrivacyPolicy: {
      readonly name: "UpdateCustomPrivacyPolicy",
      readonly I: typeof UpdateCustomPrivacyPolicyRequest,
      readonly O: typeof UpdateCustomPrivacyPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the privacy policy of the organisation
     * The default policy of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetPrivacyPolicyToDefault
     */
    readonly resetPrivacyPolicyToDefault: {
      readonly name: "ResetPrivacyPolicyToDefault",
      readonly I: typeof ResetPrivacyPolicyToDefaultRequest,
      readonly O: typeof ResetPrivacyPolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the notification policy of the organisation
     * With this notification policy it can be configured how users should be notified
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetNotificationPolicy
     */
    readonly getNotificationPolicy: {
      readonly name: "GetNotificationPolicy",
      readonly I: typeof GetNotificationPolicyRequest,
      readonly O: typeof GetNotificationPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default notification policy of the IAM
     * With this notification privacy it can be configured how users should be notified
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultNotificationPolicy
     */
    readonly getDefaultNotificationPolicy: {
      readonly name: "GetDefaultNotificationPolicy",
      readonly I: typeof GetDefaultNotificationPolicyRequest,
      readonly O: typeof GetDefaultNotificationPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a custom notification policy for the organisation
     * With this notification privacy it can be configured how users should be notified
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomNotificationPolicy
     */
    readonly addCustomNotificationPolicy: {
      readonly name: "AddCustomNotificationPolicy",
      readonly I: typeof AddCustomNotificationPolicyRequest,
      readonly O: typeof AddCustomNotificationPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Update the notification policy for the organisation
     * With this notification privacy it can be configured how users should be notified
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomNotificationPolicy
     */
    readonly updateCustomNotificationPolicy: {
      readonly name: "UpdateCustomNotificationPolicy",
      readonly I: typeof UpdateCustomNotificationPolicyRequest,
      readonly O: typeof UpdateCustomNotificationPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the notification policy of the organisation
     * The default policy of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetNotificationPolicyToDefault
     */
    readonly resetNotificationPolicyToDefault: {
      readonly name: "ResetNotificationPolicyToDefault",
      readonly I: typeof ResetNotificationPolicyToDefaultRequest,
      readonly O: typeof ResetNotificationPolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the active label policy of the organisation
     * With this policy the private labeling can be configured (colors, etc.)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetLabelPolicy
     */
    readonly getLabelPolicy: {
      readonly name: "GetLabelPolicy",
      readonly I: typeof GetLabelPolicyRequest,
      readonly O: typeof GetLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the preview label policy of the organisation
     * With this policy the private labeling can be configured (colors, etc.)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetPreviewLabelPolicy
     */
    readonly getPreviewLabelPolicy: {
      readonly name: "GetPreviewLabelPolicy",
      readonly I: typeof GetPreviewLabelPolicyRequest,
      readonly O: typeof GetPreviewLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default label policy of the IAM
     * With this policy the private labeling can be configured (colors, etc.)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultLabelPolicy
     */
    readonly getDefaultLabelPolicy: {
      readonly name: "GetDefaultLabelPolicy",
      readonly I: typeof GetDefaultLabelPolicyRequest,
      readonly O: typeof GetDefaultLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a custom label policy for the organisation
     * With this policy the private labeling can be configured (colors, etc.)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddCustomLabelPolicy
     */
    readonly addCustomLabelPolicy: {
      readonly name: "AddCustomLabelPolicy",
      readonly I: typeof AddCustomLabelPolicyRequest,
      readonly O: typeof AddCustomLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Changes the custom label policy for the organisation
     * With this policy the private labeling can be configured (colors, etc.)
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateCustomLabelPolicy
     */
    readonly updateCustomLabelPolicy: {
      readonly name: "UpdateCustomLabelPolicy",
      readonly I: typeof UpdateCustomLabelPolicyRequest,
      readonly O: typeof UpdateCustomLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Activates all changes of the label policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ActivateCustomLabelPolicy
     */
    readonly activateCustomLabelPolicy: {
      readonly name: "ActivateCustomLabelPolicy",
      readonly I: typeof ActivateCustomLabelPolicyRequest,
      readonly O: typeof ActivateCustomLabelPolicyResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the logo of the label policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyLogo
     */
    readonly removeCustomLabelPolicyLogo: {
      readonly name: "RemoveCustomLabelPolicyLogo",
      readonly I: typeof RemoveCustomLabelPolicyLogoRequest,
      readonly O: typeof RemoveCustomLabelPolicyLogoResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the logo dark of the label policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyLogoDark
     */
    readonly removeCustomLabelPolicyLogoDark: {
      readonly name: "RemoveCustomLabelPolicyLogoDark",
      readonly I: typeof RemoveCustomLabelPolicyLogoDarkRequest,
      readonly O: typeof RemoveCustomLabelPolicyLogoDarkResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the icon of the label policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyIcon
     */
    readonly removeCustomLabelPolicyIcon: {
      readonly name: "RemoveCustomLabelPolicyIcon",
      readonly I: typeof RemoveCustomLabelPolicyIconRequest,
      readonly O: typeof RemoveCustomLabelPolicyIconResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the logo dark of the label policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyIconDark
     */
    readonly removeCustomLabelPolicyIconDark: {
      readonly name: "RemoveCustomLabelPolicyIconDark",
      readonly I: typeof RemoveCustomLabelPolicyIconDarkRequest,
      readonly O: typeof RemoveCustomLabelPolicyIconDarkResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the font of the label policy
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveCustomLabelPolicyFont
     */
    readonly removeCustomLabelPolicyFont: {
      readonly name: "RemoveCustomLabelPolicyFont",
      readonly I: typeof RemoveCustomLabelPolicyFontRequest,
      readonly O: typeof RemoveCustomLabelPolicyFontResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom label policy of the organisation
     * The default policy of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetLabelPolicyToDefault
     */
    readonly resetLabelPolicyToDefault: {
      readonly name: "ResetLabelPolicyToDefault",
      readonly I: typeof ResetLabelPolicyToDefaultRequest,
      readonly O: typeof ResetLabelPolicyToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for initial message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomInitMessageText
     */
    readonly getCustomInitMessageText: {
      readonly name: "GetCustomInitMessageText",
      readonly I: typeof GetCustomInitMessageTextRequest,
      readonly O: typeof GetCustomInitMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default text for initial message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultInitMessageText
     */
    readonly getDefaultInitMessageText: {
      readonly name: "GetDefaultInitMessageText",
      readonly I: typeof GetDefaultInitMessageTextRequest,
      readonly O: typeof GetDefaultInitMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the custom text for initial message
     * The Following Variables can be used:
     * {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomInitMessageText
     */
    readonly setCustomInitMessageText: {
      readonly name: "SetCustomInitMessageText",
      readonly I: typeof SetCustomInitMessageTextRequest,
      readonly O: typeof SetCustomInitMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom init message text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomInitMessageTextToDefault
     */
    readonly resetCustomInitMessageTextToDefault: {
      readonly name: "ResetCustomInitMessageTextToDefault",
      readonly I: typeof ResetCustomInitMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomInitMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for password reset message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomPasswordResetMessageText
     */
    readonly getCustomPasswordResetMessageText: {
      readonly name: "GetCustomPasswordResetMessageText",
      readonly I: typeof GetCustomPasswordResetMessageTextRequest,
      readonly O: typeof GetCustomPasswordResetMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default text for password reset message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultPasswordResetMessageText
     */
    readonly getDefaultPasswordResetMessageText: {
      readonly name: "GetDefaultPasswordResetMessageText",
      readonly I: typeof GetDefaultPasswordResetMessageTextRequest,
      readonly O: typeof GetDefaultPasswordResetMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the custom text for password reset message
     * The Following Variables can be used:
     * {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomPasswordResetMessageText
     */
    readonly setCustomPasswordResetMessageText: {
      readonly name: "SetCustomPasswordResetMessageText",
      readonly I: typeof SetCustomPasswordResetMessageTextRequest,
      readonly O: typeof SetCustomPasswordResetMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom password reset message text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomPasswordResetMessageTextToDefault
     */
    readonly resetCustomPasswordResetMessageTextToDefault: {
      readonly name: "ResetCustomPasswordResetMessageTextToDefault",
      readonly I: typeof ResetCustomPasswordResetMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomPasswordResetMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for verify email message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomVerifyEmailMessageText
     */
    readonly getCustomVerifyEmailMessageText: {
      readonly name: "GetCustomVerifyEmailMessageText",
      readonly I: typeof GetCustomVerifyEmailMessageTextRequest,
      readonly O: typeof GetCustomVerifyEmailMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the default text for verify email message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultVerifyEmailMessageText
     */
    readonly getDefaultVerifyEmailMessageText: {
      readonly name: "GetDefaultVerifyEmailMessageText",
      readonly I: typeof GetDefaultVerifyEmailMessageTextRequest,
      readonly O: typeof GetDefaultVerifyEmailMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the custom text for verify email message
     * The Following Variables can be used:
     * {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomVerifyEmailMessageText
     */
    readonly setCustomVerifyEmailMessageText: {
      readonly name: "SetCustomVerifyEmailMessageText",
      readonly I: typeof SetCustomVerifyEmailMessageTextRequest,
      readonly O: typeof SetCustomVerifyEmailMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom verify email message text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomVerifyEmailMessageTextToDefault
     */
    readonly resetCustomVerifyEmailMessageTextToDefault: {
      readonly name: "ResetCustomVerifyEmailMessageTextToDefault",
      readonly I: typeof ResetCustomVerifyEmailMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomVerifyEmailMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for verify email message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomVerifyPhoneMessageText
     */
    readonly getCustomVerifyPhoneMessageText: {
      readonly name: "GetCustomVerifyPhoneMessageText",
      readonly I: typeof GetCustomVerifyPhoneMessageTextRequest,
      readonly O: typeof GetCustomVerifyPhoneMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for verify email message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultVerifyPhoneMessageText
     */
    readonly getDefaultVerifyPhoneMessageText: {
      readonly name: "GetDefaultVerifyPhoneMessageText",
      readonly I: typeof GetDefaultVerifyPhoneMessageTextRequest,
      readonly O: typeof GetDefaultVerifyPhoneMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the default custom text for verify email message
     * The Following Variables can be used:
     * {{.Code}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomVerifyPhoneMessageText
     */
    readonly setCustomVerifyPhoneMessageText: {
      readonly name: "SetCustomVerifyPhoneMessageText",
      readonly I: typeof SetCustomVerifyPhoneMessageTextRequest,
      readonly O: typeof SetCustomVerifyPhoneMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom verify phone text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomVerifyPhoneMessageTextToDefault
     */
    readonly resetCustomVerifyPhoneMessageTextToDefault: {
      readonly name: "ResetCustomVerifyPhoneMessageTextToDefault",
      readonly I: typeof ResetCustomVerifyPhoneMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomVerifyPhoneMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for domain claimed message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomDomainClaimedMessageText
     */
    readonly getCustomDomainClaimedMessageText: {
      readonly name: "GetCustomDomainClaimedMessageText",
      readonly I: typeof GetCustomDomainClaimedMessageTextRequest,
      readonly O: typeof GetCustomDomainClaimedMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for domain claimed message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultDomainClaimedMessageText
     */
    readonly getDefaultDomainClaimedMessageText: {
      readonly name: "GetDefaultDomainClaimedMessageText",
      readonly I: typeof GetDefaultDomainClaimedMessageTextRequest,
      readonly O: typeof GetDefaultDomainClaimedMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the custom text for domain claimed message
     * The Following Variables can be used:
     * {{.Domain}} {{.TempUsername}} {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomDomainClaimedMessageCustomText
     */
    readonly setCustomDomainClaimedMessageCustomText: {
      readonly name: "SetCustomDomainClaimedMessageCustomText",
      readonly I: typeof SetCustomDomainClaimedMessageTextRequest,
      readonly O: typeof SetCustomDomainClaimedMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom domain claimed message text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomDomainClaimedMessageTextToDefault
     */
    readonly resetCustomDomainClaimedMessageTextToDefault: {
      readonly name: "ResetCustomDomainClaimedMessageTextToDefault",
      readonly I: typeof ResetCustomDomainClaimedMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomDomainClaimedMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for passwordless link message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomPasswordlessRegistrationMessageText
     */
    readonly getCustomPasswordlessRegistrationMessageText: {
      readonly name: "GetCustomPasswordlessRegistrationMessageText",
      readonly I: typeof GetCustomPasswordlessRegistrationMessageTextRequest,
      readonly O: typeof GetCustomPasswordlessRegistrationMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for passwordless link message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultPasswordlessRegistrationMessageText
     */
    readonly getDefaultPasswordlessRegistrationMessageText: {
      readonly name: "GetDefaultPasswordlessRegistrationMessageText",
      readonly I: typeof GetDefaultPasswordlessRegistrationMessageTextRequest,
      readonly O: typeof GetDefaultPasswordlessRegistrationMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the custom text for passwordless link message
     * The Following Variables can be used:
     * {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomPasswordlessRegistrationMessageCustomText
     */
    readonly setCustomPasswordlessRegistrationMessageCustomText: {
      readonly name: "SetCustomPasswordlessRegistrationMessageCustomText",
      readonly I: typeof SetCustomPasswordlessRegistrationMessageTextRequest,
      readonly O: typeof SetCustomPasswordlessRegistrationMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom passwordless link message text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomPasswordlessRegistrationMessageTextToDefault
     */
    readonly resetCustomPasswordlessRegistrationMessageTextToDefault: {
      readonly name: "ResetCustomPasswordlessRegistrationMessageTextToDefault",
      readonly I: typeof ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for password change message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomPasswordChangeMessageText
     */
    readonly getCustomPasswordChangeMessageText: {
      readonly name: "GetCustomPasswordChangeMessageText",
      readonly I: typeof GetCustomPasswordChangeMessageTextRequest,
      readonly O: typeof GetCustomPasswordChangeMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom text for password change link message
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultPasswordChangeMessageText
     */
    readonly getDefaultPasswordChangeMessageText: {
      readonly name: "GetDefaultPasswordChangeMessageText",
      readonly I: typeof GetDefaultPasswordChangeMessageTextRequest,
      readonly O: typeof GetDefaultPasswordChangeMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the custom text for password change message
     * The Following Variables can be used:
     * {{.UserName}} {{.FirstName}} {{.LastName}} {{.NickName}} {{.DisplayName}} {{.LastEmail}} {{.VerifiedEmail}} {{.LastPhone}} {{.VerifiedPhone}} {{.PreferredLoginName}} {{.LoginNames}} {{.ChangeDate}} {{.CreationDate}}
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomPasswordChangeMessageCustomText
     */
    readonly setCustomPasswordChangeMessageCustomText: {
      readonly name: "SetCustomPasswordChangeMessageCustomText",
      readonly I: typeof SetCustomPasswordChangeMessageTextRequest,
      readonly O: typeof SetCustomPasswordChangeMessageTextResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom password change message text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomPasswordChangeMessageTextToDefault
     */
    readonly resetCustomPasswordChangeMessageTextToDefault: {
      readonly name: "ResetCustomPasswordChangeMessageTextToDefault",
      readonly I: typeof ResetCustomPasswordChangeMessageTextToDefaultRequest,
      readonly O: typeof ResetCustomPasswordChangeMessageTextToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom texts for login ui
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetCustomLoginTexts
     */
    readonly getCustomLoginTexts: {
      readonly name: "GetCustomLoginTexts",
      readonly I: typeof GetCustomLoginTextsRequest,
      readonly O: typeof GetCustomLoginTextsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns the custom texts for login ui
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetDefaultLoginTexts
     */
    readonly getDefaultLoginTexts: {
      readonly name: "GetDefaultLoginTexts",
      readonly I: typeof GetDefaultLoginTextsRequest,
      readonly O: typeof GetDefaultLoginTextsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Sets the default custom text for login ui
     * it impacts all organisations without customized login ui texts
     *
     * @generated from rpc zitadel.management.v1.ManagementService.SetCustomLoginText
     */
    readonly setCustomLoginText: {
      readonly name: "SetCustomLoginText",
      readonly I: typeof SetCustomLoginTextsRequest,
      readonly O: typeof SetCustomLoginTextsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes the custom login text of the organisation
     * The default text of the IAM will trigger after
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ResetCustomLoginTextToDefault
     */
    readonly resetCustomLoginTextToDefault: {
      readonly name: "ResetCustomLoginTextToDefault",
      readonly I: typeof ResetCustomLoginTextsToDefaultRequest,
      readonly O: typeof ResetCustomLoginTextsToDefaultResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns a identity provider configuration of the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetOrgIDPByID
     */
    readonly getOrgIDPByID: {
      readonly name: "GetOrgIDPByID",
      readonly I: typeof GetOrgIDPByIDRequest,
      readonly O: typeof GetOrgIDPByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all identity provider configuration in the organisation, which match the query
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListOrgIDPs
     */
    readonly listOrgIDPs: {
      readonly name: "ListOrgIDPs",
      readonly I: typeof ListOrgIDPsRequest,
      readonly O: typeof ListOrgIDPsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a new identity provider configuration in the organisation
     * Provider must be OIDC compliant
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddOrgOIDCIDP
     */
    readonly addOrgOIDCIDP: {
      readonly name: "AddOrgOIDCIDP",
      readonly I: typeof AddOrgOIDCIDPRequest,
      readonly O: typeof AddOrgOIDCIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a new jwt identity provider configuration in the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddOrgJWTIDP
     */
    readonly addOrgJWTIDP: {
      readonly name: "AddOrgJWTIDP",
      readonly I: typeof AddOrgJWTIDPRequest,
      readonly O: typeof AddOrgJWTIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Deactivate identity provider configuration
     * Users will not be able to use this provider for login (e.g Google, Microsoft, AD, etc)
     * Returns error if already deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateOrgIDP
     */
    readonly deactivateOrgIDP: {
      readonly name: "DeactivateOrgIDP",
      readonly I: typeof DeactivateOrgIDPRequest,
      readonly O: typeof DeactivateOrgIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Activate identity provider configuration
     * Returns error if not deactivated
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateOrgIDP
     */
    readonly reactivateOrgIDP: {
      readonly name: "ReactivateOrgIDP",
      readonly I: typeof ReactivateOrgIDPRequest,
      readonly O: typeof ReactivateOrgIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Removes identity provider configuration
     * Will remove all linked providers of this configuration on the users
     *
     * @generated from rpc zitadel.management.v1.ManagementService.RemoveOrgIDP
     */
    readonly removeOrgIDP: {
      readonly name: "RemoveOrgIDP",
      readonly I: typeof RemoveOrgIDPRequest,
      readonly O: typeof RemoveOrgIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change identity provider configuration of the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateOrgIDP
     */
    readonly updateOrgIDP: {
      readonly name: "UpdateOrgIDP",
      readonly I: typeof UpdateOrgIDPRequest,
      readonly O: typeof UpdateOrgIDPResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change OIDC identity provider configuration of the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateOrgIDPOIDCConfig
     */
    readonly updateOrgIDPOIDCConfig: {
      readonly name: "UpdateOrgIDPOIDCConfig",
      readonly I: typeof UpdateOrgIDPOIDCConfigRequest,
      readonly O: typeof UpdateOrgIDPOIDCConfigResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change JWT identity provider configuration of the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateOrgIDPJWTConfig
     */
    readonly updateOrgIDPJWTConfig: {
      readonly name: "UpdateOrgIDPJWTConfig",
      readonly I: typeof UpdateOrgIDPJWTConfigRequest,
      readonly O: typeof UpdateOrgIDPJWTConfigResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns all identity providers, which match the query
     * Limit should always be set, there is a default limit set by the service
     *
     * @generated from rpc zitadel.management.v1.ManagementService.ListProviders
     */
    readonly listProviders: {
      readonly name: "ListProviders",
      readonly I: typeof ListProvidersRequest,
      readonly O: typeof ListProvidersResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Returns an identity provider of the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.GetProviderByID
     */
    readonly getProviderByID: {
      readonly name: "GetProviderByID",
      readonly I: typeof GetProviderByIDRequest,
      readonly O: typeof GetProviderByIDResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Add a new ldap identity provider in the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.AddLDAPProvider
     */
    readonly addLDAPProvider: {
      readonly name: "AddLDAPProvider",
      readonly I: typeof AddLDAPProviderRequest,
      readonly O: typeof AddLDAPProviderResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Change an existing ldap identity provider in the organisation
     *
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateLDAPProvider
     */
    readonly updateLDAPProvider: {
      readonly name: "UpdateLDAPProvider",
      readonly I: typeof UpdateLDAPProviderRequest,
      readonly O: typeof UpdateLDAPProviderResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * Remove an identity provider
     * Will remove all linked providers of this configuration on the users
     *
     * @generated from rpc zitadel.management.v1.ManagementService.DeleteProvider
     */
    readonly deleteProvider: {
      readonly name: "DeleteProvider",
      readonly I: typeof DeleteProviderRequest,
      readonly O: typeof DeleteProviderResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.ListActions
     */
    readonly listActions: {
      readonly name: "ListActions",
      readonly I: typeof ListActionsRequest,
      readonly O: typeof ListActionsResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.GetAction
     */
    readonly getAction: {
      readonly name: "GetAction",
      readonly I: typeof GetActionRequest,
      readonly O: typeof GetActionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.CreateAction
     */
    readonly createAction: {
      readonly name: "CreateAction",
      readonly I: typeof CreateActionRequest,
      readonly O: typeof CreateActionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.UpdateAction
     */
    readonly updateAction: {
      readonly name: "UpdateAction",
      readonly I: typeof UpdateActionRequest,
      readonly O: typeof UpdateActionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.DeactivateAction
     */
    readonly deactivateAction: {
      readonly name: "DeactivateAction",
      readonly I: typeof DeactivateActionRequest,
      readonly O: typeof DeactivateActionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.ReactivateAction
     */
    readonly reactivateAction: {
      readonly name: "ReactivateAction",
      readonly I: typeof ReactivateActionRequest,
      readonly O: typeof ReactivateActionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.DeleteAction
     */
    readonly deleteAction: {
      readonly name: "DeleteAction",
      readonly I: typeof DeleteActionRequest,
      readonly O: typeof DeleteActionResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.ListFlowTypes
     */
    readonly listFlowTypes: {
      readonly name: "ListFlowTypes",
      readonly I: typeof ListFlowTypesRequest,
      readonly O: typeof ListFlowTypesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.ListFlowTriggerTypes
     */
    readonly listFlowTriggerTypes: {
      readonly name: "ListFlowTriggerTypes",
      readonly I: typeof ListFlowTriggerTypesRequest,
      readonly O: typeof ListFlowTriggerTypesResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.GetFlow
     */
    readonly getFlow: {
      readonly name: "GetFlow",
      readonly I: typeof GetFlowRequest,
      readonly O: typeof GetFlowResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.ClearFlow
     */
    readonly clearFlow: {
      readonly name: "ClearFlow",
      readonly I: typeof ClearFlowRequest,
      readonly O: typeof ClearFlowResponse,
      readonly kind: MethodKind.Unary,
    },
    /**
     * @generated from rpc zitadel.management.v1.ManagementService.SetTriggerActions
     */
    readonly setTriggerActions: {
      readonly name: "SetTriggerActions",
      readonly I: typeof SetTriggerActionsRequest,
      readonly O: typeof SetTriggerActionsResponse,
      readonly kind: MethodKind.Unary,
    },
  }
};

