// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package v1

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	authn "github.com/zitadel/zitadel/pkg/grpc/authn"
	idp "github.com/zitadel/zitadel/pkg/grpc/idp"
	management "github.com/zitadel/zitadel/pkg/grpc/management"
	org "github.com/zitadel/zitadel/pkg/grpc/org"
	user "github.com/zitadel/zitadel/pkg/grpc/user"
	os "os"
)

type AddCustomOrgIAMPolicyRequestFlag struct {
	*AddCustomOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                 *cli_client.StringParser
	userLoginMustBeDomainFlag *cli_client.BoolParser
}

func (x *AddCustomOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomOrgIAMPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.AddCustomOrgIAMPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.AddCustomOrgIAMPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
}

func (x *AddCustomOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type DataAPIApplicationFlag struct {
	*DataAPIApplication

	changed bool
	set     *pflag.FlagSet

	appIdFlag *cli_client.StringParser
	appFlag   *management.AddAPIAppRequestFlag
}

func (x *DataAPIApplicationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataAPIApplication", pflag.ContinueOnError)

	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.appFlag = &management.AddAPIAppRequestFlag{AddAPIAppRequest: new(management.AddAPIAppRequest)}
	x.appFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataAPIApplicationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "app")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("app"); flagIdx != nil {
		x.appFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.appIdFlag.Changed() {
		x.changed = true
		x.DataAPIApplication.AppId = *x.appIdFlag.Value
	}

	if x.appFlag.Changed() {
		x.changed = true
		x.DataAPIApplication.App = x.appFlag.AddAPIAppRequest
	}

}

func (x *DataAPIApplicationFlag) Changed() bool {
	return x.changed
}

type DataActionFlag struct {
	*DataAction

	changed bool
	set     *pflag.FlagSet

	actionIdFlag *cli_client.StringParser
	actionFlag   *management.CreateActionRequestFlag
}

func (x *DataActionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataAction", pflag.ContinueOnError)

	x.actionIdFlag = cli_client.NewStringParser(x.set, "action-id", "")
	x.actionFlag = &management.CreateActionRequestFlag{CreateActionRequest: new(management.CreateActionRequest)}
	x.actionFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataActionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "action")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("action"); flagIdx != nil {
		x.actionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.actionIdFlag.Changed() {
		x.changed = true
		x.DataAction.ActionId = *x.actionIdFlag.Value
	}

	if x.actionFlag.Changed() {
		x.changed = true
		x.DataAction.Action = x.actionFlag.CreateActionRequest
	}

}

func (x *DataActionFlag) Changed() bool {
	return x.changed
}

type DataAppKeyFlag struct {
	*DataAppKey

	changed bool
	set     *pflag.FlagSet

	idFlag             *cli_client.StringParser
	projectIdFlag      *cli_client.StringParser
	appIdFlag          *cli_client.StringParser
	clientIdFlag       *cli_client.StringParser
	typeFlag           *cli_client.EnumParser[authn.KeyType]
	expirationDateFlag *cli_client.TimestampParser
	publicKeyFlag      *cli_client.BytesParser
}

func (x *DataAppKeyFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataAppKey", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.typeFlag = cli_client.NewEnumParser[authn.KeyType](x.set, "type", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	x.publicKeyFlag = cli_client.NewBytesParser(x.set, "public-key", "")
	parent.AddFlagSet(x.set)
}

func (x *DataAppKeyFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DataAppKey.Id = *x.idFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.DataAppKey.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.DataAppKey.AppId = *x.appIdFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.DataAppKey.ClientId = *x.clientIdFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.DataAppKey.Type = *x.typeFlag.Value
	}
	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.DataAppKey.ExpirationDate = x.expirationDateFlag.Value
	}
	if x.publicKeyFlag.Changed() {
		x.changed = true
		x.DataAppKey.PublicKey = *x.publicKeyFlag.Value
	}
}

func (x *DataAppKeyFlag) Changed() bool {
	return x.changed
}

type DataHumanUserFlag struct {
	*DataHumanUser

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	userFlag   *management.ImportHumanUserRequestFlag
}

func (x *DataHumanUserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataHumanUser", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userFlag = &management.ImportHumanUserRequestFlag{ImportHumanUserRequest: new(management.ImportHumanUserRequest)}
	x.userFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataHumanUserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.DataHumanUser.UserId = *x.userIdFlag.Value
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.DataHumanUser.User = x.userFlag.ImportHumanUserRequest
	}

}

func (x *DataHumanUserFlag) Changed() bool {
	return x.changed
}

type DataJWTIDPFlag struct {
	*DataJWTIDP

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
	idpFlag   *management.AddOrgJWTIDPRequestFlag
}

func (x *DataJWTIDPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataJWTIDP", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.idpFlag = &management.AddOrgJWTIDPRequestFlag{AddOrgJWTIDPRequest: new(management.AddOrgJWTIDPRequest)}
	x.idpFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataJWTIDPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp"); flagIdx != nil {
		x.idpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.DataJWTIDP.IdpId = *x.idpIdFlag.Value
	}

	if x.idpFlag.Changed() {
		x.changed = true
		x.DataJWTIDP.Idp = x.idpFlag.AddOrgJWTIDPRequest
	}

}

func (x *DataJWTIDPFlag) Changed() bool {
	return x.changed
}

type DataMachineKeyFlag struct {
	*DataMachineKey

	changed bool
	set     *pflag.FlagSet

	keyIdFlag          *cli_client.StringParser
	userIdFlag         *cli_client.StringParser
	typeFlag           *cli_client.EnumParser[authn.KeyType]
	expirationDateFlag *cli_client.TimestampParser
	publicKeyFlag      *cli_client.BytesParser
}

func (x *DataMachineKeyFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataMachineKey", pflag.ContinueOnError)

	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.typeFlag = cli_client.NewEnumParser[authn.KeyType](x.set, "type", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	x.publicKeyFlag = cli_client.NewBytesParser(x.set, "public-key", "")
	parent.AddFlagSet(x.set)
}

func (x *DataMachineKeyFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyIdFlag.Changed() {
		x.changed = true
		x.DataMachineKey.KeyId = *x.keyIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.DataMachineKey.UserId = *x.userIdFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.DataMachineKey.Type = *x.typeFlag.Value
	}
	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.DataMachineKey.ExpirationDate = x.expirationDateFlag.Value
	}
	if x.publicKeyFlag.Changed() {
		x.changed = true
		x.DataMachineKey.PublicKey = *x.publicKeyFlag.Value
	}
}

func (x *DataMachineKeyFlag) Changed() bool {
	return x.changed
}

type DataMachineUserFlag struct {
	*DataMachineUser

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	userFlag   *management.AddMachineUserRequestFlag
}

func (x *DataMachineUserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataMachineUser", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userFlag = &management.AddMachineUserRequestFlag{AddMachineUserRequest: new(management.AddMachineUserRequest)}
	x.userFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataMachineUserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.DataMachineUser.UserId = *x.userIdFlag.Value
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.DataMachineUser.User = x.userFlag.AddMachineUserRequest
	}

}

func (x *DataMachineUserFlag) Changed() bool {
	return x.changed
}

type DataOIDCApplicationFlag struct {
	*DataOIDCApplication

	changed bool
	set     *pflag.FlagSet

	appIdFlag *cli_client.StringParser
	appFlag   *management.AddOIDCAppRequestFlag
}

func (x *DataOIDCApplicationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataOIDCApplication", pflag.ContinueOnError)

	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.appFlag = &management.AddOIDCAppRequestFlag{AddOIDCAppRequest: new(management.AddOIDCAppRequest)}
	x.appFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataOIDCApplicationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "app")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("app"); flagIdx != nil {
		x.appFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.appIdFlag.Changed() {
		x.changed = true
		x.DataOIDCApplication.AppId = *x.appIdFlag.Value
	}

	if x.appFlag.Changed() {
		x.changed = true
		x.DataOIDCApplication.App = x.appFlag.AddOIDCAppRequest
	}

}

func (x *DataOIDCApplicationFlag) Changed() bool {
	return x.changed
}

type DataOIDCIDPFlag struct {
	*DataOIDCIDP

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
	idpFlag   *management.AddOrgOIDCIDPRequestFlag
}

func (x *DataOIDCIDPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataOIDCIDP", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.idpFlag = &management.AddOrgOIDCIDPRequestFlag{AddOrgOIDCIDPRequest: new(management.AddOrgOIDCIDPRequest)}
	x.idpFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataOIDCIDPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp"); flagIdx != nil {
		x.idpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.DataOIDCIDP.IdpId = *x.idpIdFlag.Value
	}

	if x.idpFlag.Changed() {
		x.changed = true
		x.DataOIDCIDP.Idp = x.idpFlag.AddOrgOIDCIDPRequest
	}

}

func (x *DataOIDCIDPFlag) Changed() bool {
	return x.changed
}

type DataOrgFlag struct {
	*DataOrg

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                            *cli_client.StringParser
	orgFlag                              *management.AddOrgRequestFlag
	iamPolicyFlag                        *AddCustomOrgIAMPolicyRequestFlag
	labelPolicyFlag                      *management.AddCustomLabelPolicyRequestFlag
	lockoutPolicyFlag                    *management.AddCustomLockoutPolicyRequestFlag
	loginPolicyFlag                      *management.AddCustomLoginPolicyRequestFlag
	passwordComplexityPolicyFlag         *management.AddCustomPasswordComplexityPolicyRequestFlag
	privacyPolicyFlag                    *management.AddCustomPrivacyPolicyRequestFlag
	projectsFlag                         []*DataProjectFlag
	projectRolesFlag                     []*management.AddProjectRoleRequestFlag
	apiAppsFlag                          []*DataAPIApplicationFlag
	oidcAppsFlag                         []*DataOIDCApplicationFlag
	humanUsersFlag                       []*DataHumanUserFlag
	machineUsersFlag                     []*DataMachineUserFlag
	triggerActionsFlag                   []*SetTriggerActionsRequestFlag
	actionsFlag                          []*DataActionFlag
	projectGrantsFlag                    []*DataProjectGrantFlag
	userGrantsFlag                       []*management.AddUserGrantRequestFlag
	orgMembersFlag                       []*management.AddOrgMemberRequestFlag
	projectMembersFlag                   []*management.AddProjectMemberRequestFlag
	projectGrantMembersFlag              []*management.AddProjectGrantMemberRequestFlag
	userMetadataFlag                     []*management.SetUserMetadataRequestFlag
	loginTextsFlag                       []*management.SetCustomLoginTextsRequestFlag
	initMessagesFlag                     []*management.SetCustomInitMessageTextRequestFlag
	passwordResetMessagesFlag            []*management.SetCustomPasswordResetMessageTextRequestFlag
	verifyEmailMessagesFlag              []*management.SetCustomVerifyEmailMessageTextRequestFlag
	verifyPhoneMessagesFlag              []*management.SetCustomVerifyPhoneMessageTextRequestFlag
	domainClaimedMessagesFlag            []*management.SetCustomDomainClaimedMessageTextRequestFlag
	passwordlessRegistrationMessagesFlag []*management.SetCustomPasswordlessRegistrationMessageTextRequestFlag
	oidcIdpsFlag                         []*DataOIDCIDPFlag
	jwtIdpsFlag                          []*DataJWTIDPFlag
	secondFactorsFlag                    []*management.AddSecondFactorToLoginPolicyRequestFlag
	multiFactorsFlag                     []*management.AddMultiFactorToLoginPolicyRequestFlag
	idpsFlag                             []*management.AddIDPToLoginPolicyRequestFlag
	userLinksFlag                        []*idp.IDPUserLinkFlag
	domainsFlag                          []*org.DomainFlag
	appKeysFlag                          []*DataAppKeyFlag
	machineKeysFlag                      []*DataMachineKeyFlag
}

func (x *DataOrgFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataOrg", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.projectsFlag = []*DataProjectFlag{}
	x.projectRolesFlag = []*management.AddProjectRoleRequestFlag{}
	x.apiAppsFlag = []*DataAPIApplicationFlag{}
	x.oidcAppsFlag = []*DataOIDCApplicationFlag{}
	x.humanUsersFlag = []*DataHumanUserFlag{}
	x.machineUsersFlag = []*DataMachineUserFlag{}
	x.triggerActionsFlag = []*SetTriggerActionsRequestFlag{}
	x.actionsFlag = []*DataActionFlag{}
	x.projectGrantsFlag = []*DataProjectGrantFlag{}
	x.userGrantsFlag = []*management.AddUserGrantRequestFlag{}
	x.orgMembersFlag = []*management.AddOrgMemberRequestFlag{}
	x.projectMembersFlag = []*management.AddProjectMemberRequestFlag{}
	x.projectGrantMembersFlag = []*management.AddProjectGrantMemberRequestFlag{}
	x.userMetadataFlag = []*management.SetUserMetadataRequestFlag{}
	x.loginTextsFlag = []*management.SetCustomLoginTextsRequestFlag{}
	x.initMessagesFlag = []*management.SetCustomInitMessageTextRequestFlag{}
	x.passwordResetMessagesFlag = []*management.SetCustomPasswordResetMessageTextRequestFlag{}
	x.verifyEmailMessagesFlag = []*management.SetCustomVerifyEmailMessageTextRequestFlag{}
	x.verifyPhoneMessagesFlag = []*management.SetCustomVerifyPhoneMessageTextRequestFlag{}
	x.domainClaimedMessagesFlag = []*management.SetCustomDomainClaimedMessageTextRequestFlag{}
	x.passwordlessRegistrationMessagesFlag = []*management.SetCustomPasswordlessRegistrationMessageTextRequestFlag{}
	x.oidcIdpsFlag = []*DataOIDCIDPFlag{}
	x.jwtIdpsFlag = []*DataJWTIDPFlag{}
	x.secondFactorsFlag = []*management.AddSecondFactorToLoginPolicyRequestFlag{}
	x.multiFactorsFlag = []*management.AddMultiFactorToLoginPolicyRequestFlag{}
	x.idpsFlag = []*management.AddIDPToLoginPolicyRequestFlag{}
	x.userLinksFlag = []*idp.IDPUserLinkFlag{}
	x.domainsFlag = []*org.DomainFlag{}
	x.appKeysFlag = []*DataAppKeyFlag{}
	x.machineKeysFlag = []*DataMachineKeyFlag{}
	x.orgFlag = &management.AddOrgRequestFlag{AddOrgRequest: new(management.AddOrgRequest)}
	x.orgFlag.AddFlags(x.set)
	x.iamPolicyFlag = &AddCustomOrgIAMPolicyRequestFlag{AddCustomOrgIAMPolicyRequest: new(AddCustomOrgIAMPolicyRequest)}
	x.iamPolicyFlag.AddFlags(x.set)
	x.labelPolicyFlag = &management.AddCustomLabelPolicyRequestFlag{AddCustomLabelPolicyRequest: new(management.AddCustomLabelPolicyRequest)}
	x.labelPolicyFlag.AddFlags(x.set)
	x.lockoutPolicyFlag = &management.AddCustomLockoutPolicyRequestFlag{AddCustomLockoutPolicyRequest: new(management.AddCustomLockoutPolicyRequest)}
	x.lockoutPolicyFlag.AddFlags(x.set)
	x.loginPolicyFlag = &management.AddCustomLoginPolicyRequestFlag{AddCustomLoginPolicyRequest: new(management.AddCustomLoginPolicyRequest)}
	x.loginPolicyFlag.AddFlags(x.set)
	x.passwordComplexityPolicyFlag = &management.AddCustomPasswordComplexityPolicyRequestFlag{AddCustomPasswordComplexityPolicyRequest: new(management.AddCustomPasswordComplexityPolicyRequest)}
	x.passwordComplexityPolicyFlag.AddFlags(x.set)
	x.privacyPolicyFlag = &management.AddCustomPrivacyPolicyRequestFlag{AddCustomPrivacyPolicyRequest: new(management.AddCustomPrivacyPolicyRequest)}
	x.privacyPolicyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataOrgFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org", "iam-policy", "label-policy", "lockout-policy", "login-policy", "password-complexity-policy", "privacy-policy", "projects", "project-roles", "api-apps", "oidc-apps", "human-users", "machine-users", "trigger-actions", "actions", "project-grants", "user-grants", "org-members", "project-members", "project-grant-members", "user-metadata", "login-texts", "init-messages", "password-reset-messages", "verify-email-messages", "verify-phone-messages", "domain-claimed-messages", "passwordless-registration-messages", "oidc-idps", "jwt-idps", "second-factors", "multi-factors", "idps", "user-links", "domains", "app-keys", "machine-keys")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("iam-policy"); flagIdx != nil {
		x.iamPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("label-policy"); flagIdx != nil {
		x.labelPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("lockout-policy"); flagIdx != nil {
		x.lockoutPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-policy"); flagIdx != nil {
		x.loginPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-complexity-policy"); flagIdx != nil {
		x.passwordComplexityPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("privacy-policy"); flagIdx != nil {
		x.privacyPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("projects") {
		x.projectsFlag = append(x.projectsFlag, &DataProjectFlag{DataProject: new(DataProject)})
		x.projectsFlag[len(x.projectsFlag)-1].AddFlags(x.set)
		x.projectsFlag[len(x.projectsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-roles") {
		x.projectRolesFlag = append(x.projectRolesFlag, &management.AddProjectRoleRequestFlag{AddProjectRoleRequest: new(management.AddProjectRoleRequest)})
		x.projectRolesFlag[len(x.projectRolesFlag)-1].AddFlags(x.set)
		x.projectRolesFlag[len(x.projectRolesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("api-apps") {
		x.apiAppsFlag = append(x.apiAppsFlag, &DataAPIApplicationFlag{DataAPIApplication: new(DataAPIApplication)})
		x.apiAppsFlag[len(x.apiAppsFlag)-1].AddFlags(x.set)
		x.apiAppsFlag[len(x.apiAppsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("oidc-apps") {
		x.oidcAppsFlag = append(x.oidcAppsFlag, &DataOIDCApplicationFlag{DataOIDCApplication: new(DataOIDCApplication)})
		x.oidcAppsFlag[len(x.oidcAppsFlag)-1].AddFlags(x.set)
		x.oidcAppsFlag[len(x.oidcAppsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("human-users") {
		x.humanUsersFlag = append(x.humanUsersFlag, &DataHumanUserFlag{DataHumanUser: new(DataHumanUser)})
		x.humanUsersFlag[len(x.humanUsersFlag)-1].AddFlags(x.set)
		x.humanUsersFlag[len(x.humanUsersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("machine-users") {
		x.machineUsersFlag = append(x.machineUsersFlag, &DataMachineUserFlag{DataMachineUser: new(DataMachineUser)})
		x.machineUsersFlag[len(x.machineUsersFlag)-1].AddFlags(x.set)
		x.machineUsersFlag[len(x.machineUsersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("trigger-actions") {
		x.triggerActionsFlag = append(x.triggerActionsFlag, &SetTriggerActionsRequestFlag{SetTriggerActionsRequest: new(SetTriggerActionsRequest)})
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].AddFlags(x.set)
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("actions") {
		x.actionsFlag = append(x.actionsFlag, &DataActionFlag{DataAction: new(DataAction)})
		x.actionsFlag[len(x.actionsFlag)-1].AddFlags(x.set)
		x.actionsFlag[len(x.actionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-grants") {
		x.projectGrantsFlag = append(x.projectGrantsFlag, &DataProjectGrantFlag{DataProjectGrant: new(DataProjectGrant)})
		x.projectGrantsFlag[len(x.projectGrantsFlag)-1].AddFlags(x.set)
		x.projectGrantsFlag[len(x.projectGrantsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-grants") {
		x.userGrantsFlag = append(x.userGrantsFlag, &management.AddUserGrantRequestFlag{AddUserGrantRequest: new(management.AddUserGrantRequest)})
		x.userGrantsFlag[len(x.userGrantsFlag)-1].AddFlags(x.set)
		x.userGrantsFlag[len(x.userGrantsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("org-members") {
		x.orgMembersFlag = append(x.orgMembersFlag, &management.AddOrgMemberRequestFlag{AddOrgMemberRequest: new(management.AddOrgMemberRequest)})
		x.orgMembersFlag[len(x.orgMembersFlag)-1].AddFlags(x.set)
		x.orgMembersFlag[len(x.orgMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-members") {
		x.projectMembersFlag = append(x.projectMembersFlag, &management.AddProjectMemberRequestFlag{AddProjectMemberRequest: new(management.AddProjectMemberRequest)})
		x.projectMembersFlag[len(x.projectMembersFlag)-1].AddFlags(x.set)
		x.projectMembersFlag[len(x.projectMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-grant-members") {
		x.projectGrantMembersFlag = append(x.projectGrantMembersFlag, &management.AddProjectGrantMemberRequestFlag{AddProjectGrantMemberRequest: new(management.AddProjectGrantMemberRequest)})
		x.projectGrantMembersFlag[len(x.projectGrantMembersFlag)-1].AddFlags(x.set)
		x.projectGrantMembersFlag[len(x.projectGrantMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-metadata") {
		x.userMetadataFlag = append(x.userMetadataFlag, &management.SetUserMetadataRequestFlag{SetUserMetadataRequest: new(management.SetUserMetadataRequest)})
		x.userMetadataFlag[len(x.userMetadataFlag)-1].AddFlags(x.set)
		x.userMetadataFlag[len(x.userMetadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("login-texts") {
		x.loginTextsFlag = append(x.loginTextsFlag, &management.SetCustomLoginTextsRequestFlag{SetCustomLoginTextsRequest: new(management.SetCustomLoginTextsRequest)})
		x.loginTextsFlag[len(x.loginTextsFlag)-1].AddFlags(x.set)
		x.loginTextsFlag[len(x.loginTextsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("init-messages") {
		x.initMessagesFlag = append(x.initMessagesFlag, &management.SetCustomInitMessageTextRequestFlag{SetCustomInitMessageTextRequest: new(management.SetCustomInitMessageTextRequest)})
		x.initMessagesFlag[len(x.initMessagesFlag)-1].AddFlags(x.set)
		x.initMessagesFlag[len(x.initMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("password-reset-messages") {
		x.passwordResetMessagesFlag = append(x.passwordResetMessagesFlag, &management.SetCustomPasswordResetMessageTextRequestFlag{SetCustomPasswordResetMessageTextRequest: new(management.SetCustomPasswordResetMessageTextRequest)})
		x.passwordResetMessagesFlag[len(x.passwordResetMessagesFlag)-1].AddFlags(x.set)
		x.passwordResetMessagesFlag[len(x.passwordResetMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("verify-email-messages") {
		x.verifyEmailMessagesFlag = append(x.verifyEmailMessagesFlag, &management.SetCustomVerifyEmailMessageTextRequestFlag{SetCustomVerifyEmailMessageTextRequest: new(management.SetCustomVerifyEmailMessageTextRequest)})
		x.verifyEmailMessagesFlag[len(x.verifyEmailMessagesFlag)-1].AddFlags(x.set)
		x.verifyEmailMessagesFlag[len(x.verifyEmailMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("verify-phone-messages") {
		x.verifyPhoneMessagesFlag = append(x.verifyPhoneMessagesFlag, &management.SetCustomVerifyPhoneMessageTextRequestFlag{SetCustomVerifyPhoneMessageTextRequest: new(management.SetCustomVerifyPhoneMessageTextRequest)})
		x.verifyPhoneMessagesFlag[len(x.verifyPhoneMessagesFlag)-1].AddFlags(x.set)
		x.verifyPhoneMessagesFlag[len(x.verifyPhoneMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("domain-claimed-messages") {
		x.domainClaimedMessagesFlag = append(x.domainClaimedMessagesFlag, &management.SetCustomDomainClaimedMessageTextRequestFlag{SetCustomDomainClaimedMessageTextRequest: new(management.SetCustomDomainClaimedMessageTextRequest)})
		x.domainClaimedMessagesFlag[len(x.domainClaimedMessagesFlag)-1].AddFlags(x.set)
		x.domainClaimedMessagesFlag[len(x.domainClaimedMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("passwordless-registration-messages") {
		x.passwordlessRegistrationMessagesFlag = append(x.passwordlessRegistrationMessagesFlag, &management.SetCustomPasswordlessRegistrationMessageTextRequestFlag{SetCustomPasswordlessRegistrationMessageTextRequest: new(management.SetCustomPasswordlessRegistrationMessageTextRequest)})
		x.passwordlessRegistrationMessagesFlag[len(x.passwordlessRegistrationMessagesFlag)-1].AddFlags(x.set)
		x.passwordlessRegistrationMessagesFlag[len(x.passwordlessRegistrationMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("oidc-idps") {
		x.oidcIdpsFlag = append(x.oidcIdpsFlag, &DataOIDCIDPFlag{DataOIDCIDP: new(DataOIDCIDP)})
		x.oidcIdpsFlag[len(x.oidcIdpsFlag)-1].AddFlags(x.set)
		x.oidcIdpsFlag[len(x.oidcIdpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("jwt-idps") {
		x.jwtIdpsFlag = append(x.jwtIdpsFlag, &DataJWTIDPFlag{DataJWTIDP: new(DataJWTIDP)})
		x.jwtIdpsFlag[len(x.jwtIdpsFlag)-1].AddFlags(x.set)
		x.jwtIdpsFlag[len(x.jwtIdpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("second-factors") {
		x.secondFactorsFlag = append(x.secondFactorsFlag, &management.AddSecondFactorToLoginPolicyRequestFlag{AddSecondFactorToLoginPolicyRequest: new(management.AddSecondFactorToLoginPolicyRequest)})
		x.secondFactorsFlag[len(x.secondFactorsFlag)-1].AddFlags(x.set)
		x.secondFactorsFlag[len(x.secondFactorsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("multi-factors") {
		x.multiFactorsFlag = append(x.multiFactorsFlag, &management.AddMultiFactorToLoginPolicyRequestFlag{AddMultiFactorToLoginPolicyRequest: new(management.AddMultiFactorToLoginPolicyRequest)})
		x.multiFactorsFlag[len(x.multiFactorsFlag)-1].AddFlags(x.set)
		x.multiFactorsFlag[len(x.multiFactorsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("idps") {
		x.idpsFlag = append(x.idpsFlag, &management.AddIDPToLoginPolicyRequestFlag{AddIDPToLoginPolicyRequest: new(management.AddIDPToLoginPolicyRequest)})
		x.idpsFlag[len(x.idpsFlag)-1].AddFlags(x.set)
		x.idpsFlag[len(x.idpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-links") {
		x.userLinksFlag = append(x.userLinksFlag, &idp.IDPUserLinkFlag{IDPUserLink: new(idp.IDPUserLink)})
		x.userLinksFlag[len(x.userLinksFlag)-1].AddFlags(x.set)
		x.userLinksFlag[len(x.userLinksFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("domains") {
		x.domainsFlag = append(x.domainsFlag, &org.DomainFlag{Domain: new(org.Domain)})
		x.domainsFlag[len(x.domainsFlag)-1].AddFlags(x.set)
		x.domainsFlag[len(x.domainsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("app-keys") {
		x.appKeysFlag = append(x.appKeysFlag, &DataAppKeyFlag{DataAppKey: new(DataAppKey)})
		x.appKeysFlag[len(x.appKeysFlag)-1].AddFlags(x.set)
		x.appKeysFlag[len(x.appKeysFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("machine-keys") {
		x.machineKeysFlag = append(x.machineKeysFlag, &DataMachineKeyFlag{DataMachineKey: new(DataMachineKey)})
		x.machineKeysFlag[len(x.machineKeysFlag)-1].AddFlags(x.set)
		x.machineKeysFlag[len(x.machineKeysFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.orgIdFlag.Changed() {
		x.changed = true
		x.DataOrg.OrgId = *x.orgIdFlag.Value
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.DataOrg.Org = x.orgFlag.AddOrgRequest
	}

	if x.iamPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.IamPolicy = x.iamPolicyFlag.AddCustomOrgIAMPolicyRequest
	}

	if x.labelPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.LabelPolicy = x.labelPolicyFlag.AddCustomLabelPolicyRequest
	}

	if x.lockoutPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.LockoutPolicy = x.lockoutPolicyFlag.AddCustomLockoutPolicyRequest
	}

	if x.loginPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.LoginPolicy = x.loginPolicyFlag.AddCustomLoginPolicyRequest
	}

	if x.passwordComplexityPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.PasswordComplexityPolicy = x.passwordComplexityPolicyFlag.AddCustomPasswordComplexityPolicyRequest
	}

	if x.privacyPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.PrivacyPolicy = x.privacyPolicyFlag.AddCustomPrivacyPolicyRequest
	}

	if len(x.projectsFlag) > 0 {
		x.changed = true
		x.Projects = make([]*DataProject, len(x.projectsFlag))
		for i, value := range x.projectsFlag {
			x.DataOrg.Projects[i] = value.DataProject
		}
	}

	if len(x.projectRolesFlag) > 0 {
		x.changed = true
		x.ProjectRoles = make([]*management.AddProjectRoleRequest, len(x.projectRolesFlag))
		for i, value := range x.projectRolesFlag {
			x.DataOrg.ProjectRoles[i] = value.AddProjectRoleRequest
		}
	}

	if len(x.apiAppsFlag) > 0 {
		x.changed = true
		x.ApiApps = make([]*DataAPIApplication, len(x.apiAppsFlag))
		for i, value := range x.apiAppsFlag {
			x.DataOrg.ApiApps[i] = value.DataAPIApplication
		}
	}

	if len(x.oidcAppsFlag) > 0 {
		x.changed = true
		x.OidcApps = make([]*DataOIDCApplication, len(x.oidcAppsFlag))
		for i, value := range x.oidcAppsFlag {
			x.DataOrg.OidcApps[i] = value.DataOIDCApplication
		}
	}

	if len(x.humanUsersFlag) > 0 {
		x.changed = true
		x.HumanUsers = make([]*DataHumanUser, len(x.humanUsersFlag))
		for i, value := range x.humanUsersFlag {
			x.DataOrg.HumanUsers[i] = value.DataHumanUser
		}
	}

	if len(x.machineUsersFlag) > 0 {
		x.changed = true
		x.MachineUsers = make([]*DataMachineUser, len(x.machineUsersFlag))
		for i, value := range x.machineUsersFlag {
			x.DataOrg.MachineUsers[i] = value.DataMachineUser
		}
	}

	if len(x.triggerActionsFlag) > 0 {
		x.changed = true
		x.TriggerActions = make([]*SetTriggerActionsRequest, len(x.triggerActionsFlag))
		for i, value := range x.triggerActionsFlag {
			x.DataOrg.TriggerActions[i] = value.SetTriggerActionsRequest
		}
	}

	if len(x.actionsFlag) > 0 {
		x.changed = true
		x.Actions = make([]*DataAction, len(x.actionsFlag))
		for i, value := range x.actionsFlag {
			x.DataOrg.Actions[i] = value.DataAction
		}
	}

	if len(x.projectGrantsFlag) > 0 {
		x.changed = true
		x.ProjectGrants = make([]*DataProjectGrant, len(x.projectGrantsFlag))
		for i, value := range x.projectGrantsFlag {
			x.DataOrg.ProjectGrants[i] = value.DataProjectGrant
		}
	}

	if len(x.userGrantsFlag) > 0 {
		x.changed = true
		x.UserGrants = make([]*management.AddUserGrantRequest, len(x.userGrantsFlag))
		for i, value := range x.userGrantsFlag {
			x.DataOrg.UserGrants[i] = value.AddUserGrantRequest
		}
	}

	if len(x.orgMembersFlag) > 0 {
		x.changed = true
		x.OrgMembers = make([]*management.AddOrgMemberRequest, len(x.orgMembersFlag))
		for i, value := range x.orgMembersFlag {
			x.DataOrg.OrgMembers[i] = value.AddOrgMemberRequest
		}
	}

	if len(x.projectMembersFlag) > 0 {
		x.changed = true
		x.ProjectMembers = make([]*management.AddProjectMemberRequest, len(x.projectMembersFlag))
		for i, value := range x.projectMembersFlag {
			x.DataOrg.ProjectMembers[i] = value.AddProjectMemberRequest
		}
	}

	if len(x.projectGrantMembersFlag) > 0 {
		x.changed = true
		x.ProjectGrantMembers = make([]*management.AddProjectGrantMemberRequest, len(x.projectGrantMembersFlag))
		for i, value := range x.projectGrantMembersFlag {
			x.DataOrg.ProjectGrantMembers[i] = value.AddProjectGrantMemberRequest
		}
	}

	if len(x.userMetadataFlag) > 0 {
		x.changed = true
		x.UserMetadata = make([]*management.SetUserMetadataRequest, len(x.userMetadataFlag))
		for i, value := range x.userMetadataFlag {
			x.DataOrg.UserMetadata[i] = value.SetUserMetadataRequest
		}
	}

	if len(x.loginTextsFlag) > 0 {
		x.changed = true
		x.LoginTexts = make([]*management.SetCustomLoginTextsRequest, len(x.loginTextsFlag))
		for i, value := range x.loginTextsFlag {
			x.DataOrg.LoginTexts[i] = value.SetCustomLoginTextsRequest
		}
	}

	if len(x.initMessagesFlag) > 0 {
		x.changed = true
		x.InitMessages = make([]*management.SetCustomInitMessageTextRequest, len(x.initMessagesFlag))
		for i, value := range x.initMessagesFlag {
			x.DataOrg.InitMessages[i] = value.SetCustomInitMessageTextRequest
		}
	}

	if len(x.passwordResetMessagesFlag) > 0 {
		x.changed = true
		x.PasswordResetMessages = make([]*management.SetCustomPasswordResetMessageTextRequest, len(x.passwordResetMessagesFlag))
		for i, value := range x.passwordResetMessagesFlag {
			x.DataOrg.PasswordResetMessages[i] = value.SetCustomPasswordResetMessageTextRequest
		}
	}

	if len(x.verifyEmailMessagesFlag) > 0 {
		x.changed = true
		x.VerifyEmailMessages = make([]*management.SetCustomVerifyEmailMessageTextRequest, len(x.verifyEmailMessagesFlag))
		for i, value := range x.verifyEmailMessagesFlag {
			x.DataOrg.VerifyEmailMessages[i] = value.SetCustomVerifyEmailMessageTextRequest
		}
	}

	if len(x.verifyPhoneMessagesFlag) > 0 {
		x.changed = true
		x.VerifyPhoneMessages = make([]*management.SetCustomVerifyPhoneMessageTextRequest, len(x.verifyPhoneMessagesFlag))
		for i, value := range x.verifyPhoneMessagesFlag {
			x.DataOrg.VerifyPhoneMessages[i] = value.SetCustomVerifyPhoneMessageTextRequest
		}
	}

	if len(x.domainClaimedMessagesFlag) > 0 {
		x.changed = true
		x.DomainClaimedMessages = make([]*management.SetCustomDomainClaimedMessageTextRequest, len(x.domainClaimedMessagesFlag))
		for i, value := range x.domainClaimedMessagesFlag {
			x.DataOrg.DomainClaimedMessages[i] = value.SetCustomDomainClaimedMessageTextRequest
		}
	}

	if len(x.passwordlessRegistrationMessagesFlag) > 0 {
		x.changed = true
		x.PasswordlessRegistrationMessages = make([]*management.SetCustomPasswordlessRegistrationMessageTextRequest, len(x.passwordlessRegistrationMessagesFlag))
		for i, value := range x.passwordlessRegistrationMessagesFlag {
			x.DataOrg.PasswordlessRegistrationMessages[i] = value.SetCustomPasswordlessRegistrationMessageTextRequest
		}
	}

	if len(x.oidcIdpsFlag) > 0 {
		x.changed = true
		x.OidcIdps = make([]*DataOIDCIDP, len(x.oidcIdpsFlag))
		for i, value := range x.oidcIdpsFlag {
			x.DataOrg.OidcIdps[i] = value.DataOIDCIDP
		}
	}

	if len(x.jwtIdpsFlag) > 0 {
		x.changed = true
		x.JwtIdps = make([]*DataJWTIDP, len(x.jwtIdpsFlag))
		for i, value := range x.jwtIdpsFlag {
			x.DataOrg.JwtIdps[i] = value.DataJWTIDP
		}
	}

	if len(x.secondFactorsFlag) > 0 {
		x.changed = true
		x.SecondFactors = make([]*management.AddSecondFactorToLoginPolicyRequest, len(x.secondFactorsFlag))
		for i, value := range x.secondFactorsFlag {
			x.DataOrg.SecondFactors[i] = value.AddSecondFactorToLoginPolicyRequest
		}
	}

	if len(x.multiFactorsFlag) > 0 {
		x.changed = true
		x.MultiFactors = make([]*management.AddMultiFactorToLoginPolicyRequest, len(x.multiFactorsFlag))
		for i, value := range x.multiFactorsFlag {
			x.DataOrg.MultiFactors[i] = value.AddMultiFactorToLoginPolicyRequest
		}
	}

	if len(x.idpsFlag) > 0 {
		x.changed = true
		x.Idps = make([]*management.AddIDPToLoginPolicyRequest, len(x.idpsFlag))
		for i, value := range x.idpsFlag {
			x.DataOrg.Idps[i] = value.AddIDPToLoginPolicyRequest
		}
	}

	if len(x.userLinksFlag) > 0 {
		x.changed = true
		x.UserLinks = make([]*idp.IDPUserLink, len(x.userLinksFlag))
		for i, value := range x.userLinksFlag {
			x.DataOrg.UserLinks[i] = value.IDPUserLink
		}
	}

	if len(x.domainsFlag) > 0 {
		x.changed = true
		x.Domains = make([]*org.Domain, len(x.domainsFlag))
		for i, value := range x.domainsFlag {
			x.DataOrg.Domains[i] = value.Domain
		}
	}

	if len(x.appKeysFlag) > 0 {
		x.changed = true
		x.AppKeys = make([]*DataAppKey, len(x.appKeysFlag))
		for i, value := range x.appKeysFlag {
			x.DataOrg.AppKeys[i] = value.DataAppKey
		}
	}

	if len(x.machineKeysFlag) > 0 {
		x.changed = true
		x.MachineKeys = make([]*DataMachineKey, len(x.machineKeysFlag))
		for i, value := range x.machineKeysFlag {
			x.DataOrg.MachineKeys[i] = value.DataMachineKey
		}
	}

}

func (x *DataOrgFlag) Changed() bool {
	return x.changed
}

type DataProjectFlag struct {
	*DataProject

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	projectFlag   *management.AddProjectRequestFlag
}

func (x *DataProjectFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataProject", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.projectFlag = &management.AddProjectRequestFlag{AddProjectRequest: new(management.AddProjectRequest)}
	x.projectFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataProjectFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project"); flagIdx != nil {
		x.projectFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.DataProject.ProjectId = *x.projectIdFlag.Value
	}

	if x.projectFlag.Changed() {
		x.changed = true
		x.DataProject.Project = x.projectFlag.AddProjectRequest
	}

}

func (x *DataProjectFlag) Changed() bool {
	return x.changed
}

type DataProjectGrantFlag struct {
	*DataProjectGrant

	changed bool
	set     *pflag.FlagSet

	grantIdFlag      *cli_client.StringParser
	projectGrantFlag *management.AddProjectGrantRequestFlag
}

func (x *DataProjectGrantFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataProjectGrant", pflag.ContinueOnError)

	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.projectGrantFlag = &management.AddProjectGrantRequestFlag{AddProjectGrantRequest: new(management.AddProjectGrantRequest)}
	x.projectGrantFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataProjectGrantFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project-grant")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project-grant"); flagIdx != nil {
		x.projectGrantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.grantIdFlag.Changed() {
		x.changed = true
		x.DataProjectGrant.GrantId = *x.grantIdFlag.Value
	}

	if x.projectGrantFlag.Changed() {
		x.changed = true
		x.DataProjectGrant.ProjectGrant = x.projectGrantFlag.AddProjectGrantRequest
	}

}

func (x *DataProjectGrantFlag) Changed() bool {
	return x.changed
}

type ExportHumanUserFlag struct {
	*ExportHumanUser

	changed bool
	set     *pflag.FlagSet

	userNameFlag                        *cli_client.StringParser
	profileFlag                         *ExportHumanUser_ProfileFlag
	emailFlag                           *ExportHumanUser_EmailFlag
	phoneFlag                           *ExportHumanUser_PhoneFlag
	passwordFlag                        *cli_client.StringParser
	hashedPasswordFlag                  *ExportHumanUser_HashedPasswordFlag
	passwordChangeRequiredFlag          *cli_client.BoolParser
	requestPasswordlessRegistrationFlag *cli_client.BoolParser
	otpCodeFlag                         *cli_client.StringParser
}

func (x *ExportHumanUserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportHumanUser", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.passwordChangeRequiredFlag = cli_client.NewBoolParser(x.set, "password-change-required", "")
	x.requestPasswordlessRegistrationFlag = cli_client.NewBoolParser(x.set, "request-passwordless-registration", "")
	x.otpCodeFlag = cli_client.NewStringParser(x.set, "otp-code", "")
	x.profileFlag = &ExportHumanUser_ProfileFlag{ExportHumanUser_Profile: new(ExportHumanUser_Profile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &ExportHumanUser_EmailFlag{ExportHumanUser_Email: new(ExportHumanUser_Email)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &ExportHumanUser_PhoneFlag{ExportHumanUser_Phone: new(ExportHumanUser_Phone)}
	x.phoneFlag.AddFlags(x.set)
	x.hashedPasswordFlag = &ExportHumanUser_HashedPasswordFlag{ExportHumanUser_HashedPassword: new(ExportHumanUser_HashedPassword)}
	x.hashedPasswordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ExportHumanUserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone", "hashed-password")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("hashed-password"); flagIdx != nil {
		x.hashedPasswordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.UserName = *x.userNameFlag.Value
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.Profile = x.profileFlag.ExportHumanUser_Profile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.Email = x.emailFlag.ExportHumanUser_Email
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.Phone = x.phoneFlag.ExportHumanUser_Phone
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.Password = *x.passwordFlag.Value
	}

	if x.hashedPasswordFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.HashedPassword = x.hashedPasswordFlag.ExportHumanUser_HashedPassword
	}

	if x.passwordChangeRequiredFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.PasswordChangeRequired = *x.passwordChangeRequiredFlag.Value
	}
	if x.requestPasswordlessRegistrationFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.RequestPasswordlessRegistration = *x.requestPasswordlessRegistrationFlag.Value
	}
	if x.otpCodeFlag.Changed() {
		x.changed = true
		x.ExportHumanUser.OtpCode = *x.otpCodeFlag.Value
	}
}

func (x *ExportHumanUserFlag) Changed() bool {
	return x.changed
}

type ExportHumanUser_EmailFlag struct {
	*ExportHumanUser_Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *ExportHumanUser_EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportHumanUser_Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportHumanUser_EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *ExportHumanUser_EmailFlag) Changed() bool {
	return x.changed
}

type ExportHumanUser_HashedPasswordFlag struct {
	*ExportHumanUser_HashedPassword

	changed bool
	set     *pflag.FlagSet

	valueFlag     *cli_client.StringParser
	algorithmFlag *cli_client.StringParser
}

func (x *ExportHumanUser_HashedPasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportHumanUser_HashedPassword", pflag.ContinueOnError)

	x.valueFlag = cli_client.NewStringParser(x.set, "value", "")
	x.algorithmFlag = cli_client.NewStringParser(x.set, "algorithm", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportHumanUser_HashedPasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.valueFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_HashedPassword.Value = *x.valueFlag.Value
	}
	if x.algorithmFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_HashedPassword.Algorithm = *x.algorithmFlag.Value
	}
}

func (x *ExportHumanUser_HashedPasswordFlag) Changed() bool {
	return x.changed
}

type ExportHumanUser_PhoneFlag struct {
	*ExportHumanUser_Phone

	changed bool
	set     *pflag.FlagSet

	phoneFlag           *cli_client.StringParser
	isPhoneVerifiedFlag *cli_client.BoolParser
}

func (x *ExportHumanUser_PhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportHumanUser_Phone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isPhoneVerifiedFlag = cli_client.NewBoolParser(x.set, "is-phone-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportHumanUser_PhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Phone.Phone = *x.phoneFlag.Value
	}
	if x.isPhoneVerifiedFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Phone.IsPhoneVerified = *x.isPhoneVerifiedFlag.Value
	}
}

func (x *ExportHumanUser_PhoneFlag) Changed() bool {
	return x.changed
}

type ExportHumanUser_ProfileFlag struct {
	*ExportHumanUser_Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[user.Gender]
}

func (x *ExportHumanUser_ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportHumanUser_Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[user.Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportHumanUser_ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Profile.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Profile.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Profile.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.ExportHumanUser_Profile.Gender = *x.genderFlag.Value
	}
}

func (x *ExportHumanUser_ProfileFlag) Changed() bool {
	return x.changed
}

type ImportDataOrgFlag struct {
	*ImportDataOrg

	changed bool
	set     *pflag.FlagSet

	orgsFlag []*DataOrgFlag
}

func (x *ImportDataOrgFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataOrg", pflag.ContinueOnError)

	x.orgsFlag = []*DataOrgFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ImportDataOrgFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "orgs")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("orgs") {
		x.orgsFlag = append(x.orgsFlag, &DataOrgFlag{DataOrg: new(DataOrg)})
		x.orgsFlag[len(x.orgsFlag)-1].AddFlags(x.set)
		x.orgsFlag[len(x.orgsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.orgsFlag) > 0 {
		x.changed = true
		x.Orgs = make([]*DataOrg, len(x.orgsFlag))
		for i, value := range x.orgsFlag {
			x.ImportDataOrg.Orgs[i] = value.DataOrg
		}
	}

}

func (x *ImportDataOrgFlag) Changed() bool {
	return x.changed
}

type SetTriggerActionsRequestFlag struct {
	*SetTriggerActionsRequest

	changed bool
	set     *pflag.FlagSet

	flowTypeFlag    *cli_client.EnumParser[FlowType]
	triggerTypeFlag *cli_client.EnumParser[TriggerType]
	actionIdsFlag   *cli_client.StringSliceParser
}

func (x *SetTriggerActionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetTriggerActionsRequest", pflag.ContinueOnError)

	x.flowTypeFlag = cli_client.NewEnumParser[FlowType](x.set, "flow-type", "")
	x.triggerTypeFlag = cli_client.NewEnumParser[TriggerType](x.set, "trigger-type", "")
	x.actionIdsFlag = cli_client.NewStringSliceParser(x.set, "action-ids", "")
	parent.AddFlagSet(x.set)
}

func (x *SetTriggerActionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.flowTypeFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsRequest.FlowType = *x.flowTypeFlag.Value
	}
	if x.triggerTypeFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsRequest.TriggerType = *x.triggerTypeFlag.Value
	}
	if x.actionIdsFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsRequest.ActionIds = *x.actionIdsFlag.Value
	}
}

func (x *SetTriggerActionsRequestFlag) Changed() bool {
	return x.changed
}
