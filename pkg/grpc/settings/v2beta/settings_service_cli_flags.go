// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package settings

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/object/v2beta"
	os "os"
)

type GetActiveIdentityProvidersRequestFlag struct {
	*GetActiveIdentityProvidersRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetActiveIdentityProvidersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetActiveIdentityProvidersRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetActiveIdentityProvidersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetActiveIdentityProvidersRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetActiveIdentityProvidersRequestFlag) Changed() bool {
	return x.changed
}

type GetActiveIdentityProvidersResponseFlag struct {
	*GetActiveIdentityProvidersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag           *v2beta.ListDetailsFlag
	identityProvidersFlag []*IdentityProviderFlag
}

func (x *GetActiveIdentityProvidersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetActiveIdentityProvidersResponse", pflag.ContinueOnError)

	x.identityProvidersFlag = []*IdentityProviderFlag{}
	x.detailsFlag = &v2beta.ListDetailsFlag{ListDetails: new(v2beta.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetActiveIdentityProvidersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "identity-providers")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("identity-providers") {
		x.identityProvidersFlag = append(x.identityProvidersFlag, &IdentityProviderFlag{IdentityProvider: new(IdentityProvider)})
		x.identityProvidersFlag[len(x.identityProvidersFlag)-1].AddFlags(x.set)
		x.identityProvidersFlag[len(x.identityProvidersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetActiveIdentityProvidersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.identityProvidersFlag) > 0 {
		x.changed = true
		x.IdentityProviders = make([]*IdentityProvider, len(x.identityProvidersFlag))
		for i, value := range x.identityProvidersFlag {
			x.GetActiveIdentityProvidersResponse.IdentityProviders[i] = value.IdentityProvider
		}
	}

}

func (x *GetActiveIdentityProvidersResponseFlag) Changed() bool {
	return x.changed
}

type GetBrandingSettingsRequestFlag struct {
	*GetBrandingSettingsRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetBrandingSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetBrandingSettingsRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetBrandingSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetBrandingSettingsRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetBrandingSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetBrandingSettingsResponseFlag struct {
	*GetBrandingSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.DetailsFlag
	settingsFlag *BrandingSettingsFlag
}

func (x *GetBrandingSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetBrandingSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.settingsFlag = &BrandingSettingsFlag{BrandingSettings: new(BrandingSettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetBrandingSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetBrandingSettingsResponse.Details = x.detailsFlag.Details
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetBrandingSettingsResponse.Settings = x.settingsFlag.BrandingSettings
	}

}

func (x *GetBrandingSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetDomainSettingsRequestFlag struct {
	*GetDomainSettingsRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetDomainSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDomainSettingsRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDomainSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetDomainSettingsRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetDomainSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetDomainSettingsResponseFlag struct {
	*GetDomainSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.DetailsFlag
	settingsFlag *DomainSettingsFlag
}

func (x *GetDomainSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDomainSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.settingsFlag = &DomainSettingsFlag{DomainSettings: new(DomainSettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDomainSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetDomainSettingsResponse.Details = x.detailsFlag.Details
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetDomainSettingsResponse.Settings = x.settingsFlag.DomainSettings
	}

}

func (x *GetDomainSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetGeneralSettingsRequestFlag struct {
	*GetGeneralSettingsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetGeneralSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetGeneralSettingsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetGeneralSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetGeneralSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetGeneralSettingsResponseFlag struct {
	*GetGeneralSettingsResponse

	changed bool
	set     *pflag.FlagSet

	defaultOrgIdFlag       *cli_client.StringParser
	defaultLanguageFlag    *cli_client.StringParser
	supportedLanguagesFlag *cli_client.StringSliceParser
}

func (x *GetGeneralSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetGeneralSettingsResponse", pflag.ContinueOnError)

	x.defaultOrgIdFlag = cli_client.NewStringParser(x.set, "default-org-id", "")
	x.defaultLanguageFlag = cli_client.NewStringParser(x.set, "default-language", "")
	x.supportedLanguagesFlag = cli_client.NewStringSliceParser(x.set, "supported-languages", "")
	parent.AddFlagSet(x.set)
}

func (x *GetGeneralSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.defaultOrgIdFlag.Changed() {
		x.changed = true
		x.GetGeneralSettingsResponse.DefaultOrgId = *x.defaultOrgIdFlag.Value
	}
	if x.defaultLanguageFlag.Changed() {
		x.changed = true
		x.GetGeneralSettingsResponse.DefaultLanguage = *x.defaultLanguageFlag.Value
	}
	if x.supportedLanguagesFlag.Changed() {
		x.changed = true
		x.GetGeneralSettingsResponse.SupportedLanguages = *x.supportedLanguagesFlag.Value
	}
}

func (x *GetGeneralSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetLegalAndSupportSettingsRequestFlag struct {
	*GetLegalAndSupportSettingsRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetLegalAndSupportSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLegalAndSupportSettingsRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLegalAndSupportSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetLegalAndSupportSettingsRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetLegalAndSupportSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetLegalAndSupportSettingsResponseFlag struct {
	*GetLegalAndSupportSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.DetailsFlag
	settingsFlag *LegalAndSupportSettingsFlag
}

func (x *GetLegalAndSupportSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLegalAndSupportSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.settingsFlag = &LegalAndSupportSettingsFlag{LegalAndSupportSettings: new(LegalAndSupportSettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLegalAndSupportSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetLegalAndSupportSettingsResponse.Details = x.detailsFlag.Details
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetLegalAndSupportSettingsResponse.Settings = x.settingsFlag.LegalAndSupportSettings
	}

}

func (x *GetLegalAndSupportSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetLockoutSettingsRequestFlag struct {
	*GetLockoutSettingsRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetLockoutSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLockoutSettingsRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLockoutSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetLockoutSettingsRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetLockoutSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetLockoutSettingsResponseFlag struct {
	*GetLockoutSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.DetailsFlag
	settingsFlag *LockoutSettingsFlag
}

func (x *GetLockoutSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLockoutSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.settingsFlag = &LockoutSettingsFlag{LockoutSettings: new(LockoutSettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLockoutSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetLockoutSettingsResponse.Details = x.detailsFlag.Details
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetLockoutSettingsResponse.Settings = x.settingsFlag.LockoutSettings
	}

}

func (x *GetLockoutSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetLoginSettingsRequestFlag struct {
	*GetLoginSettingsRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetLoginSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLoginSettingsRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLoginSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetLoginSettingsRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetLoginSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetLoginSettingsResponseFlag struct {
	*GetLoginSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.DetailsFlag
	settingsFlag *LoginSettingsFlag
}

func (x *GetLoginSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLoginSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.settingsFlag = &LoginSettingsFlag{LoginSettings: new(LoginSettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLoginSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetLoginSettingsResponse.Details = x.detailsFlag.Details
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetLoginSettingsResponse.Settings = x.settingsFlag.LoginSettings
	}

}

func (x *GetLoginSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetPasswordComplexitySettingsRequestFlag struct {
	*GetPasswordComplexitySettingsRequest

	changed bool
	set     *pflag.FlagSet

	ctxFlag *v2beta.RequestContextFlag
}

func (x *GetPasswordComplexitySettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordComplexitySettingsRequest", pflag.ContinueOnError)

	x.ctxFlag = &v2beta.RequestContextFlag{RequestContext: new(v2beta.RequestContext)}
	x.ctxFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPasswordComplexitySettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "ctx")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("ctx"); flagIdx != nil {
		x.ctxFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.ctxFlag.Changed() {
		x.changed = true
		x.GetPasswordComplexitySettingsRequest.Ctx = x.ctxFlag.RequestContext
	}

}

func (x *GetPasswordComplexitySettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetPasswordComplexitySettingsResponseFlag struct {
	*GetPasswordComplexitySettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.DetailsFlag
	settingsFlag *PasswordComplexitySettingsFlag
}

func (x *GetPasswordComplexitySettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordComplexitySettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.settingsFlag = &PasswordComplexitySettingsFlag{PasswordComplexitySettings: new(PasswordComplexitySettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPasswordComplexitySettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetPasswordComplexitySettingsResponse.Details = x.detailsFlag.Details
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetPasswordComplexitySettingsResponse.Settings = x.settingsFlag.PasswordComplexitySettings
	}

}

func (x *GetPasswordComplexitySettingsResponseFlag) Changed() bool {
	return x.changed
}
