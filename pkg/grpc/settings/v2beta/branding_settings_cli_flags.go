// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package settings

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type BrandingSettingsFlag struct {
	*BrandingSettings

	changed bool
	set     *pflag.FlagSet

	lightThemeFlag          *ThemeFlag
	darkThemeFlag           *ThemeFlag
	fontUrlFlag             *cli_client.StringParser
	hideLoginNameSuffixFlag *cli_client.BoolParser
	disableWatermarkFlag    *cli_client.BoolParser
	resourceOwnerTypeFlag   *cli_client.EnumParser[ResourceOwnerType]
	themeModeFlag           *cli_client.EnumParser[ThemeMode]
}

func (x *BrandingSettingsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BrandingSettings", pflag.ContinueOnError)

	x.fontUrlFlag = cli_client.NewStringParser(x.set, "font-url", "")
	x.hideLoginNameSuffixFlag = cli_client.NewBoolParser(x.set, "hide-login-name-suffix", "")
	x.disableWatermarkFlag = cli_client.NewBoolParser(x.set, "disable-watermark", "")
	x.resourceOwnerTypeFlag = cli_client.NewEnumParser[ResourceOwnerType](x.set, "resource-owner-type", "")
	x.themeModeFlag = cli_client.NewEnumParser[ThemeMode](x.set, "theme-mode", "")
	x.lightThemeFlag = &ThemeFlag{Theme: new(Theme)}
	x.lightThemeFlag.AddFlags(x.set)
	x.darkThemeFlag = &ThemeFlag{Theme: new(Theme)}
	x.darkThemeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BrandingSettingsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "light-theme", "dark-theme")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("light-theme"); flagIdx != nil {
		x.lightThemeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("dark-theme"); flagIdx != nil {
		x.darkThemeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.lightThemeFlag.Changed() {
		x.changed = true
		x.BrandingSettings.LightTheme = x.lightThemeFlag.Theme
	}

	if x.darkThemeFlag.Changed() {
		x.changed = true
		x.BrandingSettings.DarkTheme = x.darkThemeFlag.Theme
	}

	if x.fontUrlFlag.Changed() {
		x.changed = true
		x.BrandingSettings.FontUrl = *x.fontUrlFlag.Value
	}
	if x.hideLoginNameSuffixFlag.Changed() {
		x.changed = true
		x.BrandingSettings.HideLoginNameSuffix = *x.hideLoginNameSuffixFlag.Value
	}
	if x.disableWatermarkFlag.Changed() {
		x.changed = true
		x.BrandingSettings.DisableWatermark = *x.disableWatermarkFlag.Value
	}
	if x.resourceOwnerTypeFlag.Changed() {
		x.changed = true
		x.BrandingSettings.ResourceOwnerType = *x.resourceOwnerTypeFlag.Value
	}
	if x.themeModeFlag.Changed() {
		x.changed = true
		x.BrandingSettings.ThemeMode = *x.themeModeFlag.Value
	}
}

func (x *BrandingSettingsFlag) Changed() bool {
	return x.changed
}

type ThemeFlag struct {
	*Theme

	changed bool
	set     *pflag.FlagSet

	primaryColorFlag    *cli_client.StringParser
	backgroundColorFlag *cli_client.StringParser
	warnColorFlag       *cli_client.StringParser
	fontColorFlag       *cli_client.StringParser
	logoUrlFlag         *cli_client.StringParser
	iconUrlFlag         *cli_client.StringParser
}

func (x *ThemeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Theme", pflag.ContinueOnError)

	x.primaryColorFlag = cli_client.NewStringParser(x.set, "primary-color", "")
	x.backgroundColorFlag = cli_client.NewStringParser(x.set, "background-color", "")
	x.warnColorFlag = cli_client.NewStringParser(x.set, "warn-color", "")
	x.fontColorFlag = cli_client.NewStringParser(x.set, "font-color", "")
	x.logoUrlFlag = cli_client.NewStringParser(x.set, "logo-url", "")
	x.iconUrlFlag = cli_client.NewStringParser(x.set, "icon-url", "")
	parent.AddFlagSet(x.set)
}

func (x *ThemeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.primaryColorFlag.Changed() {
		x.changed = true
		x.Theme.PrimaryColor = *x.primaryColorFlag.Value
	}
	if x.backgroundColorFlag.Changed() {
		x.changed = true
		x.Theme.BackgroundColor = *x.backgroundColorFlag.Value
	}
	if x.warnColorFlag.Changed() {
		x.changed = true
		x.Theme.WarnColor = *x.warnColorFlag.Value
	}
	if x.fontColorFlag.Changed() {
		x.changed = true
		x.Theme.FontColor = *x.fontColorFlag.Value
	}
	if x.logoUrlFlag.Changed() {
		x.changed = true
		x.Theme.LogoUrl = *x.logoUrlFlag.Value
	}
	if x.iconUrlFlag.Changed() {
		x.changed = true
		x.Theme.IconUrl = *x.iconUrlFlag.Value
	}
}

func (x *ThemeFlag) Changed() bool {
	return x.changed
}
