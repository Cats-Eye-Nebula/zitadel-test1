// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package settings

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type PasswordComplexitySettingsFlag struct {
	*PasswordComplexitySettings

	changed bool
	set     *pflag.FlagSet

	minLengthFlag         *cli_client.Uint64Parser
	requiresUppercaseFlag *cli_client.BoolParser
	requiresLowercaseFlag *cli_client.BoolParser
	requiresNumberFlag    *cli_client.BoolParser
	requiresSymbolFlag    *cli_client.BoolParser
	resourceOwnerTypeFlag *cli_client.EnumParser[ResourceOwnerType]
}

func (x *PasswordComplexitySettingsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordComplexitySettings", pflag.ContinueOnError)

	x.minLengthFlag = cli_client.NewUint64Parser(x.set, "min-length", "")
	x.requiresUppercaseFlag = cli_client.NewBoolParser(x.set, "requires-uppercase", "")
	x.requiresLowercaseFlag = cli_client.NewBoolParser(x.set, "requires-lowercase", "")
	x.requiresNumberFlag = cli_client.NewBoolParser(x.set, "requires-number", "")
	x.requiresSymbolFlag = cli_client.NewBoolParser(x.set, "requires-symbol", "")
	x.resourceOwnerTypeFlag = cli_client.NewEnumParser[ResourceOwnerType](x.set, "resource-owner-type", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordComplexitySettingsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.minLengthFlag.Changed() {
		x.changed = true
		x.PasswordComplexitySettings.MinLength = *x.minLengthFlag.Value
	}
	if x.requiresUppercaseFlag.Changed() {
		x.changed = true
		x.PasswordComplexitySettings.RequiresUppercase = *x.requiresUppercaseFlag.Value
	}
	if x.requiresLowercaseFlag.Changed() {
		x.changed = true
		x.PasswordComplexitySettings.RequiresLowercase = *x.requiresLowercaseFlag.Value
	}
	if x.requiresNumberFlag.Changed() {
		x.changed = true
		x.PasswordComplexitySettings.RequiresNumber = *x.requiresNumberFlag.Value
	}
	if x.requiresSymbolFlag.Changed() {
		x.changed = true
		x.PasswordComplexitySettings.RequiresSymbol = *x.requiresSymbolFlag.Value
	}
	if x.resourceOwnerTypeFlag.Changed() {
		x.changed = true
		x.PasswordComplexitySettings.ResourceOwnerType = *x.resourceOwnerTypeFlag.Value
	}
}

func (x *PasswordComplexitySettingsFlag) Changed() bool {
	return x.changed
}
