// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package settings

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type IdentityProviderFlag struct {
	*IdentityProvider

	changed bool
	set     *pflag.FlagSet

	idFlag   *cli_client.StringParser
	nameFlag *cli_client.StringParser
	typeFlag *cli_client.EnumParser[IdentityProviderType]
}

func (x *IdentityProviderFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IdentityProvider", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.typeFlag = cli_client.NewEnumParser[IdentityProviderType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *IdentityProviderFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.IdentityProvider.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.IdentityProvider.Name = *x.nameFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.IdentityProvider.Type = *x.typeFlag.Value
	}
}

func (x *IdentityProviderFlag) Changed() bool {
	return x.changed
}

type LoginSettingsFlag struct {
	*LoginSettings

	changed bool
	set     *pflag.FlagSet

	allowUsernamePasswordFlag      *cli_client.BoolParser
	allowRegisterFlag              *cli_client.BoolParser
	allowExternalIdpFlag           *cli_client.BoolParser
	forceMfaFlag                   *cli_client.BoolParser
	passkeysTypeFlag               *cli_client.EnumParser[PasskeysType]
	hidePasswordResetFlag          *cli_client.BoolParser
	ignoreUnknownUsernamesFlag     *cli_client.BoolParser
	defaultRedirectUriFlag         *cli_client.StringParser
	passwordCheckLifetimeFlag      *cli_client.DurationParser
	externalLoginCheckLifetimeFlag *cli_client.DurationParser
	mfaInitSkipLifetimeFlag        *cli_client.DurationParser
	secondFactorCheckLifetimeFlag  *cli_client.DurationParser
	multiFactorCheckLifetimeFlag   *cli_client.DurationParser
	secondFactorsFlag              *cli_client.EnumSliceParser[SecondFactorType]
	multiFactorsFlag               *cli_client.EnumSliceParser[MultiFactorType]
	allowDomainDiscoveryFlag       *cli_client.BoolParser
	disableLoginWithEmailFlag      *cli_client.BoolParser
	disableLoginWithPhoneFlag      *cli_client.BoolParser
	resourceOwnerTypeFlag          *cli_client.EnumParser[ResourceOwnerType]
	forceMfaLocalOnlyFlag          *cli_client.BoolParser
}

func (x *LoginSettingsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LoginSettings", pflag.ContinueOnError)

	x.allowUsernamePasswordFlag = cli_client.NewBoolParser(x.set, "allow-username-password", "")
	x.allowRegisterFlag = cli_client.NewBoolParser(x.set, "allow-register", "")
	x.allowExternalIdpFlag = cli_client.NewBoolParser(x.set, "allow-external-idp", "")
	x.forceMfaFlag = cli_client.NewBoolParser(x.set, "force-mfa", "")
	x.passkeysTypeFlag = cli_client.NewEnumParser[PasskeysType](x.set, "passkeys-type", "")
	x.hidePasswordResetFlag = cli_client.NewBoolParser(x.set, "hide-password-reset", "")
	x.ignoreUnknownUsernamesFlag = cli_client.NewBoolParser(x.set, "ignore-unknown-usernames", "")
	x.defaultRedirectUriFlag = cli_client.NewStringParser(x.set, "default-redirect-uri", "")
	x.passwordCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "password-check-lifetime", "")
	x.externalLoginCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "external-login-check-lifetime", "")
	x.mfaInitSkipLifetimeFlag = cli_client.NewDurationParser(x.set, "mfa-init-skip-lifetime", "")
	x.secondFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "second-factor-check-lifetime", "")
	x.multiFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "multi-factor-check-lifetime", "")
	x.secondFactorsFlag = cli_client.NewEnumSliceParser[SecondFactorType](x.set, "second-factors", "")
	x.multiFactorsFlag = cli_client.NewEnumSliceParser[MultiFactorType](x.set, "multi-factors", "")
	x.allowDomainDiscoveryFlag = cli_client.NewBoolParser(x.set, "allow-domain-discovery", "")
	x.disableLoginWithEmailFlag = cli_client.NewBoolParser(x.set, "disable-login-with-email", "")
	x.disableLoginWithPhoneFlag = cli_client.NewBoolParser(x.set, "disable-login-with-phone", "")
	x.resourceOwnerTypeFlag = cli_client.NewEnumParser[ResourceOwnerType](x.set, "resource-owner-type", "")
	x.forceMfaLocalOnlyFlag = cli_client.NewBoolParser(x.set, "force-mfa-local-only", "")
	parent.AddFlagSet(x.set)
}

func (x *LoginSettingsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.allowUsernamePasswordFlag.Changed() {
		x.changed = true
		x.LoginSettings.AllowUsernamePassword = *x.allowUsernamePasswordFlag.Value
	}
	if x.allowRegisterFlag.Changed() {
		x.changed = true
		x.LoginSettings.AllowRegister = *x.allowRegisterFlag.Value
	}
	if x.allowExternalIdpFlag.Changed() {
		x.changed = true
		x.LoginSettings.AllowExternalIdp = *x.allowExternalIdpFlag.Value
	}
	if x.forceMfaFlag.Changed() {
		x.changed = true
		x.LoginSettings.ForceMfa = *x.forceMfaFlag.Value
	}
	if x.passkeysTypeFlag.Changed() {
		x.changed = true
		x.LoginSettings.PasskeysType = *x.passkeysTypeFlag.Value
	}
	if x.hidePasswordResetFlag.Changed() {
		x.changed = true
		x.LoginSettings.HidePasswordReset = *x.hidePasswordResetFlag.Value
	}
	if x.ignoreUnknownUsernamesFlag.Changed() {
		x.changed = true
		x.LoginSettings.IgnoreUnknownUsernames = *x.ignoreUnknownUsernamesFlag.Value
	}
	if x.defaultRedirectUriFlag.Changed() {
		x.changed = true
		x.LoginSettings.DefaultRedirectUri = *x.defaultRedirectUriFlag.Value
	}
	if x.passwordCheckLifetimeFlag.Changed() {
		x.changed = true
		x.LoginSettings.PasswordCheckLifetime = x.passwordCheckLifetimeFlag.Value
	}
	if x.externalLoginCheckLifetimeFlag.Changed() {
		x.changed = true
		x.LoginSettings.ExternalLoginCheckLifetime = x.externalLoginCheckLifetimeFlag.Value
	}
	if x.mfaInitSkipLifetimeFlag.Changed() {
		x.changed = true
		x.LoginSettings.MfaInitSkipLifetime = x.mfaInitSkipLifetimeFlag.Value
	}
	if x.secondFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.LoginSettings.SecondFactorCheckLifetime = x.secondFactorCheckLifetimeFlag.Value
	}
	if x.multiFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.LoginSettings.MultiFactorCheckLifetime = x.multiFactorCheckLifetimeFlag.Value
	}
	if x.secondFactorsFlag.Changed() {
		x.changed = true
		x.LoginSettings.SecondFactors = *x.secondFactorsFlag.Value
	}
	if x.multiFactorsFlag.Changed() {
		x.changed = true
		x.LoginSettings.MultiFactors = *x.multiFactorsFlag.Value
	}
	if x.allowDomainDiscoveryFlag.Changed() {
		x.changed = true
		x.LoginSettings.AllowDomainDiscovery = *x.allowDomainDiscoveryFlag.Value
	}
	if x.disableLoginWithEmailFlag.Changed() {
		x.changed = true
		x.LoginSettings.DisableLoginWithEmail = *x.disableLoginWithEmailFlag.Value
	}
	if x.disableLoginWithPhoneFlag.Changed() {
		x.changed = true
		x.LoginSettings.DisableLoginWithPhone = *x.disableLoginWithPhoneFlag.Value
	}
	if x.resourceOwnerTypeFlag.Changed() {
		x.changed = true
		x.LoginSettings.ResourceOwnerType = *x.resourceOwnerTypeFlag.Value
	}
	if x.forceMfaLocalOnlyFlag.Changed() {
		x.changed = true
		x.LoginSettings.ForceMfaLocalOnly = *x.forceMfaLocalOnlyFlag.Value
	}
}

func (x *LoginSettingsFlag) Changed() bool {
	return x.changed
}
