// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package settings

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type DebugNotificationProviderFlag struct {
	*DebugNotificationProvider

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	compactFlag *cli_client.BoolParser
}

func (x *DebugNotificationProviderFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DebugNotificationProvider", pflag.ContinueOnError)

	x.compactFlag = cli_client.NewBoolParser(x.set, "compact", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DebugNotificationProviderFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DebugNotificationProvider.Details = x.detailsFlag.ObjectDetails
	}

	if x.compactFlag.Changed() {
		x.changed = true
		x.DebugNotificationProvider.Compact = *x.compactFlag.Value
	}
}

func (x *DebugNotificationProviderFlag) Changed() bool {
	return x.changed
}

type OIDCSettingsFlag struct {
	*OIDCSettings

	changed bool
	set     *pflag.FlagSet

	detailsFlag                    *object.ObjectDetailsFlag
	accessTokenLifetimeFlag        *cli_client.DurationParser
	idTokenLifetimeFlag            *cli_client.DurationParser
	refreshTokenIdleExpirationFlag *cli_client.DurationParser
	refreshTokenExpirationFlag     *cli_client.DurationParser
}

func (x *OIDCSettingsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("OIDCSettings", pflag.ContinueOnError)

	x.accessTokenLifetimeFlag = cli_client.NewDurationParser(x.set, "access-token-lifetime", "")
	x.idTokenLifetimeFlag = cli_client.NewDurationParser(x.set, "id-token-lifetime", "")
	x.refreshTokenIdleExpirationFlag = cli_client.NewDurationParser(x.set, "refresh-token-idle-expiration", "")
	x.refreshTokenExpirationFlag = cli_client.NewDurationParser(x.set, "refresh-token-expiration", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *OIDCSettingsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.OIDCSettings.Details = x.detailsFlag.ObjectDetails
	}

	if x.accessTokenLifetimeFlag.Changed() {
		x.changed = true
		x.OIDCSettings.AccessTokenLifetime = x.accessTokenLifetimeFlag.Value
	}
	if x.idTokenLifetimeFlag.Changed() {
		x.changed = true
		x.OIDCSettings.IdTokenLifetime = x.idTokenLifetimeFlag.Value
	}
	if x.refreshTokenIdleExpirationFlag.Changed() {
		x.changed = true
		x.OIDCSettings.RefreshTokenIdleExpiration = x.refreshTokenIdleExpirationFlag.Value
	}
	if x.refreshTokenExpirationFlag.Changed() {
		x.changed = true
		x.OIDCSettings.RefreshTokenExpiration = x.refreshTokenExpirationFlag.Value
	}
}

func (x *OIDCSettingsFlag) Changed() bool {
	return x.changed
}

type SMSProviderFlag struct {
	*SMSProvider

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
	stateFlag   *cli_client.EnumParser[SMSProviderConfigState]
	twilioFlag  *TwilioConfigFlag
}

func (x *SMSProviderFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SMSProvider", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[SMSProviderConfigState](x.set, "state", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.twilioFlag = &TwilioConfigFlag{TwilioConfig: new(TwilioConfig)}
	x.twilioFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SMSProviderFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "twilio")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("twilio"); flagIdx != nil {
		x.twilioFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SMSProvider.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.SMSProvider.Id = *x.idFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.SMSProvider.State = *x.stateFlag.Value
	}

	switch cli_client.FieldIndexes(args, "twilio").Last().Flag {
	case "twilio":
		if x.twilioFlag.Changed() {
			x.changed = true
			x.SMSProvider.Config = &SMSProvider_Twilio{Twilio: x.twilioFlag.TwilioConfig}
		}
	}
}

func (x *SMSProviderFlag) Changed() bool {
	return x.changed
}

type SMTPConfigFlag struct {
	*SMTPConfig

	changed bool
	set     *pflag.FlagSet

	detailsFlag        *object.ObjectDetailsFlag
	senderAddressFlag  *cli_client.StringParser
	senderNameFlag     *cli_client.StringParser
	tlsFlag            *cli_client.BoolParser
	hostFlag           *cli_client.StringParser
	userFlag           *cli_client.StringParser
	replyToAddressFlag *cli_client.StringParser
}

func (x *SMTPConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SMTPConfig", pflag.ContinueOnError)

	x.senderAddressFlag = cli_client.NewStringParser(x.set, "sender-address", "")
	x.senderNameFlag = cli_client.NewStringParser(x.set, "sender-name", "")
	x.tlsFlag = cli_client.NewBoolParser(x.set, "tls", "")
	x.hostFlag = cli_client.NewStringParser(x.set, "host", "")
	x.userFlag = cli_client.NewStringParser(x.set, "user", "")
	x.replyToAddressFlag = cli_client.NewStringParser(x.set, "reply-to-address", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SMTPConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SMTPConfig.Details = x.detailsFlag.ObjectDetails
	}

	if x.senderAddressFlag.Changed() {
		x.changed = true
		x.SMTPConfig.SenderAddress = *x.senderAddressFlag.Value
	}
	if x.senderNameFlag.Changed() {
		x.changed = true
		x.SMTPConfig.SenderName = *x.senderNameFlag.Value
	}
	if x.tlsFlag.Changed() {
		x.changed = true
		x.SMTPConfig.Tls = *x.tlsFlag.Value
	}
	if x.hostFlag.Changed() {
		x.changed = true
		x.SMTPConfig.Host = *x.hostFlag.Value
	}
	if x.userFlag.Changed() {
		x.changed = true
		x.SMTPConfig.User = *x.userFlag.Value
	}
	if x.replyToAddressFlag.Changed() {
		x.changed = true
		x.SMTPConfig.ReplyToAddress = *x.replyToAddressFlag.Value
	}
}

func (x *SMTPConfigFlag) Changed() bool {
	return x.changed
}

type SecretGeneratorFlag struct {
	*SecretGenerator

	changed bool
	set     *pflag.FlagSet

	generatorTypeFlag       *cli_client.EnumParser[SecretGeneratorType]
	detailsFlag             *object.ObjectDetailsFlag
	lengthFlag              *cli_client.Uint32Parser
	expiryFlag              *cli_client.DurationParser
	includeLowerLettersFlag *cli_client.BoolParser
	includeUpperLettersFlag *cli_client.BoolParser
	includeDigitsFlag       *cli_client.BoolParser
	includeSymbolsFlag      *cli_client.BoolParser
}

func (x *SecretGeneratorFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SecretGenerator", pflag.ContinueOnError)

	x.generatorTypeFlag = cli_client.NewEnumParser[SecretGeneratorType](x.set, "generator-type", "")
	x.lengthFlag = cli_client.NewUint32Parser(x.set, "length", "")
	x.expiryFlag = cli_client.NewDurationParser(x.set, "expiry", "")
	x.includeLowerLettersFlag = cli_client.NewBoolParser(x.set, "include-lower-letters", "")
	x.includeUpperLettersFlag = cli_client.NewBoolParser(x.set, "include-upper-letters", "")
	x.includeDigitsFlag = cli_client.NewBoolParser(x.set, "include-digits", "")
	x.includeSymbolsFlag = cli_client.NewBoolParser(x.set, "include-symbols", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SecretGeneratorFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.generatorTypeFlag.Changed() {
		x.changed = true
		x.SecretGenerator.GeneratorType = *x.generatorTypeFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SecretGenerator.Details = x.detailsFlag.ObjectDetails
	}

	if x.lengthFlag.Changed() {
		x.changed = true
		x.SecretGenerator.Length = *x.lengthFlag.Value
	}
	if x.expiryFlag.Changed() {
		x.changed = true
		x.SecretGenerator.Expiry = x.expiryFlag.Value
	}
	if x.includeLowerLettersFlag.Changed() {
		x.changed = true
		x.SecretGenerator.IncludeLowerLetters = *x.includeLowerLettersFlag.Value
	}
	if x.includeUpperLettersFlag.Changed() {
		x.changed = true
		x.SecretGenerator.IncludeUpperLetters = *x.includeUpperLettersFlag.Value
	}
	if x.includeDigitsFlag.Changed() {
		x.changed = true
		x.SecretGenerator.IncludeDigits = *x.includeDigitsFlag.Value
	}
	if x.includeSymbolsFlag.Changed() {
		x.changed = true
		x.SecretGenerator.IncludeSymbols = *x.includeSymbolsFlag.Value
	}
}

func (x *SecretGeneratorFlag) Changed() bool {
	return x.changed
}

type SecretGeneratorQueryFlag struct {
	*SecretGeneratorQuery

	changed bool
	set     *pflag.FlagSet

	typeQueryFlag *SecretGeneratorTypeQueryFlag
}

func (x *SecretGeneratorQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SecretGeneratorQuery", pflag.ContinueOnError)

	x.typeQueryFlag = &SecretGeneratorTypeQueryFlag{SecretGeneratorTypeQuery: new(SecretGeneratorTypeQuery)}
	x.typeQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SecretGeneratorQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "type-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("type-query"); flagIdx != nil {
		x.typeQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "type-query").Last().Flag {
	case "type-query":
		if x.typeQueryFlag.Changed() {
			x.changed = true
			x.SecretGeneratorQuery.Query = &SecretGeneratorQuery_TypeQuery{TypeQuery: x.typeQueryFlag.SecretGeneratorTypeQuery}
		}
	}
}

func (x *SecretGeneratorQueryFlag) Changed() bool {
	return x.changed
}

type SecretGeneratorTypeQueryFlag struct {
	*SecretGeneratorTypeQuery

	changed bool
	set     *pflag.FlagSet

	generatorTypeFlag *cli_client.EnumParser[SecretGeneratorType]
}

func (x *SecretGeneratorTypeQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SecretGeneratorTypeQuery", pflag.ContinueOnError)

	x.generatorTypeFlag = cli_client.NewEnumParser[SecretGeneratorType](x.set, "generator-type", "")
	parent.AddFlagSet(x.set)
}

func (x *SecretGeneratorTypeQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.generatorTypeFlag.Changed() {
		x.changed = true
		x.SecretGeneratorTypeQuery.GeneratorType = *x.generatorTypeFlag.Value
	}
}

func (x *SecretGeneratorTypeQueryFlag) Changed() bool {
	return x.changed
}

type SecurityPolicyFlag struct {
	*SecurityPolicy

	changed bool
	set     *pflag.FlagSet

	detailsFlag               *object.ObjectDetailsFlag
	enableIframeEmbeddingFlag *cli_client.BoolParser
	allowedOriginsFlag        *cli_client.StringSliceParser
}

func (x *SecurityPolicyFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SecurityPolicy", pflag.ContinueOnError)

	x.enableIframeEmbeddingFlag = cli_client.NewBoolParser(x.set, "enable-iframe-embedding", "")
	x.allowedOriginsFlag = cli_client.NewStringSliceParser(x.set, "allowed-origins", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SecurityPolicyFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SecurityPolicy.Details = x.detailsFlag.ObjectDetails
	}

	if x.enableIframeEmbeddingFlag.Changed() {
		x.changed = true
		x.SecurityPolicy.EnableIframeEmbedding = *x.enableIframeEmbeddingFlag.Value
	}
	if x.allowedOriginsFlag.Changed() {
		x.changed = true
		x.SecurityPolicy.AllowedOrigins = *x.allowedOriginsFlag.Value
	}
}

func (x *SecurityPolicyFlag) Changed() bool {
	return x.changed
}

type TwilioConfigFlag struct {
	*TwilioConfig

	changed bool
	set     *pflag.FlagSet

	sidFlag          *cli_client.StringParser
	senderNumberFlag *cli_client.StringParser
}

func (x *TwilioConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("TwilioConfig", pflag.ContinueOnError)

	x.sidFlag = cli_client.NewStringParser(x.set, "sid", "")
	x.senderNumberFlag = cli_client.NewStringParser(x.set, "sender-number", "")
	parent.AddFlagSet(x.set)
}

func (x *TwilioConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sidFlag.Changed() {
		x.changed = true
		x.TwilioConfig.Sid = *x.sidFlag.Value
	}
	if x.senderNumberFlag.Changed() {
		x.changed = true
		x.TwilioConfig.SenderNumber = *x.senderNumberFlag.Value
	}
}

func (x *TwilioConfigFlag) Changed() bool {
	return x.changed
}
