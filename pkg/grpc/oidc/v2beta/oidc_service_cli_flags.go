// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package oidc

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/object/v2beta"
	os "os"
)

type CreateCallbackRequestFlag struct {
	*CreateCallbackRequest

	changed bool
	set     *pflag.FlagSet

	authRequestIdFlag *cli_client.StringParser
	sessionFlag       *SessionFlag
	errorFlag         *AuthorizationErrorFlag
}

func (x *CreateCallbackRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateCallbackRequest", pflag.ContinueOnError)

	x.authRequestIdFlag = cli_client.NewStringParser(x.set, "auth-request-id", "")
	x.sessionFlag = &SessionFlag{Session: new(Session)}
	x.sessionFlag.AddFlags(x.set)
	x.errorFlag = &AuthorizationErrorFlag{AuthorizationError: new(AuthorizationError)}
	x.errorFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateCallbackRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "session", "error")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("session"); flagIdx != nil {
		x.sessionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("error"); flagIdx != nil {
		x.errorFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.authRequestIdFlag.Changed() {
		x.changed = true
		x.CreateCallbackRequest.AuthRequestId = *x.authRequestIdFlag.Value
	}

	switch cli_client.FieldIndexes(args, "session", "error").Last().Flag {
	case "session":
		if x.sessionFlag.Changed() {
			x.changed = true
			x.CreateCallbackRequest.CallbackKind = &CreateCallbackRequest_Session{Session: x.sessionFlag.Session}
		}
	case "error":
		if x.errorFlag.Changed() {
			x.changed = true
			x.CreateCallbackRequest.CallbackKind = &CreateCallbackRequest_Error{Error: x.errorFlag.AuthorizationError}
		}
	}
}

func (x *CreateCallbackRequestFlag) Changed() bool {
	return x.changed
}

type CreateCallbackResponseFlag struct {
	*CreateCallbackResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag     *v2beta.DetailsFlag
	callbackUrlFlag *cli_client.StringParser
}

func (x *CreateCallbackResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateCallbackResponse", pflag.ContinueOnError)

	x.callbackUrlFlag = cli_client.NewStringParser(x.set, "callback-url", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateCallbackResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.CreateCallbackResponse.Details = x.detailsFlag.Details
	}

	if x.callbackUrlFlag.Changed() {
		x.changed = true
		x.CreateCallbackResponse.CallbackUrl = *x.callbackUrlFlag.Value
	}
}

func (x *CreateCallbackResponseFlag) Changed() bool {
	return x.changed
}

type GetAuthRequestRequestFlag struct {
	*GetAuthRequestRequest

	changed bool
	set     *pflag.FlagSet

	authRequestIdFlag *cli_client.StringParser
}

func (x *GetAuthRequestRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAuthRequestRequest", pflag.ContinueOnError)

	x.authRequestIdFlag = cli_client.NewStringParser(x.set, "auth-request-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetAuthRequestRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.authRequestIdFlag.Changed() {
		x.changed = true
		x.GetAuthRequestRequest.AuthRequestId = *x.authRequestIdFlag.Value
	}
}

func (x *GetAuthRequestRequestFlag) Changed() bool {
	return x.changed
}

type GetAuthRequestResponseFlag struct {
	*GetAuthRequestResponse

	changed bool
	set     *pflag.FlagSet

	authRequestFlag *AuthRequestFlag
}

func (x *GetAuthRequestResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAuthRequestResponse", pflag.ContinueOnError)

	x.authRequestFlag = &AuthRequestFlag{AuthRequest: new(AuthRequest)}
	x.authRequestFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetAuthRequestResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "auth-request")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("auth-request"); flagIdx != nil {
		x.authRequestFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.authRequestFlag.Changed() {
		x.changed = true
		x.GetAuthRequestResponse.AuthRequest = x.authRequestFlag.AuthRequest
	}

}

func (x *GetAuthRequestResponseFlag) Changed() bool {
	return x.changed
}

type SessionFlag struct {
	*Session

	changed bool
	set     *pflag.FlagSet

	sessionIdFlag    *cli_client.StringParser
	sessionTokenFlag *cli_client.StringParser
}

func (x *SessionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Session", pflag.ContinueOnError)

	x.sessionIdFlag = cli_client.NewStringParser(x.set, "session-id", "")
	x.sessionTokenFlag = cli_client.NewStringParser(x.set, "session-token", "")
	parent.AddFlagSet(x.set)
}

func (x *SessionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sessionIdFlag.Changed() {
		x.changed = true
		x.Session.SessionId = *x.sessionIdFlag.Value
	}
	if x.sessionTokenFlag.Changed() {
		x.changed = true
		x.Session.SessionToken = *x.sessionTokenFlag.Value
	}
}

func (x *SessionFlag) Changed() bool {
	return x.changed
}
