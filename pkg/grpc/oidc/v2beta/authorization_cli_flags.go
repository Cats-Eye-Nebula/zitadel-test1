// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package oidc

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type AuthRequestFlag struct {
	*AuthRequest

	changed bool
	set     *pflag.FlagSet

	idFlag           *cli_client.StringParser
	creationDateFlag *cli_client.TimestampParser
	clientIdFlag     *cli_client.StringParser
	scopeFlag        *cli_client.StringSliceParser
	redirectUriFlag  *cli_client.StringParser
	promptFlag       *cli_client.EnumSliceParser[Prompt]
	uiLocalesFlag    *cli_client.StringSliceParser
	loginHintFlag    *cli_client.StringParser
	maxAgeFlag       *cli_client.DurationParser
	hintUserIdFlag   *cli_client.StringParser
}

func (x *AuthRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.creationDateFlag = cli_client.NewTimestampParser(x.set, "creation-date", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.scopeFlag = cli_client.NewStringSliceParser(x.set, "scope", "")
	x.redirectUriFlag = cli_client.NewStringParser(x.set, "redirect-uri", "")
	x.promptFlag = cli_client.NewEnumSliceParser[Prompt](x.set, "prompt", "")
	x.uiLocalesFlag = cli_client.NewStringSliceParser(x.set, "ui-locales", "")
	x.loginHintFlag = cli_client.NewStringParser(x.set, "login-hint", "")
	x.maxAgeFlag = cli_client.NewDurationParser(x.set, "max-age", "")
	x.hintUserIdFlag = cli_client.NewStringParser(x.set, "hint-user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *AuthRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AuthRequest.Id = *x.idFlag.Value
	}
	if x.creationDateFlag.Changed() {
		x.changed = true
		x.AuthRequest.CreationDate = x.creationDateFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AuthRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.scopeFlag.Changed() {
		x.changed = true
		x.AuthRequest.Scope = *x.scopeFlag.Value
	}
	if x.redirectUriFlag.Changed() {
		x.changed = true
		x.AuthRequest.RedirectUri = *x.redirectUriFlag.Value
	}
	if x.promptFlag.Changed() {
		x.changed = true
		x.AuthRequest.Prompt = *x.promptFlag.Value
	}
	if x.uiLocalesFlag.Changed() {
		x.changed = true
		x.AuthRequest.UiLocales = *x.uiLocalesFlag.Value
	}
	if x.loginHintFlag.Changed() {
		x.changed = true
		x.AuthRequest.LoginHint = x.loginHintFlag.Value
	}
	if x.maxAgeFlag.Changed() {
		x.changed = true
		x.AuthRequest.MaxAge = x.maxAgeFlag.Value
	}
	if x.hintUserIdFlag.Changed() {
		x.changed = true
		x.AuthRequest.HintUserId = x.hintUserIdFlag.Value
	}
}

func (x *AuthRequestFlag) Changed() bool {
	return x.changed
}

type AuthorizationErrorFlag struct {
	*AuthorizationError

	changed bool
	set     *pflag.FlagSet

	errorFlag            *cli_client.EnumParser[ErrorReason]
	errorDescriptionFlag *cli_client.StringParser
	errorUriFlag         *cli_client.StringParser
}

func (x *AuthorizationErrorFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthorizationError", pflag.ContinueOnError)

	x.errorFlag = cli_client.NewEnumParser[ErrorReason](x.set, "error", "")
	x.errorDescriptionFlag = cli_client.NewStringParser(x.set, "error-description", "")
	x.errorUriFlag = cli_client.NewStringParser(x.set, "error-uri", "")
	parent.AddFlagSet(x.set)
}

func (x *AuthorizationErrorFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.errorFlag.Changed() {
		x.changed = true
		x.AuthorizationError.Error = *x.errorFlag.Value
	}
	if x.errorDescriptionFlag.Changed() {
		x.changed = true
		x.AuthorizationError.ErrorDescription = x.errorDescriptionFlag.Value
	}
	if x.errorUriFlag.Changed() {
		x.changed = true
		x.AuthorizationError.ErrorUri = x.errorUriFlag.Value
	}
}

func (x *AuthorizationErrorFlag) Changed() bool {
	return x.changed
}
