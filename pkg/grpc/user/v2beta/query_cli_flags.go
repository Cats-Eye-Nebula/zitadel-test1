// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/object/v2beta"
	os "os"
)

type AndQueryFlag struct {
	*AndQuery

	changed bool
	set     *pflag.FlagSet

	queriesFlag []*SearchQueryFlag
}

func (x *AndQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AndQuery", pflag.ContinueOnError)

	x.queriesFlag = []*SearchQueryFlag{}
	parent.AddFlagSet(x.set)
}

func (x *AndQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &SearchQueryFlag{SearchQuery: new(SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.AndQuery.Queries[i] = value.SearchQuery
		}
	}

}

func (x *AndQueryFlag) Changed() bool {
	return x.changed
}

type DisplayNameQueryFlag struct {
	*DisplayNameQuery

	changed bool
	set     *pflag.FlagSet

	displayNameFlag *cli_client.StringParser
	methodFlag      *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *DisplayNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DisplayNameQuery", pflag.ContinueOnError)

	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *DisplayNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.displayNameFlag.Changed() {
		x.changed = true
		x.DisplayNameQuery.DisplayName = *x.displayNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.DisplayNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *DisplayNameQueryFlag) Changed() bool {
	return x.changed
}

type EmailQueryFlag struct {
	*EmailQuery

	changed bool
	set     *pflag.FlagSet

	emailAddressFlag *cli_client.StringParser
	methodFlag       *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *EmailQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("EmailQuery", pflag.ContinueOnError)

	x.emailAddressFlag = cli_client.NewStringParser(x.set, "email-address", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *EmailQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailAddressFlag.Changed() {
		x.changed = true
		x.EmailQuery.EmailAddress = *x.emailAddressFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.EmailQuery.Method = *x.methodFlag.Value
	}
}

func (x *EmailQueryFlag) Changed() bool {
	return x.changed
}

type FirstNameQueryFlag struct {
	*FirstNameQuery

	changed bool
	set     *pflag.FlagSet

	firstNameFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *FirstNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FirstNameQuery", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *FirstNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.FirstNameQuery.FirstName = *x.firstNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.FirstNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *FirstNameQueryFlag) Changed() bool {
	return x.changed
}

type InUserEmailsQueryFlag struct {
	*InUserEmailsQuery

	changed bool
	set     *pflag.FlagSet

	userEmailsFlag *cli_client.StringSliceParser
}

func (x *InUserEmailsQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InUserEmailsQuery", pflag.ContinueOnError)

	x.userEmailsFlag = cli_client.NewStringSliceParser(x.set, "user-emails", "")
	parent.AddFlagSet(x.set)
}

func (x *InUserEmailsQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userEmailsFlag.Changed() {
		x.changed = true
		x.InUserEmailsQuery.UserEmails = *x.userEmailsFlag.Value
	}
}

func (x *InUserEmailsQueryFlag) Changed() bool {
	return x.changed
}

type InUserIDQueryFlag struct {
	*InUserIDQuery

	changed bool
	set     *pflag.FlagSet

	userIdsFlag *cli_client.StringSliceParser
}

func (x *InUserIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InUserIDQuery", pflag.ContinueOnError)

	x.userIdsFlag = cli_client.NewStringSliceParser(x.set, "user-ids", "")
	parent.AddFlagSet(x.set)
}

func (x *InUserIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdsFlag.Changed() {
		x.changed = true
		x.InUserIDQuery.UserIds = *x.userIdsFlag.Value
	}
}

func (x *InUserIDQueryFlag) Changed() bool {
	return x.changed
}

type LastNameQueryFlag struct {
	*LastNameQuery

	changed bool
	set     *pflag.FlagSet

	lastNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *LastNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LastNameQuery", pflag.ContinueOnError)

	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *LastNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.lastNameFlag.Changed() {
		x.changed = true
		x.LastNameQuery.LastName = *x.lastNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.LastNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *LastNameQueryFlag) Changed() bool {
	return x.changed
}

type LoginNameQueryFlag struct {
	*LoginNameQuery

	changed bool
	set     *pflag.FlagSet

	loginNameFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *LoginNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LoginNameQuery", pflag.ContinueOnError)

	x.loginNameFlag = cli_client.NewStringParser(x.set, "login-name", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *LoginNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.loginNameFlag.Changed() {
		x.changed = true
		x.LoginNameQuery.LoginName = *x.loginNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.LoginNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *LoginNameQueryFlag) Changed() bool {
	return x.changed
}

type NickNameQueryFlag struct {
	*NickNameQuery

	changed bool
	set     *pflag.FlagSet

	nickNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *NickNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NickNameQuery", pflag.ContinueOnError)

	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *NickNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nickNameFlag.Changed() {
		x.changed = true
		x.NickNameQuery.NickName = *x.nickNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.NickNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *NickNameQueryFlag) Changed() bool {
	return x.changed
}

type NotQueryFlag struct {
	*NotQuery

	changed bool
	set     *pflag.FlagSet

	queryFlag *SearchQueryFlag
}

func (x *NotQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NotQuery", pflag.ContinueOnError)

	x.queryFlag = &SearchQueryFlag{SearchQuery: new(SearchQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *NotQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.NotQuery.Query = x.queryFlag.SearchQuery
	}

}

func (x *NotQueryFlag) Changed() bool {
	return x.changed
}

type OrQueryFlag struct {
	*OrQuery

	changed bool
	set     *pflag.FlagSet

	queriesFlag []*SearchQueryFlag
}

func (x *OrQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("OrQuery", pflag.ContinueOnError)

	x.queriesFlag = []*SearchQueryFlag{}
	parent.AddFlagSet(x.set)
}

func (x *OrQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &SearchQueryFlag{SearchQuery: new(SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.OrQuery.Queries[i] = value.SearchQuery
		}
	}

}

func (x *OrQueryFlag) Changed() bool {
	return x.changed
}

type SearchQueryFlag struct {
	*SearchQuery

	changed bool
	set     *pflag.FlagSet

	userNameQueryFlag     *UserNameQueryFlag
	firstNameQueryFlag    *FirstNameQueryFlag
	lastNameQueryFlag     *LastNameQueryFlag
	nickNameQueryFlag     *NickNameQueryFlag
	displayNameQueryFlag  *DisplayNameQueryFlag
	emailQueryFlag        *EmailQueryFlag
	stateQueryFlag        *StateQueryFlag
	typeQueryFlag         *TypeQueryFlag
	loginNameQueryFlag    *LoginNameQueryFlag
	inUserIdsQueryFlag    *InUserIDQueryFlag
	orQueryFlag           *OrQueryFlag
	andQueryFlag          *AndQueryFlag
	notQueryFlag          *NotQueryFlag
	inUserEmailsQueryFlag *InUserEmailsQueryFlag
}

func (x *SearchQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SearchQuery", pflag.ContinueOnError)

	x.userNameQueryFlag = &UserNameQueryFlag{UserNameQuery: new(UserNameQuery)}
	x.userNameQueryFlag.AddFlags(x.set)
	x.firstNameQueryFlag = &FirstNameQueryFlag{FirstNameQuery: new(FirstNameQuery)}
	x.firstNameQueryFlag.AddFlags(x.set)
	x.lastNameQueryFlag = &LastNameQueryFlag{LastNameQuery: new(LastNameQuery)}
	x.lastNameQueryFlag.AddFlags(x.set)
	x.nickNameQueryFlag = &NickNameQueryFlag{NickNameQuery: new(NickNameQuery)}
	x.nickNameQueryFlag.AddFlags(x.set)
	x.displayNameQueryFlag = &DisplayNameQueryFlag{DisplayNameQuery: new(DisplayNameQuery)}
	x.displayNameQueryFlag.AddFlags(x.set)
	x.emailQueryFlag = &EmailQueryFlag{EmailQuery: new(EmailQuery)}
	x.emailQueryFlag.AddFlags(x.set)
	x.stateQueryFlag = &StateQueryFlag{StateQuery: new(StateQuery)}
	x.stateQueryFlag.AddFlags(x.set)
	x.typeQueryFlag = &TypeQueryFlag{TypeQuery: new(TypeQuery)}
	x.typeQueryFlag.AddFlags(x.set)
	x.loginNameQueryFlag = &LoginNameQueryFlag{LoginNameQuery: new(LoginNameQuery)}
	x.loginNameQueryFlag.AddFlags(x.set)
	x.inUserIdsQueryFlag = &InUserIDQueryFlag{InUserIDQuery: new(InUserIDQuery)}
	x.inUserIdsQueryFlag.AddFlags(x.set)
	x.orQueryFlag = &OrQueryFlag{OrQuery: new(OrQuery)}
	x.orQueryFlag.AddFlags(x.set)
	x.andQueryFlag = &AndQueryFlag{AndQuery: new(AndQuery)}
	x.andQueryFlag.AddFlags(x.set)
	x.notQueryFlag = &NotQueryFlag{NotQuery: new(NotQuery)}
	x.notQueryFlag.AddFlags(x.set)
	x.inUserEmailsQueryFlag = &InUserEmailsQueryFlag{InUserEmailsQuery: new(InUserEmailsQuery)}
	x.inUserEmailsQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SearchQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user-name-query", "first-name-query", "last-name-query", "nick-name-query", "display-name-query", "email-query", "state-query", "type-query", "login-name-query", "in-user-ids-query", "or-query", "and-query", "not-query", "in-user-emails-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user-name-query"); flagIdx != nil {
		x.userNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("first-name-query"); flagIdx != nil {
		x.firstNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("last-name-query"); flagIdx != nil {
		x.lastNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("nick-name-query"); flagIdx != nil {
		x.nickNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("display-name-query"); flagIdx != nil {
		x.displayNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-query"); flagIdx != nil {
		x.emailQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("state-query"); flagIdx != nil {
		x.stateQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("type-query"); flagIdx != nil {
		x.typeQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-name-query"); flagIdx != nil {
		x.loginNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("in-user-ids-query"); flagIdx != nil {
		x.inUserIdsQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("or-query"); flagIdx != nil {
		x.orQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("and-query"); flagIdx != nil {
		x.andQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("not-query"); flagIdx != nil {
		x.notQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("in-user-emails-query"); flagIdx != nil {
		x.inUserEmailsQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "user-name-query", "first-name-query", "last-name-query", "nick-name-query", "display-name-query", "email-query", "state-query", "type-query", "login-name-query", "in-user-ids-query", "or-query", "and-query", "not-query", "in-user-emails-query").Last().Flag {
	case "user-name-query":
		if x.userNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_UserNameQuery{UserNameQuery: x.userNameQueryFlag.UserNameQuery}
		}
	case "first-name-query":
		if x.firstNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_FirstNameQuery{FirstNameQuery: x.firstNameQueryFlag.FirstNameQuery}
		}
	case "last-name-query":
		if x.lastNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_LastNameQuery{LastNameQuery: x.lastNameQueryFlag.LastNameQuery}
		}
	case "nick-name-query":
		if x.nickNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_NickNameQuery{NickNameQuery: x.nickNameQueryFlag.NickNameQuery}
		}
	case "display-name-query":
		if x.displayNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_DisplayNameQuery{DisplayNameQuery: x.displayNameQueryFlag.DisplayNameQuery}
		}
	case "email-query":
		if x.emailQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_EmailQuery{EmailQuery: x.emailQueryFlag.EmailQuery}
		}
	case "state-query":
		if x.stateQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_StateQuery{StateQuery: x.stateQueryFlag.StateQuery}
		}
	case "type-query":
		if x.typeQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_TypeQuery{TypeQuery: x.typeQueryFlag.TypeQuery}
		}
	case "login-name-query":
		if x.loginNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_LoginNameQuery{LoginNameQuery: x.loginNameQueryFlag.LoginNameQuery}
		}
	case "in-user-ids-query":
		if x.inUserIdsQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_InUserIdsQuery{InUserIdsQuery: x.inUserIdsQueryFlag.InUserIDQuery}
		}
	case "or-query":
		if x.orQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_OrQuery{OrQuery: x.orQueryFlag.OrQuery}
		}
	case "and-query":
		if x.andQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_AndQuery{AndQuery: x.andQueryFlag.AndQuery}
		}
	case "not-query":
		if x.notQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_NotQuery{NotQuery: x.notQueryFlag.NotQuery}
		}
	case "in-user-emails-query":
		if x.inUserEmailsQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_InUserEmailsQuery{InUserEmailsQuery: x.inUserEmailsQueryFlag.InUserEmailsQuery}
		}
	}
}

func (x *SearchQueryFlag) Changed() bool {
	return x.changed
}

type StateQueryFlag struct {
	*StateQuery

	changed bool
	set     *pflag.FlagSet

	stateFlag *cli_client.EnumParser[UserState]
}

func (x *StateQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("StateQuery", pflag.ContinueOnError)

	x.stateFlag = cli_client.NewEnumParser[UserState](x.set, "state", "")
	parent.AddFlagSet(x.set)
}

func (x *StateQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.StateQuery.State = *x.stateFlag.Value
	}
}

func (x *StateQueryFlag) Changed() bool {
	return x.changed
}

type TypeQueryFlag struct {
	*TypeQuery

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[Type]
}

func (x *TypeQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("TypeQuery", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[Type](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *TypeQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.TypeQuery.Type = *x.typeFlag.Value
	}
}

func (x *TypeQueryFlag) Changed() bool {
	return x.changed
}

type UserNameQueryFlag struct {
	*UserNameQuery

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[v2beta.TextQueryMethod]
}

func (x *UserNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserNameQuery", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.methodFlag = cli_client.NewEnumParser[v2beta.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.UserNameQuery.UserName = *x.userNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserNameQueryFlag) Changed() bool {
	return x.changed
}
