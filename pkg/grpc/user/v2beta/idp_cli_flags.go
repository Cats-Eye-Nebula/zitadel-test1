// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type IDPInformationFlag struct {
	*IDPInformation

	changed bool
	set     *pflag.FlagSet

	oauthFlag          *IDPOAuthAccessInformationFlag
	ldapFlag           *IDPLDAPAccessInformationFlag
	samlFlag           *IDPSAMLAccessInformationFlag
	idpIdFlag          *cli_client.StringParser
	userIdFlag         *cli_client.StringParser
	userNameFlag       *cli_client.StringParser
	rawInformationFlag *cli_client.StructParser
}

func (x *IDPInformationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPInformation", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.rawInformationFlag = cli_client.NewStructParser(x.set, "raw-information", "")
	x.oauthFlag = &IDPOAuthAccessInformationFlag{IDPOAuthAccessInformation: new(IDPOAuthAccessInformation)}
	x.oauthFlag.AddFlags(x.set)
	x.ldapFlag = &IDPLDAPAccessInformationFlag{IDPLDAPAccessInformation: new(IDPLDAPAccessInformation)}
	x.ldapFlag.AddFlags(x.set)
	x.samlFlag = &IDPSAMLAccessInformationFlag{IDPSAMLAccessInformation: new(IDPSAMLAccessInformation)}
	x.samlFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *IDPInformationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "oauth", "ldap", "saml")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("oauth"); flagIdx != nil {
		x.oauthFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("ldap"); flagIdx != nil {
		x.ldapFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("saml"); flagIdx != nil {
		x.samlFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.IDPInformation.IdpId = *x.idpIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.IDPInformation.UserId = *x.userIdFlag.Value
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.IDPInformation.UserName = *x.userNameFlag.Value
	}
	if x.rawInformationFlag.Changed() {
		x.changed = true
		x.IDPInformation.RawInformation = x.rawInformationFlag.Value
	}

	switch cli_client.FieldIndexes(args, "oauth", "ldap", "saml").Last().Flag {
	case "oauth":
		if x.oauthFlag.Changed() {
			x.changed = true
			x.IDPInformation.Access = &IDPInformation_Oauth{Oauth: x.oauthFlag.IDPOAuthAccessInformation}
		}
	case "ldap":
		if x.ldapFlag.Changed() {
			x.changed = true
			x.IDPInformation.Access = &IDPInformation_Ldap{Ldap: x.ldapFlag.IDPLDAPAccessInformation}
		}
	case "saml":
		if x.samlFlag.Changed() {
			x.changed = true
			x.IDPInformation.Access = &IDPInformation_Saml{Saml: x.samlFlag.IDPSAMLAccessInformation}
		}
	}
}

func (x *IDPInformationFlag) Changed() bool {
	return x.changed
}

type IDPIntentFlag struct {
	*IDPIntent

	changed bool
	set     *pflag.FlagSet

	idpIntentIdFlag    *cli_client.StringParser
	idpIntentTokenFlag *cli_client.StringParser
	userIdFlag         *cli_client.StringParser
}

func (x *IDPIntentFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPIntent", pflag.ContinueOnError)

	x.idpIntentIdFlag = cli_client.NewStringParser(x.set, "idp-intent-id", "")
	x.idpIntentTokenFlag = cli_client.NewStringParser(x.set, "idp-intent-token", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPIntentFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIntentIdFlag.Changed() {
		x.changed = true
		x.IDPIntent.IdpIntentId = *x.idpIntentIdFlag.Value
	}
	if x.idpIntentTokenFlag.Changed() {
		x.changed = true
		x.IDPIntent.IdpIntentToken = *x.idpIntentTokenFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.IDPIntent.UserId = *x.userIdFlag.Value
	}
}

func (x *IDPIntentFlag) Changed() bool {
	return x.changed
}

type IDPLDAPAccessInformationFlag struct {
	*IDPLDAPAccessInformation

	changed bool
	set     *pflag.FlagSet

	attributesFlag *cli_client.StructParser
}

func (x *IDPLDAPAccessInformationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPLDAPAccessInformation", pflag.ContinueOnError)

	x.attributesFlag = cli_client.NewStructParser(x.set, "attributes", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPLDAPAccessInformationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.attributesFlag.Changed() {
		x.changed = true
		x.IDPLDAPAccessInformation.Attributes = x.attributesFlag.Value
	}
}

func (x *IDPLDAPAccessInformationFlag) Changed() bool {
	return x.changed
}

type IDPLinkFlag struct {
	*IDPLink

	changed bool
	set     *pflag.FlagSet

	idpIdFlag    *cli_client.StringParser
	userIdFlag   *cli_client.StringParser
	userNameFlag *cli_client.StringParser
}

func (x *IDPLinkFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPLink", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPLinkFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.IDPLink.IdpId = *x.idpIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.IDPLink.UserId = *x.userIdFlag.Value
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.IDPLink.UserName = *x.userNameFlag.Value
	}
}

func (x *IDPLinkFlag) Changed() bool {
	return x.changed
}

type IDPOAuthAccessInformationFlag struct {
	*IDPOAuthAccessInformation

	changed bool
	set     *pflag.FlagSet

	accessTokenFlag *cli_client.StringParser
	idTokenFlag     *cli_client.StringParser
}

func (x *IDPOAuthAccessInformationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPOAuthAccessInformation", pflag.ContinueOnError)

	x.accessTokenFlag = cli_client.NewStringParser(x.set, "access-token", "")
	x.idTokenFlag = cli_client.NewStringParser(x.set, "id-token", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPOAuthAccessInformationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.accessTokenFlag.Changed() {
		x.changed = true
		x.IDPOAuthAccessInformation.AccessToken = *x.accessTokenFlag.Value
	}
	if x.idTokenFlag.Changed() {
		x.changed = true
		x.IDPOAuthAccessInformation.IdToken = x.idTokenFlag.Value
	}
}

func (x *IDPOAuthAccessInformationFlag) Changed() bool {
	return x.changed
}

type IDPSAMLAccessInformationFlag struct {
	*IDPSAMLAccessInformation

	changed bool
	set     *pflag.FlagSet

	assertionFlag *cli_client.BytesParser
}

func (x *IDPSAMLAccessInformationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPSAMLAccessInformation", pflag.ContinueOnError)

	x.assertionFlag = cli_client.NewBytesParser(x.set, "assertion", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPSAMLAccessInformationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.assertionFlag.Changed() {
		x.changed = true
		x.IDPSAMLAccessInformation.Assertion = *x.assertionFlag.Value
	}
}

func (x *IDPSAMLAccessInformationFlag) Changed() bool {
	return x.changed
}

type LDAPCredentialsFlag struct {
	*LDAPCredentials

	changed bool
	set     *pflag.FlagSet

	usernameFlag *cli_client.StringParser
	passwordFlag *cli_client.StringParser
}

func (x *LDAPCredentialsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LDAPCredentials", pflag.ContinueOnError)

	x.usernameFlag = cli_client.NewStringParser(x.set, "username", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	parent.AddFlagSet(x.set)
}

func (x *LDAPCredentialsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.usernameFlag.Changed() {
		x.changed = true
		x.LDAPCredentials.Username = *x.usernameFlag.Value
	}
	if x.passwordFlag.Changed() {
		x.changed = true
		x.LDAPCredentials.Password = *x.passwordFlag.Value
	}
}

func (x *LDAPCredentialsFlag) Changed() bool {
	return x.changed
}

type RedirectURLsFlag struct {
	*RedirectURLs

	changed bool
	set     *pflag.FlagSet

	successUrlFlag *cli_client.StringParser
	failureUrlFlag *cli_client.StringParser
}

func (x *RedirectURLsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RedirectURLs", pflag.ContinueOnError)

	x.successUrlFlag = cli_client.NewStringParser(x.set, "success-url", "")
	x.failureUrlFlag = cli_client.NewStringParser(x.set, "failure-url", "")
	parent.AddFlagSet(x.set)
}

func (x *RedirectURLsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.successUrlFlag.Changed() {
		x.changed = true
		x.RedirectURLs.SuccessUrl = *x.successUrlFlag.Value
	}
	if x.failureUrlFlag.Changed() {
		x.changed = true
		x.RedirectURLs.FailureUrl = *x.failureUrlFlag.Value
	}
}

func (x *RedirectURLsFlag) Changed() bool {
	return x.changed
}
