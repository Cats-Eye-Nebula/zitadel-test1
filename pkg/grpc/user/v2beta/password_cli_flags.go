// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type HashedPasswordFlag struct {
	*HashedPassword

	changed bool
	set     *pflag.FlagSet

	hashFlag           *cli_client.StringParser
	changeRequiredFlag *cli_client.BoolParser
}

func (x *HashedPasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HashedPassword", pflag.ContinueOnError)

	x.hashFlag = cli_client.NewStringParser(x.set, "hash", "")
	x.changeRequiredFlag = cli_client.NewBoolParser(x.set, "change-required", "")
	parent.AddFlagSet(x.set)
}

func (x *HashedPasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.hashFlag.Changed() {
		x.changed = true
		x.HashedPassword.Hash = *x.hashFlag.Value
	}
	if x.changeRequiredFlag.Changed() {
		x.changed = true
		x.HashedPassword.ChangeRequired = *x.changeRequiredFlag.Value
	}
}

func (x *HashedPasswordFlag) Changed() bool {
	return x.changed
}

type PasswordFlag struct {
	*Password

	changed bool
	set     *pflag.FlagSet

	passwordFlag       *cli_client.StringParser
	changeRequiredFlag *cli_client.BoolParser
}

func (x *PasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Password", pflag.ContinueOnError)

	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.changeRequiredFlag = cli_client.NewBoolParser(x.set, "change-required", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.Password.Password = *x.passwordFlag.Value
	}
	if x.changeRequiredFlag.Changed() {
		x.changed = true
		x.Password.ChangeRequired = *x.changeRequiredFlag.Value
	}
}

func (x *PasswordFlag) Changed() bool {
	return x.changed
}

type ReturnPasswordResetCodeFlag struct {
	*ReturnPasswordResetCode

	changed bool
	set     *pflag.FlagSet
}

func (x *ReturnPasswordResetCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReturnPasswordResetCode", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ReturnPasswordResetCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ReturnPasswordResetCodeFlag) Changed() bool {
	return x.changed
}

type SendPasswordResetLinkFlag struct {
	*SendPasswordResetLink

	changed bool
	set     *pflag.FlagSet

	notificationTypeFlag *cli_client.EnumParser[NotificationType]
	urlTemplateFlag      *cli_client.StringParser
}

func (x *SendPasswordResetLinkFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendPasswordResetLink", pflag.ContinueOnError)

	x.notificationTypeFlag = cli_client.NewEnumParser[NotificationType](x.set, "notification-type", "")
	x.urlTemplateFlag = cli_client.NewStringParser(x.set, "url-template", "")
	parent.AddFlagSet(x.set)
}

func (x *SendPasswordResetLinkFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.notificationTypeFlag.Changed() {
		x.changed = true
		x.SendPasswordResetLink.NotificationType = *x.notificationTypeFlag.Value
	}
	if x.urlTemplateFlag.Changed() {
		x.changed = true
		x.SendPasswordResetLink.UrlTemplate = x.urlTemplateFlag.Value
	}
}

func (x *SendPasswordResetLinkFlag) Changed() bool {
	return x.changed
}

type SetPasswordFlag struct {
	*SetPassword

	changed bool
	set     *pflag.FlagSet

	passwordFlag         *PasswordFlag
	hashedPasswordFlag   *HashedPasswordFlag
	currentPasswordFlag  *cli_client.StringParser
	verificationCodeFlag *cli_client.StringParser
}

func (x *SetPasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPassword", pflag.ContinueOnError)

	x.currentPasswordFlag = cli_client.NewStringParser(x.set, "current-password", "")
	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	x.passwordFlag = &PasswordFlag{Password: new(Password)}
	x.passwordFlag.AddFlags(x.set)
	x.hashedPasswordFlag = &HashedPasswordFlag{HashedPassword: new(HashedPassword)}
	x.hashedPasswordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "password", "hashed-password")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("password"); flagIdx != nil {
		x.passwordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("hashed-password"); flagIdx != nil {
		x.hashedPasswordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "password", "hashed-password").Last().Flag {
	case "password":
		if x.passwordFlag.Changed() {
			x.changed = true
			x.SetPassword.PasswordType = &SetPassword_Password{Password: x.passwordFlag.Password}
		}
	case "hashed-password":
		if x.hashedPasswordFlag.Changed() {
			x.changed = true
			x.SetPassword.PasswordType = &SetPassword_HashedPassword{HashedPassword: x.hashedPasswordFlag.HashedPassword}
		}
	}

	switch cli_client.FieldIndexes(args, "current-password", "verification-code").Last().Flag {
	case "current-password":
		if x.currentPasswordFlag.Changed() {
			x.changed = true
			x.SetPassword.Verification = &SetPassword_CurrentPassword{CurrentPassword: *x.currentPasswordFlag.Value}
		}
	case "verification-code":
		if x.verificationCodeFlag.Changed() {
			x.changed = true
			x.SetPassword.Verification = &SetPassword_VerificationCode{VerificationCode: *x.verificationCodeFlag.Value}
		}
	}
}

func (x *SetPasswordFlag) Changed() bool {
	return x.changed
}
