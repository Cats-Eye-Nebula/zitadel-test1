// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type HumanPhoneFlag struct {
	*HumanPhone

	changed bool
	set     *pflag.FlagSet

	phoneFlag      *cli_client.StringParser
	isVerifiedFlag *cli_client.BoolParser
}

func (x *HumanPhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HumanPhone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isVerifiedFlag = cli_client.NewBoolParser(x.set, "is-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *HumanPhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.HumanPhone.Phone = *x.phoneFlag.Value
	}
	if x.isVerifiedFlag.Changed() {
		x.changed = true
		x.HumanPhone.IsVerified = *x.isVerifiedFlag.Value
	}
}

func (x *HumanPhoneFlag) Changed() bool {
	return x.changed
}

type ReturnPhoneVerificationCodeFlag struct {
	*ReturnPhoneVerificationCode

	changed bool
	set     *pflag.FlagSet
}

func (x *ReturnPhoneVerificationCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReturnPhoneVerificationCode", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ReturnPhoneVerificationCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ReturnPhoneVerificationCodeFlag) Changed() bool {
	return x.changed
}

type SendPhoneVerificationCodeFlag struct {
	*SendPhoneVerificationCode

	changed bool
	set     *pflag.FlagSet
}

func (x *SendPhoneVerificationCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendPhoneVerificationCode", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *SendPhoneVerificationCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *SendPhoneVerificationCodeFlag) Changed() bool {
	return x.changed
}

type SetHumanPhoneFlag struct {
	*SetHumanPhone

	changed bool
	set     *pflag.FlagSet

	phoneFlag      *cli_client.StringParser
	sendCodeFlag   *SendPhoneVerificationCodeFlag
	returnCodeFlag *ReturnPhoneVerificationCodeFlag
	isVerifiedFlag *cli_client.BoolParser
}

func (x *SetHumanPhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanPhone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isVerifiedFlag = cli_client.NewBoolParser(x.set, "is-verified", "")
	x.sendCodeFlag = &SendPhoneVerificationCodeFlag{SendPhoneVerificationCode: new(SendPhoneVerificationCode)}
	x.sendCodeFlag.AddFlags(x.set)
	x.returnCodeFlag = &ReturnPhoneVerificationCodeFlag{ReturnPhoneVerificationCode: new(ReturnPhoneVerificationCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetHumanPhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-code", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-code"); flagIdx != nil {
		x.sendCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.SetHumanPhone.Phone = *x.phoneFlag.Value
	}

	switch cli_client.FieldIndexes(args, "send-code", "return-code", "is-verified").Last().Flag {
	case "send-code":
		if x.sendCodeFlag.Changed() {
			x.changed = true
			x.SetHumanPhone.Verification = &SetHumanPhone_SendCode{SendCode: x.sendCodeFlag.SendPhoneVerificationCode}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.SetHumanPhone.Verification = &SetHumanPhone_ReturnCode{ReturnCode: x.returnCodeFlag.ReturnPhoneVerificationCode}
		}
	case "is-verified":
		if x.isVerifiedFlag.Changed() {
			x.changed = true
			x.SetHumanPhone.Verification = &SetHumanPhone_IsVerified{IsVerified: *x.isVerifiedFlag.Value}
		}
	}
}

func (x *SetHumanPhoneFlag) Changed() bool {
	return x.changed
}
