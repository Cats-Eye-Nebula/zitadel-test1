// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type PasskeyRegistrationCodeFlag struct {
	*PasskeyRegistrationCode

	changed bool
	set     *pflag.FlagSet

	idFlag   *cli_client.StringParser
	codeFlag *cli_client.StringParser
}

func (x *PasskeyRegistrationCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasskeyRegistrationCode", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *PasskeyRegistrationCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.PasskeyRegistrationCode.Id = *x.idFlag.Value
	}
	if x.codeFlag.Changed() {
		x.changed = true
		x.PasskeyRegistrationCode.Code = *x.codeFlag.Value
	}
}

func (x *PasskeyRegistrationCodeFlag) Changed() bool {
	return x.changed
}

type ReturnPasskeyRegistrationCodeFlag struct {
	*ReturnPasskeyRegistrationCode

	changed bool
	set     *pflag.FlagSet
}

func (x *ReturnPasskeyRegistrationCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReturnPasskeyRegistrationCode", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ReturnPasskeyRegistrationCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ReturnPasskeyRegistrationCodeFlag) Changed() bool {
	return x.changed
}

type SendPasskeyRegistrationLinkFlag struct {
	*SendPasskeyRegistrationLink

	changed bool
	set     *pflag.FlagSet

	urlTemplateFlag *cli_client.StringParser
}

func (x *SendPasskeyRegistrationLinkFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendPasskeyRegistrationLink", pflag.ContinueOnError)

	x.urlTemplateFlag = cli_client.NewStringParser(x.set, "url-template", "")
	parent.AddFlagSet(x.set)
}

func (x *SendPasskeyRegistrationLinkFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.urlTemplateFlag.Changed() {
		x.changed = true
		x.SendPasskeyRegistrationLink.UrlTemplate = x.urlTemplateFlag.Value
	}
}

func (x *SendPasskeyRegistrationLinkFlag) Changed() bool {
	return x.changed
}
