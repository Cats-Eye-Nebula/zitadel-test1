// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type HumanProfileFlag struct {
	*HumanProfile

	changed bool
	set     *pflag.FlagSet

	givenNameFlag         *cli_client.StringParser
	familyNameFlag        *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[Gender]
	avatarUrlFlag         *cli_client.StringParser
}

func (x *HumanProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HumanProfile", pflag.ContinueOnError)

	x.givenNameFlag = cli_client.NewStringParser(x.set, "given-name", "")
	x.familyNameFlag = cli_client.NewStringParser(x.set, "family-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[Gender](x.set, "gender", "")
	x.avatarUrlFlag = cli_client.NewStringParser(x.set, "avatar-url", "")
	parent.AddFlagSet(x.set)
}

func (x *HumanProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.givenNameFlag.Changed() {
		x.changed = true
		x.HumanProfile.GivenName = *x.givenNameFlag.Value
	}
	if x.familyNameFlag.Changed() {
		x.changed = true
		x.HumanProfile.FamilyName = *x.familyNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.HumanProfile.NickName = x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.HumanProfile.DisplayName = x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.HumanProfile.PreferredLanguage = x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.HumanProfile.Gender = x.genderFlag.Value
	}
	if x.avatarUrlFlag.Changed() {
		x.changed = true
		x.HumanProfile.AvatarUrl = *x.avatarUrlFlag.Value
	}
}

func (x *HumanProfileFlag) Changed() bool {
	return x.changed
}

type HumanUserFlag struct {
	*HumanUser

	changed bool
	set     *pflag.FlagSet

	userIdFlag             *cli_client.StringParser
	stateFlag              *cli_client.EnumParser[UserState]
	usernameFlag           *cli_client.StringParser
	loginNamesFlag         *cli_client.StringSliceParser
	preferredLoginNameFlag *cli_client.StringParser
	profileFlag            *HumanProfileFlag
	emailFlag              *HumanEmailFlag
	phoneFlag              *HumanPhoneFlag
}

func (x *HumanUserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HumanUser", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.stateFlag = cli_client.NewEnumParser[UserState](x.set, "state", "")
	x.usernameFlag = cli_client.NewStringParser(x.set, "username", "")
	x.loginNamesFlag = cli_client.NewStringSliceParser(x.set, "login-names", "")
	x.preferredLoginNameFlag = cli_client.NewStringParser(x.set, "preferred-login-name", "")
	x.profileFlag = &HumanProfileFlag{HumanProfile: new(HumanProfile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &HumanEmailFlag{HumanEmail: new(HumanEmail)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &HumanPhoneFlag{HumanPhone: new(HumanPhone)}
	x.phoneFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *HumanUserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.HumanUser.UserId = *x.userIdFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.HumanUser.State = *x.stateFlag.Value
	}
	if x.usernameFlag.Changed() {
		x.changed = true
		x.HumanUser.Username = *x.usernameFlag.Value
	}
	if x.loginNamesFlag.Changed() {
		x.changed = true
		x.HumanUser.LoginNames = *x.loginNamesFlag.Value
	}
	if x.preferredLoginNameFlag.Changed() {
		x.changed = true
		x.HumanUser.PreferredLoginName = *x.preferredLoginNameFlag.Value
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.HumanUser.Profile = x.profileFlag.HumanProfile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.HumanUser.Email = x.emailFlag.HumanEmail
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.HumanUser.Phone = x.phoneFlag.HumanPhone
	}

}

func (x *HumanUserFlag) Changed() bool {
	return x.changed
}

type MachineUserFlag struct {
	*MachineUser

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	descriptionFlag     *cli_client.StringParser
	hasSecretFlag       *cli_client.BoolParser
	accessTokenTypeFlag *cli_client.EnumParser[AccessTokenType]
}

func (x *MachineUserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MachineUser", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.hasSecretFlag = cli_client.NewBoolParser(x.set, "has-secret", "")
	x.accessTokenTypeFlag = cli_client.NewEnumParser[AccessTokenType](x.set, "access-token-type", "")
	parent.AddFlagSet(x.set)
}

func (x *MachineUserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.MachineUser.Name = *x.nameFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.MachineUser.Description = *x.descriptionFlag.Value
	}
	if x.hasSecretFlag.Changed() {
		x.changed = true
		x.MachineUser.HasSecret = *x.hasSecretFlag.Value
	}
	if x.accessTokenTypeFlag.Changed() {
		x.changed = true
		x.MachineUser.AccessTokenType = *x.accessTokenTypeFlag.Value
	}
}

func (x *MachineUserFlag) Changed() bool {
	return x.changed
}

type SetHumanProfileFlag struct {
	*SetHumanProfile

	changed bool
	set     *pflag.FlagSet

	givenNameFlag         *cli_client.StringParser
	familyNameFlag        *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[Gender]
}

func (x *SetHumanProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanProfile", pflag.ContinueOnError)

	x.givenNameFlag = cli_client.NewStringParser(x.set, "given-name", "")
	x.familyNameFlag = cli_client.NewStringParser(x.set, "family-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *SetHumanProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.givenNameFlag.Changed() {
		x.changed = true
		x.SetHumanProfile.GivenName = *x.givenNameFlag.Value
	}
	if x.familyNameFlag.Changed() {
		x.changed = true
		x.SetHumanProfile.FamilyName = *x.familyNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.SetHumanProfile.NickName = x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.SetHumanProfile.DisplayName = x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.SetHumanProfile.PreferredLanguage = x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.SetHumanProfile.Gender = x.genderFlag.Value
	}
}

func (x *SetHumanProfileFlag) Changed() bool {
	return x.changed
}

type SetMetadataEntryFlag struct {
	*SetMetadataEntry

	changed bool
	set     *pflag.FlagSet

	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *SetMetadataEntryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMetadataEntry", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *SetMetadataEntryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.SetMetadataEntry.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.SetMetadataEntry.Value = *x.valueFlag.Value
	}
}

func (x *SetMetadataEntryFlag) Changed() bool {
	return x.changed
}

type UserFlag struct {
	*User

	changed bool
	set     *pflag.FlagSet

	userIdFlag             *cli_client.StringParser
	stateFlag              *cli_client.EnumParser[UserState]
	usernameFlag           *cli_client.StringParser
	loginNamesFlag         *cli_client.StringSliceParser
	preferredLoginNameFlag *cli_client.StringParser
	humanFlag              *HumanUserFlag
	machineFlag            *MachineUserFlag
}

func (x *UserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("User", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.stateFlag = cli_client.NewEnumParser[UserState](x.set, "state", "")
	x.usernameFlag = cli_client.NewStringParser(x.set, "username", "")
	x.loginNamesFlag = cli_client.NewStringSliceParser(x.set, "login-names", "")
	x.preferredLoginNameFlag = cli_client.NewStringParser(x.set, "preferred-login-name", "")
	x.humanFlag = &HumanUserFlag{HumanUser: new(HumanUser)}
	x.humanFlag.AddFlags(x.set)
	x.machineFlag = &MachineUserFlag{MachineUser: new(MachineUser)}
	x.machineFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "human", "machine")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("human"); flagIdx != nil {
		x.humanFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("machine"); flagIdx != nil {
		x.machineFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.User.UserId = *x.userIdFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.User.State = *x.stateFlag.Value
	}
	if x.usernameFlag.Changed() {
		x.changed = true
		x.User.Username = *x.usernameFlag.Value
	}
	if x.loginNamesFlag.Changed() {
		x.changed = true
		x.User.LoginNames = *x.loginNamesFlag.Value
	}
	if x.preferredLoginNameFlag.Changed() {
		x.changed = true
		x.User.PreferredLoginName = *x.preferredLoginNameFlag.Value
	}

	switch cli_client.FieldIndexes(args, "human", "machine").Last().Flag {
	case "human":
		if x.humanFlag.Changed() {
			x.changed = true
			x.User.Type = &User_Human{Human: x.humanFlag.HumanUser}
		}
	case "machine":
		if x.machineFlag.Changed() {
			x.changed = true
			x.User.Type = &User_Machine{Machine: x.machineFlag.MachineUser}
		}
	}
}

func (x *UserFlag) Changed() bool {
	return x.changed
}
