// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/object/v2beta"
	os "os"
)

type AddHumanUserRequestFlag struct {
	*AddHumanUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag         *cli_client.StringParser
	usernameFlag       *cli_client.StringParser
	organisationFlag   *v2beta.OrganisationFlag
	organizationFlag   *v2beta.OrganizationFlag
	profileFlag        *SetHumanProfileFlag
	emailFlag          *SetHumanEmailFlag
	phoneFlag          *SetHumanPhoneFlag
	metadataFlag       []*SetMetadataEntryFlag
	passwordFlag       *PasswordFlag
	hashedPasswordFlag *HashedPasswordFlag
	idpLinksFlag       []*IDPLinkFlag
}

func (x *AddHumanUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.usernameFlag = cli_client.NewStringParser(x.set, "username", "")
	x.metadataFlag = []*SetMetadataEntryFlag{}
	x.idpLinksFlag = []*IDPLinkFlag{}
	x.organisationFlag = &v2beta.OrganisationFlag{Organisation: new(v2beta.Organisation)}
	x.organisationFlag.AddFlags(x.set)
	x.organizationFlag = &v2beta.OrganizationFlag{Organization: new(v2beta.Organization)}
	x.organizationFlag.AddFlags(x.set)
	x.profileFlag = &SetHumanProfileFlag{SetHumanProfile: new(SetHumanProfile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &SetHumanEmailFlag{SetHumanEmail: new(SetHumanEmail)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &SetHumanPhoneFlag{SetHumanPhone: new(SetHumanPhone)}
	x.phoneFlag.AddFlags(x.set)
	x.passwordFlag = &PasswordFlag{Password: new(Password)}
	x.passwordFlag.AddFlags(x.set)
	x.hashedPasswordFlag = &HashedPasswordFlag{HashedPassword: new(HashedPassword)}
	x.hashedPasswordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "organisation", "organization", "profile", "email", "phone", "metadata", "password", "hashed-password", "idp-links")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("organisation"); flagIdx != nil {
		x.organisationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("organization"); flagIdx != nil {
		x.organizationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password"); flagIdx != nil {
		x.passwordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("hashed-password"); flagIdx != nil {
		x.hashedPasswordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("metadata") {
		x.metadataFlag = append(x.metadataFlag, &SetMetadataEntryFlag{SetMetadataEntry: new(SetMetadataEntry)})
		x.metadataFlag[len(x.metadataFlag)-1].AddFlags(x.set)
		x.metadataFlag[len(x.metadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("idp-links") {
		x.idpLinksFlag = append(x.idpLinksFlag, &IDPLinkFlag{IDPLink: new(IDPLink)})
		x.idpLinksFlag[len(x.idpLinksFlag)-1].AddFlags(x.set)
		x.idpLinksFlag[len(x.idpLinksFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.UserId = x.userIdFlag.Value
	}
	if x.usernameFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Username = x.usernameFlag.Value
	}

	if x.organisationFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Organisation = x.organisationFlag.Organisation
	}

	if x.organizationFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Organization = x.organizationFlag.Organization
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Profile = x.profileFlag.SetHumanProfile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Email = x.emailFlag.SetHumanEmail
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Phone = x.phoneFlag.SetHumanPhone
	}

	if len(x.metadataFlag) > 0 {
		x.changed = true
		x.Metadata = make([]*SetMetadataEntry, len(x.metadataFlag))
		for i, value := range x.metadataFlag {
			x.AddHumanUserRequest.Metadata[i] = value.SetMetadataEntry
		}
	}

	if len(x.idpLinksFlag) > 0 {
		x.changed = true
		x.IdpLinks = make([]*IDPLink, len(x.idpLinksFlag))
		for i, value := range x.idpLinksFlag {
			x.AddHumanUserRequest.IdpLinks[i] = value.IDPLink
		}
	}

	switch cli_client.FieldIndexes(args, "password", "hashed-password").Last().Flag {
	case "password":
		if x.passwordFlag.Changed() {
			x.changed = true
			x.AddHumanUserRequest.PasswordType = &AddHumanUserRequest_Password{Password: x.passwordFlag.Password}
		}
	case "hashed-password":
		if x.hashedPasswordFlag.Changed() {
			x.changed = true
			x.AddHumanUserRequest.PasswordType = &AddHumanUserRequest_HashedPassword{HashedPassword: x.hashedPasswordFlag.HashedPassword}
		}
	}
}

func (x *AddHumanUserRequestFlag) Changed() bool {
	return x.changed
}

type AddHumanUserResponseFlag struct {
	*AddHumanUserResponse

	changed bool
	set     *pflag.FlagSet

	userIdFlag    *cli_client.StringParser
	detailsFlag   *v2beta.DetailsFlag
	emailCodeFlag *cli_client.StringParser
	phoneCodeFlag *cli_client.StringParser
}

func (x *AddHumanUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserResponse", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.emailCodeFlag = cli_client.NewStringParser(x.set, "email-code", "")
	x.phoneCodeFlag = cli_client.NewStringParser(x.set, "phone-code", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddHumanUserResponse.UserId = *x.userIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddHumanUserResponse.Details = x.detailsFlag.Details
	}

	if x.emailCodeFlag.Changed() {
		x.changed = true
		x.AddHumanUserResponse.EmailCode = x.emailCodeFlag.Value
	}
	if x.phoneCodeFlag.Changed() {
		x.changed = true
		x.AddHumanUserResponse.PhoneCode = x.phoneCodeFlag.Value
	}
}

func (x *AddHumanUserResponseFlag) Changed() bool {
	return x.changed
}

type AddIDPLinkRequestFlag struct {
	*AddIDPLinkRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	idpLinkFlag *IDPLinkFlag
}

func (x *AddIDPLinkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIDPLinkRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.idpLinkFlag = &IDPLinkFlag{IDPLink: new(IDPLink)}
	x.idpLinkFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddIDPLinkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp-link")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp-link"); flagIdx != nil {
		x.idpLinkFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddIDPLinkRequest.UserId = *x.userIdFlag.Value
	}

	if x.idpLinkFlag.Changed() {
		x.changed = true
		x.AddIDPLinkRequest.IdpLink = x.idpLinkFlag.IDPLink
	}

}

func (x *AddIDPLinkRequestFlag) Changed() bool {
	return x.changed
}

type AddIDPLinkResponseFlag struct {
	*AddIDPLinkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *AddIDPLinkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIDPLinkResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddIDPLinkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddIDPLinkResponse.Details = x.detailsFlag.Details
	}

}

func (x *AddIDPLinkResponseFlag) Changed() bool {
	return x.changed
}

type AddOTPEmailRequestFlag struct {
	*AddOTPEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *AddOTPEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOTPEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOTPEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddOTPEmailRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *AddOTPEmailRequestFlag) Changed() bool {
	return x.changed
}

type AddOTPEmailResponseFlag struct {
	*AddOTPEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *AddOTPEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOTPEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOTPEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOTPEmailResponse.Details = x.detailsFlag.Details
	}

}

func (x *AddOTPEmailResponseFlag) Changed() bool {
	return x.changed
}

type AddOTPSMSRequestFlag struct {
	*AddOTPSMSRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *AddOTPSMSRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOTPSMSRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOTPSMSRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddOTPSMSRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *AddOTPSMSRequestFlag) Changed() bool {
	return x.changed
}

type AddOTPSMSResponseFlag struct {
	*AddOTPSMSResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *AddOTPSMSResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOTPSMSResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOTPSMSResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOTPSMSResponse.Details = x.detailsFlag.Details
	}

}

func (x *AddOTPSMSResponseFlag) Changed() bool {
	return x.changed
}

type CreatePasskeyRegistrationLinkRequestFlag struct {
	*CreatePasskeyRegistrationLinkRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag     *cli_client.StringParser
	sendLinkFlag   *SendPasskeyRegistrationLinkFlag
	returnCodeFlag *ReturnPasskeyRegistrationCodeFlag
}

func (x *CreatePasskeyRegistrationLinkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreatePasskeyRegistrationLinkRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.sendLinkFlag = &SendPasskeyRegistrationLinkFlag{SendPasskeyRegistrationLink: new(SendPasskeyRegistrationLink)}
	x.sendLinkFlag.AddFlags(x.set)
	x.returnCodeFlag = &ReturnPasskeyRegistrationCodeFlag{ReturnPasskeyRegistrationCode: new(ReturnPasskeyRegistrationCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreatePasskeyRegistrationLinkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-link", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-link"); flagIdx != nil {
		x.sendLinkFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.CreatePasskeyRegistrationLinkRequest.UserId = *x.userIdFlag.Value
	}

	switch cli_client.FieldIndexes(args, "send-link", "return-code").Last().Flag {
	case "send-link":
		if x.sendLinkFlag.Changed() {
			x.changed = true
			x.CreatePasskeyRegistrationLinkRequest.Medium = &CreatePasskeyRegistrationLinkRequest_SendLink{SendLink: x.sendLinkFlag.SendPasskeyRegistrationLink}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.CreatePasskeyRegistrationLinkRequest.Medium = &CreatePasskeyRegistrationLinkRequest_ReturnCode{ReturnCode: x.returnCodeFlag.ReturnPasskeyRegistrationCode}
		}
	}
}

func (x *CreatePasskeyRegistrationLinkRequestFlag) Changed() bool {
	return x.changed
}

type CreatePasskeyRegistrationLinkResponseFlag struct {
	*CreatePasskeyRegistrationLinkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
	codeFlag    *PasskeyRegistrationCodeFlag
}

func (x *CreatePasskeyRegistrationLinkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreatePasskeyRegistrationLinkResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.codeFlag = &PasskeyRegistrationCodeFlag{PasskeyRegistrationCode: new(PasskeyRegistrationCode)}
	x.codeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreatePasskeyRegistrationLinkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("code"); flagIdx != nil {
		x.codeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.CreatePasskeyRegistrationLinkResponse.Details = x.detailsFlag.Details
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.CreatePasskeyRegistrationLinkResponse.Code = x.codeFlag.PasskeyRegistrationCode
	}

}

func (x *CreatePasskeyRegistrationLinkResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateUserRequestFlag struct {
	*DeactivateUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *DeactivateUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.DeactivateUserRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *DeactivateUserRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateUserResponseFlag struct {
	*DeactivateUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *DeactivateUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateUserResponse.Details = x.detailsFlag.Details
	}

}

func (x *DeactivateUserResponseFlag) Changed() bool {
	return x.changed
}

type DeleteUserRequestFlag struct {
	*DeleteUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *DeleteUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeleteUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.DeleteUserRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *DeleteUserRequestFlag) Changed() bool {
	return x.changed
}

type DeleteUserResponseFlag struct {
	*DeleteUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *DeleteUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeleteUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeleteUserResponse.Details = x.detailsFlag.Details
	}

}

func (x *DeleteUserResponseFlag) Changed() bool {
	return x.changed
}

type GetUserByIDRequestFlag struct {
	*GetUserByIDRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag       *cli_client.StringParser
	organizationFlag *v2beta.OrganizationFlag
}

func (x *GetUserByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserByIDRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.organizationFlag = &v2beta.OrganizationFlag{Organization: new(v2beta.Organization)}
	x.organizationFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetUserByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "organization")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("organization"); flagIdx != nil {
		x.organizationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetUserByIDRequest.UserId = *x.userIdFlag.Value
	}

	if x.organizationFlag.Changed() {
		x.changed = true
		x.GetUserByIDRequest.Organization = x.organizationFlag.Organization
	}

}

func (x *GetUserByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetUserByIDResponseFlag struct {
	*GetUserByIDResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
	userFlag    *UserFlag
}

func (x *GetUserByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserByIDResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.userFlag = &UserFlag{User: new(User)}
	x.userFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetUserByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "user")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetUserByIDResponse.Details = x.detailsFlag.Details
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.GetUserByIDResponse.User = x.userFlag.User
	}

}

func (x *GetUserByIDResponseFlag) Changed() bool {
	return x.changed
}

type ListAuthenticationMethodTypesRequestFlag struct {
	*ListAuthenticationMethodTypesRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *ListAuthenticationMethodTypesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAuthenticationMethodTypesRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ListAuthenticationMethodTypesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListAuthenticationMethodTypesRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ListAuthenticationMethodTypesRequestFlag) Changed() bool {
	return x.changed
}

type ListAuthenticationMethodTypesResponseFlag struct {
	*ListAuthenticationMethodTypesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag         *v2beta.ListDetailsFlag
	authMethodTypesFlag *cli_client.EnumSliceParser[AuthenticationMethodType]
}

func (x *ListAuthenticationMethodTypesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAuthenticationMethodTypesResponse", pflag.ContinueOnError)

	x.authMethodTypesFlag = cli_client.NewEnumSliceParser[AuthenticationMethodType](x.set, "auth-method-types", "")
	x.detailsFlag = &v2beta.ListDetailsFlag{ListDetails: new(v2beta.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAuthenticationMethodTypesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListAuthenticationMethodTypesResponse.Details = x.detailsFlag.ListDetails
	}

	if x.authMethodTypesFlag.Changed() {
		x.changed = true
		x.ListAuthenticationMethodTypesResponse.AuthMethodTypes = *x.authMethodTypesFlag.Value
	}
}

func (x *ListAuthenticationMethodTypesResponseFlag) Changed() bool {
	return x.changed
}

type ListUsersRequestFlag struct {
	*ListUsersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *v2beta.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[UserFieldName]
	queriesFlag       []*SearchQueryFlag
}

func (x *ListUsersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUsersRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[UserFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*SearchQueryFlag{}
	x.queryFlag = &v2beta.ListQueryFlag{ListQuery: new(v2beta.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUsersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &SearchQueryFlag{SearchQuery: new(SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListUsersRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListUsersRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListUsersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListUsersRequestFlag) Changed() bool {
	return x.changed
}

type ListUsersResponseFlag struct {
	*ListUsersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *v2beta.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[UserFieldName]
	resultFlag        []*UserFlag
}

func (x *ListUsersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUsersResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[UserFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*UserFlag{}
	x.detailsFlag = &v2beta.ListDetailsFlag{ListDetails: new(v2beta.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUsersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &UserFlag{User: new(User)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListUsersResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListUsersResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*User, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListUsersResponse.Result[i] = value.User
		}
	}

}

func (x *ListUsersResponseFlag) Changed() bool {
	return x.changed
}

type LockUserRequestFlag struct {
	*LockUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *LockUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LockUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *LockUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.LockUserRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *LockUserRequestFlag) Changed() bool {
	return x.changed
}

type LockUserResponseFlag struct {
	*LockUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *LockUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LockUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *LockUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.LockUserResponse.Details = x.detailsFlag.Details
	}

}

func (x *LockUserResponseFlag) Changed() bool {
	return x.changed
}

type PasswordResetRequestFlag struct {
	*PasswordResetRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag     *cli_client.StringParser
	sendLinkFlag   *SendPasswordResetLinkFlag
	returnCodeFlag *ReturnPasswordResetCodeFlag
}

func (x *PasswordResetRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordResetRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.sendLinkFlag = &SendPasswordResetLinkFlag{SendPasswordResetLink: new(SendPasswordResetLink)}
	x.sendLinkFlag.AddFlags(x.set)
	x.returnCodeFlag = &ReturnPasswordResetCodeFlag{ReturnPasswordResetCode: new(ReturnPasswordResetCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *PasswordResetRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-link", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-link"); flagIdx != nil {
		x.sendLinkFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.PasswordResetRequest.UserId = *x.userIdFlag.Value
	}

	switch cli_client.FieldIndexes(args, "send-link", "return-code").Last().Flag {
	case "send-link":
		if x.sendLinkFlag.Changed() {
			x.changed = true
			x.PasswordResetRequest.Medium = &PasswordResetRequest_SendLink{SendLink: x.sendLinkFlag.SendPasswordResetLink}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.PasswordResetRequest.Medium = &PasswordResetRequest_ReturnCode{ReturnCode: x.returnCodeFlag.ReturnPasswordResetCode}
		}
	}
}

func (x *PasswordResetRequestFlag) Changed() bool {
	return x.changed
}

type PasswordResetResponseFlag struct {
	*PasswordResetResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag          *v2beta.DetailsFlag
	verificationCodeFlag *cli_client.StringParser
}

func (x *PasswordResetResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordResetResponse", pflag.ContinueOnError)

	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *PasswordResetResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.PasswordResetResponse.Details = x.detailsFlag.Details
	}

	if x.verificationCodeFlag.Changed() {
		x.changed = true
		x.PasswordResetResponse.VerificationCode = x.verificationCodeFlag.Value
	}
}

func (x *PasswordResetResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateUserRequestFlag struct {
	*ReactivateUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *ReactivateUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ReactivateUserRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ReactivateUserRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateUserResponseFlag struct {
	*ReactivateUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *ReactivateUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateUserResponse.Details = x.detailsFlag.Details
	}

}

func (x *ReactivateUserResponseFlag) Changed() bool {
	return x.changed
}

type RegisterPasskeyRequestFlag struct {
	*RegisterPasskeyRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag        *cli_client.StringParser
	codeFlag          *PasskeyRegistrationCodeFlag
	authenticatorFlag *cli_client.EnumParser[PasskeyAuthenticator]
	domainFlag        *cli_client.StringParser
}

func (x *RegisterPasskeyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegisterPasskeyRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.authenticatorFlag = cli_client.NewEnumParser[PasskeyAuthenticator](x.set, "authenticator", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	x.codeFlag = &PasskeyRegistrationCodeFlag{PasskeyRegistrationCode: new(PasskeyRegistrationCode)}
	x.codeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegisterPasskeyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("code"); flagIdx != nil {
		x.codeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyRequest.UserId = *x.userIdFlag.Value
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyRequest.Code = x.codeFlag.PasskeyRegistrationCode
	}

	if x.authenticatorFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyRequest.Authenticator = *x.authenticatorFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyRequest.Domain = *x.domainFlag.Value
	}
}

func (x *RegisterPasskeyRequestFlag) Changed() bool {
	return x.changed
}

type RegisterPasskeyResponseFlag struct {
	*RegisterPasskeyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag                            *v2beta.DetailsFlag
	passkeyIdFlag                          *cli_client.StringParser
	publicKeyCredentialCreationOptionsFlag *cli_client.StructParser
}

func (x *RegisterPasskeyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegisterPasskeyResponse", pflag.ContinueOnError)

	x.passkeyIdFlag = cli_client.NewStringParser(x.set, "passkey-id", "")
	x.publicKeyCredentialCreationOptionsFlag = cli_client.NewStructParser(x.set, "public-key-credential-creation-options", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegisterPasskeyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyResponse.Details = x.detailsFlag.Details
	}

	if x.passkeyIdFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyResponse.PasskeyId = *x.passkeyIdFlag.Value
	}
	if x.publicKeyCredentialCreationOptionsFlag.Changed() {
		x.changed = true
		x.RegisterPasskeyResponse.PublicKeyCredentialCreationOptions = x.publicKeyCredentialCreationOptionsFlag.Value
	}
}

func (x *RegisterPasskeyResponseFlag) Changed() bool {
	return x.changed
}

type RegisterTOTPRequestFlag struct {
	*RegisterTOTPRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RegisterTOTPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegisterTOTPRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RegisterTOTPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RegisterTOTPRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RegisterTOTPRequestFlag) Changed() bool {
	return x.changed
}

type RegisterTOTPResponseFlag struct {
	*RegisterTOTPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
	uriFlag     *cli_client.StringParser
	secretFlag  *cli_client.StringParser
}

func (x *RegisterTOTPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegisterTOTPResponse", pflag.ContinueOnError)

	x.uriFlag = cli_client.NewStringParser(x.set, "uri", "")
	x.secretFlag = cli_client.NewStringParser(x.set, "secret", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegisterTOTPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegisterTOTPResponse.Details = x.detailsFlag.Details
	}

	if x.uriFlag.Changed() {
		x.changed = true
		x.RegisterTOTPResponse.Uri = *x.uriFlag.Value
	}
	if x.secretFlag.Changed() {
		x.changed = true
		x.RegisterTOTPResponse.Secret = *x.secretFlag.Value
	}
}

func (x *RegisterTOTPResponseFlag) Changed() bool {
	return x.changed
}

type RegisterU2FRequestFlag struct {
	*RegisterU2FRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	domainFlag *cli_client.StringParser
}

func (x *RegisterU2FRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegisterU2FRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *RegisterU2FRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RegisterU2FRequest.UserId = *x.userIdFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.RegisterU2FRequest.Domain = *x.domainFlag.Value
	}
}

func (x *RegisterU2FRequestFlag) Changed() bool {
	return x.changed
}

type RegisterU2FResponseFlag struct {
	*RegisterU2FResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag                            *v2beta.DetailsFlag
	u2fIdFlag                              *cli_client.StringParser
	publicKeyCredentialCreationOptionsFlag *cli_client.StructParser
}

func (x *RegisterU2FResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegisterU2FResponse", pflag.ContinueOnError)

	x.u2fIdFlag = cli_client.NewStringParser(x.set, "u2f-id", "")
	x.publicKeyCredentialCreationOptionsFlag = cli_client.NewStructParser(x.set, "public-key-credential-creation-options", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegisterU2FResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegisterU2FResponse.Details = x.detailsFlag.Details
	}

	if x.u2fIdFlag.Changed() {
		x.changed = true
		x.RegisterU2FResponse.U2FId = *x.u2fIdFlag.Value
	}
	if x.publicKeyCredentialCreationOptionsFlag.Changed() {
		x.changed = true
		x.RegisterU2FResponse.PublicKeyCredentialCreationOptions = x.publicKeyCredentialCreationOptionsFlag.Value
	}
}

func (x *RegisterU2FResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOTPEmailRequestFlag struct {
	*RemoveOTPEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveOTPEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOTPEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOTPEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveOTPEmailRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveOTPEmailRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOTPEmailResponseFlag struct {
	*RemoveOTPEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *RemoveOTPEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOTPEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOTPEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOTPEmailResponse.Details = x.detailsFlag.Details
	}

}

func (x *RemoveOTPEmailResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOTPSMSRequestFlag struct {
	*RemoveOTPSMSRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveOTPSMSRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOTPSMSRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOTPSMSRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveOTPSMSRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveOTPSMSRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOTPSMSResponseFlag struct {
	*RemoveOTPSMSResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *RemoveOTPSMSResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOTPSMSResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOTPSMSResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOTPSMSResponse.Details = x.detailsFlag.Details
	}

}

func (x *RemoveOTPSMSResponseFlag) Changed() bool {
	return x.changed
}

type RetrieveIdentityProviderIntentRequestFlag struct {
	*RetrieveIdentityProviderIntentRequest

	changed bool
	set     *pflag.FlagSet

	idpIntentIdFlag    *cli_client.StringParser
	idpIntentTokenFlag *cli_client.StringParser
}

func (x *RetrieveIdentityProviderIntentRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RetrieveIdentityProviderIntentRequest", pflag.ContinueOnError)

	x.idpIntentIdFlag = cli_client.NewStringParser(x.set, "idp-intent-id", "")
	x.idpIntentTokenFlag = cli_client.NewStringParser(x.set, "idp-intent-token", "")
	parent.AddFlagSet(x.set)
}

func (x *RetrieveIdentityProviderIntentRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIntentIdFlag.Changed() {
		x.changed = true
		x.RetrieveIdentityProviderIntentRequest.IdpIntentId = *x.idpIntentIdFlag.Value
	}
	if x.idpIntentTokenFlag.Changed() {
		x.changed = true
		x.RetrieveIdentityProviderIntentRequest.IdpIntentToken = *x.idpIntentTokenFlag.Value
	}
}

func (x *RetrieveIdentityProviderIntentRequestFlag) Changed() bool {
	return x.changed
}

type RetrieveIdentityProviderIntentResponseFlag struct {
	*RetrieveIdentityProviderIntentResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag        *v2beta.DetailsFlag
	idpInformationFlag *IDPInformationFlag
	userIdFlag         *cli_client.StringParser
}

func (x *RetrieveIdentityProviderIntentResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RetrieveIdentityProviderIntentResponse", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.idpInformationFlag = &IDPInformationFlag{IDPInformation: new(IDPInformation)}
	x.idpInformationFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RetrieveIdentityProviderIntentResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "idp-information")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-information"); flagIdx != nil {
		x.idpInformationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RetrieveIdentityProviderIntentResponse.Details = x.detailsFlag.Details
	}

	if x.idpInformationFlag.Changed() {
		x.changed = true
		x.RetrieveIdentityProviderIntentResponse.IdpInformation = x.idpInformationFlag.IDPInformation
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RetrieveIdentityProviderIntentResponse.UserId = *x.userIdFlag.Value
	}
}

func (x *RetrieveIdentityProviderIntentResponseFlag) Changed() bool {
	return x.changed
}

type SetEmailRequestFlag struct {
	*SetEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag     *cli_client.StringParser
	emailFlag      *cli_client.StringParser
	sendCodeFlag   *SendEmailVerificationCodeFlag
	returnCodeFlag *ReturnEmailVerificationCodeFlag
	isVerifiedFlag *cli_client.BoolParser
}

func (x *SetEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isVerifiedFlag = cli_client.NewBoolParser(x.set, "is-verified", "")
	x.sendCodeFlag = &SendEmailVerificationCodeFlag{SendEmailVerificationCode: new(SendEmailVerificationCode)}
	x.sendCodeFlag.AddFlags(x.set)
	x.returnCodeFlag = &ReturnEmailVerificationCodeFlag{ReturnEmailVerificationCode: new(ReturnEmailVerificationCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-code", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-code"); flagIdx != nil {
		x.sendCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SetEmailRequest.UserId = *x.userIdFlag.Value
	}
	if x.emailFlag.Changed() {
		x.changed = true
		x.SetEmailRequest.Email = *x.emailFlag.Value
	}

	switch cli_client.FieldIndexes(args, "send-code", "return-code", "is-verified").Last().Flag {
	case "send-code":
		if x.sendCodeFlag.Changed() {
			x.changed = true
			x.SetEmailRequest.Verification = &SetEmailRequest_SendCode{SendCode: x.sendCodeFlag.SendEmailVerificationCode}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.SetEmailRequest.Verification = &SetEmailRequest_ReturnCode{ReturnCode: x.returnCodeFlag.ReturnEmailVerificationCode}
		}
	case "is-verified":
		if x.isVerifiedFlag.Changed() {
			x.changed = true
			x.SetEmailRequest.Verification = &SetEmailRequest_IsVerified{IsVerified: *x.isVerifiedFlag.Value}
		}
	}
}

func (x *SetEmailRequestFlag) Changed() bool {
	return x.changed
}

type SetEmailResponseFlag struct {
	*SetEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag          *v2beta.DetailsFlag
	verificationCodeFlag *cli_client.StringParser
}

func (x *SetEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetEmailResponse", pflag.ContinueOnError)

	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetEmailResponse.Details = x.detailsFlag.Details
	}

	if x.verificationCodeFlag.Changed() {
		x.changed = true
		x.SetEmailResponse.VerificationCode = x.verificationCodeFlag.Value
	}
}

func (x *SetEmailResponseFlag) Changed() bool {
	return x.changed
}

type SetPasswordRequestFlag struct {
	*SetPasswordRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag           *cli_client.StringParser
	newPasswordFlag      *PasswordFlag
	currentPasswordFlag  *cli_client.StringParser
	verificationCodeFlag *cli_client.StringParser
}

func (x *SetPasswordRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPasswordRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.currentPasswordFlag = cli_client.NewStringParser(x.set, "current-password", "")
	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	x.newPasswordFlag = &PasswordFlag{Password: new(Password)}
	x.newPasswordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPasswordRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "new-password")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("new-password"); flagIdx != nil {
		x.newPasswordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SetPasswordRequest.UserId = *x.userIdFlag.Value
	}

	if x.newPasswordFlag.Changed() {
		x.changed = true
		x.SetPasswordRequest.NewPassword = x.newPasswordFlag.Password
	}

	switch cli_client.FieldIndexes(args, "current-password", "verification-code").Last().Flag {
	case "current-password":
		if x.currentPasswordFlag.Changed() {
			x.changed = true
			x.SetPasswordRequest.Verification = &SetPasswordRequest_CurrentPassword{CurrentPassword: *x.currentPasswordFlag.Value}
		}
	case "verification-code":
		if x.verificationCodeFlag.Changed() {
			x.changed = true
			x.SetPasswordRequest.Verification = &SetPasswordRequest_VerificationCode{VerificationCode: *x.verificationCodeFlag.Value}
		}
	}
}

func (x *SetPasswordRequestFlag) Changed() bool {
	return x.changed
}

type SetPasswordResponseFlag struct {
	*SetPasswordResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *SetPasswordResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPasswordResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPasswordResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetPasswordResponse.Details = x.detailsFlag.Details
	}

}

func (x *SetPasswordResponseFlag) Changed() bool {
	return x.changed
}

type SetPhoneRequestFlag struct {
	*SetPhoneRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag     *cli_client.StringParser
	phoneFlag      *cli_client.StringParser
	sendCodeFlag   *SendPhoneVerificationCodeFlag
	returnCodeFlag *ReturnPhoneVerificationCodeFlag
	isVerifiedFlag *cli_client.BoolParser
}

func (x *SetPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPhoneRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isVerifiedFlag = cli_client.NewBoolParser(x.set, "is-verified", "")
	x.sendCodeFlag = &SendPhoneVerificationCodeFlag{SendPhoneVerificationCode: new(SendPhoneVerificationCode)}
	x.sendCodeFlag.AddFlags(x.set)
	x.returnCodeFlag = &ReturnPhoneVerificationCodeFlag{ReturnPhoneVerificationCode: new(ReturnPhoneVerificationCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-code", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-code"); flagIdx != nil {
		x.sendCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SetPhoneRequest.UserId = *x.userIdFlag.Value
	}
	if x.phoneFlag.Changed() {
		x.changed = true
		x.SetPhoneRequest.Phone = *x.phoneFlag.Value
	}

	switch cli_client.FieldIndexes(args, "send-code", "return-code", "is-verified").Last().Flag {
	case "send-code":
		if x.sendCodeFlag.Changed() {
			x.changed = true
			x.SetPhoneRequest.Verification = &SetPhoneRequest_SendCode{SendCode: x.sendCodeFlag.SendPhoneVerificationCode}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.SetPhoneRequest.Verification = &SetPhoneRequest_ReturnCode{ReturnCode: x.returnCodeFlag.ReturnPhoneVerificationCode}
		}
	case "is-verified":
		if x.isVerifiedFlag.Changed() {
			x.changed = true
			x.SetPhoneRequest.Verification = &SetPhoneRequest_IsVerified{IsVerified: *x.isVerifiedFlag.Value}
		}
	}
}

func (x *SetPhoneRequestFlag) Changed() bool {
	return x.changed
}

type SetPhoneResponseFlag struct {
	*SetPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag          *v2beta.DetailsFlag
	verificationCodeFlag *cli_client.StringParser
}

func (x *SetPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPhoneResponse", pflag.ContinueOnError)

	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetPhoneResponse.Details = x.detailsFlag.Details
	}

	if x.verificationCodeFlag.Changed() {
		x.changed = true
		x.SetPhoneResponse.VerificationCode = x.verificationCodeFlag.Value
	}
}

func (x *SetPhoneResponseFlag) Changed() bool {
	return x.changed
}

type StartIdentityProviderIntentRequestFlag struct {
	*StartIdentityProviderIntentRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
	urlsFlag  *RedirectURLsFlag
	ldapFlag  *LDAPCredentialsFlag
}

func (x *StartIdentityProviderIntentRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("StartIdentityProviderIntentRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.urlsFlag = &RedirectURLsFlag{RedirectURLs: new(RedirectURLs)}
	x.urlsFlag.AddFlags(x.set)
	x.ldapFlag = &LDAPCredentialsFlag{LDAPCredentials: new(LDAPCredentials)}
	x.ldapFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *StartIdentityProviderIntentRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "urls", "ldap")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("urls"); flagIdx != nil {
		x.urlsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("ldap"); flagIdx != nil {
		x.ldapFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.StartIdentityProviderIntentRequest.IdpId = *x.idpIdFlag.Value
	}

	switch cli_client.FieldIndexes(args, "urls", "ldap").Last().Flag {
	case "urls":
		if x.urlsFlag.Changed() {
			x.changed = true
			x.StartIdentityProviderIntentRequest.Content = &StartIdentityProviderIntentRequest_Urls{Urls: x.urlsFlag.RedirectURLs}
		}
	case "ldap":
		if x.ldapFlag.Changed() {
			x.changed = true
			x.StartIdentityProviderIntentRequest.Content = &StartIdentityProviderIntentRequest_Ldap{Ldap: x.ldapFlag.LDAPCredentials}
		}
	}
}

func (x *StartIdentityProviderIntentRequestFlag) Changed() bool {
	return x.changed
}

type StartIdentityProviderIntentResponseFlag struct {
	*StartIdentityProviderIntentResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag   *v2beta.DetailsFlag
	authUrlFlag   *cli_client.StringParser
	idpIntentFlag *IDPIntentFlag
	postFormFlag  *cli_client.BytesParser
}

func (x *StartIdentityProviderIntentResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("StartIdentityProviderIntentResponse", pflag.ContinueOnError)

	x.authUrlFlag = cli_client.NewStringParser(x.set, "auth-url", "")
	x.postFormFlag = cli_client.NewBytesParser(x.set, "post-form", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.idpIntentFlag = &IDPIntentFlag{IDPIntent: new(IDPIntent)}
	x.idpIntentFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *StartIdentityProviderIntentResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "idp-intent")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-intent"); flagIdx != nil {
		x.idpIntentFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.StartIdentityProviderIntentResponse.Details = x.detailsFlag.Details
	}

	switch cli_client.FieldIndexes(args, "auth-url", "idp-intent", "post-form").Last().Flag {
	case "auth-url":
		if x.authUrlFlag.Changed() {
			x.changed = true
			x.StartIdentityProviderIntentResponse.NextStep = &StartIdentityProviderIntentResponse_AuthUrl{AuthUrl: *x.authUrlFlag.Value}
		}
	case "idp-intent":
		if x.idpIntentFlag.Changed() {
			x.changed = true
			x.StartIdentityProviderIntentResponse.NextStep = &StartIdentityProviderIntentResponse_IdpIntent{IdpIntent: x.idpIntentFlag.IDPIntent}
		}
	case "post-form":
		if x.postFormFlag.Changed() {
			x.changed = true
			x.StartIdentityProviderIntentResponse.NextStep = &StartIdentityProviderIntentResponse_PostForm{PostForm: *x.postFormFlag.Value}
		}
	}
}

func (x *StartIdentityProviderIntentResponseFlag) Changed() bool {
	return x.changed
}

type UnlockUserRequestFlag struct {
	*UnlockUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *UnlockUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UnlockUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *UnlockUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UnlockUserRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *UnlockUserRequestFlag) Changed() bool {
	return x.changed
}

type UnlockUserResponseFlag struct {
	*UnlockUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *UnlockUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UnlockUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UnlockUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UnlockUserResponse.Details = x.detailsFlag.Details
	}

}

func (x *UnlockUserResponseFlag) Changed() bool {
	return x.changed
}

type UpdateHumanUserRequestFlag struct {
	*UpdateHumanUserRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag   *cli_client.StringParser
	usernameFlag *cli_client.StringParser
	profileFlag  *SetHumanProfileFlag
	emailFlag    *SetHumanEmailFlag
	phoneFlag    *SetHumanPhoneFlag
	passwordFlag *SetPasswordFlag
}

func (x *UpdateHumanUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanUserRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.usernameFlag = cli_client.NewStringParser(x.set, "username", "")
	x.profileFlag = &SetHumanProfileFlag{SetHumanProfile: new(SetHumanProfile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &SetHumanEmailFlag{SetHumanEmail: new(SetHumanEmail)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &SetHumanPhoneFlag{SetHumanPhone: new(SetHumanPhone)}
	x.phoneFlag.AddFlags(x.set)
	x.passwordFlag = &SetPasswordFlag{SetPassword: new(SetPassword)}
	x.passwordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone", "password")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password"); flagIdx != nil {
		x.passwordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserRequest.UserId = *x.userIdFlag.Value
	}
	if x.usernameFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserRequest.Username = x.usernameFlag.Value
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserRequest.Profile = x.profileFlag.SetHumanProfile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserRequest.Email = x.emailFlag.SetHumanEmail
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserRequest.Phone = x.phoneFlag.SetHumanPhone
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserRequest.Password = x.passwordFlag.SetPassword
	}

}

func (x *UpdateHumanUserRequestFlag) Changed() bool {
	return x.changed
}

type UpdateHumanUserResponseFlag struct {
	*UpdateHumanUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag   *v2beta.DetailsFlag
	emailCodeFlag *cli_client.StringParser
	phoneCodeFlag *cli_client.StringParser
}

func (x *UpdateHumanUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanUserResponse", pflag.ContinueOnError)

	x.emailCodeFlag = cli_client.NewStringParser(x.set, "email-code", "")
	x.phoneCodeFlag = cli_client.NewStringParser(x.set, "phone-code", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserResponse.Details = x.detailsFlag.Details
	}

	if x.emailCodeFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserResponse.EmailCode = x.emailCodeFlag.Value
	}
	if x.phoneCodeFlag.Changed() {
		x.changed = true
		x.UpdateHumanUserResponse.PhoneCode = x.phoneCodeFlag.Value
	}
}

func (x *UpdateHumanUserResponseFlag) Changed() bool {
	return x.changed
}

type VerifyEmailRequestFlag struct {
	*VerifyEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag           *cli_client.StringParser
	verificationCodeFlag *cli_client.StringParser
}

func (x *VerifyEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.VerifyEmailRequest.UserId = *x.userIdFlag.Value
	}
	if x.verificationCodeFlag.Changed() {
		x.changed = true
		x.VerifyEmailRequest.VerificationCode = *x.verificationCodeFlag.Value
	}
}

func (x *VerifyEmailRequestFlag) Changed() bool {
	return x.changed
}

type VerifyEmailResponseFlag struct {
	*VerifyEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *VerifyEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyEmailResponse.Details = x.detailsFlag.Details
	}

}

func (x *VerifyEmailResponseFlag) Changed() bool {
	return x.changed
}

type VerifyPasskeyRegistrationRequestFlag struct {
	*VerifyPasskeyRegistrationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag              *cli_client.StringParser
	passkeyIdFlag           *cli_client.StringParser
	publicKeyCredentialFlag *cli_client.StructParser
	passkeyNameFlag         *cli_client.StringParser
}

func (x *VerifyPasskeyRegistrationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyPasskeyRegistrationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.passkeyIdFlag = cli_client.NewStringParser(x.set, "passkey-id", "")
	x.publicKeyCredentialFlag = cli_client.NewStructParser(x.set, "public-key-credential", "")
	x.passkeyNameFlag = cli_client.NewStringParser(x.set, "passkey-name", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyPasskeyRegistrationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.VerifyPasskeyRegistrationRequest.UserId = *x.userIdFlag.Value
	}
	if x.passkeyIdFlag.Changed() {
		x.changed = true
		x.VerifyPasskeyRegistrationRequest.PasskeyId = *x.passkeyIdFlag.Value
	}
	if x.publicKeyCredentialFlag.Changed() {
		x.changed = true
		x.VerifyPasskeyRegistrationRequest.PublicKeyCredential = x.publicKeyCredentialFlag.Value
	}
	if x.passkeyNameFlag.Changed() {
		x.changed = true
		x.VerifyPasskeyRegistrationRequest.PasskeyName = *x.passkeyNameFlag.Value
	}
}

func (x *VerifyPasskeyRegistrationRequestFlag) Changed() bool {
	return x.changed
}

type VerifyPasskeyRegistrationResponseFlag struct {
	*VerifyPasskeyRegistrationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *VerifyPasskeyRegistrationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyPasskeyRegistrationResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyPasskeyRegistrationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyPasskeyRegistrationResponse.Details = x.detailsFlag.Details
	}

}

func (x *VerifyPasskeyRegistrationResponseFlag) Changed() bool {
	return x.changed
}

type VerifyPhoneRequestFlag struct {
	*VerifyPhoneRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag           *cli_client.StringParser
	verificationCodeFlag *cli_client.StringParser
}

func (x *VerifyPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyPhoneRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.verificationCodeFlag = cli_client.NewStringParser(x.set, "verification-code", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.VerifyPhoneRequest.UserId = *x.userIdFlag.Value
	}
	if x.verificationCodeFlag.Changed() {
		x.changed = true
		x.VerifyPhoneRequest.VerificationCode = *x.verificationCodeFlag.Value
	}
}

func (x *VerifyPhoneRequestFlag) Changed() bool {
	return x.changed
}

type VerifyPhoneResponseFlag struct {
	*VerifyPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *VerifyPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyPhoneResponse.Details = x.detailsFlag.Details
	}

}

func (x *VerifyPhoneResponseFlag) Changed() bool {
	return x.changed
}

type VerifyTOTPRegistrationRequestFlag struct {
	*VerifyTOTPRegistrationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	codeFlag   *cli_client.StringParser
}

func (x *VerifyTOTPRegistrationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyTOTPRegistrationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyTOTPRegistrationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.VerifyTOTPRegistrationRequest.UserId = *x.userIdFlag.Value
	}
	if x.codeFlag.Changed() {
		x.changed = true
		x.VerifyTOTPRegistrationRequest.Code = *x.codeFlag.Value
	}
}

func (x *VerifyTOTPRegistrationRequestFlag) Changed() bool {
	return x.changed
}

type VerifyTOTPRegistrationResponseFlag struct {
	*VerifyTOTPRegistrationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *VerifyTOTPRegistrationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyTOTPRegistrationResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyTOTPRegistrationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyTOTPRegistrationResponse.Details = x.detailsFlag.Details
	}

}

func (x *VerifyTOTPRegistrationResponseFlag) Changed() bool {
	return x.changed
}

type VerifyU2FRegistrationRequestFlag struct {
	*VerifyU2FRegistrationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag              *cli_client.StringParser
	u2fIdFlag               *cli_client.StringParser
	publicKeyCredentialFlag *cli_client.StructParser
	tokenNameFlag           *cli_client.StringParser
}

func (x *VerifyU2FRegistrationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyU2FRegistrationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.u2fIdFlag = cli_client.NewStringParser(x.set, "u2f-id", "")
	x.publicKeyCredentialFlag = cli_client.NewStructParser(x.set, "public-key-credential", "")
	x.tokenNameFlag = cli_client.NewStringParser(x.set, "token-name", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyU2FRegistrationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.VerifyU2FRegistrationRequest.UserId = *x.userIdFlag.Value
	}
	if x.u2fIdFlag.Changed() {
		x.changed = true
		x.VerifyU2FRegistrationRequest.U2FId = *x.u2fIdFlag.Value
	}
	if x.publicKeyCredentialFlag.Changed() {
		x.changed = true
		x.VerifyU2FRegistrationRequest.PublicKeyCredential = x.publicKeyCredentialFlag.Value
	}
	if x.tokenNameFlag.Changed() {
		x.changed = true
		x.VerifyU2FRegistrationRequest.TokenName = *x.tokenNameFlag.Value
	}
}

func (x *VerifyU2FRegistrationRequestFlag) Changed() bool {
	return x.changed
}

type VerifyU2FRegistrationResponseFlag struct {
	*VerifyU2FRegistrationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *VerifyU2FRegistrationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyU2FRegistrationResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyU2FRegistrationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyU2FRegistrationResponse.Details = x.detailsFlag.Details
	}

}

func (x *VerifyU2FRegistrationResponseFlag) Changed() bool {
	return x.changed
}
