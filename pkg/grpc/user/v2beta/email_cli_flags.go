// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type HumanEmailFlag struct {
	*HumanEmail

	changed bool
	set     *pflag.FlagSet

	emailFlag      *cli_client.StringParser
	isVerifiedFlag *cli_client.BoolParser
}

func (x *HumanEmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HumanEmail", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isVerifiedFlag = cli_client.NewBoolParser(x.set, "is-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *HumanEmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.HumanEmail.Email = *x.emailFlag.Value
	}
	if x.isVerifiedFlag.Changed() {
		x.changed = true
		x.HumanEmail.IsVerified = *x.isVerifiedFlag.Value
	}
}

func (x *HumanEmailFlag) Changed() bool {
	return x.changed
}

type ReturnEmailVerificationCodeFlag struct {
	*ReturnEmailVerificationCode

	changed bool
	set     *pflag.FlagSet
}

func (x *ReturnEmailVerificationCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReturnEmailVerificationCode", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ReturnEmailVerificationCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ReturnEmailVerificationCodeFlag) Changed() bool {
	return x.changed
}

type SendEmailVerificationCodeFlag struct {
	*SendEmailVerificationCode

	changed bool
	set     *pflag.FlagSet

	urlTemplateFlag *cli_client.StringParser
}

func (x *SendEmailVerificationCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendEmailVerificationCode", pflag.ContinueOnError)

	x.urlTemplateFlag = cli_client.NewStringParser(x.set, "url-template", "")
	parent.AddFlagSet(x.set)
}

func (x *SendEmailVerificationCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.urlTemplateFlag.Changed() {
		x.changed = true
		x.SendEmailVerificationCode.UrlTemplate = x.urlTemplateFlag.Value
	}
}

func (x *SendEmailVerificationCodeFlag) Changed() bool {
	return x.changed
}

type SetHumanEmailFlag struct {
	*SetHumanEmail

	changed bool
	set     *pflag.FlagSet

	emailFlag      *cli_client.StringParser
	sendCodeFlag   *SendEmailVerificationCodeFlag
	returnCodeFlag *ReturnEmailVerificationCodeFlag
	isVerifiedFlag *cli_client.BoolParser
}

func (x *SetHumanEmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanEmail", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "address", "")
	x.isVerifiedFlag = cli_client.NewBoolParser(x.set, "is-verified", "")
	x.sendCodeFlag = &SendEmailVerificationCodeFlag{SendEmailVerificationCode: new(SendEmailVerificationCode)}
	x.sendCodeFlag.AddFlags(x.set)
	x.returnCodeFlag = &ReturnEmailVerificationCodeFlag{ReturnEmailVerificationCode: new(ReturnEmailVerificationCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetHumanEmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-code", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-code"); flagIdx != nil {
		x.sendCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.SetHumanEmail.Email = *x.emailFlag.Value
	}

	switch cli_client.FieldIndexes(args, "send-code", "return-code", "is-verified").Last().Flag {
	case "send-code":
		if x.sendCodeFlag.Changed() {
			x.changed = true
			x.SetHumanEmail.Verification = &SetHumanEmail_SendCode{SendCode: x.sendCodeFlag.SendEmailVerificationCode}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.SetHumanEmail.Verification = &SetHumanEmail_ReturnCode{ReturnCode: x.returnCodeFlag.ReturnEmailVerificationCode}
		}
	case "is-verified":
		if x.isVerifiedFlag.Changed() {
			x.changed = true
			x.SetHumanEmail.Verification = &SetHumanEmail_IsVerified{IsVerified: *x.isVerifiedFlag.Value}
		}
	}
}

func (x *SetHumanEmailFlag) Changed() bool {
	return x.changed
}
