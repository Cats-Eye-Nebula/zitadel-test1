// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package user

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type AndQueryFlag struct {
	*AndQuery

	changed bool
	set     *pflag.FlagSet

	queriesFlag []*SearchQueryFlag
}

func (x *AndQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AndQuery", pflag.ContinueOnError)

	x.queriesFlag = []*SearchQueryFlag{}
	parent.AddFlagSet(x.set)
}

func (x *AndQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &SearchQueryFlag{SearchQuery: new(SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.AndQuery.Queries[i] = value.SearchQuery
		}
	}

}

func (x *AndQueryFlag) Changed() bool {
	return x.changed
}

type AuthFactorFlag struct {
	*AuthFactor

	changed bool
	set     *pflag.FlagSet

	stateFlag    *cli_client.EnumParser[AuthFactorState]
	otpFlag      *AuthFactorOTPFlag
	u2fFlag      *AuthFactorU2FFlag
	otpSmsFlag   *AuthFactorOTPSMSFlag
	otpEmailFlag *AuthFactorOTPEmailFlag
}

func (x *AuthFactorFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthFactor", pflag.ContinueOnError)

	x.stateFlag = cli_client.NewEnumParser[AuthFactorState](x.set, "state", "")
	x.otpFlag = &AuthFactorOTPFlag{AuthFactorOTP: new(AuthFactorOTP)}
	x.otpFlag.AddFlags(x.set)
	x.u2fFlag = &AuthFactorU2FFlag{AuthFactorU2F: new(AuthFactorU2F)}
	x.u2fFlag.AddFlags(x.set)
	x.otpSmsFlag = &AuthFactorOTPSMSFlag{AuthFactorOTPSMS: new(AuthFactorOTPSMS)}
	x.otpSmsFlag.AddFlags(x.set)
	x.otpEmailFlag = &AuthFactorOTPEmailFlag{AuthFactorOTPEmail: new(AuthFactorOTPEmail)}
	x.otpEmailFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AuthFactorFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "otp", "u2f", "otp-sms", "otp-email")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("otp"); flagIdx != nil {
		x.otpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("u2f"); flagIdx != nil {
		x.u2fFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("otp-sms"); flagIdx != nil {
		x.otpSmsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("otp-email"); flagIdx != nil {
		x.otpEmailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.AuthFactor.State = *x.stateFlag.Value
	}

	switch cli_client.FieldIndexes(args, "otp", "u2f", "otp-sms", "otp-email").Last().Flag {
	case "otp":
		if x.otpFlag.Changed() {
			x.changed = true
			x.AuthFactor.Type = &AuthFactor_Otp{Otp: x.otpFlag.AuthFactorOTP}
		}
	case "u2f":
		if x.u2fFlag.Changed() {
			x.changed = true
			x.AuthFactor.Type = &AuthFactor_U2F{U2F: x.u2fFlag.AuthFactorU2F}
		}
	case "otp-sms":
		if x.otpSmsFlag.Changed() {
			x.changed = true
			x.AuthFactor.Type = &AuthFactor_OtpSms{OtpSms: x.otpSmsFlag.AuthFactorOTPSMS}
		}
	case "otp-email":
		if x.otpEmailFlag.Changed() {
			x.changed = true
			x.AuthFactor.Type = &AuthFactor_OtpEmail{OtpEmail: x.otpEmailFlag.AuthFactorOTPEmail}
		}
	}
}

func (x *AuthFactorFlag) Changed() bool {
	return x.changed
}

type AuthFactorOTPFlag struct {
	*AuthFactorOTP

	changed bool
	set     *pflag.FlagSet
}

func (x *AuthFactorOTPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthFactorOTP", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AuthFactorOTPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AuthFactorOTPFlag) Changed() bool {
	return x.changed
}

type AuthFactorOTPEmailFlag struct {
	*AuthFactorOTPEmail

	changed bool
	set     *pflag.FlagSet
}

func (x *AuthFactorOTPEmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthFactorOTPEmail", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AuthFactorOTPEmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AuthFactorOTPEmailFlag) Changed() bool {
	return x.changed
}

type AuthFactorOTPSMSFlag struct {
	*AuthFactorOTPSMS

	changed bool
	set     *pflag.FlagSet
}

func (x *AuthFactorOTPSMSFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthFactorOTPSMS", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AuthFactorOTPSMSFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AuthFactorOTPSMSFlag) Changed() bool {
	return x.changed
}

type AuthFactorU2FFlag struct {
	*AuthFactorU2F

	changed bool
	set     *pflag.FlagSet

	idFlag   *cli_client.StringParser
	nameFlag *cli_client.StringParser
}

func (x *AuthFactorU2FFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthFactorU2F", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	parent.AddFlagSet(x.set)
}

func (x *AuthFactorU2FFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AuthFactorU2F.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AuthFactorU2F.Name = *x.nameFlag.Value
	}
}

func (x *AuthFactorU2FFlag) Changed() bool {
	return x.changed
}

type DisplayNameQueryFlag struct {
	*DisplayNameQuery

	changed bool
	set     *pflag.FlagSet

	displayNameFlag *cli_client.StringParser
	methodFlag      *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *DisplayNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DisplayNameQuery", pflag.ContinueOnError)

	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *DisplayNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.displayNameFlag.Changed() {
		x.changed = true
		x.DisplayNameQuery.DisplayName = *x.displayNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.DisplayNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *DisplayNameQueryFlag) Changed() bool {
	return x.changed
}

type EmailFlag struct {
	*Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *EmailFlag) Changed() bool {
	return x.changed
}

type EmailQueryFlag struct {
	*EmailQuery

	changed bool
	set     *pflag.FlagSet

	emailAddressFlag *cli_client.StringParser
	methodFlag       *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *EmailQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("EmailQuery", pflag.ContinueOnError)

	x.emailAddressFlag = cli_client.NewStringParser(x.set, "email-address", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *EmailQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailAddressFlag.Changed() {
		x.changed = true
		x.EmailQuery.EmailAddress = *x.emailAddressFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.EmailQuery.Method = *x.methodFlag.Value
	}
}

func (x *EmailQueryFlag) Changed() bool {
	return x.changed
}

type FirstNameQueryFlag struct {
	*FirstNameQuery

	changed bool
	set     *pflag.FlagSet

	firstNameFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *FirstNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FirstNameQuery", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *FirstNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.FirstNameQuery.FirstName = *x.firstNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.FirstNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *FirstNameQueryFlag) Changed() bool {
	return x.changed
}

type HumanFlag struct {
	*Human

	changed bool
	set     *pflag.FlagSet

	profileFlag *ProfileFlag
	emailFlag   *EmailFlag
	phoneFlag   *PhoneFlag
}

func (x *HumanFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Human", pflag.ContinueOnError)

	x.profileFlag = &ProfileFlag{Profile: new(Profile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &EmailFlag{Email: new(Email)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &PhoneFlag{Phone: new(Phone)}
	x.phoneFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *HumanFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.Human.Profile = x.profileFlag.Profile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.Human.Email = x.emailFlag.Email
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.Human.Phone = x.phoneFlag.Phone
	}

}

func (x *HumanFlag) Changed() bool {
	return x.changed
}

type InUserEmailsQueryFlag struct {
	*InUserEmailsQuery

	changed bool
	set     *pflag.FlagSet

	userEmailsFlag *cli_client.StringSliceParser
}

func (x *InUserEmailsQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InUserEmailsQuery", pflag.ContinueOnError)

	x.userEmailsFlag = cli_client.NewStringSliceParser(x.set, "user-emails", "")
	parent.AddFlagSet(x.set)
}

func (x *InUserEmailsQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userEmailsFlag.Changed() {
		x.changed = true
		x.InUserEmailsQuery.UserEmails = *x.userEmailsFlag.Value
	}
}

func (x *InUserEmailsQueryFlag) Changed() bool {
	return x.changed
}

type InUserIDQueryFlag struct {
	*InUserIDQuery

	changed bool
	set     *pflag.FlagSet

	userIdsFlag *cli_client.StringSliceParser
}

func (x *InUserIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InUserIDQuery", pflag.ContinueOnError)

	x.userIdsFlag = cli_client.NewStringSliceParser(x.set, "user-ids", "")
	parent.AddFlagSet(x.set)
}

func (x *InUserIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdsFlag.Changed() {
		x.changed = true
		x.InUserIDQuery.UserIds = *x.userIdsFlag.Value
	}
}

func (x *InUserIDQueryFlag) Changed() bool {
	return x.changed
}

type LastNameQueryFlag struct {
	*LastNameQuery

	changed bool
	set     *pflag.FlagSet

	lastNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *LastNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LastNameQuery", pflag.ContinueOnError)

	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *LastNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.lastNameFlag.Changed() {
		x.changed = true
		x.LastNameQuery.LastName = *x.lastNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.LastNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *LastNameQueryFlag) Changed() bool {
	return x.changed
}

type LoginNameQueryFlag struct {
	*LoginNameQuery

	changed bool
	set     *pflag.FlagSet

	loginNameFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *LoginNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LoginNameQuery", pflag.ContinueOnError)

	x.loginNameFlag = cli_client.NewStringParser(x.set, "login-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *LoginNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.loginNameFlag.Changed() {
		x.changed = true
		x.LoginNameQuery.LoginName = *x.loginNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.LoginNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *LoginNameQueryFlag) Changed() bool {
	return x.changed
}

type MachineFlag struct {
	*Machine

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	descriptionFlag     *cli_client.StringParser
	hasSecretFlag       *cli_client.BoolParser
	accessTokenTypeFlag *cli_client.EnumParser[AccessTokenType]
}

func (x *MachineFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Machine", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.hasSecretFlag = cli_client.NewBoolParser(x.set, "has-secret", "")
	x.accessTokenTypeFlag = cli_client.NewEnumParser[AccessTokenType](x.set, "access-token-type", "")
	parent.AddFlagSet(x.set)
}

func (x *MachineFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.Machine.Name = *x.nameFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.Machine.Description = *x.descriptionFlag.Value
	}
	if x.hasSecretFlag.Changed() {
		x.changed = true
		x.Machine.HasSecret = *x.hasSecretFlag.Value
	}
	if x.accessTokenTypeFlag.Changed() {
		x.changed = true
		x.Machine.AccessTokenType = *x.accessTokenTypeFlag.Value
	}
}

func (x *MachineFlag) Changed() bool {
	return x.changed
}

type MembershipFlag struct {
	*Membership

	changed bool
	set     *pflag.FlagSet

	userIdFlag         *cli_client.StringParser
	detailsFlag        *object.ObjectDetailsFlag
	rolesFlag          *cli_client.StringSliceParser
	displayNameFlag    *cli_client.StringParser
	iamFlag            *cli_client.BoolParser
	orgIdFlag          *cli_client.StringParser
	projectIdFlag      *cli_client.StringParser
	projectGrantIdFlag *cli_client.StringParser
}

func (x *MembershipFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Membership", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.iamFlag = cli_client.NewBoolParser(x.set, "iam", "")
	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.projectGrantIdFlag = cli_client.NewStringParser(x.set, "project-grant-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MembershipFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.Membership.UserId = *x.userIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Membership.Details = x.detailsFlag.ObjectDetails
	}

	if x.rolesFlag.Changed() {
		x.changed = true
		x.Membership.Roles = *x.rolesFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.Membership.DisplayName = *x.displayNameFlag.Value
	}

	switch cli_client.FieldIndexes(args, "iam", "org-id", "project-id", "project-grant-id").Last().Flag {
	case "iam":
		if x.iamFlag.Changed() {
			x.changed = true
			x.Membership.Type = &Membership_Iam{Iam: *x.iamFlag.Value}
		}
	case "org-id":
		if x.orgIdFlag.Changed() {
			x.changed = true
			x.Membership.Type = &Membership_OrgId{OrgId: *x.orgIdFlag.Value}
		}
	case "project-id":
		if x.projectIdFlag.Changed() {
			x.changed = true
			x.Membership.Type = &Membership_ProjectId{ProjectId: *x.projectIdFlag.Value}
		}
	case "project-grant-id":
		if x.projectGrantIdFlag.Changed() {
			x.changed = true
			x.Membership.Type = &Membership_ProjectGrantId{ProjectGrantId: *x.projectGrantIdFlag.Value}
		}
	}
}

func (x *MembershipFlag) Changed() bool {
	return x.changed
}

type MembershipIAMQueryFlag struct {
	*MembershipIAMQuery

	changed bool
	set     *pflag.FlagSet

	iamFlag *cli_client.BoolParser
}

func (x *MembershipIAMQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MembershipIAMQuery", pflag.ContinueOnError)

	x.iamFlag = cli_client.NewBoolParser(x.set, "iam", "")
	parent.AddFlagSet(x.set)
}

func (x *MembershipIAMQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.iamFlag.Changed() {
		x.changed = true
		x.MembershipIAMQuery.Iam = *x.iamFlag.Value
	}
}

func (x *MembershipIAMQueryFlag) Changed() bool {
	return x.changed
}

type MembershipOrgQueryFlag struct {
	*MembershipOrgQuery

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *MembershipOrgQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MembershipOrgQuery", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *MembershipOrgQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.MembershipOrgQuery.OrgId = *x.orgIdFlag.Value
	}
}

func (x *MembershipOrgQueryFlag) Changed() bool {
	return x.changed
}

type MembershipProjectGrantQueryFlag struct {
	*MembershipProjectGrantQuery

	changed bool
	set     *pflag.FlagSet

	projectGrantIdFlag *cli_client.StringParser
}

func (x *MembershipProjectGrantQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MembershipProjectGrantQuery", pflag.ContinueOnError)

	x.projectGrantIdFlag = cli_client.NewStringParser(x.set, "project-grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *MembershipProjectGrantQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectGrantIdFlag.Changed() {
		x.changed = true
		x.MembershipProjectGrantQuery.ProjectGrantId = *x.projectGrantIdFlag.Value
	}
}

func (x *MembershipProjectGrantQueryFlag) Changed() bool {
	return x.changed
}

type MembershipProjectQueryFlag struct {
	*MembershipProjectQuery

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
}

func (x *MembershipProjectQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MembershipProjectQuery", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	parent.AddFlagSet(x.set)
}

func (x *MembershipProjectQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.MembershipProjectQuery.ProjectId = *x.projectIdFlag.Value
	}
}

func (x *MembershipProjectQueryFlag) Changed() bool {
	return x.changed
}

type MembershipQueryFlag struct {
	*MembershipQuery

	changed bool
	set     *pflag.FlagSet

	orgQueryFlag          *MembershipOrgQueryFlag
	projectQueryFlag      *MembershipProjectQueryFlag
	projectGrantQueryFlag *MembershipProjectGrantQueryFlag
	iamQueryFlag          *MembershipIAMQueryFlag
}

func (x *MembershipQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MembershipQuery", pflag.ContinueOnError)

	x.orgQueryFlag = &MembershipOrgQueryFlag{MembershipOrgQuery: new(MembershipOrgQuery)}
	x.orgQueryFlag.AddFlags(x.set)
	x.projectQueryFlag = &MembershipProjectQueryFlag{MembershipProjectQuery: new(MembershipProjectQuery)}
	x.projectQueryFlag.AddFlags(x.set)
	x.projectGrantQueryFlag = &MembershipProjectGrantQueryFlag{MembershipProjectGrantQuery: new(MembershipProjectGrantQuery)}
	x.projectGrantQueryFlag.AddFlags(x.set)
	x.iamQueryFlag = &MembershipIAMQueryFlag{MembershipIAMQuery: new(MembershipIAMQuery)}
	x.iamQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MembershipQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org-query", "project-query", "project-grant-query", "iam-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org-query"); flagIdx != nil {
		x.orgQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("project-query"); flagIdx != nil {
		x.projectQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("project-grant-query"); flagIdx != nil {
		x.projectGrantQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("iam-query"); flagIdx != nil {
		x.iamQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "org-query", "project-query", "project-grant-query", "iam-query").Last().Flag {
	case "org-query":
		if x.orgQueryFlag.Changed() {
			x.changed = true
			x.MembershipQuery.Query = &MembershipQuery_OrgQuery{OrgQuery: x.orgQueryFlag.MembershipOrgQuery}
		}
	case "project-query":
		if x.projectQueryFlag.Changed() {
			x.changed = true
			x.MembershipQuery.Query = &MembershipQuery_ProjectQuery{ProjectQuery: x.projectQueryFlag.MembershipProjectQuery}
		}
	case "project-grant-query":
		if x.projectGrantQueryFlag.Changed() {
			x.changed = true
			x.MembershipQuery.Query = &MembershipQuery_ProjectGrantQuery{ProjectGrantQuery: x.projectGrantQueryFlag.MembershipProjectGrantQuery}
		}
	case "iam-query":
		if x.iamQueryFlag.Changed() {
			x.changed = true
			x.MembershipQuery.Query = &MembershipQuery_IamQuery{IamQuery: x.iamQueryFlag.MembershipIAMQuery}
		}
	}
}

func (x *MembershipQueryFlag) Changed() bool {
	return x.changed
}

type NickNameQueryFlag struct {
	*NickNameQuery

	changed bool
	set     *pflag.FlagSet

	nickNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *NickNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NickNameQuery", pflag.ContinueOnError)

	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *NickNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nickNameFlag.Changed() {
		x.changed = true
		x.NickNameQuery.NickName = *x.nickNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.NickNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *NickNameQueryFlag) Changed() bool {
	return x.changed
}

type NotQueryFlag struct {
	*NotQuery

	changed bool
	set     *pflag.FlagSet

	queryFlag *SearchQueryFlag
}

func (x *NotQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("NotQuery", pflag.ContinueOnError)

	x.queryFlag = &SearchQueryFlag{SearchQuery: new(SearchQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *NotQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.NotQuery.Query = x.queryFlag.SearchQuery
	}

}

func (x *NotQueryFlag) Changed() bool {
	return x.changed
}

type OrQueryFlag struct {
	*OrQuery

	changed bool
	set     *pflag.FlagSet

	queriesFlag []*SearchQueryFlag
}

func (x *OrQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("OrQuery", pflag.ContinueOnError)

	x.queriesFlag = []*SearchQueryFlag{}
	parent.AddFlagSet(x.set)
}

func (x *OrQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &SearchQueryFlag{SearchQuery: new(SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.OrQuery.Queries[i] = value.SearchQuery
		}
	}

}

func (x *OrQueryFlag) Changed() bool {
	return x.changed
}

type PersonalAccessTokenFlag struct {
	*PersonalAccessToken

	changed bool
	set     *pflag.FlagSet

	idFlag             *cli_client.StringParser
	detailsFlag        *object.ObjectDetailsFlag
	expirationDateFlag *cli_client.TimestampParser
	scopesFlag         *cli_client.StringSliceParser
}

func (x *PersonalAccessTokenFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PersonalAccessToken", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *PersonalAccessTokenFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.PersonalAccessToken.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.PersonalAccessToken.Details = x.detailsFlag.ObjectDetails
	}

	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.PersonalAccessToken.ExpirationDate = x.expirationDateFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.PersonalAccessToken.Scopes = *x.scopesFlag.Value
	}
}

func (x *PersonalAccessTokenFlag) Changed() bool {
	return x.changed
}

type PhoneFlag struct {
	*Phone

	changed bool
	set     *pflag.FlagSet

	phoneFlag           *cli_client.StringParser
	isPhoneVerifiedFlag *cli_client.BoolParser
}

func (x *PhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Phone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isPhoneVerifiedFlag = cli_client.NewBoolParser(x.set, "is-phone-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *PhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.Phone.Phone = *x.phoneFlag.Value
	}
	if x.isPhoneVerifiedFlag.Changed() {
		x.changed = true
		x.Phone.IsPhoneVerified = *x.isPhoneVerifiedFlag.Value
	}
}

func (x *PhoneFlag) Changed() bool {
	return x.changed
}

type ProfileFlag struct {
	*Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[Gender]
	avatarUrlFlag         *cli_client.StringParser
}

func (x *ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[Gender](x.set, "gender", "")
	x.avatarUrlFlag = cli_client.NewStringParser(x.set, "avatar-url", "")
	parent.AddFlagSet(x.set)
}

func (x *ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.Profile.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.Profile.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.Profile.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.Profile.Gender = *x.genderFlag.Value
	}
	if x.avatarUrlFlag.Changed() {
		x.changed = true
		x.Profile.AvatarUrl = *x.avatarUrlFlag.Value
	}
}

func (x *ProfileFlag) Changed() bool {
	return x.changed
}

type RefreshTokenFlag struct {
	*RefreshToken

	changed bool
	set     *pflag.FlagSet

	idFlag             *cli_client.StringParser
	detailsFlag        *object.ObjectDetailsFlag
	clientIdFlag       *cli_client.StringParser
	authTimeFlag       *cli_client.TimestampParser
	idleExpirationFlag *cli_client.TimestampParser
	expirationFlag     *cli_client.TimestampParser
	scopesFlag         *cli_client.StringSliceParser
	audienceFlag       *cli_client.StringSliceParser
}

func (x *RefreshTokenFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RefreshToken", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.authTimeFlag = cli_client.NewTimestampParser(x.set, "auth-time", "")
	x.idleExpirationFlag = cli_client.NewTimestampParser(x.set, "idle-expiration", "")
	x.expirationFlag = cli_client.NewTimestampParser(x.set, "expiration", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.audienceFlag = cli_client.NewStringSliceParser(x.set, "audience", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RefreshTokenFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RefreshToken.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RefreshToken.Details = x.detailsFlag.ObjectDetails
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.RefreshToken.ClientId = *x.clientIdFlag.Value
	}
	if x.authTimeFlag.Changed() {
		x.changed = true
		x.RefreshToken.AuthTime = x.authTimeFlag.Value
	}
	if x.idleExpirationFlag.Changed() {
		x.changed = true
		x.RefreshToken.IdleExpiration = x.idleExpirationFlag.Value
	}
	if x.expirationFlag.Changed() {
		x.changed = true
		x.RefreshToken.Expiration = x.expirationFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.RefreshToken.Scopes = *x.scopesFlag.Value
	}
	if x.audienceFlag.Changed() {
		x.changed = true
		x.RefreshToken.Audience = *x.audienceFlag.Value
	}
}

func (x *RefreshTokenFlag) Changed() bool {
	return x.changed
}

type SearchQueryFlag struct {
	*SearchQuery

	changed bool
	set     *pflag.FlagSet

	userNameQueryFlag     *UserNameQueryFlag
	firstNameQueryFlag    *FirstNameQueryFlag
	lastNameQueryFlag     *LastNameQueryFlag
	nickNameQueryFlag     *NickNameQueryFlag
	displayNameQueryFlag  *DisplayNameQueryFlag
	emailQueryFlag        *EmailQueryFlag
	stateQueryFlag        *StateQueryFlag
	typeQueryFlag         *TypeQueryFlag
	loginNameQueryFlag    *LoginNameQueryFlag
	inUserIdsQueryFlag    *InUserIDQueryFlag
	orQueryFlag           *OrQueryFlag
	andQueryFlag          *AndQueryFlag
	notQueryFlag          *NotQueryFlag
	inUserEmailsQueryFlag *InUserEmailsQueryFlag
}

func (x *SearchQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SearchQuery", pflag.ContinueOnError)

	x.userNameQueryFlag = &UserNameQueryFlag{UserNameQuery: new(UserNameQuery)}
	x.userNameQueryFlag.AddFlags(x.set)
	x.firstNameQueryFlag = &FirstNameQueryFlag{FirstNameQuery: new(FirstNameQuery)}
	x.firstNameQueryFlag.AddFlags(x.set)
	x.lastNameQueryFlag = &LastNameQueryFlag{LastNameQuery: new(LastNameQuery)}
	x.lastNameQueryFlag.AddFlags(x.set)
	x.nickNameQueryFlag = &NickNameQueryFlag{NickNameQuery: new(NickNameQuery)}
	x.nickNameQueryFlag.AddFlags(x.set)
	x.displayNameQueryFlag = &DisplayNameQueryFlag{DisplayNameQuery: new(DisplayNameQuery)}
	x.displayNameQueryFlag.AddFlags(x.set)
	x.emailQueryFlag = &EmailQueryFlag{EmailQuery: new(EmailQuery)}
	x.emailQueryFlag.AddFlags(x.set)
	x.stateQueryFlag = &StateQueryFlag{StateQuery: new(StateQuery)}
	x.stateQueryFlag.AddFlags(x.set)
	x.typeQueryFlag = &TypeQueryFlag{TypeQuery: new(TypeQuery)}
	x.typeQueryFlag.AddFlags(x.set)
	x.loginNameQueryFlag = &LoginNameQueryFlag{LoginNameQuery: new(LoginNameQuery)}
	x.loginNameQueryFlag.AddFlags(x.set)
	x.inUserIdsQueryFlag = &InUserIDQueryFlag{InUserIDQuery: new(InUserIDQuery)}
	x.inUserIdsQueryFlag.AddFlags(x.set)
	x.orQueryFlag = &OrQueryFlag{OrQuery: new(OrQuery)}
	x.orQueryFlag.AddFlags(x.set)
	x.andQueryFlag = &AndQueryFlag{AndQuery: new(AndQuery)}
	x.andQueryFlag.AddFlags(x.set)
	x.notQueryFlag = &NotQueryFlag{NotQuery: new(NotQuery)}
	x.notQueryFlag.AddFlags(x.set)
	x.inUserEmailsQueryFlag = &InUserEmailsQueryFlag{InUserEmailsQuery: new(InUserEmailsQuery)}
	x.inUserEmailsQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SearchQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user-name-query", "first-name-query", "last-name-query", "nick-name-query", "display-name-query", "email-query", "state-query", "type-query", "login-name-query", "in-user-ids-query", "or-query", "and-query", "not-query", "in-user-emails-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user-name-query"); flagIdx != nil {
		x.userNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("first-name-query"); flagIdx != nil {
		x.firstNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("last-name-query"); flagIdx != nil {
		x.lastNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("nick-name-query"); flagIdx != nil {
		x.nickNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("display-name-query"); flagIdx != nil {
		x.displayNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-query"); flagIdx != nil {
		x.emailQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("state-query"); flagIdx != nil {
		x.stateQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("type-query"); flagIdx != nil {
		x.typeQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-name-query"); flagIdx != nil {
		x.loginNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("in-user-ids-query"); flagIdx != nil {
		x.inUserIdsQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("or-query"); flagIdx != nil {
		x.orQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("and-query"); flagIdx != nil {
		x.andQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("not-query"); flagIdx != nil {
		x.notQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("in-user-emails-query"); flagIdx != nil {
		x.inUserEmailsQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "user-name-query", "first-name-query", "last-name-query", "nick-name-query", "display-name-query", "email-query", "state-query", "type-query", "login-name-query", "in-user-ids-query", "or-query", "and-query", "not-query", "in-user-emails-query").Last().Flag {
	case "user-name-query":
		if x.userNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_UserNameQuery{UserNameQuery: x.userNameQueryFlag.UserNameQuery}
		}
	case "first-name-query":
		if x.firstNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_FirstNameQuery{FirstNameQuery: x.firstNameQueryFlag.FirstNameQuery}
		}
	case "last-name-query":
		if x.lastNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_LastNameQuery{LastNameQuery: x.lastNameQueryFlag.LastNameQuery}
		}
	case "nick-name-query":
		if x.nickNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_NickNameQuery{NickNameQuery: x.nickNameQueryFlag.NickNameQuery}
		}
	case "display-name-query":
		if x.displayNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_DisplayNameQuery{DisplayNameQuery: x.displayNameQueryFlag.DisplayNameQuery}
		}
	case "email-query":
		if x.emailQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_EmailQuery{EmailQuery: x.emailQueryFlag.EmailQuery}
		}
	case "state-query":
		if x.stateQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_StateQuery{StateQuery: x.stateQueryFlag.StateQuery}
		}
	case "type-query":
		if x.typeQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_TypeQuery{TypeQuery: x.typeQueryFlag.TypeQuery}
		}
	case "login-name-query":
		if x.loginNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_LoginNameQuery{LoginNameQuery: x.loginNameQueryFlag.LoginNameQuery}
		}
	case "in-user-ids-query":
		if x.inUserIdsQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_InUserIdsQuery{InUserIdsQuery: x.inUserIdsQueryFlag.InUserIDQuery}
		}
	case "or-query":
		if x.orQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_OrQuery{OrQuery: x.orQueryFlag.OrQuery}
		}
	case "and-query":
		if x.andQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_AndQuery{AndQuery: x.andQueryFlag.AndQuery}
		}
	case "not-query":
		if x.notQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_NotQuery{NotQuery: x.notQueryFlag.NotQuery}
		}
	case "in-user-emails-query":
		if x.inUserEmailsQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_InUserEmailsQuery{InUserEmailsQuery: x.inUserEmailsQueryFlag.InUserEmailsQuery}
		}
	}
}

func (x *SearchQueryFlag) Changed() bool {
	return x.changed
}

type SessionFlag struct {
	*Session

	changed bool
	set     *pflag.FlagSet

	sessionIdFlag   *cli_client.StringParser
	agentIdFlag     *cli_client.StringParser
	authStateFlag   *cli_client.EnumParser[SessionState]
	userIdFlag      *cli_client.StringParser
	userNameFlag    *cli_client.StringParser
	loginNameFlag   *cli_client.StringParser
	displayNameFlag *cli_client.StringParser
	detailsFlag     *object.ObjectDetailsFlag
	avatarUrlFlag   *cli_client.StringParser
}

func (x *SessionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Session", pflag.ContinueOnError)

	x.sessionIdFlag = cli_client.NewStringParser(x.set, "session-id", "")
	x.agentIdFlag = cli_client.NewStringParser(x.set, "agent-id", "")
	x.authStateFlag = cli_client.NewEnumParser[SessionState](x.set, "auth-state", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.loginNameFlag = cli_client.NewStringParser(x.set, "login-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.avatarUrlFlag = cli_client.NewStringParser(x.set, "avatar-url", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SessionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.sessionIdFlag.Changed() {
		x.changed = true
		x.Session.SessionId = *x.sessionIdFlag.Value
	}
	if x.agentIdFlag.Changed() {
		x.changed = true
		x.Session.AgentId = *x.agentIdFlag.Value
	}
	if x.authStateFlag.Changed() {
		x.changed = true
		x.Session.AuthState = *x.authStateFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.Session.UserId = *x.userIdFlag.Value
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.Session.UserName = *x.userNameFlag.Value
	}
	if x.loginNameFlag.Changed() {
		x.changed = true
		x.Session.LoginName = *x.loginNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.Session.DisplayName = *x.displayNameFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Session.Details = x.detailsFlag.ObjectDetails
	}

	if x.avatarUrlFlag.Changed() {
		x.changed = true
		x.Session.AvatarUrl = *x.avatarUrlFlag.Value
	}
}

func (x *SessionFlag) Changed() bool {
	return x.changed
}

type StateQueryFlag struct {
	*StateQuery

	changed bool
	set     *pflag.FlagSet

	stateFlag *cli_client.EnumParser[UserState]
}

func (x *StateQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("StateQuery", pflag.ContinueOnError)

	x.stateFlag = cli_client.NewEnumParser[UserState](x.set, "state", "")
	parent.AddFlagSet(x.set)
}

func (x *StateQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.StateQuery.State = *x.stateFlag.Value
	}
}

func (x *StateQueryFlag) Changed() bool {
	return x.changed
}

type TypeQueryFlag struct {
	*TypeQuery

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[Type]
}

func (x *TypeQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("TypeQuery", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[Type](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *TypeQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.TypeQuery.Type = *x.typeFlag.Value
	}
}

func (x *TypeQueryFlag) Changed() bool {
	return x.changed
}

type UserFlag struct {
	*User

	changed bool
	set     *pflag.FlagSet

	idFlag                 *cli_client.StringParser
	detailsFlag            *object.ObjectDetailsFlag
	stateFlag              *cli_client.EnumParser[UserState]
	userNameFlag           *cli_client.StringParser
	loginNamesFlag         *cli_client.StringSliceParser
	preferredLoginNameFlag *cli_client.StringParser
	humanFlag              *HumanFlag
	machineFlag            *MachineFlag
}

func (x *UserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("User", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[UserState](x.set, "state", "")
	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.loginNamesFlag = cli_client.NewStringSliceParser(x.set, "login-names", "")
	x.preferredLoginNameFlag = cli_client.NewStringParser(x.set, "preferred-login-name", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.humanFlag = &HumanFlag{Human: new(Human)}
	x.humanFlag.AddFlags(x.set)
	x.machineFlag = &MachineFlag{Machine: new(Machine)}
	x.machineFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "human", "machine")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("human"); flagIdx != nil {
		x.humanFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("machine"); flagIdx != nil {
		x.machineFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.User.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.User.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.User.State = *x.stateFlag.Value
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.User.UserName = *x.userNameFlag.Value
	}
	if x.loginNamesFlag.Changed() {
		x.changed = true
		x.User.LoginNames = *x.loginNamesFlag.Value
	}
	if x.preferredLoginNameFlag.Changed() {
		x.changed = true
		x.User.PreferredLoginName = *x.preferredLoginNameFlag.Value
	}

	switch cli_client.FieldIndexes(args, "human", "machine").Last().Flag {
	case "human":
		if x.humanFlag.Changed() {
			x.changed = true
			x.User.Type = &User_Human{Human: x.humanFlag.Human}
		}
	case "machine":
		if x.machineFlag.Changed() {
			x.changed = true
			x.User.Type = &User_Machine{Machine: x.machineFlag.Machine}
		}
	}
}

func (x *UserFlag) Changed() bool {
	return x.changed
}

type UserGrantFlag struct {
	*UserGrant

	changed bool
	set     *pflag.FlagSet

	idFlag                 *cli_client.StringParser
	detailsFlag            *object.ObjectDetailsFlag
	roleKeysFlag           *cli_client.StringSliceParser
	stateFlag              *cli_client.EnumParser[UserGrantState]
	userIdFlag             *cli_client.StringParser
	userNameFlag           *cli_client.StringParser
	firstNameFlag          *cli_client.StringParser
	lastNameFlag           *cli_client.StringParser
	emailFlag              *cli_client.StringParser
	displayNameFlag        *cli_client.StringParser
	orgIdFlag              *cli_client.StringParser
	orgNameFlag            *cli_client.StringParser
	orgDomainFlag          *cli_client.StringParser
	projectIdFlag          *cli_client.StringParser
	projectNameFlag        *cli_client.StringParser
	projectGrantIdFlag     *cli_client.StringParser
	avatarUrlFlag          *cli_client.StringParser
	preferredLoginNameFlag *cli_client.StringParser
	userTypeFlag           *cli_client.EnumParser[Type]
	grantedOrgIdFlag       *cli_client.StringParser
	grantedOrgNameFlag     *cli_client.StringParser
	grantedOrgDomainFlag   *cli_client.StringParser
}

func (x *UserGrantFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrant", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.roleKeysFlag = cli_client.NewStringSliceParser(x.set, "role-keys", "")
	x.stateFlag = cli_client.NewEnumParser[UserGrantState](x.set, "state", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.orgNameFlag = cli_client.NewStringParser(x.set, "org-name", "")
	x.orgDomainFlag = cli_client.NewStringParser(x.set, "org-domain", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.projectNameFlag = cli_client.NewStringParser(x.set, "project-name", "")
	x.projectGrantIdFlag = cli_client.NewStringParser(x.set, "project-grant-id", "")
	x.avatarUrlFlag = cli_client.NewStringParser(x.set, "avatar-url", "")
	x.preferredLoginNameFlag = cli_client.NewStringParser(x.set, "preferred-login-name", "")
	x.userTypeFlag = cli_client.NewEnumParser[Type](x.set, "user-type", "")
	x.grantedOrgIdFlag = cli_client.NewStringParser(x.set, "granted-org-id", "")
	x.grantedOrgNameFlag = cli_client.NewStringParser(x.set, "granted-org-name", "")
	x.grantedOrgDomainFlag = cli_client.NewStringParser(x.set, "granted-org-domain", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UserGrantFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UserGrant.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UserGrant.Details = x.detailsFlag.ObjectDetails
	}

	if x.roleKeysFlag.Changed() {
		x.changed = true
		x.UserGrant.RoleKeys = *x.roleKeysFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.UserGrant.State = *x.stateFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.UserGrant.UserId = *x.userIdFlag.Value
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.UserGrant.UserName = *x.userNameFlag.Value
	}
	if x.firstNameFlag.Changed() {
		x.changed = true
		x.UserGrant.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.UserGrant.LastName = *x.lastNameFlag.Value
	}
	if x.emailFlag.Changed() {
		x.changed = true
		x.UserGrant.Email = *x.emailFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.UserGrant.DisplayName = *x.displayNameFlag.Value
	}
	if x.orgIdFlag.Changed() {
		x.changed = true
		x.UserGrant.OrgId = *x.orgIdFlag.Value
	}
	if x.orgNameFlag.Changed() {
		x.changed = true
		x.UserGrant.OrgName = *x.orgNameFlag.Value
	}
	if x.orgDomainFlag.Changed() {
		x.changed = true
		x.UserGrant.OrgDomain = *x.orgDomainFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UserGrant.ProjectId = *x.projectIdFlag.Value
	}
	if x.projectNameFlag.Changed() {
		x.changed = true
		x.UserGrant.ProjectName = *x.projectNameFlag.Value
	}
	if x.projectGrantIdFlag.Changed() {
		x.changed = true
		x.UserGrant.ProjectGrantId = *x.projectGrantIdFlag.Value
	}
	if x.avatarUrlFlag.Changed() {
		x.changed = true
		x.UserGrant.AvatarUrl = *x.avatarUrlFlag.Value
	}
	if x.preferredLoginNameFlag.Changed() {
		x.changed = true
		x.UserGrant.PreferredLoginName = *x.preferredLoginNameFlag.Value
	}
	if x.userTypeFlag.Changed() {
		x.changed = true
		x.UserGrant.UserType = *x.userTypeFlag.Value
	}
	if x.grantedOrgIdFlag.Changed() {
		x.changed = true
		x.UserGrant.GrantedOrgId = *x.grantedOrgIdFlag.Value
	}
	if x.grantedOrgNameFlag.Changed() {
		x.changed = true
		x.UserGrant.GrantedOrgName = *x.grantedOrgNameFlag.Value
	}
	if x.grantedOrgDomainFlag.Changed() {
		x.changed = true
		x.UserGrant.GrantedOrgDomain = *x.grantedOrgDomainFlag.Value
	}
}

func (x *UserGrantFlag) Changed() bool {
	return x.changed
}

type UserGrantDisplayNameQueryFlag struct {
	*UserGrantDisplayNameQuery

	changed bool
	set     *pflag.FlagSet

	displayNameFlag *cli_client.StringParser
	methodFlag      *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantDisplayNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantDisplayNameQuery", pflag.ContinueOnError)

	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantDisplayNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.displayNameFlag.Changed() {
		x.changed = true
		x.UserGrantDisplayNameQuery.DisplayName = *x.displayNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantDisplayNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantDisplayNameQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantEmailQueryFlag struct {
	*UserGrantEmailQuery

	changed bool
	set     *pflag.FlagSet

	emailFlag  *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantEmailQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantEmailQuery", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantEmailQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.UserGrantEmailQuery.Email = *x.emailFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantEmailQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantEmailQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantFirstNameQueryFlag struct {
	*UserGrantFirstNameQuery

	changed bool
	set     *pflag.FlagSet

	firstNameFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantFirstNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantFirstNameQuery", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantFirstNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.UserGrantFirstNameQuery.FirstName = *x.firstNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantFirstNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantFirstNameQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantLastNameQueryFlag struct {
	*UserGrantLastNameQuery

	changed bool
	set     *pflag.FlagSet

	lastNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantLastNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantLastNameQuery", pflag.ContinueOnError)

	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantLastNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.lastNameFlag.Changed() {
		x.changed = true
		x.UserGrantLastNameQuery.LastName = *x.lastNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantLastNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantLastNameQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantOrgDomainQueryFlag struct {
	*UserGrantOrgDomainQuery

	changed bool
	set     *pflag.FlagSet

	orgDomainFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantOrgDomainQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantOrgDomainQuery", pflag.ContinueOnError)

	x.orgDomainFlag = cli_client.NewStringParser(x.set, "org-domain", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantOrgDomainQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgDomainFlag.Changed() {
		x.changed = true
		x.UserGrantOrgDomainQuery.OrgDomain = *x.orgDomainFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantOrgDomainQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantOrgDomainQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantOrgNameQueryFlag struct {
	*UserGrantOrgNameQuery

	changed bool
	set     *pflag.FlagSet

	orgNameFlag *cli_client.StringParser
	methodFlag  *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantOrgNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantOrgNameQuery", pflag.ContinueOnError)

	x.orgNameFlag = cli_client.NewStringParser(x.set, "org-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantOrgNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgNameFlag.Changed() {
		x.changed = true
		x.UserGrantOrgNameQuery.OrgName = *x.orgNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantOrgNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantOrgNameQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantProjectGrantIDQueryFlag struct {
	*UserGrantProjectGrantIDQuery

	changed bool
	set     *pflag.FlagSet

	projectGrantIdFlag *cli_client.StringParser
}

func (x *UserGrantProjectGrantIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantProjectGrantIDQuery", pflag.ContinueOnError)

	x.projectGrantIdFlag = cli_client.NewStringParser(x.set, "project-grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantProjectGrantIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectGrantIdFlag.Changed() {
		x.changed = true
		x.UserGrantProjectGrantIDQuery.ProjectGrantId = *x.projectGrantIdFlag.Value
	}
}

func (x *UserGrantProjectGrantIDQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantProjectIDQueryFlag struct {
	*UserGrantProjectIDQuery

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
}

func (x *UserGrantProjectIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantProjectIDQuery", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantProjectIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UserGrantProjectIDQuery.ProjectId = *x.projectIdFlag.Value
	}
}

func (x *UserGrantProjectIDQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantProjectNameQueryFlag struct {
	*UserGrantProjectNameQuery

	changed bool
	set     *pflag.FlagSet

	projectNameFlag *cli_client.StringParser
	methodFlag      *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantProjectNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantProjectNameQuery", pflag.ContinueOnError)

	x.projectNameFlag = cli_client.NewStringParser(x.set, "project-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantProjectNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectNameFlag.Changed() {
		x.changed = true
		x.UserGrantProjectNameQuery.ProjectName = *x.projectNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantProjectNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantProjectNameQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantQueryFlag struct {
	*UserGrantQuery

	changed bool
	set     *pflag.FlagSet

	projectIdQueryFlag      *UserGrantProjectIDQueryFlag
	userIdQueryFlag         *UserGrantUserIDQueryFlag
	withGrantedQueryFlag    *UserGrantWithGrantedQueryFlag
	roleKeyQueryFlag        *UserGrantRoleKeyQueryFlag
	projectGrantIdQueryFlag *UserGrantProjectGrantIDQueryFlag
	userNameQueryFlag       *UserGrantUserNameQueryFlag
	firstNameQueryFlag      *UserGrantFirstNameQueryFlag
	lastNameQueryFlag       *UserGrantLastNameQueryFlag
	emailQueryFlag          *UserGrantEmailQueryFlag
	orgNameQueryFlag        *UserGrantOrgNameQueryFlag
	orgDomainQueryFlag      *UserGrantOrgDomainQueryFlag
	projectNameQueryFlag    *UserGrantProjectNameQueryFlag
	displayNameQueryFlag    *UserGrantDisplayNameQueryFlag
	userTypeQueryFlag       *UserGrantUserTypeQueryFlag
}

func (x *UserGrantQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantQuery", pflag.ContinueOnError)

	x.projectIdQueryFlag = &UserGrantProjectIDQueryFlag{UserGrantProjectIDQuery: new(UserGrantProjectIDQuery)}
	x.projectIdQueryFlag.AddFlags(x.set)
	x.userIdQueryFlag = &UserGrantUserIDQueryFlag{UserGrantUserIDQuery: new(UserGrantUserIDQuery)}
	x.userIdQueryFlag.AddFlags(x.set)
	x.withGrantedQueryFlag = &UserGrantWithGrantedQueryFlag{UserGrantWithGrantedQuery: new(UserGrantWithGrantedQuery)}
	x.withGrantedQueryFlag.AddFlags(x.set)
	x.roleKeyQueryFlag = &UserGrantRoleKeyQueryFlag{UserGrantRoleKeyQuery: new(UserGrantRoleKeyQuery)}
	x.roleKeyQueryFlag.AddFlags(x.set)
	x.projectGrantIdQueryFlag = &UserGrantProjectGrantIDQueryFlag{UserGrantProjectGrantIDQuery: new(UserGrantProjectGrantIDQuery)}
	x.projectGrantIdQueryFlag.AddFlags(x.set)
	x.userNameQueryFlag = &UserGrantUserNameQueryFlag{UserGrantUserNameQuery: new(UserGrantUserNameQuery)}
	x.userNameQueryFlag.AddFlags(x.set)
	x.firstNameQueryFlag = &UserGrantFirstNameQueryFlag{UserGrantFirstNameQuery: new(UserGrantFirstNameQuery)}
	x.firstNameQueryFlag.AddFlags(x.set)
	x.lastNameQueryFlag = &UserGrantLastNameQueryFlag{UserGrantLastNameQuery: new(UserGrantLastNameQuery)}
	x.lastNameQueryFlag.AddFlags(x.set)
	x.emailQueryFlag = &UserGrantEmailQueryFlag{UserGrantEmailQuery: new(UserGrantEmailQuery)}
	x.emailQueryFlag.AddFlags(x.set)
	x.orgNameQueryFlag = &UserGrantOrgNameQueryFlag{UserGrantOrgNameQuery: new(UserGrantOrgNameQuery)}
	x.orgNameQueryFlag.AddFlags(x.set)
	x.orgDomainQueryFlag = &UserGrantOrgDomainQueryFlag{UserGrantOrgDomainQuery: new(UserGrantOrgDomainQuery)}
	x.orgDomainQueryFlag.AddFlags(x.set)
	x.projectNameQueryFlag = &UserGrantProjectNameQueryFlag{UserGrantProjectNameQuery: new(UserGrantProjectNameQuery)}
	x.projectNameQueryFlag.AddFlags(x.set)
	x.displayNameQueryFlag = &UserGrantDisplayNameQueryFlag{UserGrantDisplayNameQuery: new(UserGrantDisplayNameQuery)}
	x.displayNameQueryFlag.AddFlags(x.set)
	x.userTypeQueryFlag = &UserGrantUserTypeQueryFlag{UserGrantUserTypeQuery: new(UserGrantUserTypeQuery)}
	x.userTypeQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UserGrantQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project-id-query", "user-id-query", "with-granted-query", "role-key-query", "project-grant-id-query", "user-name-query", "first-name-query", "last-name-query", "email-query", "org-name-query", "org-domain-query", "project-name-query", "display-name-query", "user-type-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project-id-query"); flagIdx != nil {
		x.projectIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("user-id-query"); flagIdx != nil {
		x.userIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("with-granted-query"); flagIdx != nil {
		x.withGrantedQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("role-key-query"); flagIdx != nil {
		x.roleKeyQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("project-grant-id-query"); flagIdx != nil {
		x.projectGrantIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("user-name-query"); flagIdx != nil {
		x.userNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("first-name-query"); flagIdx != nil {
		x.firstNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("last-name-query"); flagIdx != nil {
		x.lastNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-query"); flagIdx != nil {
		x.emailQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("org-name-query"); flagIdx != nil {
		x.orgNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("org-domain-query"); flagIdx != nil {
		x.orgDomainQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("project-name-query"); flagIdx != nil {
		x.projectNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("display-name-query"); flagIdx != nil {
		x.displayNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("user-type-query"); flagIdx != nil {
		x.userTypeQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "project-id-query", "user-id-query", "with-granted-query", "role-key-query", "project-grant-id-query", "user-name-query", "first-name-query", "last-name-query", "email-query", "org-name-query", "org-domain-query", "project-name-query", "display-name-query", "user-type-query").Last().Flag {
	case "project-id-query":
		if x.projectIdQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_ProjectIdQuery{ProjectIdQuery: x.projectIdQueryFlag.UserGrantProjectIDQuery}
		}
	case "user-id-query":
		if x.userIdQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_UserIdQuery{UserIdQuery: x.userIdQueryFlag.UserGrantUserIDQuery}
		}
	case "with-granted-query":
		if x.withGrantedQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_WithGrantedQuery{WithGrantedQuery: x.withGrantedQueryFlag.UserGrantWithGrantedQuery}
		}
	case "role-key-query":
		if x.roleKeyQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_RoleKeyQuery{RoleKeyQuery: x.roleKeyQueryFlag.UserGrantRoleKeyQuery}
		}
	case "project-grant-id-query":
		if x.projectGrantIdQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_ProjectGrantIdQuery{ProjectGrantIdQuery: x.projectGrantIdQueryFlag.UserGrantProjectGrantIDQuery}
		}
	case "user-name-query":
		if x.userNameQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_UserNameQuery{UserNameQuery: x.userNameQueryFlag.UserGrantUserNameQuery}
		}
	case "first-name-query":
		if x.firstNameQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_FirstNameQuery{FirstNameQuery: x.firstNameQueryFlag.UserGrantFirstNameQuery}
		}
	case "last-name-query":
		if x.lastNameQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_LastNameQuery{LastNameQuery: x.lastNameQueryFlag.UserGrantLastNameQuery}
		}
	case "email-query":
		if x.emailQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_EmailQuery{EmailQuery: x.emailQueryFlag.UserGrantEmailQuery}
		}
	case "org-name-query":
		if x.orgNameQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_OrgNameQuery{OrgNameQuery: x.orgNameQueryFlag.UserGrantOrgNameQuery}
		}
	case "org-domain-query":
		if x.orgDomainQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_OrgDomainQuery{OrgDomainQuery: x.orgDomainQueryFlag.UserGrantOrgDomainQuery}
		}
	case "project-name-query":
		if x.projectNameQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_ProjectNameQuery{ProjectNameQuery: x.projectNameQueryFlag.UserGrantProjectNameQuery}
		}
	case "display-name-query":
		if x.displayNameQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_DisplayNameQuery{DisplayNameQuery: x.displayNameQueryFlag.UserGrantDisplayNameQuery}
		}
	case "user-type-query":
		if x.userTypeQueryFlag.Changed() {
			x.changed = true
			x.UserGrantQuery.Query = &UserGrantQuery_UserTypeQuery{UserTypeQuery: x.userTypeQueryFlag.UserGrantUserTypeQuery}
		}
	}
}

func (x *UserGrantQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantRoleKeyQueryFlag struct {
	*UserGrantRoleKeyQuery

	changed bool
	set     *pflag.FlagSet

	roleKeyFlag *cli_client.StringParser
	methodFlag  *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantRoleKeyQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantRoleKeyQuery", pflag.ContinueOnError)

	x.roleKeyFlag = cli_client.NewStringParser(x.set, "role-key", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantRoleKeyQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.roleKeyFlag.Changed() {
		x.changed = true
		x.UserGrantRoleKeyQuery.RoleKey = *x.roleKeyFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantRoleKeyQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantRoleKeyQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantUserIDQueryFlag struct {
	*UserGrantUserIDQuery

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *UserGrantUserIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantUserIDQuery", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantUserIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UserGrantUserIDQuery.UserId = *x.userIdFlag.Value
	}
}

func (x *UserGrantUserIDQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantUserNameQueryFlag struct {
	*UserGrantUserNameQuery

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserGrantUserNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantUserNameQuery", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantUserNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.UserGrantUserNameQuery.UserName = *x.userNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserGrantUserNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserGrantUserNameQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantUserTypeQueryFlag struct {
	*UserGrantUserTypeQuery

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[Type]
}

func (x *UserGrantUserTypeQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantUserTypeQuery", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[Type](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantUserTypeQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.UserGrantUserTypeQuery.Type = *x.typeFlag.Value
	}
}

func (x *UserGrantUserTypeQueryFlag) Changed() bool {
	return x.changed
}

type UserGrantWithGrantedQueryFlag struct {
	*UserGrantWithGrantedQuery

	changed bool
	set     *pflag.FlagSet

	withGrantedFlag *cli_client.BoolParser
}

func (x *UserGrantWithGrantedQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrantWithGrantedQuery", pflag.ContinueOnError)

	x.withGrantedFlag = cli_client.NewBoolParser(x.set, "with-granted", "")
	parent.AddFlagSet(x.set)
}

func (x *UserGrantWithGrantedQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.withGrantedFlag.Changed() {
		x.changed = true
		x.UserGrantWithGrantedQuery.WithGranted = *x.withGrantedFlag.Value
	}
}

func (x *UserGrantWithGrantedQueryFlag) Changed() bool {
	return x.changed
}

type UserNameQueryFlag struct {
	*UserNameQuery

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *UserNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserNameQuery", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *UserNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.UserNameQuery.UserName = *x.userNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.UserNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *UserNameQueryFlag) Changed() bool {
	return x.changed
}

type WebAuthNKeyFlag struct {
	*WebAuthNKey

	changed bool
	set     *pflag.FlagSet

	publicKeyFlag *cli_client.BytesParser
}

func (x *WebAuthNKeyFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("WebAuthNKey", pflag.ContinueOnError)

	x.publicKeyFlag = cli_client.NewBytesParser(x.set, "public-key", "")
	parent.AddFlagSet(x.set)
}

func (x *WebAuthNKeyFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.publicKeyFlag.Changed() {
		x.changed = true
		x.WebAuthNKey.PublicKey = *x.publicKeyFlag.Value
	}
}

func (x *WebAuthNKeyFlag) Changed() bool {
	return x.changed
}

type WebAuthNTokenFlag struct {
	*WebAuthNToken

	changed bool
	set     *pflag.FlagSet

	idFlag    *cli_client.StringParser
	stateFlag *cli_client.EnumParser[AuthFactorState]
	nameFlag  *cli_client.StringParser
}

func (x *WebAuthNTokenFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("WebAuthNToken", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[AuthFactorState](x.set, "state", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	parent.AddFlagSet(x.set)
}

func (x *WebAuthNTokenFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.WebAuthNToken.Id = *x.idFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.WebAuthNToken.State = *x.stateFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.WebAuthNToken.Name = *x.nameFlag.Value
	}
}

func (x *WebAuthNTokenFlag) Changed() bool {
	return x.changed
}

type WebAuthNVerificationFlag struct {
	*WebAuthNVerification

	changed bool
	set     *pflag.FlagSet

	publicKeyCredentialFlag *cli_client.BytesParser
	tokenNameFlag           *cli_client.StringParser
}

func (x *WebAuthNVerificationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("WebAuthNVerification", pflag.ContinueOnError)

	x.publicKeyCredentialFlag = cli_client.NewBytesParser(x.set, "public-key-credential", "")
	x.tokenNameFlag = cli_client.NewStringParser(x.set, "token-name", "")
	parent.AddFlagSet(x.set)
}

func (x *WebAuthNVerificationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.publicKeyCredentialFlag.Changed() {
		x.changed = true
		x.WebAuthNVerification.PublicKeyCredential = *x.publicKeyCredentialFlag.Value
	}
	if x.tokenNameFlag.Changed() {
		x.changed = true
		x.WebAuthNVerification.TokenName = *x.tokenNameFlag.Value
	}
}

func (x *WebAuthNVerificationFlag) Changed() bool {
	return x.changed
}
