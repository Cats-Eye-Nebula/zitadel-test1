// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package action

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	message "github.com/zitadel/zitadel/pkg/grpc/message"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type ActionFlag struct {
	*Action

	changed bool
	set     *pflag.FlagSet

	idFlag            *cli_client.StringParser
	detailsFlag       *object.ObjectDetailsFlag
	stateFlag         *cli_client.EnumParser[ActionState]
	nameFlag          *cli_client.StringParser
	scriptFlag        *cli_client.StringParser
	timeoutFlag       *cli_client.DurationParser
	allowedToFailFlag *cli_client.BoolParser
}

func (x *ActionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Action", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[ActionState](x.set, "state", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.scriptFlag = cli_client.NewStringParser(x.set, "script", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.allowedToFailFlag = cli_client.NewBoolParser(x.set, "allowed-to-fail", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ActionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.Action.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Action.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.Action.State = *x.stateFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.Action.Name = *x.nameFlag.Value
	}
	if x.scriptFlag.Changed() {
		x.changed = true
		x.Action.Script = *x.scriptFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.Action.Timeout = x.timeoutFlag.Value
	}
	if x.allowedToFailFlag.Changed() {
		x.changed = true
		x.Action.AllowedToFail = *x.allowedToFailFlag.Value
	}
}

func (x *ActionFlag) Changed() bool {
	return x.changed
}

type ActionIDQueryFlag struct {
	*ActionIDQuery

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *ActionIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActionIDQuery", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *ActionIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.ActionIDQuery.Id = *x.idFlag.Value
	}
}

func (x *ActionIDQueryFlag) Changed() bool {
	return x.changed
}

type ActionNameQueryFlag struct {
	*ActionNameQuery

	changed bool
	set     *pflag.FlagSet

	nameFlag   *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *ActionNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActionNameQuery", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *ActionNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.ActionNameQuery.Name = *x.nameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.ActionNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *ActionNameQueryFlag) Changed() bool {
	return x.changed
}

type ActionStateQueryFlag struct {
	*ActionStateQuery

	changed bool
	set     *pflag.FlagSet

	stateFlag *cli_client.EnumParser[ActionState]
}

func (x *ActionStateQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActionStateQuery", pflag.ContinueOnError)

	x.stateFlag = cli_client.NewEnumParser[ActionState](x.set, "state", "")
	parent.AddFlagSet(x.set)
}

func (x *ActionStateQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.ActionStateQuery.State = *x.stateFlag.Value
	}
}

func (x *ActionStateQueryFlag) Changed() bool {
	return x.changed
}

type FlowFlag struct {
	*Flow

	changed bool
	set     *pflag.FlagSet

	typeFlag           *FlowTypeFlag
	detailsFlag        *object.ObjectDetailsFlag
	stateFlag          *cli_client.EnumParser[FlowState]
	triggerActionsFlag []*TriggerActionFlag
}

func (x *FlowFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Flow", pflag.ContinueOnError)

	x.stateFlag = cli_client.NewEnumParser[FlowState](x.set, "state", "")
	x.triggerActionsFlag = []*TriggerActionFlag{}
	x.typeFlag = &FlowTypeFlag{FlowType: new(FlowType)}
	x.typeFlag.AddFlags(x.set)
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *FlowFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "type", "details", "trigger-actions")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("type"); flagIdx != nil {
		x.typeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("trigger-actions") {
		x.triggerActionsFlag = append(x.triggerActionsFlag, &TriggerActionFlag{TriggerAction: new(TriggerAction)})
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].AddFlags(x.set)
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.Flow.Type = x.typeFlag.FlowType
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Flow.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.Flow.State = *x.stateFlag.Value
	}
	if len(x.triggerActionsFlag) > 0 {
		x.changed = true
		x.TriggerActions = make([]*TriggerAction, len(x.triggerActionsFlag))
		for i, value := range x.triggerActionsFlag {
			x.Flow.TriggerActions[i] = value.TriggerAction
		}
	}

}

func (x *FlowFlag) Changed() bool {
	return x.changed
}

type FlowTypeFlag struct {
	*FlowType

	changed bool
	set     *pflag.FlagSet

	idFlag   *cli_client.StringParser
	nameFlag *message.LocalizedMessageFlag
}

func (x *FlowTypeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FlowType", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = &message.LocalizedMessageFlag{LocalizedMessage: new(message.LocalizedMessage)}
	x.nameFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *FlowTypeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "name")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("name"); flagIdx != nil {
		x.nameFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.FlowType.Id = *x.idFlag.Value
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.FlowType.Name = x.nameFlag.LocalizedMessage
	}

}

func (x *FlowTypeFlag) Changed() bool {
	return x.changed
}

type TriggerActionFlag struct {
	*TriggerAction

	changed bool
	set     *pflag.FlagSet

	triggerTypeFlag *TriggerTypeFlag
	actionsFlag     []*ActionFlag
}

func (x *TriggerActionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("TriggerAction", pflag.ContinueOnError)

	x.actionsFlag = []*ActionFlag{}
	x.triggerTypeFlag = &TriggerTypeFlag{TriggerType: new(TriggerType)}
	x.triggerTypeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *TriggerActionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "trigger-type", "actions")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("trigger-type"); flagIdx != nil {
		x.triggerTypeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("actions") {
		x.actionsFlag = append(x.actionsFlag, &ActionFlag{Action: new(Action)})
		x.actionsFlag[len(x.actionsFlag)-1].AddFlags(x.set)
		x.actionsFlag[len(x.actionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.triggerTypeFlag.Changed() {
		x.changed = true
		x.TriggerAction.TriggerType = x.triggerTypeFlag.TriggerType
	}

	if len(x.actionsFlag) > 0 {
		x.changed = true
		x.Actions = make([]*Action, len(x.actionsFlag))
		for i, value := range x.actionsFlag {
			x.TriggerAction.Actions[i] = value.Action
		}
	}

}

func (x *TriggerActionFlag) Changed() bool {
	return x.changed
}

type TriggerTypeFlag struct {
	*TriggerType

	changed bool
	set     *pflag.FlagSet

	idFlag   *cli_client.StringParser
	nameFlag *message.LocalizedMessageFlag
}

func (x *TriggerTypeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("TriggerType", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = &message.LocalizedMessageFlag{LocalizedMessage: new(message.LocalizedMessage)}
	x.nameFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *TriggerTypeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "name")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("name"); flagIdx != nil {
		x.nameFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.TriggerType.Id = *x.idFlag.Value
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.TriggerType.Name = x.nameFlag.LocalizedMessage
	}

}

func (x *TriggerTypeFlag) Changed() bool {
	return x.changed
}
