// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package change

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	message "github.com/zitadel/zitadel/pkg/grpc/message"
	os "os"
)

type ChangeFlag struct {
	*Change

	changed bool
	set     *pflag.FlagSet

	changeDateFlag               *cli_client.TimestampParser
	eventTypeFlag                *message.LocalizedMessageFlag
	sequenceFlag                 *cli_client.Uint64Parser
	editorIdFlag                 *cli_client.StringParser
	editorDisplayNameFlag        *cli_client.StringParser
	resourceOwnerIdFlag          *cli_client.StringParser
	editorPreferredLoginNameFlag *cli_client.StringParser
	editorAvatarUrlFlag          *cli_client.StringParser
}

func (x *ChangeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Change", pflag.ContinueOnError)

	x.changeDateFlag = cli_client.NewTimestampParser(x.set, "change-date", "")
	x.sequenceFlag = cli_client.NewUint64Parser(x.set, "sequence", "")
	x.editorIdFlag = cli_client.NewStringParser(x.set, "editor-id", "")
	x.editorDisplayNameFlag = cli_client.NewStringParser(x.set, "editor-display-name", "")
	x.resourceOwnerIdFlag = cli_client.NewStringParser(x.set, "resource-owner-id", "")
	x.editorPreferredLoginNameFlag = cli_client.NewStringParser(x.set, "editor-preferred-login-name", "")
	x.editorAvatarUrlFlag = cli_client.NewStringParser(x.set, "editor-avatar-url", "")
	x.eventTypeFlag = &message.LocalizedMessageFlag{LocalizedMessage: new(message.LocalizedMessage)}
	x.eventTypeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ChangeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "event-type")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("event-type"); flagIdx != nil {
		x.eventTypeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.changeDateFlag.Changed() {
		x.changed = true
		x.Change.ChangeDate = x.changeDateFlag.Value
	}

	if x.eventTypeFlag.Changed() {
		x.changed = true
		x.Change.EventType = x.eventTypeFlag.LocalizedMessage
	}

	if x.sequenceFlag.Changed() {
		x.changed = true
		x.Change.Sequence = *x.sequenceFlag.Value
	}
	if x.editorIdFlag.Changed() {
		x.changed = true
		x.Change.EditorId = *x.editorIdFlag.Value
	}
	if x.editorDisplayNameFlag.Changed() {
		x.changed = true
		x.Change.EditorDisplayName = *x.editorDisplayNameFlag.Value
	}
	if x.resourceOwnerIdFlag.Changed() {
		x.changed = true
		x.Change.ResourceOwnerId = *x.resourceOwnerIdFlag.Value
	}
	if x.editorPreferredLoginNameFlag.Changed() {
		x.changed = true
		x.Change.EditorPreferredLoginName = *x.editorPreferredLoginNameFlag.Value
	}
	if x.editorAvatarUrlFlag.Changed() {
		x.changed = true
		x.Change.EditorAvatarUrl = *x.editorAvatarUrlFlag.Value
	}
}

func (x *ChangeFlag) Changed() bool {
	return x.changed
}

type ChangeQueryFlag struct {
	*ChangeQuery

	changed bool
	set     *pflag.FlagSet

	sequenceFlag *cli_client.Uint64Parser
	limitFlag    *cli_client.Uint32Parser
	ascFlag      *cli_client.BoolParser
}

func (x *ChangeQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ChangeQuery", pflag.ContinueOnError)

	x.sequenceFlag = cli_client.NewUint64Parser(x.set, "sequence", "")
	x.limitFlag = cli_client.NewUint32Parser(x.set, "limit", "")
	x.ascFlag = cli_client.NewBoolParser(x.set, "asc", "")
	parent.AddFlagSet(x.set)
}

func (x *ChangeQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sequenceFlag.Changed() {
		x.changed = true
		x.ChangeQuery.Sequence = *x.sequenceFlag.Value
	}
	if x.limitFlag.Changed() {
		x.changed = true
		x.ChangeQuery.Limit = *x.limitFlag.Value
	}
	if x.ascFlag.Changed() {
		x.changed = true
		x.ChangeQuery.Asc = *x.ascFlag.Value
	}
}

func (x *ChangeQueryFlag) Changed() bool {
	return x.changed
}
