// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package quota

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type NotificationFlag struct {
	*Notification

	changed bool
	set     *pflag.FlagSet

	percentFlag *cli_client.Uint32Parser
	repeatFlag  *cli_client.BoolParser
	callUrlFlag *cli_client.StringParser
}

func (x *NotificationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Notification", pflag.ContinueOnError)

	x.percentFlag = cli_client.NewUint32Parser(x.set, "percent", "")
	x.repeatFlag = cli_client.NewBoolParser(x.set, "repeat", "")
	x.callUrlFlag = cli_client.NewStringParser(x.set, "call-url", "")
	parent.AddFlagSet(x.set)
}

func (x *NotificationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.percentFlag.Changed() {
		x.changed = true
		x.Notification.Percent = *x.percentFlag.Value
	}
	if x.repeatFlag.Changed() {
		x.changed = true
		x.Notification.Repeat = *x.repeatFlag.Value
	}
	if x.callUrlFlag.Changed() {
		x.changed = true
		x.Notification.CallUrl = *x.callUrlFlag.Value
	}
}

func (x *NotificationFlag) Changed() bool {
	return x.changed
}
