// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package object

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type DetailsFlag struct {
	*Details

	changed bool
	set     *pflag.FlagSet

	sequenceFlag      *cli_client.Uint64Parser
	changeDateFlag    *cli_client.TimestampParser
	resourceOwnerFlag *cli_client.StringParser
}

func (x *DetailsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Details", pflag.ContinueOnError)

	x.sequenceFlag = cli_client.NewUint64Parser(x.set, "sequence", "")
	x.changeDateFlag = cli_client.NewTimestampParser(x.set, "change-date", "")
	x.resourceOwnerFlag = cli_client.NewStringParser(x.set, "resource-owner", "")
	parent.AddFlagSet(x.set)
}

func (x *DetailsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sequenceFlag.Changed() {
		x.changed = true
		x.Details.Sequence = *x.sequenceFlag.Value
	}
	if x.changeDateFlag.Changed() {
		x.changed = true
		x.Details.ChangeDate = x.changeDateFlag.Value
	}
	if x.resourceOwnerFlag.Changed() {
		x.changed = true
		x.Details.ResourceOwner = *x.resourceOwnerFlag.Value
	}
}

func (x *DetailsFlag) Changed() bool {
	return x.changed
}

type ListDetailsFlag struct {
	*ListDetails

	changed bool
	set     *pflag.FlagSet

	totalResultFlag       *cli_client.Uint64Parser
	processedSequenceFlag *cli_client.Uint64Parser
	timestampFlag         *cli_client.TimestampParser
}

func (x *ListDetailsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListDetails", pflag.ContinueOnError)

	x.totalResultFlag = cli_client.NewUint64Parser(x.set, "total-result", "")
	x.processedSequenceFlag = cli_client.NewUint64Parser(x.set, "processed-sequence", "")
	x.timestampFlag = cli_client.NewTimestampParser(x.set, "timestamp", "")
	parent.AddFlagSet(x.set)
}

func (x *ListDetailsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.totalResultFlag.Changed() {
		x.changed = true
		x.ListDetails.TotalResult = *x.totalResultFlag.Value
	}
	if x.processedSequenceFlag.Changed() {
		x.changed = true
		x.ListDetails.ProcessedSequence = *x.processedSequenceFlag.Value
	}
	if x.timestampFlag.Changed() {
		x.changed = true
		x.ListDetails.Timestamp = x.timestampFlag.Value
	}
}

func (x *ListDetailsFlag) Changed() bool {
	return x.changed
}

type ListQueryFlag struct {
	*ListQuery

	changed bool
	set     *pflag.FlagSet

	offsetFlag *cli_client.Uint64Parser
	limitFlag  *cli_client.Uint32Parser
	ascFlag    *cli_client.BoolParser
}

func (x *ListQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListQuery", pflag.ContinueOnError)

	x.offsetFlag = cli_client.NewUint64Parser(x.set, "offset", "")
	x.limitFlag = cli_client.NewUint32Parser(x.set, "limit", "")
	x.ascFlag = cli_client.NewBoolParser(x.set, "asc", "")
	parent.AddFlagSet(x.set)
}

func (x *ListQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.offsetFlag.Changed() {
		x.changed = true
		x.ListQuery.Offset = *x.offsetFlag.Value
	}
	if x.limitFlag.Changed() {
		x.changed = true
		x.ListQuery.Limit = *x.limitFlag.Value
	}
	if x.ascFlag.Changed() {
		x.changed = true
		x.ListQuery.Asc = *x.ascFlag.Value
	}
}

func (x *ListQueryFlag) Changed() bool {
	return x.changed
}

type OrganisationFlag struct {
	*Organisation

	changed bool
	set     *pflag.FlagSet

	orgIdFlag     *cli_client.StringParser
	orgDomainFlag *cli_client.StringParser
}

func (x *OrganisationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Organisation", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.orgDomainFlag = cli_client.NewStringParser(x.set, "org-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *OrganisationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	switch cli_client.FieldIndexes(args, "org-id", "org-domain").Last().Flag {
	case "org-id":
		if x.orgIdFlag.Changed() {
			x.changed = true
			x.Organisation.Org = &Organisation_OrgId{OrgId: *x.orgIdFlag.Value}
		}
	case "org-domain":
		if x.orgDomainFlag.Changed() {
			x.changed = true
			x.Organisation.Org = &Organisation_OrgDomain{OrgDomain: *x.orgDomainFlag.Value}
		}
	}
}

func (x *OrganisationFlag) Changed() bool {
	return x.changed
}

type OrganizationFlag struct {
	*Organization

	changed bool
	set     *pflag.FlagSet

	orgIdFlag     *cli_client.StringParser
	orgDomainFlag *cli_client.StringParser
}

func (x *OrganizationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Organization", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.orgDomainFlag = cli_client.NewStringParser(x.set, "org-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *OrganizationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	switch cli_client.FieldIndexes(args, "org-id", "org-domain").Last().Flag {
	case "org-id":
		if x.orgIdFlag.Changed() {
			x.changed = true
			x.Organization.Org = &Organization_OrgId{OrgId: *x.orgIdFlag.Value}
		}
	case "org-domain":
		if x.orgDomainFlag.Changed() {
			x.changed = true
			x.Organization.Org = &Organization_OrgDomain{OrgDomain: *x.orgDomainFlag.Value}
		}
	}
}

func (x *OrganizationFlag) Changed() bool {
	return x.changed
}

type RequestContextFlag struct {
	*RequestContext

	changed bool
	set     *pflag.FlagSet

	orgIdFlag    *cli_client.StringParser
	instanceFlag *cli_client.BoolParser
}

func (x *RequestContextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestContext", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.instanceFlag = cli_client.NewBoolParser(x.set, "instance", "")
	parent.AddFlagSet(x.set)
}

func (x *RequestContextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	switch cli_client.FieldIndexes(args, "org-id", "instance").Last().Flag {
	case "org-id":
		if x.orgIdFlag.Changed() {
			x.changed = true
			x.RequestContext.ResourceOwner = &RequestContext_OrgId{OrgId: *x.orgIdFlag.Value}
		}
	case "instance":
		if x.instanceFlag.Changed() {
			x.changed = true
			x.RequestContext.ResourceOwner = &RequestContext_Instance{Instance: *x.instanceFlag.Value}
		}
	}
}

func (x *RequestContextFlag) Changed() bool {
	return x.changed
}
