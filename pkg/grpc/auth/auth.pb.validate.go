// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zitadel/auth.proto

package auth

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	user "github.com/zitadel/zitadel/pkg/grpc/user"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = user.Gender(0)
)

// Validate checks the field values on HealthzRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthzRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzRequestValidationError is the validation error returned by
// HealthzRequest.Validate if the designated constraints aren't met.
type HealthzRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzRequestValidationError) ErrorName() string { return "HealthzRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthzRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzRequestValidationError{}

// Validate checks the field values on HealthzResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HealthzResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzResponseValidationError is the validation error returned by
// HealthzResponse.Validate if the designated constraints aren't met.
type HealthzResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzResponseValidationError) ErrorName() string { return "HealthzResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthzResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzResponseValidationError{}

// Validate checks the field values on GetSupportedLanguagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSupportedLanguagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSupportedLanguagesRequestValidationError is the validation error returned
// by GetSupportedLanguagesRequest.Validate if the designated constraints
// aren't met.
type GetSupportedLanguagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesRequestValidationError) ErrorName() string {
	return "GetSupportedLanguagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesRequestValidationError{}

// Validate checks the field values on GetSupportedLanguagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSupportedLanguagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSupportedLanguagesResponseValidationError is the validation error
// returned by GetSupportedLanguagesResponse.Validate if the designated
// constraints aren't met.
type GetSupportedLanguagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesResponseValidationError) ErrorName() string {
	return "GetSupportedLanguagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesResponseValidationError{}

// Validate checks the field values on GetMyUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMyUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyUserRequestValidationError is the validation error returned by
// GetMyUserRequest.Validate if the designated constraints aren't met.
type GetMyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyUserRequestValidationError) ErrorName() string { return "GetMyUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyUserRequestValidationError{}

// Validate checks the field values on GetMyUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMyUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastLogin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyUserResponseValidationError{
				field:  "LastLogin",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyUserResponseValidationError is the validation error returned by
// GetMyUserResponse.Validate if the designated constraints aren't met.
type GetMyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyUserResponseValidationError) ErrorName() string {
	return "GetMyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyUserResponseValidationError{}

// Validate checks the field values on RemoveMyUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveMyUserRequestValidationError is the validation error returned by
// RemoveMyUserRequest.Validate if the designated constraints aren't met.
type RemoveMyUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyUserRequestValidationError) ErrorName() string {
	return "RemoveMyUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyUserRequestValidationError{}

// Validate checks the field values on RemoveMyUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyUserResponseValidationError is the validation error returned by
// RemoveMyUserResponse.Validate if the designated constraints aren't met.
type RemoveMyUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyUserResponseValidationError) ErrorName() string {
	return "RemoveMyUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyUserResponseValidationError{}

// Validate checks the field values on ListMyUserChangesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyUserChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyUserChangesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListMyUserChangesRequestValidationError is the validation error returned by
// ListMyUserChangesRequest.Validate if the designated constraints aren't met.
type ListMyUserChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyUserChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyUserChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyUserChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyUserChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyUserChangesRequestValidationError) ErrorName() string {
	return "ListMyUserChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyUserChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyUserChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyUserChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyUserChangesRequestValidationError{}

// Validate checks the field values on ListMyUserChangesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyUserChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyUserChangesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyUserChangesResponseValidationError is the validation error returned by
// ListMyUserChangesResponse.Validate if the designated constraints aren't met.
type ListMyUserChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyUserChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyUserChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyUserChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyUserChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyUserChangesResponseValidationError) ErrorName() string {
	return "ListMyUserChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyUserChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyUserChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyUserChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyUserChangesResponseValidationError{}

// Validate checks the field values on ListMyUserSessionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyUserSessionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyUserSessionsRequestValidationError is the validation error returned by
// ListMyUserSessionsRequest.Validate if the designated constraints aren't met.
type ListMyUserSessionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyUserSessionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyUserSessionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyUserSessionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyUserSessionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyUserSessionsRequestValidationError) ErrorName() string {
	return "ListMyUserSessionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyUserSessionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyUserSessionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyUserSessionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyUserSessionsRequestValidationError{}

// Validate checks the field values on ListMyUserSessionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyUserSessionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyUserSessionsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyUserSessionsResponseValidationError is the validation error returned
// by ListMyUserSessionsResponse.Validate if the designated constraints aren't met.
type ListMyUserSessionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyUserSessionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyUserSessionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyUserSessionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyUserSessionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyUserSessionsResponseValidationError) ErrorName() string {
	return "ListMyUserSessionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyUserSessionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyUserSessionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyUserSessionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyUserSessionsResponseValidationError{}

// Validate checks the field values on ListMyMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyMetadataRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyMetadataRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyMetadataRequestValidationError is the validation error returned by
// ListMyMetadataRequest.Validate if the designated constraints aren't met.
type ListMyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyMetadataRequestValidationError) ErrorName() string {
	return "ListMyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyMetadataRequestValidationError{}

// Validate checks the field values on ListMyMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyMetadataResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyMetadataResponseValidationError is the validation error returned by
// ListMyMetadataResponse.Validate if the designated constraints aren't met.
type ListMyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyMetadataResponseValidationError) ErrorName() string {
	return "ListMyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyMetadataResponseValidationError{}

// Validate checks the field values on GetMyMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return GetMyMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetMyMetadataRequestValidationError is the validation error returned by
// GetMyMetadataRequest.Validate if the designated constraints aren't met.
type GetMyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyMetadataRequestValidationError) ErrorName() string {
	return "GetMyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyMetadataRequestValidationError{}

// Validate checks the field values on GetMyMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyMetadataResponseValidationError is the validation error returned by
// GetMyMetadataResponse.Validate if the designated constraints aren't met.
type GetMyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyMetadataResponseValidationError) ErrorName() string {
	return "GetMyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyMetadataResponseValidationError{}

// Validate checks the field values on SetMyMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMyMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return SetMyMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := len(m.GetValue()); l < 1 || l > 500000 {
		return SetMyMetadataRequestValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 500000 bytes, inclusive",
		}
	}

	return nil
}

// SetMyMetadataRequestValidationError is the validation error returned by
// SetMyMetadataRequest.Validate if the designated constraints aren't met.
type SetMyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMyMetadataRequestValidationError) ErrorName() string {
	return "SetMyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMyMetadataRequestValidationError{}

// Validate checks the field values on SetMyMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMyMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMyMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetMyMetadataResponseValidationError is the validation error returned by
// SetMyMetadataResponse.Validate if the designated constraints aren't met.
type SetMyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMyMetadataResponseValidationError) ErrorName() string {
	return "SetMyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMyMetadataResponseValidationError{}

// Validate checks the field values on BulkSetMyMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkSetMyMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkSetMyMetadataRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BulkSetMyMetadataRequestValidationError is the validation error returned by
// BulkSetMyMetadataRequest.Validate if the designated constraints aren't met.
type BulkSetMyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetMyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetMyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetMyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetMyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetMyMetadataRequestValidationError) ErrorName() string {
	return "BulkSetMyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetMyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetMyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetMyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetMyMetadataRequestValidationError{}

// Validate checks the field values on BulkSetMyMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkSetMyMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkSetMyMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkSetMyMetadataResponseValidationError is the validation error returned by
// BulkSetMyMetadataResponse.Validate if the designated constraints aren't met.
type BulkSetMyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetMyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetMyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetMyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetMyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetMyMetadataResponseValidationError) ErrorName() string {
	return "BulkSetMyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetMyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetMyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetMyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetMyMetadataResponseValidationError{}

// Validate checks the field values on RemoveMyMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return RemoveMyMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveMyMetadataRequestValidationError is the validation error returned by
// RemoveMyMetadataRequest.Validate if the designated constraints aren't met.
type RemoveMyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyMetadataRequestValidationError) ErrorName() string {
	return "RemoveMyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyMetadataRequestValidationError{}

// Validate checks the field values on RemoveMyMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyMetadataResponseValidationError is the validation error returned by
// RemoveMyMetadataResponse.Validate if the designated constraints aren't met.
type RemoveMyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyMetadataResponseValidationError) ErrorName() string {
	return "RemoveMyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyMetadataResponseValidationError{}

// Validate checks the field values on BulkRemoveMyMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveMyMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 200 {
			return BulkRemoveMyMetadataRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 200 runes, inclusive",
			}
		}

	}

	return nil
}

// BulkRemoveMyMetadataRequestValidationError is the validation error returned
// by BulkRemoveMyMetadataRequest.Validate if the designated constraints
// aren't met.
type BulkRemoveMyMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveMyMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveMyMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveMyMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveMyMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveMyMetadataRequestValidationError) ErrorName() string {
	return "BulkRemoveMyMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveMyMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveMyMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveMyMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveMyMetadataRequestValidationError{}

// Validate checks the field values on BulkRemoveMyMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveMyMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkRemoveMyMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkRemoveMyMetadataResponseValidationError is the validation error returned
// by BulkRemoveMyMetadataResponse.Validate if the designated constraints
// aren't met.
type BulkRemoveMyMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveMyMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveMyMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveMyMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveMyMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveMyMetadataResponseValidationError) ErrorName() string {
	return "BulkRemoveMyMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveMyMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveMyMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveMyMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveMyMetadataResponseValidationError{}

// Validate checks the field values on ListMyRefreshTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyRefreshTokensRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyRefreshTokensRequestValidationError is the validation error returned
// by ListMyRefreshTokensRequest.Validate if the designated constraints aren't met.
type ListMyRefreshTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyRefreshTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyRefreshTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyRefreshTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyRefreshTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyRefreshTokensRequestValidationError) ErrorName() string {
	return "ListMyRefreshTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyRefreshTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyRefreshTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyRefreshTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyRefreshTokensRequestValidationError{}

// Validate checks the field values on ListMyRefreshTokensResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyRefreshTokensResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyRefreshTokensResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyRefreshTokensResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyRefreshTokensResponseValidationError is the validation error returned
// by ListMyRefreshTokensResponse.Validate if the designated constraints
// aren't met.
type ListMyRefreshTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyRefreshTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyRefreshTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyRefreshTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyRefreshTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyRefreshTokensResponseValidationError) ErrorName() string {
	return "ListMyRefreshTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyRefreshTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyRefreshTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyRefreshTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyRefreshTokensResponseValidationError{}

// Validate checks the field values on RevokeMyRefreshTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RevokeMyRefreshTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return RevokeMyRefreshTokenRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RevokeMyRefreshTokenRequestValidationError is the validation error returned
// by RevokeMyRefreshTokenRequest.Validate if the designated constraints
// aren't met.
type RevokeMyRefreshTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeMyRefreshTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeMyRefreshTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeMyRefreshTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeMyRefreshTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeMyRefreshTokenRequestValidationError) ErrorName() string {
	return "RevokeMyRefreshTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeMyRefreshTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeMyRefreshTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeMyRefreshTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeMyRefreshTokenRequestValidationError{}

// Validate checks the field values on RevokeMyRefreshTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RevokeMyRefreshTokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RevokeMyRefreshTokenResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RevokeMyRefreshTokenResponseValidationError is the validation error returned
// by RevokeMyRefreshTokenResponse.Validate if the designated constraints
// aren't met.
type RevokeMyRefreshTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeMyRefreshTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeMyRefreshTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeMyRefreshTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeMyRefreshTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeMyRefreshTokenResponseValidationError) ErrorName() string {
	return "RevokeMyRefreshTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeMyRefreshTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeMyRefreshTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeMyRefreshTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeMyRefreshTokenResponseValidationError{}

// Validate checks the field values on RevokeAllMyRefreshTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RevokeAllMyRefreshTokensRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RevokeAllMyRefreshTokensRequestValidationError is the validation error
// returned by RevokeAllMyRefreshTokensRequest.Validate if the designated
// constraints aren't met.
type RevokeAllMyRefreshTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAllMyRefreshTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAllMyRefreshTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAllMyRefreshTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAllMyRefreshTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAllMyRefreshTokensRequestValidationError) ErrorName() string {
	return "RevokeAllMyRefreshTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAllMyRefreshTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAllMyRefreshTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAllMyRefreshTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAllMyRefreshTokensRequestValidationError{}

// Validate checks the field values on RevokeAllMyRefreshTokensResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RevokeAllMyRefreshTokensResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RevokeAllMyRefreshTokensResponseValidationError is the validation error
// returned by RevokeAllMyRefreshTokensResponse.Validate if the designated
// constraints aren't met.
type RevokeAllMyRefreshTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeAllMyRefreshTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeAllMyRefreshTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeAllMyRefreshTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeAllMyRefreshTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeAllMyRefreshTokensResponseValidationError) ErrorName() string {
	return "RevokeAllMyRefreshTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeAllMyRefreshTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeAllMyRefreshTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeAllMyRefreshTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeAllMyRefreshTokensResponseValidationError{}

// Validate checks the field values on UpdateMyUserNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMyUserNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 1 || l > 200 {
		return UpdateMyUserNameRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateMyUserNameRequestValidationError is the validation error returned by
// UpdateMyUserNameRequest.Validate if the designated constraints aren't met.
type UpdateMyUserNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMyUserNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMyUserNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMyUserNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMyUserNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMyUserNameRequestValidationError) ErrorName() string {
	return "UpdateMyUserNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMyUserNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMyUserNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMyUserNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMyUserNameRequestValidationError{}

// Validate checks the field values on UpdateMyUserNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMyUserNameResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMyUserNameResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMyUserNameResponseValidationError is the validation error returned by
// UpdateMyUserNameResponse.Validate if the designated constraints aren't met.
type UpdateMyUserNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMyUserNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMyUserNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMyUserNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMyUserNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMyUserNameResponseValidationError) ErrorName() string {
	return "UpdateMyUserNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMyUserNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMyUserNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMyUserNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMyUserNameResponseValidationError{}

// Validate checks the field values on GetMyPasswordComplexityPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetMyPasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyPasswordComplexityPolicyRequestValidationError is the validation error
// returned by GetMyPasswordComplexityPolicyRequest.Validate if the designated
// constraints aren't met.
type GetMyPasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "GetMyPasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on GetMyPasswordComplexityPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetMyPasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyPasswordComplexityPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyPasswordComplexityPolicyResponseValidationError is the validation error
// returned by GetMyPasswordComplexityPolicyResponse.Validate if the
// designated constraints aren't met.
type GetMyPasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "GetMyPasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on UpdateMyPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMyPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetOldPassword()) < 1 {
		return UpdateMyPasswordRequestValidationError{
			field:  "OldPassword",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetOldPassword()) > 70 {
		return UpdateMyPasswordRequestValidationError{
			field:  "OldPassword",
			reason: "value length must be at most 70 bytes",
		}
	}

	if utf8.RuneCountInString(m.GetNewPassword()) < 1 {
		return UpdateMyPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be at least 1 runes",
		}
	}

	if len(m.GetNewPassword()) > 70 {
		return UpdateMyPasswordRequestValidationError{
			field:  "NewPassword",
			reason: "value length must be at most 70 bytes",
		}
	}

	return nil
}

// UpdateMyPasswordRequestValidationError is the validation error returned by
// UpdateMyPasswordRequest.Validate if the designated constraints aren't met.
type UpdateMyPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMyPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMyPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMyPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMyPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMyPasswordRequestValidationError) ErrorName() string {
	return "UpdateMyPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMyPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMyPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMyPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMyPasswordRequestValidationError{}

// Validate checks the field values on UpdateMyPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMyPasswordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMyPasswordResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMyPasswordResponseValidationError is the validation error returned by
// UpdateMyPasswordResponse.Validate if the designated constraints aren't met.
type UpdateMyPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMyPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMyPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMyPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMyPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMyPasswordResponseValidationError) ErrorName() string {
	return "UpdateMyPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMyPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMyPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMyPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMyPasswordResponseValidationError{}

// Validate checks the field values on GetMyProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyProfileRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyProfileRequestValidationError is the validation error returned by
// GetMyProfileRequest.Validate if the designated constraints aren't met.
type GetMyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyProfileRequestValidationError) ErrorName() string {
	return "GetMyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyProfileRequestValidationError{}

// Validate checks the field values on GetMyProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyProfileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyProfileResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyProfileResponseValidationError is the validation error returned by
// GetMyProfileResponse.Validate if the designated constraints aren't met.
type GetMyProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyProfileResponseValidationError) ErrorName() string {
	return "GetMyProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyProfileResponseValidationError{}

// Validate checks the field values on UpdateMyProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMyProfileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 200 {
		return UpdateMyProfileRequestValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 200 {
		return UpdateMyProfileRequestValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetNickName()) > 200 {
		return UpdateMyProfileRequestValidationError{
			field:  "NickName",
			reason: "value length must be at most 200 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 200 {
		return UpdateMyProfileRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return UpdateMyProfileRequestValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	// no validation rules for Gender

	return nil
}

// UpdateMyProfileRequestValidationError is the validation error returned by
// UpdateMyProfileRequest.Validate if the designated constraints aren't met.
type UpdateMyProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMyProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMyProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMyProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMyProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMyProfileRequestValidationError) ErrorName() string {
	return "UpdateMyProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMyProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMyProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMyProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMyProfileRequestValidationError{}

// Validate checks the field values on UpdateMyProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMyProfileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMyProfileResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMyProfileResponseValidationError is the validation error returned by
// UpdateMyProfileResponse.Validate if the designated constraints aren't met.
type UpdateMyProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMyProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMyProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMyProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMyProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMyProfileResponseValidationError) ErrorName() string {
	return "UpdateMyProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMyProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMyProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMyProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMyProfileResponseValidationError{}

// Validate checks the field values on GetMyEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMyEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyEmailRequestValidationError is the validation error returned by
// GetMyEmailRequest.Validate if the designated constraints aren't met.
type GetMyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyEmailRequestValidationError) ErrorName() string {
	return "GetMyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyEmailRequestValidationError{}

// Validate checks the field values on GetMyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyEmailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyEmailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyEmailResponseValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyEmailResponseValidationError is the validation error returned by
// GetMyEmailResponse.Validate if the designated constraints aren't met.
type GetMyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyEmailResponseValidationError) ErrorName() string {
	return "GetMyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyEmailResponseValidationError{}

// Validate checks the field values on SetMyEmailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetMyEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return SetMyEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	return nil
}

func (m *SetMyEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetMyEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetMyEmailRequestValidationError is the validation error returned by
// SetMyEmailRequest.Validate if the designated constraints aren't met.
type SetMyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMyEmailRequestValidationError) ErrorName() string {
	return "SetMyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMyEmailRequestValidationError{}

// Validate checks the field values on SetMyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMyEmailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMyEmailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetMyEmailResponseValidationError is the validation error returned by
// SetMyEmailResponse.Validate if the designated constraints aren't met.
type SetMyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMyEmailResponseValidationError) ErrorName() string {
	return "SetMyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMyEmailResponseValidationError{}

// Validate checks the field values on VerifyMyEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 200 {
		return VerifyMyEmailRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// VerifyMyEmailRequestValidationError is the validation error returned by
// VerifyMyEmailRequest.Validate if the designated constraints aren't met.
type VerifyMyEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyEmailRequestValidationError) ErrorName() string {
	return "VerifyMyEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyEmailRequestValidationError{}

// Validate checks the field values on VerifyMyEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyEmailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyEmailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyEmailResponseValidationError is the validation error returned by
// VerifyMyEmailResponse.Validate if the designated constraints aren't met.
type VerifyMyEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyEmailResponseValidationError) ErrorName() string {
	return "VerifyMyEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyEmailResponseValidationError{}

// Validate checks the field values on ResendMyEmailVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendMyEmailVerificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResendMyEmailVerificationRequestValidationError is the validation error
// returned by ResendMyEmailVerificationRequest.Validate if the designated
// constraints aren't met.
type ResendMyEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendMyEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendMyEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendMyEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendMyEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendMyEmailVerificationRequestValidationError) ErrorName() string {
	return "ResendMyEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendMyEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendMyEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendMyEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendMyEmailVerificationRequestValidationError{}

// Validate checks the field values on ResendMyEmailVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendMyEmailVerificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendMyEmailVerificationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResendMyEmailVerificationResponseValidationError is the validation error
// returned by ResendMyEmailVerificationResponse.Validate if the designated
// constraints aren't met.
type ResendMyEmailVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendMyEmailVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendMyEmailVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendMyEmailVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendMyEmailVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendMyEmailVerificationResponseValidationError) ErrorName() string {
	return "ResendMyEmailVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendMyEmailVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendMyEmailVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendMyEmailVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendMyEmailVerificationResponseValidationError{}

// Validate checks the field values on GetMyPhoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMyPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyPhoneRequestValidationError is the validation error returned by
// GetMyPhoneRequest.Validate if the designated constraints aren't met.
type GetMyPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPhoneRequestValidationError) ErrorName() string {
	return "GetMyPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPhoneRequestValidationError{}

// Validate checks the field values on GetMyPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyPhoneResponseValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyPhoneResponseValidationError is the validation error returned by
// GetMyPhoneResponse.Validate if the designated constraints aren't met.
type GetMyPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPhoneResponseValidationError) ErrorName() string {
	return "GetMyPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPhoneResponseValidationError{}

// Validate checks the field values on SetMyPhoneRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetMyPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 50 {
		return SetMyPhoneRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetPhone(), "+") {
		return SetMyPhoneRequestValidationError{
			field:  "Phone",
			reason: "value does not have prefix \"+\"",
		}
	}

	return nil
}

// SetMyPhoneRequestValidationError is the validation error returned by
// SetMyPhoneRequest.Validate if the designated constraints aren't met.
type SetMyPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMyPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMyPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMyPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMyPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMyPhoneRequestValidationError) ErrorName() string {
	return "SetMyPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetMyPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMyPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMyPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMyPhoneRequestValidationError{}

// Validate checks the field values on SetMyPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetMyPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetMyPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetMyPhoneResponseValidationError is the validation error returned by
// SetMyPhoneResponse.Validate if the designated constraints aren't met.
type SetMyPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetMyPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetMyPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetMyPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetMyPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetMyPhoneResponseValidationError) ErrorName() string {
	return "SetMyPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetMyPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetMyPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetMyPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetMyPhoneResponseValidationError{}

// Validate checks the field values on VerifyMyPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 200 {
		return VerifyMyPhoneRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// VerifyMyPhoneRequestValidationError is the validation error returned by
// VerifyMyPhoneRequest.Validate if the designated constraints aren't met.
type VerifyMyPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyPhoneRequestValidationError) ErrorName() string {
	return "VerifyMyPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyPhoneRequestValidationError{}

// Validate checks the field values on VerifyMyPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyPhoneResponseValidationError is the validation error returned by
// VerifyMyPhoneResponse.Validate if the designated constraints aren't met.
type VerifyMyPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyPhoneResponseValidationError) ErrorName() string {
	return "VerifyMyPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyPhoneResponseValidationError{}

// Validate checks the field values on ResendMyPhoneVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendMyPhoneVerificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResendMyPhoneVerificationRequestValidationError is the validation error
// returned by ResendMyPhoneVerificationRequest.Validate if the designated
// constraints aren't met.
type ResendMyPhoneVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendMyPhoneVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendMyPhoneVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendMyPhoneVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendMyPhoneVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendMyPhoneVerificationRequestValidationError) ErrorName() string {
	return "ResendMyPhoneVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendMyPhoneVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendMyPhoneVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendMyPhoneVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendMyPhoneVerificationRequestValidationError{}

// Validate checks the field values on ResendMyPhoneVerificationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendMyPhoneVerificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendMyPhoneVerificationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResendMyPhoneVerificationResponseValidationError is the validation error
// returned by ResendMyPhoneVerificationResponse.Validate if the designated
// constraints aren't met.
type ResendMyPhoneVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendMyPhoneVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendMyPhoneVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendMyPhoneVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendMyPhoneVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendMyPhoneVerificationResponseValidationError) ErrorName() string {
	return "ResendMyPhoneVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendMyPhoneVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendMyPhoneVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendMyPhoneVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendMyPhoneVerificationResponseValidationError{}

// Validate checks the field values on RemoveMyPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveMyPhoneRequestValidationError is the validation error returned by
// RemoveMyPhoneRequest.Validate if the designated constraints aren't met.
type RemoveMyPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyPhoneRequestValidationError) ErrorName() string {
	return "RemoveMyPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyPhoneRequestValidationError{}

// Validate checks the field values on RemoveMyPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyPhoneResponseValidationError is the validation error returned by
// RemoveMyPhoneResponse.Validate if the designated constraints aren't met.
type RemoveMyPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyPhoneResponseValidationError) ErrorName() string {
	return "RemoveMyPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyPhoneResponseValidationError{}

// Validate checks the field values on RemoveMyAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyAvatarRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveMyAvatarRequestValidationError is the validation error returned by
// RemoveMyAvatarRequest.Validate if the designated constraints aren't met.
type RemoveMyAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyAvatarRequestValidationError) ErrorName() string {
	return "RemoveMyAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyAvatarRequestValidationError{}

// Validate checks the field values on RemoveMyAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyAvatarResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyAvatarResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyAvatarResponseValidationError is the validation error returned by
// RemoveMyAvatarResponse.Validate if the designated constraints aren't met.
type RemoveMyAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyAvatarResponseValidationError) ErrorName() string {
	return "RemoveMyAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyAvatarResponseValidationError{}

// Validate checks the field values on ListMyLinkedIDPsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyLinkedIDPsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyLinkedIDPsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListMyLinkedIDPsRequestValidationError is the validation error returned by
// ListMyLinkedIDPsRequest.Validate if the designated constraints aren't met.
type ListMyLinkedIDPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyLinkedIDPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyLinkedIDPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyLinkedIDPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyLinkedIDPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyLinkedIDPsRequestValidationError) ErrorName() string {
	return "ListMyLinkedIDPsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyLinkedIDPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyLinkedIDPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyLinkedIDPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyLinkedIDPsRequestValidationError{}

// Validate checks the field values on ListMyLinkedIDPsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyLinkedIDPsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyLinkedIDPsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyLinkedIDPsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyLinkedIDPsResponseValidationError is the validation error returned by
// ListMyLinkedIDPsResponse.Validate if the designated constraints aren't met.
type ListMyLinkedIDPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyLinkedIDPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyLinkedIDPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyLinkedIDPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyLinkedIDPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyLinkedIDPsResponseValidationError) ErrorName() string {
	return "ListMyLinkedIDPsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyLinkedIDPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyLinkedIDPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyLinkedIDPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyLinkedIDPsResponseValidationError{}

// Validate checks the field values on RemoveMyLinkedIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyLinkedIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return RemoveMyLinkedIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLinkedUserId()); l < 1 || l > 200 {
		return RemoveMyLinkedIDPRequestValidationError{
			field:  "LinkedUserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveMyLinkedIDPRequestValidationError is the validation error returned by
// RemoveMyLinkedIDPRequest.Validate if the designated constraints aren't met.
type RemoveMyLinkedIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyLinkedIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyLinkedIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyLinkedIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyLinkedIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyLinkedIDPRequestValidationError) ErrorName() string {
	return "RemoveMyLinkedIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyLinkedIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyLinkedIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyLinkedIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyLinkedIDPRequestValidationError{}

// Validate checks the field values on RemoveMyLinkedIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyLinkedIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyLinkedIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyLinkedIDPResponseValidationError is the validation error returned by
// RemoveMyLinkedIDPResponse.Validate if the designated constraints aren't met.
type RemoveMyLinkedIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyLinkedIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyLinkedIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyLinkedIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyLinkedIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyLinkedIDPResponseValidationError) ErrorName() string {
	return "RemoveMyLinkedIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyLinkedIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyLinkedIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyLinkedIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyLinkedIDPResponseValidationError{}

// Validate checks the field values on ListMyAuthFactorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyAuthFactorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyAuthFactorsRequestValidationError is the validation error returned by
// ListMyAuthFactorsRequest.Validate if the designated constraints aren't met.
type ListMyAuthFactorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyAuthFactorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyAuthFactorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyAuthFactorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyAuthFactorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyAuthFactorsRequestValidationError) ErrorName() string {
	return "ListMyAuthFactorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyAuthFactorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyAuthFactorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyAuthFactorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyAuthFactorsRequestValidationError{}

// Validate checks the field values on ListMyAuthFactorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyAuthFactorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyAuthFactorsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyAuthFactorsResponseValidationError is the validation error returned by
// ListMyAuthFactorsResponse.Validate if the designated constraints aren't met.
type ListMyAuthFactorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyAuthFactorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyAuthFactorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyAuthFactorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyAuthFactorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyAuthFactorsResponseValidationError) ErrorName() string {
	return "ListMyAuthFactorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyAuthFactorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyAuthFactorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyAuthFactorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyAuthFactorsResponseValidationError{}

// Validate checks the field values on AddMyAuthFactorU2FRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyAuthFactorU2FRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddMyAuthFactorU2FRequestValidationError is the validation error returned by
// AddMyAuthFactorU2FRequest.Validate if the designated constraints aren't met.
type AddMyAuthFactorU2FRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyAuthFactorU2FRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyAuthFactorU2FRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyAuthFactorU2FRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyAuthFactorU2FRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyAuthFactorU2FRequestValidationError) ErrorName() string {
	return "AddMyAuthFactorU2FRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyAuthFactorU2FRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyAuthFactorU2FRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyAuthFactorU2FRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyAuthFactorU2FRequestValidationError{}

// Validate checks the field values on AddMyAuthFactorU2FResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyAuthFactorU2FResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyAuthFactorU2FResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyAuthFactorU2FResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMyAuthFactorU2FResponseValidationError is the validation error returned
// by AddMyAuthFactorU2FResponse.Validate if the designated constraints aren't met.
type AddMyAuthFactorU2FResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyAuthFactorU2FResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyAuthFactorU2FResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyAuthFactorU2FResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyAuthFactorU2FResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyAuthFactorU2FResponseValidationError) ErrorName() string {
	return "AddMyAuthFactorU2FResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyAuthFactorU2FResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyAuthFactorU2FResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyAuthFactorU2FResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyAuthFactorU2FResponseValidationError{}

// Validate checks the field values on AddMyAuthFactorOTPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyAuthFactorOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddMyAuthFactorOTPRequestValidationError is the validation error returned by
// AddMyAuthFactorOTPRequest.Validate if the designated constraints aren't met.
type AddMyAuthFactorOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyAuthFactorOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyAuthFactorOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyAuthFactorOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyAuthFactorOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyAuthFactorOTPRequestValidationError) ErrorName() string {
	return "AddMyAuthFactorOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyAuthFactorOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyAuthFactorOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyAuthFactorOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyAuthFactorOTPRequestValidationError{}

// Validate checks the field values on AddMyAuthFactorOTPResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyAuthFactorOTPResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Url

	// no validation rules for Secret

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyAuthFactorOTPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMyAuthFactorOTPResponseValidationError is the validation error returned
// by AddMyAuthFactorOTPResponse.Validate if the designated constraints aren't met.
type AddMyAuthFactorOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyAuthFactorOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyAuthFactorOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyAuthFactorOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyAuthFactorOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyAuthFactorOTPResponseValidationError) ErrorName() string {
	return "AddMyAuthFactorOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyAuthFactorOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyAuthFactorOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyAuthFactorOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyAuthFactorOTPResponseValidationError{}

// Validate checks the field values on VerifyMyAuthFactorOTPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyAuthFactorOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 1 || l > 200 {
		return VerifyMyAuthFactorOTPRequestValidationError{
			field:  "Code",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// VerifyMyAuthFactorOTPRequestValidationError is the validation error returned
// by VerifyMyAuthFactorOTPRequest.Validate if the designated constraints
// aren't met.
type VerifyMyAuthFactorOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyAuthFactorOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyAuthFactorOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyAuthFactorOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyAuthFactorOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyAuthFactorOTPRequestValidationError) ErrorName() string {
	return "VerifyMyAuthFactorOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyAuthFactorOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyAuthFactorOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyAuthFactorOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyAuthFactorOTPRequestValidationError{}

// Validate checks the field values on VerifyMyAuthFactorOTPResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyAuthFactorOTPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyAuthFactorOTPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyAuthFactorOTPResponseValidationError is the validation error
// returned by VerifyMyAuthFactorOTPResponse.Validate if the designated
// constraints aren't met.
type VerifyMyAuthFactorOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyAuthFactorOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyAuthFactorOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyAuthFactorOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyAuthFactorOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyAuthFactorOTPResponseValidationError) ErrorName() string {
	return "VerifyMyAuthFactorOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyAuthFactorOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyAuthFactorOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyAuthFactorOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyAuthFactorOTPResponseValidationError{}

// Validate checks the field values on VerifyMyAuthFactorU2FRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyAuthFactorU2FRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVerification() == nil {
		return VerifyMyAuthFactorU2FRequestValidationError{
			field:  "Verification",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVerification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyAuthFactorU2FRequestValidationError{
				field:  "Verification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyAuthFactorU2FRequestValidationError is the validation error returned
// by VerifyMyAuthFactorU2FRequest.Validate if the designated constraints
// aren't met.
type VerifyMyAuthFactorU2FRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyAuthFactorU2FRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyAuthFactorU2FRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyAuthFactorU2FRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyAuthFactorU2FRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyAuthFactorU2FRequestValidationError) ErrorName() string {
	return "VerifyMyAuthFactorU2FRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyAuthFactorU2FRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyAuthFactorU2FRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyAuthFactorU2FRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyAuthFactorU2FRequestValidationError{}

// Validate checks the field values on VerifyMyAuthFactorU2FResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyAuthFactorU2FResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyAuthFactorU2FResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyAuthFactorU2FResponseValidationError is the validation error
// returned by VerifyMyAuthFactorU2FResponse.Validate if the designated
// constraints aren't met.
type VerifyMyAuthFactorU2FResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyAuthFactorU2FResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyAuthFactorU2FResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyAuthFactorU2FResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyAuthFactorU2FResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyAuthFactorU2FResponseValidationError) ErrorName() string {
	return "VerifyMyAuthFactorU2FResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyAuthFactorU2FResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyAuthFactorU2FResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyAuthFactorU2FResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyAuthFactorU2FResponseValidationError{}

// Validate checks the field values on RemoveMyAuthFactorOTPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyAuthFactorOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveMyAuthFactorOTPRequestValidationError is the validation error returned
// by RemoveMyAuthFactorOTPRequest.Validate if the designated constraints
// aren't met.
type RemoveMyAuthFactorOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyAuthFactorOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyAuthFactorOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyAuthFactorOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyAuthFactorOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyAuthFactorOTPRequestValidationError) ErrorName() string {
	return "RemoveMyAuthFactorOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyAuthFactorOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyAuthFactorOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyAuthFactorOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyAuthFactorOTPRequestValidationError{}

// Validate checks the field values on RemoveMyAuthFactorOTPResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyAuthFactorOTPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyAuthFactorOTPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyAuthFactorOTPResponseValidationError is the validation error
// returned by RemoveMyAuthFactorOTPResponse.Validate if the designated
// constraints aren't met.
type RemoveMyAuthFactorOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyAuthFactorOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyAuthFactorOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyAuthFactorOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyAuthFactorOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyAuthFactorOTPResponseValidationError) ErrorName() string {
	return "RemoveMyAuthFactorOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyAuthFactorOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyAuthFactorOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyAuthFactorOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyAuthFactorOTPResponseValidationError{}

// Validate checks the field values on RemoveMyAuthFactorU2FRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyAuthFactorU2FRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTokenId()); l < 1 || l > 200 {
		return RemoveMyAuthFactorU2FRequestValidationError{
			field:  "TokenId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveMyAuthFactorU2FRequestValidationError is the validation error returned
// by RemoveMyAuthFactorU2FRequest.Validate if the designated constraints
// aren't met.
type RemoveMyAuthFactorU2FRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyAuthFactorU2FRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyAuthFactorU2FRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyAuthFactorU2FRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyAuthFactorU2FRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyAuthFactorU2FRequestValidationError) ErrorName() string {
	return "RemoveMyAuthFactorU2FRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyAuthFactorU2FRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyAuthFactorU2FRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyAuthFactorU2FRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyAuthFactorU2FRequestValidationError{}

// Validate checks the field values on RemoveMyAuthFactorU2FResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyAuthFactorU2FResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyAuthFactorU2FResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyAuthFactorU2FResponseValidationError is the validation error
// returned by RemoveMyAuthFactorU2FResponse.Validate if the designated
// constraints aren't met.
type RemoveMyAuthFactorU2FResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyAuthFactorU2FResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyAuthFactorU2FResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyAuthFactorU2FResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyAuthFactorU2FResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyAuthFactorU2FResponseValidationError) ErrorName() string {
	return "RemoveMyAuthFactorU2FResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyAuthFactorU2FResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyAuthFactorU2FResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyAuthFactorU2FResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyAuthFactorU2FResponseValidationError{}

// Validate checks the field values on ListMyPasswordlessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyPasswordlessRequestValidationError is the validation error returned by
// ListMyPasswordlessRequest.Validate if the designated constraints aren't met.
type ListMyPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyPasswordlessRequestValidationError) ErrorName() string {
	return "ListMyPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyPasswordlessRequestValidationError{}

// Validate checks the field values on ListMyPasswordlessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyPasswordlessResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyPasswordlessResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyPasswordlessResponseValidationError is the validation error returned
// by ListMyPasswordlessResponse.Validate if the designated constraints aren't met.
type ListMyPasswordlessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyPasswordlessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyPasswordlessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyPasswordlessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyPasswordlessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyPasswordlessResponseValidationError) ErrorName() string {
	return "ListMyPasswordlessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyPasswordlessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyPasswordlessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyPasswordlessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyPasswordlessResponseValidationError{}

// Validate checks the field values on AddMyPasswordlessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddMyPasswordlessRequestValidationError is the validation error returned by
// AddMyPasswordlessRequest.Validate if the designated constraints aren't met.
type AddMyPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyPasswordlessRequestValidationError) ErrorName() string {
	return "AddMyPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyPasswordlessRequestValidationError{}

// Validate checks the field values on AddMyPasswordlessResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyPasswordlessResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyPasswordlessResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyPasswordlessResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMyPasswordlessResponseValidationError is the validation error returned by
// AddMyPasswordlessResponse.Validate if the designated constraints aren't met.
type AddMyPasswordlessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyPasswordlessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyPasswordlessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyPasswordlessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyPasswordlessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyPasswordlessResponseValidationError) ErrorName() string {
	return "AddMyPasswordlessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyPasswordlessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyPasswordlessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyPasswordlessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyPasswordlessResponseValidationError{}

// Validate checks the field values on AddMyPasswordlessLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyPasswordlessLinkRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// AddMyPasswordlessLinkRequestValidationError is the validation error returned
// by AddMyPasswordlessLinkRequest.Validate if the designated constraints
// aren't met.
type AddMyPasswordlessLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyPasswordlessLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyPasswordlessLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyPasswordlessLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyPasswordlessLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyPasswordlessLinkRequestValidationError) ErrorName() string {
	return "AddMyPasswordlessLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyPasswordlessLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyPasswordlessLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyPasswordlessLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyPasswordlessLinkRequestValidationError{}

// Validate checks the field values on AddMyPasswordlessLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMyPasswordlessLinkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyPasswordlessLinkResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Link

	if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMyPasswordlessLinkResponseValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMyPasswordlessLinkResponseValidationError is the validation error
// returned by AddMyPasswordlessLinkResponse.Validate if the designated
// constraints aren't met.
type AddMyPasswordlessLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMyPasswordlessLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMyPasswordlessLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMyPasswordlessLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMyPasswordlessLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMyPasswordlessLinkResponseValidationError) ErrorName() string {
	return "AddMyPasswordlessLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMyPasswordlessLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMyPasswordlessLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMyPasswordlessLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMyPasswordlessLinkResponseValidationError{}

// Validate checks the field values on SendMyPasswordlessLinkRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMyPasswordlessLinkRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// SendMyPasswordlessLinkRequestValidationError is the validation error
// returned by SendMyPasswordlessLinkRequest.Validate if the designated
// constraints aren't met.
type SendMyPasswordlessLinkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMyPasswordlessLinkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMyPasswordlessLinkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMyPasswordlessLinkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMyPasswordlessLinkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMyPasswordlessLinkRequestValidationError) ErrorName() string {
	return "SendMyPasswordlessLinkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendMyPasswordlessLinkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMyPasswordlessLinkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMyPasswordlessLinkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMyPasswordlessLinkRequestValidationError{}

// Validate checks the field values on SendMyPasswordlessLinkResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SendMyPasswordlessLinkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMyPasswordlessLinkResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendMyPasswordlessLinkResponseValidationError is the validation error
// returned by SendMyPasswordlessLinkResponse.Validate if the designated
// constraints aren't met.
type SendMyPasswordlessLinkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMyPasswordlessLinkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMyPasswordlessLinkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMyPasswordlessLinkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMyPasswordlessLinkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMyPasswordlessLinkResponseValidationError) ErrorName() string {
	return "SendMyPasswordlessLinkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendMyPasswordlessLinkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMyPasswordlessLinkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMyPasswordlessLinkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMyPasswordlessLinkResponseValidationError{}

// Validate checks the field values on VerifyMyPasswordlessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetVerification() == nil {
		return VerifyMyPasswordlessRequestValidationError{
			field:  "Verification",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetVerification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyPasswordlessRequestValidationError{
				field:  "Verification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyPasswordlessRequestValidationError is the validation error returned
// by VerifyMyPasswordlessRequest.Validate if the designated constraints
// aren't met.
type VerifyMyPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyPasswordlessRequestValidationError) ErrorName() string {
	return "VerifyMyPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyPasswordlessRequestValidationError{}

// Validate checks the field values on VerifyMyPasswordlessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *VerifyMyPasswordlessResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VerifyMyPasswordlessResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// VerifyMyPasswordlessResponseValidationError is the validation error returned
// by VerifyMyPasswordlessResponse.Validate if the designated constraints
// aren't met.
type VerifyMyPasswordlessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyMyPasswordlessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyMyPasswordlessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyMyPasswordlessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyMyPasswordlessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyMyPasswordlessResponseValidationError) ErrorName() string {
	return "VerifyMyPasswordlessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyMyPasswordlessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyMyPasswordlessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyMyPasswordlessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyMyPasswordlessResponseValidationError{}

// Validate checks the field values on RemoveMyPasswordlessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetTokenId()); l < 1 || l > 200 {
		return RemoveMyPasswordlessRequestValidationError{
			field:  "TokenId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveMyPasswordlessRequestValidationError is the validation error returned
// by RemoveMyPasswordlessRequest.Validate if the designated constraints
// aren't met.
type RemoveMyPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyPasswordlessRequestValidationError) ErrorName() string {
	return "RemoveMyPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyPasswordlessRequestValidationError{}

// Validate checks the field values on RemoveMyPasswordlessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMyPasswordlessResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMyPasswordlessResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMyPasswordlessResponseValidationError is the validation error returned
// by RemoveMyPasswordlessResponse.Validate if the designated constraints
// aren't met.
type RemoveMyPasswordlessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMyPasswordlessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMyPasswordlessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMyPasswordlessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMyPasswordlessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMyPasswordlessResponseValidationError) ErrorName() string {
	return "RemoveMyPasswordlessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMyPasswordlessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMyPasswordlessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMyPasswordlessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMyPasswordlessResponseValidationError{}

// Validate checks the field values on ListMyUserGrantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyUserGrantsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyUserGrantsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListMyUserGrantsRequestValidationError is the validation error returned by
// ListMyUserGrantsRequest.Validate if the designated constraints aren't met.
type ListMyUserGrantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyUserGrantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyUserGrantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyUserGrantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyUserGrantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyUserGrantsRequestValidationError) ErrorName() string {
	return "ListMyUserGrantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyUserGrantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyUserGrantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyUserGrantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyUserGrantsRequestValidationError{}

// Validate checks the field values on ListMyUserGrantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyUserGrantsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyUserGrantsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyUserGrantsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyUserGrantsResponseValidationError is the validation error returned by
// ListMyUserGrantsResponse.Validate if the designated constraints aren't met.
type ListMyUserGrantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyUserGrantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyUserGrantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyUserGrantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyUserGrantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyUserGrantsResponseValidationError) ErrorName() string {
	return "ListMyUserGrantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyUserGrantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyUserGrantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyUserGrantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyUserGrantsResponseValidationError{}

// Validate checks the field values on UserGrant with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UserGrant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrgId

	// no validation rules for ProjectId

	// no validation rules for UserId

	// no validation rules for OrgName

	// no validation rules for GrantId

	return nil
}

// UserGrantValidationError is the validation error returned by
// UserGrant.Validate if the designated constraints aren't met.
type UserGrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserGrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserGrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserGrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserGrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserGrantValidationError) ErrorName() string { return "UserGrantValidationError" }

// Error satisfies the builtin error interface
func (e UserGrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserGrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserGrantValidationError{}

// Validate checks the field values on ListMyProjectOrgsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyProjectOrgsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyProjectOrgsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyProjectOrgsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyProjectOrgsRequestValidationError is the validation error returned by
// ListMyProjectOrgsRequest.Validate if the designated constraints aren't met.
type ListMyProjectOrgsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyProjectOrgsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyProjectOrgsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyProjectOrgsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyProjectOrgsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyProjectOrgsRequestValidationError) ErrorName() string {
	return "ListMyProjectOrgsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyProjectOrgsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyProjectOrgsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyProjectOrgsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyProjectOrgsRequestValidationError{}

// Validate checks the field values on ListMyProjectOrgsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyProjectOrgsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyProjectOrgsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyProjectOrgsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyProjectOrgsResponseValidationError is the validation error returned by
// ListMyProjectOrgsResponse.Validate if the designated constraints aren't met.
type ListMyProjectOrgsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyProjectOrgsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyProjectOrgsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyProjectOrgsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyProjectOrgsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyProjectOrgsResponseValidationError) ErrorName() string {
	return "ListMyProjectOrgsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyProjectOrgsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyProjectOrgsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyProjectOrgsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyProjectOrgsResponseValidationError{}

// Validate checks the field values on ListMyZitadelPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyZitadelPermissionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyZitadelPermissionsRequestValidationError is the validation error
// returned by ListMyZitadelPermissionsRequest.Validate if the designated
// constraints aren't met.
type ListMyZitadelPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyZitadelPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyZitadelPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyZitadelPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyZitadelPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyZitadelPermissionsRequestValidationError) ErrorName() string {
	return "ListMyZitadelPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyZitadelPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyZitadelPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyZitadelPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyZitadelPermissionsRequestValidationError{}

// Validate checks the field values on ListMyZitadelPermissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListMyZitadelPermissionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyZitadelPermissionsResponseValidationError is the validation error
// returned by ListMyZitadelPermissionsResponse.Validate if the designated
// constraints aren't met.
type ListMyZitadelPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyZitadelPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyZitadelPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyZitadelPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyZitadelPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyZitadelPermissionsResponseValidationError) ErrorName() string {
	return "ListMyZitadelPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyZitadelPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyZitadelPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyZitadelPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyZitadelPermissionsResponseValidationError{}

// Validate checks the field values on ListMyProjectPermissionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyProjectPermissionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyProjectPermissionsRequestValidationError is the validation error
// returned by ListMyProjectPermissionsRequest.Validate if the designated
// constraints aren't met.
type ListMyProjectPermissionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyProjectPermissionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyProjectPermissionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyProjectPermissionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyProjectPermissionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyProjectPermissionsRequestValidationError) ErrorName() string {
	return "ListMyProjectPermissionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyProjectPermissionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyProjectPermissionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyProjectPermissionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyProjectPermissionsRequestValidationError{}

// Validate checks the field values on ListMyProjectPermissionsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListMyProjectPermissionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListMyProjectPermissionsResponseValidationError is the validation error
// returned by ListMyProjectPermissionsResponse.Validate if the designated
// constraints aren't met.
type ListMyProjectPermissionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyProjectPermissionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyProjectPermissionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyProjectPermissionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyProjectPermissionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyProjectPermissionsResponseValidationError) ErrorName() string {
	return "ListMyProjectPermissionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyProjectPermissionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyProjectPermissionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyProjectPermissionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyProjectPermissionsResponseValidationError{}

// Validate checks the field values on ListMyMembershipsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyMembershipsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyMembershipsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyMembershipsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyMembershipsRequestValidationError is the validation error returned by
// ListMyMembershipsRequest.Validate if the designated constraints aren't met.
type ListMyMembershipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyMembershipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyMembershipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyMembershipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyMembershipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyMembershipsRequestValidationError) ErrorName() string {
	return "ListMyMembershipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyMembershipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyMembershipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyMembershipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyMembershipsRequestValidationError{}

// Validate checks the field values on ListMyMembershipsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMyMembershipsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMyMembershipsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMyMembershipsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMyMembershipsResponseValidationError is the validation error returned by
// ListMyMembershipsResponse.Validate if the designated constraints aren't met.
type ListMyMembershipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMyMembershipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMyMembershipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMyMembershipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMyMembershipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMyMembershipsResponseValidationError) ErrorName() string {
	return "ListMyMembershipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMyMembershipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMyMembershipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMyMembershipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMyMembershipsResponseValidationError{}

// Validate checks the field values on GetMyLabelPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyLabelPolicyRequestValidationError is the validation error returned by
// GetMyLabelPolicyRequest.Validate if the designated constraints aren't met.
type GetMyLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyLabelPolicyRequestValidationError) ErrorName() string {
	return "GetMyLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyLabelPolicyRequestValidationError{}

// Validate checks the field values on GetMyLabelPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyLabelPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyLabelPolicyResponseValidationError is the validation error returned by
// GetMyLabelPolicyResponse.Validate if the designated constraints aren't met.
type GetMyLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyLabelPolicyResponseValidationError) ErrorName() string {
	return "GetMyLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyLabelPolicyResponseValidationError{}

// Validate checks the field values on GetMyPrivacyPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyPrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyPrivacyPolicyRequestValidationError is the validation error returned by
// GetMyPrivacyPolicyRequest.Validate if the designated constraints aren't met.
type GetMyPrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPrivacyPolicyRequestValidationError) ErrorName() string {
	return "GetMyPrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPrivacyPolicyRequestValidationError{}

// Validate checks the field values on GetMyPrivacyPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyPrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyPrivacyPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyPrivacyPolicyResponseValidationError is the validation error returned
// by GetMyPrivacyPolicyResponse.Validate if the designated constraints aren't met.
type GetMyPrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyPrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyPrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyPrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyPrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyPrivacyPolicyResponseValidationError) ErrorName() string {
	return "GetMyPrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyPrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyPrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyPrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyPrivacyPolicyResponseValidationError{}

// Validate checks the field values on GetMyLoginPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyLoginPolicyRequestValidationError is the validation error returned by
// GetMyLoginPolicyRequest.Validate if the designated constraints aren't met.
type GetMyLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyLoginPolicyRequestValidationError) ErrorName() string {
	return "GetMyLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyLoginPolicyRequestValidationError{}

// Validate checks the field values on GetMyLoginPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyLoginPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyLoginPolicyResponseValidationError is the validation error returned by
// GetMyLoginPolicyResponse.Validate if the designated constraints aren't met.
type GetMyLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyLoginPolicyResponseValidationError) ErrorName() string {
	return "GetMyLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyLoginPolicyResponseValidationError{}

// Validate checks the field values on BulkSetMyMetadataRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *BulkSetMyMetadataRequest_Metadata) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return BulkSetMyMetadataRequest_MetadataValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := len(m.GetValue()); l < 1 || l > 500000 {
		return BulkSetMyMetadataRequest_MetadataValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 500000 bytes, inclusive",
		}
	}

	return nil
}

// BulkSetMyMetadataRequest_MetadataValidationError is the validation error
// returned by BulkSetMyMetadataRequest_Metadata.Validate if the designated
// constraints aren't met.
type BulkSetMyMetadataRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetMyMetadataRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetMyMetadataRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetMyMetadataRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetMyMetadataRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetMyMetadataRequest_MetadataValidationError) ErrorName() string {
	return "BulkSetMyMetadataRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetMyMetadataRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetMyMetadataRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetMyMetadataRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetMyMetadataRequest_MetadataValidationError{}
