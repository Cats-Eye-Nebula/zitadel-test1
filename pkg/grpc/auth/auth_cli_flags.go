// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package auth

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	change "github.com/zitadel/zitadel/pkg/grpc/change"
	idp "github.com/zitadel/zitadel/pkg/grpc/idp"
	metadata "github.com/zitadel/zitadel/pkg/grpc/metadata"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	org "github.com/zitadel/zitadel/pkg/grpc/org"
	policy "github.com/zitadel/zitadel/pkg/grpc/policy"
	user "github.com/zitadel/zitadel/pkg/grpc/user"
	os "os"
)

type AddMyAuthFactorOTPEmailRequestFlag struct {
	*AddMyAuthFactorOTPEmailRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *AddMyAuthFactorOTPEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorOTPEmailRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorOTPEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AddMyAuthFactorOTPEmailRequestFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorOTPEmailResponseFlag struct {
	*AddMyAuthFactorOTPEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMyAuthFactorOTPEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorOTPEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorOTPEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorOTPEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMyAuthFactorOTPEmailResponseFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorOTPRequestFlag struct {
	*AddMyAuthFactorOTPRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *AddMyAuthFactorOTPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorOTPRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorOTPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AddMyAuthFactorOTPRequestFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorOTPResponseFlag struct {
	*AddMyAuthFactorOTPResponse

	changed bool
	set     *pflag.FlagSet

	urlFlag     *cli_client.StringParser
	secretFlag  *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMyAuthFactorOTPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorOTPResponse", pflag.ContinueOnError)

	x.urlFlag = cli_client.NewStringParser(x.set, "url", "")
	x.secretFlag = cli_client.NewStringParser(x.set, "secret", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorOTPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.urlFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorOTPResponse.Url = *x.urlFlag.Value
	}
	if x.secretFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorOTPResponse.Secret = *x.secretFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorOTPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMyAuthFactorOTPResponseFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorOTPSMSRequestFlag struct {
	*AddMyAuthFactorOTPSMSRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *AddMyAuthFactorOTPSMSRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorOTPSMSRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorOTPSMSRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AddMyAuthFactorOTPSMSRequestFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorOTPSMSResponseFlag struct {
	*AddMyAuthFactorOTPSMSResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMyAuthFactorOTPSMSResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorOTPSMSResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorOTPSMSResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorOTPSMSResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMyAuthFactorOTPSMSResponseFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorU2FRequestFlag struct {
	*AddMyAuthFactorU2FRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *AddMyAuthFactorU2FRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorU2FRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorU2FRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AddMyAuthFactorU2FRequestFlag) Changed() bool {
	return x.changed
}

type AddMyAuthFactorU2FResponseFlag struct {
	*AddMyAuthFactorU2FResponse

	changed bool
	set     *pflag.FlagSet

	keyFlag     *user.WebAuthNKeyFlag
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMyAuthFactorU2FResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyAuthFactorU2FResponse", pflag.ContinueOnError)

	x.keyFlag = &user.WebAuthNKeyFlag{WebAuthNKey: new(user.WebAuthNKey)}
	x.keyFlag.AddFlags(x.set)
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMyAuthFactorU2FResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "key", "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("key"); flagIdx != nil {
		x.keyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorU2FResponse.Key = x.keyFlag.WebAuthNKey
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMyAuthFactorU2FResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMyAuthFactorU2FResponseFlag) Changed() bool {
	return x.changed
}

type AddMyPasswordlessLinkRequestFlag struct {
	*AddMyPasswordlessLinkRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *AddMyPasswordlessLinkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyPasswordlessLinkRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AddMyPasswordlessLinkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AddMyPasswordlessLinkRequestFlag) Changed() bool {
	return x.changed
}

type AddMyPasswordlessLinkResponseFlag struct {
	*AddMyPasswordlessLinkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag    *object.ObjectDetailsFlag
	linkFlag       *cli_client.StringParser
	expirationFlag *cli_client.DurationParser
}

func (x *AddMyPasswordlessLinkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyPasswordlessLinkResponse", pflag.ContinueOnError)

	x.linkFlag = cli_client.NewStringParser(x.set, "link", "")
	x.expirationFlag = cli_client.NewDurationParser(x.set, "expiration", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMyPasswordlessLinkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMyPasswordlessLinkResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.linkFlag.Changed() {
		x.changed = true
		x.AddMyPasswordlessLinkResponse.Link = *x.linkFlag.Value
	}
	if x.expirationFlag.Changed() {
		x.changed = true
		x.AddMyPasswordlessLinkResponse.Expiration = x.expirationFlag.Value
	}
}

func (x *AddMyPasswordlessLinkResponseFlag) Changed() bool {
	return x.changed
}

type AddMyPasswordlessRequestFlag struct {
	*AddMyPasswordlessRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *AddMyPasswordlessRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyPasswordlessRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *AddMyPasswordlessRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *AddMyPasswordlessRequestFlag) Changed() bool {
	return x.changed
}

type AddMyPasswordlessResponseFlag struct {
	*AddMyPasswordlessResponse

	changed bool
	set     *pflag.FlagSet

	keyFlag     *user.WebAuthNKeyFlag
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMyPasswordlessResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMyPasswordlessResponse", pflag.ContinueOnError)

	x.keyFlag = &user.WebAuthNKeyFlag{WebAuthNKey: new(user.WebAuthNKey)}
	x.keyFlag.AddFlags(x.set)
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMyPasswordlessResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "key", "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("key"); flagIdx != nil {
		x.keyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.AddMyPasswordlessResponse.Key = x.keyFlag.WebAuthNKey
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMyPasswordlessResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMyPasswordlessResponseFlag) Changed() bool {
	return x.changed
}

type BulkRemoveMyMetadataRequestFlag struct {
	*BulkRemoveMyMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keysFlag *cli_client.StringSliceParser
}

func (x *BulkRemoveMyMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveMyMetadataRequest", pflag.ContinueOnError)

	x.keysFlag = cli_client.NewStringSliceParser(x.set, "keys", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveMyMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keysFlag.Changed() {
		x.changed = true
		x.BulkRemoveMyMetadataRequest.Keys = *x.keysFlag.Value
	}
}

func (x *BulkRemoveMyMetadataRequestFlag) Changed() bool {
	return x.changed
}

type BulkRemoveMyMetadataResponseFlag struct {
	*BulkRemoveMyMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkRemoveMyMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveMyMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveMyMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkRemoveMyMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkRemoveMyMetadataResponseFlag) Changed() bool {
	return x.changed
}

type BulkSetMyMetadataRequestFlag struct {
	*BulkSetMyMetadataRequest

	changed bool
	set     *pflag.FlagSet

	metadataFlag []*BulkSetMyMetadataRequest_MetadataFlag
}

func (x *BulkSetMyMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetMyMetadataRequest", pflag.ContinueOnError)

	x.metadataFlag = []*BulkSetMyMetadataRequest_MetadataFlag{}
	parent.AddFlagSet(x.set)
}

func (x *BulkSetMyMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("metadata") {
		x.metadataFlag = append(x.metadataFlag, &BulkSetMyMetadataRequest_MetadataFlag{BulkSetMyMetadataRequest_Metadata: new(BulkSetMyMetadataRequest_Metadata)})
		x.metadataFlag[len(x.metadataFlag)-1].AddFlags(x.set)
		x.metadataFlag[len(x.metadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.metadataFlag) > 0 {
		x.changed = true
		x.Metadata = make([]*BulkSetMyMetadataRequest_Metadata, len(x.metadataFlag))
		for i, value := range x.metadataFlag {
			x.BulkSetMyMetadataRequest.Metadata[i] = value.BulkSetMyMetadataRequest_Metadata
		}
	}

}

func (x *BulkSetMyMetadataRequestFlag) Changed() bool {
	return x.changed
}

type BulkSetMyMetadataRequest_MetadataFlag struct {
	*BulkSetMyMetadataRequest_Metadata

	changed bool
	set     *pflag.FlagSet

	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *BulkSetMyMetadataRequest_MetadataFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetMyMetadataRequest_Metadata", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkSetMyMetadataRequest_MetadataFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.BulkSetMyMetadataRequest_Metadata.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.BulkSetMyMetadataRequest_Metadata.Value = *x.valueFlag.Value
	}
}

func (x *BulkSetMyMetadataRequest_MetadataFlag) Changed() bool {
	return x.changed
}

type BulkSetMyMetadataResponseFlag struct {
	*BulkSetMyMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkSetMyMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetMyMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkSetMyMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkSetMyMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkSetMyMetadataResponseFlag) Changed() bool {
	return x.changed
}

type GetMyEmailRequestFlag struct {
	*GetMyEmailRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyEmailRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyEmailRequestFlag) Changed() bool {
	return x.changed
}

type GetMyEmailResponseFlag struct {
	*GetMyEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	emailFlag   *user.EmailFlag
}

func (x *GetMyEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.emailFlag = &user.EmailFlag{Email: new(user.Email)}
	x.emailFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "email")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetMyEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.GetMyEmailResponse.Email = x.emailFlag.Email
	}

}

func (x *GetMyEmailResponseFlag) Changed() bool {
	return x.changed
}

type GetMyLabelPolicyRequestFlag struct {
	*GetMyLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetMyLabelPolicyResponseFlag struct {
	*GetMyLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LabelPolicyFlag
}

func (x *GetMyLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyLabelPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LabelPolicyFlag{LabelPolicy: new(policy.LabelPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetMyLabelPolicyResponse.Policy = x.policyFlag.LabelPolicy
	}

}

func (x *GetMyLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetMyLoginPolicyRequestFlag struct {
	*GetMyLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyLoginPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetMyLoginPolicyResponseFlag struct {
	*GetMyLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LoginPolicyFlag
}

func (x *GetMyLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyLoginPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LoginPolicyFlag{LoginPolicy: new(policy.LoginPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetMyLoginPolicyResponse.Policy = x.policyFlag.LoginPolicy
	}

}

func (x *GetMyLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetMyMetadataRequestFlag struct {
	*GetMyMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keyFlag *cli_client.StringParser
}

func (x *GetMyMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyMetadataRequest", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *GetMyMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.GetMyMetadataRequest.Key = *x.keyFlag.Value
	}
}

func (x *GetMyMetadataRequestFlag) Changed() bool {
	return x.changed
}

type GetMyMetadataResponseFlag struct {
	*GetMyMetadataResponse

	changed bool
	set     *pflag.FlagSet

	metadataFlag *metadata.MetadataFlag
}

func (x *GetMyMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyMetadataResponse", pflag.ContinueOnError)

	x.metadataFlag = &metadata.MetadataFlag{Metadata: new(metadata.Metadata)}
	x.metadataFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("metadata"); flagIdx != nil {
		x.metadataFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.metadataFlag.Changed() {
		x.changed = true
		x.GetMyMetadataResponse.Metadata = x.metadataFlag.Metadata
	}

}

func (x *GetMyMetadataResponseFlag) Changed() bool {
	return x.changed
}

type GetMyPasswordComplexityPolicyRequestFlag struct {
	*GetMyPasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyPasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyPasswordComplexityPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyPasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyPasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetMyPasswordComplexityPolicyResponseFlag struct {
	*GetMyPasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PasswordComplexityPolicyFlag
}

func (x *GetMyPasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyPasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PasswordComplexityPolicyFlag{PasswordComplexityPolicy: new(policy.PasswordComplexityPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyPasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetMyPasswordComplexityPolicyResponse.Policy = x.policyFlag.PasswordComplexityPolicy
	}

}

func (x *GetMyPasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetMyPhoneRequestFlag struct {
	*GetMyPhoneRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyPhoneRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyPhoneRequestFlag) Changed() bool {
	return x.changed
}

type GetMyPhoneResponseFlag struct {
	*GetMyPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	phoneFlag   *user.PhoneFlag
}

func (x *GetMyPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.phoneFlag = &user.PhoneFlag{Phone: new(user.Phone)}
	x.phoneFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "phone")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetMyPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.GetMyPhoneResponse.Phone = x.phoneFlag.Phone
	}

}

func (x *GetMyPhoneResponseFlag) Changed() bool {
	return x.changed
}

type GetMyPrivacyPolicyRequestFlag struct {
	*GetMyPrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyPrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyPrivacyPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyPrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyPrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetMyPrivacyPolicyResponseFlag struct {
	*GetMyPrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PrivacyPolicyFlag
}

func (x *GetMyPrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyPrivacyPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PrivacyPolicyFlag{PrivacyPolicy: new(policy.PrivacyPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyPrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetMyPrivacyPolicyResponse.Policy = x.policyFlag.PrivacyPolicy
	}

}

func (x *GetMyPrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetMyProfileRequestFlag struct {
	*GetMyProfileRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyProfileRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyProfileRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyProfileRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyProfileRequestFlag) Changed() bool {
	return x.changed
}

type GetMyProfileResponseFlag struct {
	*GetMyProfileResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	profileFlag *user.ProfileFlag
}

func (x *GetMyProfileResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyProfileResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.profileFlag = &user.ProfileFlag{Profile: new(user.Profile)}
	x.profileFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyProfileResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "profile")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetMyProfileResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.GetMyProfileResponse.Profile = x.profileFlag.Profile
	}

}

func (x *GetMyProfileResponseFlag) Changed() bool {
	return x.changed
}

type GetMyUserRequestFlag struct {
	*GetMyUserRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyUserRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyUserRequestFlag) Changed() bool {
	return x.changed
}

type GetMyUserResponseFlag struct {
	*GetMyUserResponse

	changed bool
	set     *pflag.FlagSet

	userFlag      *user.UserFlag
	lastLoginFlag *cli_client.TimestampParser
}

func (x *GetMyUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyUserResponse", pflag.ContinueOnError)

	x.lastLoginFlag = cli_client.NewTimestampParser(x.set, "last-login", "")
	x.userFlag = &user.UserFlag{User: new(user.User)}
	x.userFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.GetMyUserResponse.User = x.userFlag.User
	}

	if x.lastLoginFlag.Changed() {
		x.changed = true
		x.GetMyUserResponse.LastLogin = x.lastLoginFlag.Value
	}
}

func (x *GetMyUserResponseFlag) Changed() bool {
	return x.changed
}

type GetSupportedLanguagesRequestFlag struct {
	*GetSupportedLanguagesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetSupportedLanguagesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSupportedLanguagesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetSupportedLanguagesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetSupportedLanguagesRequestFlag) Changed() bool {
	return x.changed
}

type GetSupportedLanguagesResponseFlag struct {
	*GetSupportedLanguagesResponse

	changed bool
	set     *pflag.FlagSet

	languagesFlag *cli_client.StringSliceParser
}

func (x *GetSupportedLanguagesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSupportedLanguagesResponse", pflag.ContinueOnError)

	x.languagesFlag = cli_client.NewStringSliceParser(x.set, "languages", "")
	parent.AddFlagSet(x.set)
}

func (x *GetSupportedLanguagesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languagesFlag.Changed() {
		x.changed = true
		x.GetSupportedLanguagesResponse.Languages = *x.languagesFlag.Value
	}
}

func (x *GetSupportedLanguagesResponseFlag) Changed() bool {
	return x.changed
}

type HealthzRequestFlag struct {
	*HealthzRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzRequestFlag) Changed() bool {
	return x.changed
}

type HealthzResponseFlag struct {
	*HealthzResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzResponseFlag) Changed() bool {
	return x.changed
}

type ListMyAuthFactorsRequestFlag struct {
	*ListMyAuthFactorsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListMyAuthFactorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyAuthFactorsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListMyAuthFactorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListMyAuthFactorsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyAuthFactorsResponseFlag struct {
	*ListMyAuthFactorsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*user.AuthFactorFlag
}

func (x *ListMyAuthFactorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyAuthFactorsResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.AuthFactorFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListMyAuthFactorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.AuthFactorFlag{AuthFactor: new(user.AuthFactor)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.AuthFactor, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyAuthFactorsResponse.Result[i] = value.AuthFactor
		}
	}

}

func (x *ListMyAuthFactorsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyLinkedIDPsRequestFlag struct {
	*ListMyLinkedIDPsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *object.ListQueryFlag
}

func (x *ListMyLinkedIDPsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyLinkedIDPsRequest", pflag.ContinueOnError)

	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyLinkedIDPsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMyLinkedIDPsRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListMyLinkedIDPsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyLinkedIDPsResponseFlag struct {
	*ListMyLinkedIDPsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*idp.IDPUserLinkFlag
}

func (x *ListMyLinkedIDPsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyLinkedIDPsResponse", pflag.ContinueOnError)

	x.resultFlag = []*idp.IDPUserLinkFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyLinkedIDPsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.IDPUserLinkFlag{IDPUserLink: new(idp.IDPUserLink)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMyLinkedIDPsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.IDPUserLink, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyLinkedIDPsResponse.Result[i] = value.IDPUserLink
		}
	}

}

func (x *ListMyLinkedIDPsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyMembershipsRequestFlag struct {
	*ListMyMembershipsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*user.MembershipQueryFlag
}

func (x *ListMyMembershipsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyMembershipsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*user.MembershipQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyMembershipsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &user.MembershipQueryFlag{MembershipQuery: new(user.MembershipQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMyMembershipsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*user.MembershipQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListMyMembershipsRequest.Queries[i] = value.MembershipQuery
		}
	}

}

func (x *ListMyMembershipsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyMembershipsResponseFlag struct {
	*ListMyMembershipsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*user.MembershipFlag
}

func (x *ListMyMembershipsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyMembershipsResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.MembershipFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyMembershipsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.MembershipFlag{Membership: new(user.Membership)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMyMembershipsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.Membership, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyMembershipsResponse.Result[i] = value.Membership
		}
	}

}

func (x *ListMyMembershipsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyMetadataRequestFlag struct {
	*ListMyMetadataRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*metadata.MetadataQueryFlag
}

func (x *ListMyMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyMetadataRequest", pflag.ContinueOnError)

	x.queriesFlag = []*metadata.MetadataQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &metadata.MetadataQueryFlag{MetadataQuery: new(metadata.MetadataQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMyMetadataRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*metadata.MetadataQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListMyMetadataRequest.Queries[i] = value.MetadataQuery
		}
	}

}

func (x *ListMyMetadataRequestFlag) Changed() bool {
	return x.changed
}

type ListMyMetadataResponseFlag struct {
	*ListMyMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*metadata.MetadataFlag
}

func (x *ListMyMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyMetadataResponse", pflag.ContinueOnError)

	x.resultFlag = []*metadata.MetadataFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &metadata.MetadataFlag{Metadata: new(metadata.Metadata)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMyMetadataResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*metadata.Metadata, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyMetadataResponse.Result[i] = value.Metadata
		}
	}

}

func (x *ListMyMetadataResponseFlag) Changed() bool {
	return x.changed
}

type ListMyPasswordlessRequestFlag struct {
	*ListMyPasswordlessRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListMyPasswordlessRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyPasswordlessRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListMyPasswordlessRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListMyPasswordlessRequestFlag) Changed() bool {
	return x.changed
}

type ListMyPasswordlessResponseFlag struct {
	*ListMyPasswordlessResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*user.WebAuthNTokenFlag
}

func (x *ListMyPasswordlessResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyPasswordlessResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.WebAuthNTokenFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListMyPasswordlessResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.WebAuthNTokenFlag{WebAuthNToken: new(user.WebAuthNToken)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.WebAuthNToken, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyPasswordlessResponse.Result[i] = value.WebAuthNToken
		}
	}

}

func (x *ListMyPasswordlessResponseFlag) Changed() bool {
	return x.changed
}

type ListMyProjectOrgsRequestFlag struct {
	*ListMyProjectOrgsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*org.OrgQueryFlag
}

func (x *ListMyProjectOrgsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyProjectOrgsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*org.OrgQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyProjectOrgsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &org.OrgQueryFlag{OrgQuery: new(org.OrgQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMyProjectOrgsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*org.OrgQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListMyProjectOrgsRequest.Queries[i] = value.OrgQuery
		}
	}

}

func (x *ListMyProjectOrgsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyProjectOrgsResponseFlag struct {
	*ListMyProjectOrgsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*org.OrgFlag
}

func (x *ListMyProjectOrgsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyProjectOrgsResponse", pflag.ContinueOnError)

	x.resultFlag = []*org.OrgFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyProjectOrgsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &org.OrgFlag{Org: new(org.Org)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMyProjectOrgsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*org.Org, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyProjectOrgsResponse.Result[i] = value.Org
		}
	}

}

func (x *ListMyProjectOrgsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyProjectPermissionsRequestFlag struct {
	*ListMyProjectPermissionsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListMyProjectPermissionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyProjectPermissionsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListMyProjectPermissionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListMyProjectPermissionsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyProjectPermissionsResponseFlag struct {
	*ListMyProjectPermissionsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag *cli_client.StringSliceParser
}

func (x *ListMyProjectPermissionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyProjectPermissionsResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewStringSliceParser(x.set, "result", "")
	parent.AddFlagSet(x.set)
}

func (x *ListMyProjectPermissionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListMyProjectPermissionsResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListMyProjectPermissionsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyRefreshTokensRequestFlag struct {
	*ListMyRefreshTokensRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListMyRefreshTokensRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyRefreshTokensRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListMyRefreshTokensRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListMyRefreshTokensRequestFlag) Changed() bool {
	return x.changed
}

type ListMyRefreshTokensResponseFlag struct {
	*ListMyRefreshTokensResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*user.RefreshTokenFlag
}

func (x *ListMyRefreshTokensResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyRefreshTokensResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.RefreshTokenFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyRefreshTokensResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.RefreshTokenFlag{RefreshToken: new(user.RefreshToken)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMyRefreshTokensResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.RefreshToken, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyRefreshTokensResponse.Result[i] = value.RefreshToken
		}
	}

}

func (x *ListMyRefreshTokensResponseFlag) Changed() bool {
	return x.changed
}

type ListMyUserChangesRequestFlag struct {
	*ListMyUserChangesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *change.ChangeQueryFlag
}

func (x *ListMyUserChangesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyUserChangesRequest", pflag.ContinueOnError)

	x.queryFlag = &change.ChangeQueryFlag{ChangeQuery: new(change.ChangeQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyUserChangesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMyUserChangesRequest.Query = x.queryFlag.ChangeQuery
	}

}

func (x *ListMyUserChangesRequestFlag) Changed() bool {
	return x.changed
}

type ListMyUserChangesResponseFlag struct {
	*ListMyUserChangesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*change.ChangeFlag
}

func (x *ListMyUserChangesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyUserChangesResponse", pflag.ContinueOnError)

	x.resultFlag = []*change.ChangeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListMyUserChangesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &change.ChangeFlag{Change: new(change.Change)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*change.Change, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyUserChangesResponse.Result[i] = value.Change
		}
	}

}

func (x *ListMyUserChangesResponseFlag) Changed() bool {
	return x.changed
}

type ListMyUserGrantsRequestFlag struct {
	*ListMyUserGrantsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *object.ListQueryFlag
}

func (x *ListMyUserGrantsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyUserGrantsRequest", pflag.ContinueOnError)

	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyUserGrantsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMyUserGrantsRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListMyUserGrantsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyUserGrantsResponseFlag struct {
	*ListMyUserGrantsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*UserGrantFlag
}

func (x *ListMyUserGrantsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyUserGrantsResponse", pflag.ContinueOnError)

	x.resultFlag = []*UserGrantFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMyUserGrantsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &UserGrantFlag{UserGrant: new(UserGrant)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMyUserGrantsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*UserGrant, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyUserGrantsResponse.Result[i] = value.UserGrant
		}
	}

}

func (x *ListMyUserGrantsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyUserSessionsRequestFlag struct {
	*ListMyUserSessionsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListMyUserSessionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyUserSessionsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListMyUserSessionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListMyUserSessionsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyUserSessionsResponseFlag struct {
	*ListMyUserSessionsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*user.SessionFlag
}

func (x *ListMyUserSessionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyUserSessionsResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.SessionFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListMyUserSessionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.SessionFlag{Session: new(user.Session)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.Session, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMyUserSessionsResponse.Result[i] = value.Session
		}
	}

}

func (x *ListMyUserSessionsResponseFlag) Changed() bool {
	return x.changed
}

type ListMyZitadelPermissionsRequestFlag struct {
	*ListMyZitadelPermissionsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListMyZitadelPermissionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyZitadelPermissionsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListMyZitadelPermissionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListMyZitadelPermissionsRequestFlag) Changed() bool {
	return x.changed
}

type ListMyZitadelPermissionsResponseFlag struct {
	*ListMyZitadelPermissionsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag *cli_client.StringSliceParser
}

func (x *ListMyZitadelPermissionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMyZitadelPermissionsResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewStringSliceParser(x.set, "result", "")
	parent.AddFlagSet(x.set)
}

func (x *ListMyZitadelPermissionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListMyZitadelPermissionsResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListMyZitadelPermissionsResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorOTPEmailRequestFlag struct {
	*RemoveMyAuthFactorOTPEmailRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveMyAuthFactorOTPEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorOTPEmailRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorOTPEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveMyAuthFactorOTPEmailRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorOTPEmailResponseFlag struct {
	*RemoveMyAuthFactorOTPEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyAuthFactorOTPEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorOTPEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorOTPEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyAuthFactorOTPEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyAuthFactorOTPEmailResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorOTPRequestFlag struct {
	*RemoveMyAuthFactorOTPRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveMyAuthFactorOTPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorOTPRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorOTPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveMyAuthFactorOTPRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorOTPResponseFlag struct {
	*RemoveMyAuthFactorOTPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyAuthFactorOTPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorOTPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorOTPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyAuthFactorOTPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyAuthFactorOTPResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorOTPSMSRequestFlag struct {
	*RemoveMyAuthFactorOTPSMSRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveMyAuthFactorOTPSMSRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorOTPSMSRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorOTPSMSRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveMyAuthFactorOTPSMSRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorOTPSMSResponseFlag struct {
	*RemoveMyAuthFactorOTPSMSResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyAuthFactorOTPSMSResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorOTPSMSResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorOTPSMSResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyAuthFactorOTPSMSResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyAuthFactorOTPSMSResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorU2FRequestFlag struct {
	*RemoveMyAuthFactorU2FRequest

	changed bool
	set     *pflag.FlagSet

	tokenIdFlag *cli_client.StringParser
}

func (x *RemoveMyAuthFactorU2FRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorU2FRequest", pflag.ContinueOnError)

	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorU2FRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.RemoveMyAuthFactorU2FRequest.TokenId = *x.tokenIdFlag.Value
	}
}

func (x *RemoveMyAuthFactorU2FRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyAuthFactorU2FResponseFlag struct {
	*RemoveMyAuthFactorU2FResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyAuthFactorU2FResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAuthFactorU2FResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAuthFactorU2FResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyAuthFactorU2FResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyAuthFactorU2FResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyAvatarRequestFlag struct {
	*RemoveMyAvatarRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveMyAvatarRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAvatarRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAvatarRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveMyAvatarRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyAvatarResponseFlag struct {
	*RemoveMyAvatarResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyAvatarResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyAvatarResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyAvatarResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyAvatarResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyAvatarResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyLinkedIDPRequestFlag struct {
	*RemoveMyLinkedIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag        *cli_client.StringParser
	linkedUserIdFlag *cli_client.StringParser
}

func (x *RemoveMyLinkedIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyLinkedIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.linkedUserIdFlag = cli_client.NewStringParser(x.set, "linked-user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyLinkedIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.RemoveMyLinkedIDPRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.linkedUserIdFlag.Changed() {
		x.changed = true
		x.RemoveMyLinkedIDPRequest.LinkedUserId = *x.linkedUserIdFlag.Value
	}
}

func (x *RemoveMyLinkedIDPRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyLinkedIDPResponseFlag struct {
	*RemoveMyLinkedIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyLinkedIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyLinkedIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyLinkedIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyLinkedIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyLinkedIDPResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyMetadataRequestFlag struct {
	*RemoveMyMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keyFlag *cli_client.StringParser
}

func (x *RemoveMyMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyMetadataRequest", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.RemoveMyMetadataRequest.Key = *x.keyFlag.Value
	}
}

func (x *RemoveMyMetadataRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyMetadataResponseFlag struct {
	*RemoveMyMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyMetadataResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyPasswordlessRequestFlag struct {
	*RemoveMyPasswordlessRequest

	changed bool
	set     *pflag.FlagSet

	tokenIdFlag *cli_client.StringParser
}

func (x *RemoveMyPasswordlessRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyPasswordlessRequest", pflag.ContinueOnError)

	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyPasswordlessRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.RemoveMyPasswordlessRequest.TokenId = *x.tokenIdFlag.Value
	}
}

func (x *RemoveMyPasswordlessRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyPasswordlessResponseFlag struct {
	*RemoveMyPasswordlessResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyPasswordlessResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyPasswordlessResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyPasswordlessResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyPasswordlessResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyPasswordlessResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyPhoneRequestFlag struct {
	*RemoveMyPhoneRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveMyPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyPhoneRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveMyPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveMyPhoneRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyPhoneResponseFlag struct {
	*RemoveMyPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyPhoneResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMyUserRequestFlag struct {
	*RemoveMyUserRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveMyUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyUserRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveMyUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveMyUserRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMyUserResponseFlag struct {
	*RemoveMyUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMyUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMyUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMyUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMyUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMyUserResponseFlag) Changed() bool {
	return x.changed
}

type ResendMyEmailVerificationRequestFlag struct {
	*ResendMyEmailVerificationRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResendMyEmailVerificationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendMyEmailVerificationRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResendMyEmailVerificationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResendMyEmailVerificationRequestFlag) Changed() bool {
	return x.changed
}

type ResendMyEmailVerificationResponseFlag struct {
	*ResendMyEmailVerificationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResendMyEmailVerificationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendMyEmailVerificationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResendMyEmailVerificationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResendMyEmailVerificationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResendMyEmailVerificationResponseFlag) Changed() bool {
	return x.changed
}

type ResendMyPhoneVerificationRequestFlag struct {
	*ResendMyPhoneVerificationRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResendMyPhoneVerificationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendMyPhoneVerificationRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResendMyPhoneVerificationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResendMyPhoneVerificationRequestFlag) Changed() bool {
	return x.changed
}

type ResendMyPhoneVerificationResponseFlag struct {
	*ResendMyPhoneVerificationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResendMyPhoneVerificationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendMyPhoneVerificationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResendMyPhoneVerificationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResendMyPhoneVerificationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResendMyPhoneVerificationResponseFlag) Changed() bool {
	return x.changed
}

type RevokeAllMyRefreshTokensRequestFlag struct {
	*RevokeAllMyRefreshTokensRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RevokeAllMyRefreshTokensRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RevokeAllMyRefreshTokensRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RevokeAllMyRefreshTokensRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RevokeAllMyRefreshTokensRequestFlag) Changed() bool {
	return x.changed
}

type RevokeAllMyRefreshTokensResponseFlag struct {
	*RevokeAllMyRefreshTokensResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *RevokeAllMyRefreshTokensResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RevokeAllMyRefreshTokensResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RevokeAllMyRefreshTokensResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RevokeAllMyRefreshTokensResponseFlag) Changed() bool {
	return x.changed
}

type RevokeMyRefreshTokenRequestFlag struct {
	*RevokeMyRefreshTokenRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *RevokeMyRefreshTokenRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RevokeMyRefreshTokenRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *RevokeMyRefreshTokenRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RevokeMyRefreshTokenRequest.Id = *x.idFlag.Value
	}
}

func (x *RevokeMyRefreshTokenRequestFlag) Changed() bool {
	return x.changed
}

type RevokeMyRefreshTokenResponseFlag struct {
	*RevokeMyRefreshTokenResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RevokeMyRefreshTokenResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RevokeMyRefreshTokenResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RevokeMyRefreshTokenResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RevokeMyRefreshTokenResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RevokeMyRefreshTokenResponseFlag) Changed() bool {
	return x.changed
}

type SendMyPasswordlessLinkRequestFlag struct {
	*SendMyPasswordlessLinkRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *SendMyPasswordlessLinkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendMyPasswordlessLinkRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *SendMyPasswordlessLinkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *SendMyPasswordlessLinkRequestFlag) Changed() bool {
	return x.changed
}

type SendMyPasswordlessLinkResponseFlag struct {
	*SendMyPasswordlessLinkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SendMyPasswordlessLinkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendMyPasswordlessLinkResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SendMyPasswordlessLinkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SendMyPasswordlessLinkResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SendMyPasswordlessLinkResponseFlag) Changed() bool {
	return x.changed
}

type SetMyEmailRequestFlag struct {
	*SetMyEmailRequest

	changed bool
	set     *pflag.FlagSet

	emailFlag *cli_client.StringParser
}

func (x *SetMyEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMyEmailRequest", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	parent.AddFlagSet(x.set)
}

func (x *SetMyEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.SetMyEmailRequest.Email = *x.emailFlag.Value
	}
}

func (x *SetMyEmailRequestFlag) Changed() bool {
	return x.changed
}

type SetMyEmailResponseFlag struct {
	*SetMyEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetMyEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMyEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetMyEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetMyEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetMyEmailResponseFlag) Changed() bool {
	return x.changed
}

type SetMyMetadataRequestFlag struct {
	*SetMyMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *SetMyMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMyMetadataRequest", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *SetMyMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.SetMyMetadataRequest.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.SetMyMetadataRequest.Value = *x.valueFlag.Value
	}
}

func (x *SetMyMetadataRequestFlag) Changed() bool {
	return x.changed
}

type SetMyMetadataResponseFlag struct {
	*SetMyMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetMyMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMyMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetMyMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetMyMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetMyMetadataResponseFlag) Changed() bool {
	return x.changed
}

type SetMyPhoneRequestFlag struct {
	*SetMyPhoneRequest

	changed bool
	set     *pflag.FlagSet

	phoneFlag *cli_client.StringParser
}

func (x *SetMyPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMyPhoneRequest", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	parent.AddFlagSet(x.set)
}

func (x *SetMyPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.SetMyPhoneRequest.Phone = *x.phoneFlag.Value
	}
}

func (x *SetMyPhoneRequestFlag) Changed() bool {
	return x.changed
}

type SetMyPhoneResponseFlag struct {
	*SetMyPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetMyPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetMyPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetMyPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetMyPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetMyPhoneResponseFlag) Changed() bool {
	return x.changed
}

type UpdateMyPasswordRequestFlag struct {
	*UpdateMyPasswordRequest

	changed bool
	set     *pflag.FlagSet

	oldPasswordFlag *cli_client.StringParser
	newPasswordFlag *cli_client.StringParser
}

func (x *UpdateMyPasswordRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMyPasswordRequest", pflag.ContinueOnError)

	x.oldPasswordFlag = cli_client.NewStringParser(x.set, "old-password", "")
	x.newPasswordFlag = cli_client.NewStringParser(x.set, "new-password", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateMyPasswordRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.oldPasswordFlag.Changed() {
		x.changed = true
		x.UpdateMyPasswordRequest.OldPassword = *x.oldPasswordFlag.Value
	}
	if x.newPasswordFlag.Changed() {
		x.changed = true
		x.UpdateMyPasswordRequest.NewPassword = *x.newPasswordFlag.Value
	}
}

func (x *UpdateMyPasswordRequestFlag) Changed() bool {
	return x.changed
}

type UpdateMyPasswordResponseFlag struct {
	*UpdateMyPasswordResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateMyPasswordResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMyPasswordResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateMyPasswordResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateMyPasswordResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateMyPasswordResponseFlag) Changed() bool {
	return x.changed
}

type UpdateMyProfileRequestFlag struct {
	*UpdateMyProfileRequest

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[user.Gender]
}

func (x *UpdateMyProfileRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMyProfileRequest", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[user.Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateMyProfileRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileRequest.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileRequest.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileRequest.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileRequest.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileRequest.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileRequest.Gender = *x.genderFlag.Value
	}
}

func (x *UpdateMyProfileRequestFlag) Changed() bool {
	return x.changed
}

type UpdateMyProfileResponseFlag struct {
	*UpdateMyProfileResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateMyProfileResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMyProfileResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateMyProfileResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateMyProfileResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateMyProfileResponseFlag) Changed() bool {
	return x.changed
}

type UpdateMyUserNameRequestFlag struct {
	*UpdateMyUserNameRequest

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
}

func (x *UpdateMyUserNameRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMyUserNameRequest", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateMyUserNameRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.UpdateMyUserNameRequest.UserName = *x.userNameFlag.Value
	}
}

func (x *UpdateMyUserNameRequestFlag) Changed() bool {
	return x.changed
}

type UpdateMyUserNameResponseFlag struct {
	*UpdateMyUserNameResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateMyUserNameResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMyUserNameResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateMyUserNameResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateMyUserNameResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateMyUserNameResponseFlag) Changed() bool {
	return x.changed
}

type UserGrantFlag struct {
	*UserGrant

	changed bool
	set     *pflag.FlagSet

	orgIdFlag          *cli_client.StringParser
	projectIdFlag      *cli_client.StringParser
	userIdFlag         *cli_client.StringParser
	rolesFlag          *cli_client.StringSliceParser
	orgNameFlag        *cli_client.StringParser
	grantIdFlag        *cli_client.StringParser
	detailsFlag        *object.ObjectDetailsFlag
	orgDomainFlag      *cli_client.StringParser
	projectNameFlag    *cli_client.StringParser
	projectGrantIdFlag *cli_client.StringParser
	roleKeysFlag       *cli_client.StringSliceParser
	userTypeFlag       *cli_client.EnumParser[user.Type]
}

func (x *UserGrantFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserGrant", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	x.orgNameFlag = cli_client.NewStringParser(x.set, "org-name", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.orgDomainFlag = cli_client.NewStringParser(x.set, "org-domain", "")
	x.projectNameFlag = cli_client.NewStringParser(x.set, "project-name", "")
	x.projectGrantIdFlag = cli_client.NewStringParser(x.set, "project-grant-id", "")
	x.roleKeysFlag = cli_client.NewStringSliceParser(x.set, "role-keys", "")
	x.userTypeFlag = cli_client.NewEnumParser[user.Type](x.set, "user-type", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UserGrantFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.UserGrant.OrgId = *x.orgIdFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UserGrant.ProjectId = *x.projectIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.UserGrant.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.UserGrant.Roles = *x.rolesFlag.Value
	}
	if x.orgNameFlag.Changed() {
		x.changed = true
		x.UserGrant.OrgName = *x.orgNameFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.UserGrant.GrantId = *x.grantIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UserGrant.Details = x.detailsFlag.ObjectDetails
	}

	if x.orgDomainFlag.Changed() {
		x.changed = true
		x.UserGrant.OrgDomain = *x.orgDomainFlag.Value
	}
	if x.projectNameFlag.Changed() {
		x.changed = true
		x.UserGrant.ProjectName = *x.projectNameFlag.Value
	}
	if x.projectGrantIdFlag.Changed() {
		x.changed = true
		x.UserGrant.ProjectGrantId = *x.projectGrantIdFlag.Value
	}
	if x.roleKeysFlag.Changed() {
		x.changed = true
		x.UserGrant.RoleKeys = *x.roleKeysFlag.Value
	}
	if x.userTypeFlag.Changed() {
		x.changed = true
		x.UserGrant.UserType = *x.userTypeFlag.Value
	}
}

func (x *UserGrantFlag) Changed() bool {
	return x.changed
}

type VerifyMyAuthFactorOTPRequestFlag struct {
	*VerifyMyAuthFactorOTPRequest

	changed bool
	set     *pflag.FlagSet

	codeFlag *cli_client.StringParser
}

func (x *VerifyMyAuthFactorOTPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyAuthFactorOTPRequest", pflag.ContinueOnError)

	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyAuthFactorOTPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.VerifyMyAuthFactorOTPRequest.Code = *x.codeFlag.Value
	}
}

func (x *VerifyMyAuthFactorOTPRequestFlag) Changed() bool {
	return x.changed
}

type VerifyMyAuthFactorOTPResponseFlag struct {
	*VerifyMyAuthFactorOTPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *VerifyMyAuthFactorOTPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyAuthFactorOTPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyAuthFactorOTPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyMyAuthFactorOTPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *VerifyMyAuthFactorOTPResponseFlag) Changed() bool {
	return x.changed
}

type VerifyMyAuthFactorU2FRequestFlag struct {
	*VerifyMyAuthFactorU2FRequest

	changed bool
	set     *pflag.FlagSet

	verificationFlag *user.WebAuthNVerificationFlag
}

func (x *VerifyMyAuthFactorU2FRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyAuthFactorU2FRequest", pflag.ContinueOnError)

	x.verificationFlag = &user.WebAuthNVerificationFlag{WebAuthNVerification: new(user.WebAuthNVerification)}
	x.verificationFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyAuthFactorU2FRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "verification")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("verification"); flagIdx != nil {
		x.verificationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.verificationFlag.Changed() {
		x.changed = true
		x.VerifyMyAuthFactorU2FRequest.Verification = x.verificationFlag.WebAuthNVerification
	}

}

func (x *VerifyMyAuthFactorU2FRequestFlag) Changed() bool {
	return x.changed
}

type VerifyMyAuthFactorU2FResponseFlag struct {
	*VerifyMyAuthFactorU2FResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *VerifyMyAuthFactorU2FResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyAuthFactorU2FResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyAuthFactorU2FResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyMyAuthFactorU2FResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *VerifyMyAuthFactorU2FResponseFlag) Changed() bool {
	return x.changed
}

type VerifyMyEmailRequestFlag struct {
	*VerifyMyEmailRequest

	changed bool
	set     *pflag.FlagSet

	codeFlag *cli_client.StringParser
}

func (x *VerifyMyEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyEmailRequest", pflag.ContinueOnError)

	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.VerifyMyEmailRequest.Code = *x.codeFlag.Value
	}
}

func (x *VerifyMyEmailRequestFlag) Changed() bool {
	return x.changed
}

type VerifyMyEmailResponseFlag struct {
	*VerifyMyEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *VerifyMyEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyMyEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *VerifyMyEmailResponseFlag) Changed() bool {
	return x.changed
}

type VerifyMyPasswordlessRequestFlag struct {
	*VerifyMyPasswordlessRequest

	changed bool
	set     *pflag.FlagSet

	verificationFlag *user.WebAuthNVerificationFlag
}

func (x *VerifyMyPasswordlessRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyPasswordlessRequest", pflag.ContinueOnError)

	x.verificationFlag = &user.WebAuthNVerificationFlag{WebAuthNVerification: new(user.WebAuthNVerification)}
	x.verificationFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyPasswordlessRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "verification")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("verification"); flagIdx != nil {
		x.verificationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.verificationFlag.Changed() {
		x.changed = true
		x.VerifyMyPasswordlessRequest.Verification = x.verificationFlag.WebAuthNVerification
	}

}

func (x *VerifyMyPasswordlessRequestFlag) Changed() bool {
	return x.changed
}

type VerifyMyPasswordlessResponseFlag struct {
	*VerifyMyPasswordlessResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *VerifyMyPasswordlessResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyPasswordlessResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyPasswordlessResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyMyPasswordlessResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *VerifyMyPasswordlessResponseFlag) Changed() bool {
	return x.changed
}

type VerifyMyPhoneRequestFlag struct {
	*VerifyMyPhoneRequest

	changed bool
	set     *pflag.FlagSet

	codeFlag *cli_client.StringParser
}

func (x *VerifyMyPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyPhoneRequest", pflag.ContinueOnError)

	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.VerifyMyPhoneRequest.Code = *x.codeFlag.Value
	}
}

func (x *VerifyMyPhoneRequestFlag) Changed() bool {
	return x.changed
}

type VerifyMyPhoneResponseFlag struct {
	*VerifyMyPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *VerifyMyPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMyPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *VerifyMyPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.VerifyMyPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *VerifyMyPhoneResponseFlag) Changed() bool {
	return x.changed
}
