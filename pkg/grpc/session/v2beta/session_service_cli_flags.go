// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package session

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	v2beta "github.com/zitadel/zitadel/pkg/grpc/object/v2beta"
	os "os"
)

type CheckIDPIntentFlag struct {
	*CheckIDPIntent

	changed bool
	set     *pflag.FlagSet

	idpIntentIdFlag    *cli_client.StringParser
	idpIntentTokenFlag *cli_client.StringParser
}

func (x *CheckIDPIntentFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CheckIDPIntent", pflag.ContinueOnError)

	x.idpIntentIdFlag = cli_client.NewStringParser(x.set, "idp-intent-id", "")
	x.idpIntentTokenFlag = cli_client.NewStringParser(x.set, "idp-intent-token", "")
	parent.AddFlagSet(x.set)
}

func (x *CheckIDPIntentFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIntentIdFlag.Changed() {
		x.changed = true
		x.CheckIDPIntent.IdpIntentId = *x.idpIntentIdFlag.Value
	}
	if x.idpIntentTokenFlag.Changed() {
		x.changed = true
		x.CheckIDPIntent.IdpIntentToken = *x.idpIntentTokenFlag.Value
	}
}

func (x *CheckIDPIntentFlag) Changed() bool {
	return x.changed
}

type CheckOTPFlag struct {
	*CheckOTP

	changed bool
	set     *pflag.FlagSet

	codeFlag *cli_client.StringParser
}

func (x *CheckOTPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CheckOTP", pflag.ContinueOnError)

	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *CheckOTPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.CheckOTP.Code = *x.codeFlag.Value
	}
}

func (x *CheckOTPFlag) Changed() bool {
	return x.changed
}

type CheckPasswordFlag struct {
	*CheckPassword

	changed bool
	set     *pflag.FlagSet

	passwordFlag *cli_client.StringParser
}

func (x *CheckPasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CheckPassword", pflag.ContinueOnError)

	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	parent.AddFlagSet(x.set)
}

func (x *CheckPasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.CheckPassword.Password = *x.passwordFlag.Value
	}
}

func (x *CheckPasswordFlag) Changed() bool {
	return x.changed
}

type CheckTOTPFlag struct {
	*CheckTOTP

	changed bool
	set     *pflag.FlagSet

	codeFlag *cli_client.StringParser
}

func (x *CheckTOTPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CheckTOTP", pflag.ContinueOnError)

	x.codeFlag = cli_client.NewStringParser(x.set, "code", "")
	parent.AddFlagSet(x.set)
}

func (x *CheckTOTPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.codeFlag.Changed() {
		x.changed = true
		x.CheckTOTP.Code = *x.codeFlag.Value
	}
}

func (x *CheckTOTPFlag) Changed() bool {
	return x.changed
}

type CheckUserFlag struct {
	*CheckUser

	changed bool
	set     *pflag.FlagSet

	userIdFlag    *cli_client.StringParser
	loginNameFlag *cli_client.StringParser
}

func (x *CheckUserFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CheckUser", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.loginNameFlag = cli_client.NewStringParser(x.set, "login-name", "")
	parent.AddFlagSet(x.set)
}

func (x *CheckUserFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	switch cli_client.FieldIndexes(args, "user-id", "login-name").Last().Flag {
	case "user-id":
		if x.userIdFlag.Changed() {
			x.changed = true
			x.CheckUser.Search = &CheckUser_UserId{UserId: *x.userIdFlag.Value}
		}
	case "login-name":
		if x.loginNameFlag.Changed() {
			x.changed = true
			x.CheckUser.Search = &CheckUser_LoginName{LoginName: *x.loginNameFlag.Value}
		}
	}
}

func (x *CheckUserFlag) Changed() bool {
	return x.changed
}

type CheckWebAuthNFlag struct {
	*CheckWebAuthN

	changed bool
	set     *pflag.FlagSet

	credentialAssertionDataFlag *cli_client.StructParser
}

func (x *CheckWebAuthNFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CheckWebAuthN", pflag.ContinueOnError)

	x.credentialAssertionDataFlag = cli_client.NewStructParser(x.set, "credential-assertion-data", "")
	parent.AddFlagSet(x.set)
}

func (x *CheckWebAuthNFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.credentialAssertionDataFlag.Changed() {
		x.changed = true
		x.CheckWebAuthN.CredentialAssertionData = x.credentialAssertionDataFlag.Value
	}
}

func (x *CheckWebAuthNFlag) Changed() bool {
	return x.changed
}

type ChecksFlag struct {
	*Checks

	changed bool
	set     *pflag.FlagSet

	userFlag      *CheckUserFlag
	passwordFlag  *CheckPasswordFlag
	webAuthNFlag  *CheckWebAuthNFlag
	idpIntentFlag *CheckIDPIntentFlag
	totpFlag      *CheckTOTPFlag
	otpSmsFlag    *CheckOTPFlag
	otpEmailFlag  *CheckOTPFlag
}

func (x *ChecksFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Checks", pflag.ContinueOnError)

	x.userFlag = &CheckUserFlag{CheckUser: new(CheckUser)}
	x.userFlag.AddFlags(x.set)
	x.passwordFlag = &CheckPasswordFlag{CheckPassword: new(CheckPassword)}
	x.passwordFlag.AddFlags(x.set)
	x.webAuthNFlag = &CheckWebAuthNFlag{CheckWebAuthN: new(CheckWebAuthN)}
	x.webAuthNFlag.AddFlags(x.set)
	x.idpIntentFlag = &CheckIDPIntentFlag{CheckIDPIntent: new(CheckIDPIntent)}
	x.idpIntentFlag.AddFlags(x.set)
	x.totpFlag = &CheckTOTPFlag{CheckTOTP: new(CheckTOTP)}
	x.totpFlag.AddFlags(x.set)
	x.otpSmsFlag = &CheckOTPFlag{CheckOTP: new(CheckOTP)}
	x.otpSmsFlag.AddFlags(x.set)
	x.otpEmailFlag = &CheckOTPFlag{CheckOTP: new(CheckOTP)}
	x.otpEmailFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ChecksFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user", "password", "web-auth-n", "idp-intent", "totp", "otp-sms", "otp-email")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password"); flagIdx != nil {
		x.passwordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("web-auth-n"); flagIdx != nil {
		x.webAuthNFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-intent"); flagIdx != nil {
		x.idpIntentFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("totp"); flagIdx != nil {
		x.totpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("otp-sms"); flagIdx != nil {
		x.otpSmsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("otp-email"); flagIdx != nil {
		x.otpEmailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.Checks.User = x.userFlag.CheckUser
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.Checks.Password = x.passwordFlag.CheckPassword
	}

	if x.webAuthNFlag.Changed() {
		x.changed = true
		x.Checks.WebAuthN = x.webAuthNFlag.CheckWebAuthN
	}

	if x.idpIntentFlag.Changed() {
		x.changed = true
		x.Checks.IdpIntent = x.idpIntentFlag.CheckIDPIntent
	}

	if x.totpFlag.Changed() {
		x.changed = true
		x.Checks.Totp = x.totpFlag.CheckTOTP
	}

	if x.otpSmsFlag.Changed() {
		x.changed = true
		x.Checks.OtpSms = x.otpSmsFlag.CheckOTP
	}

	if x.otpEmailFlag.Changed() {
		x.changed = true
		x.Checks.OtpEmail = x.otpEmailFlag.CheckOTP
	}

}

func (x *ChecksFlag) Changed() bool {
	return x.changed
}

type CreateSessionRequestFlag struct {
	*CreateSessionRequest

	changed bool
	set     *pflag.FlagSet

	checksFlag     *ChecksFlag
	challengesFlag *RequestChallengesFlag
	userAgentFlag  *UserAgentFlag
	lifetimeFlag   *cli_client.DurationParser
}

func (x *CreateSessionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateSessionRequest", pflag.ContinueOnError)

	x.lifetimeFlag = cli_client.NewDurationParser(x.set, "lifetime", "")
	x.checksFlag = &ChecksFlag{Checks: new(Checks)}
	x.checksFlag.AddFlags(x.set)
	x.challengesFlag = &RequestChallengesFlag{RequestChallenges: new(RequestChallenges)}
	x.challengesFlag.AddFlags(x.set)
	x.userAgentFlag = &UserAgentFlag{UserAgent: new(UserAgent)}
	x.userAgentFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateSessionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "checks", "challenges", "user-agent")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("checks"); flagIdx != nil {
		x.checksFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("challenges"); flagIdx != nil {
		x.challengesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("user-agent"); flagIdx != nil {
		x.userAgentFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.checksFlag.Changed() {
		x.changed = true
		x.CreateSessionRequest.Checks = x.checksFlag.Checks
	}

	if x.challengesFlag.Changed() {
		x.changed = true
		x.CreateSessionRequest.Challenges = x.challengesFlag.RequestChallenges
	}

	if x.userAgentFlag.Changed() {
		x.changed = true
		x.CreateSessionRequest.UserAgent = x.userAgentFlag.UserAgent
	}

	if x.lifetimeFlag.Changed() {
		x.changed = true
		x.CreateSessionRequest.Lifetime = x.lifetimeFlag.Value
	}
}

func (x *CreateSessionRequestFlag) Changed() bool {
	return x.changed
}

type CreateSessionResponseFlag struct {
	*CreateSessionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag      *v2beta.DetailsFlag
	sessionIdFlag    *cli_client.StringParser
	sessionTokenFlag *cli_client.StringParser
	challengesFlag   *ChallengesFlag
}

func (x *CreateSessionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateSessionResponse", pflag.ContinueOnError)

	x.sessionIdFlag = cli_client.NewStringParser(x.set, "session-id", "")
	x.sessionTokenFlag = cli_client.NewStringParser(x.set, "session-token", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.challengesFlag = &ChallengesFlag{Challenges: new(Challenges)}
	x.challengesFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateSessionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "challenges")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("challenges"); flagIdx != nil {
		x.challengesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.CreateSessionResponse.Details = x.detailsFlag.Details
	}

	if x.sessionIdFlag.Changed() {
		x.changed = true
		x.CreateSessionResponse.SessionId = *x.sessionIdFlag.Value
	}
	if x.sessionTokenFlag.Changed() {
		x.changed = true
		x.CreateSessionResponse.SessionToken = *x.sessionTokenFlag.Value
	}

	if x.challengesFlag.Changed() {
		x.changed = true
		x.CreateSessionResponse.Challenges = x.challengesFlag.Challenges
	}

}

func (x *CreateSessionResponseFlag) Changed() bool {
	return x.changed
}

type DeleteSessionRequestFlag struct {
	*DeleteSessionRequest

	changed bool
	set     *pflag.FlagSet

	sessionIdFlag    *cli_client.StringParser
	sessionTokenFlag *cli_client.StringParser
}

func (x *DeleteSessionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteSessionRequest", pflag.ContinueOnError)

	x.sessionIdFlag = cli_client.NewStringParser(x.set, "session-id", "")
	x.sessionTokenFlag = cli_client.NewStringParser(x.set, "session-token", "")
	parent.AddFlagSet(x.set)
}

func (x *DeleteSessionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sessionIdFlag.Changed() {
		x.changed = true
		x.DeleteSessionRequest.SessionId = *x.sessionIdFlag.Value
	}
	if x.sessionTokenFlag.Changed() {
		x.changed = true
		x.DeleteSessionRequest.SessionToken = x.sessionTokenFlag.Value
	}
}

func (x *DeleteSessionRequestFlag) Changed() bool {
	return x.changed
}

type DeleteSessionResponseFlag struct {
	*DeleteSessionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *v2beta.DetailsFlag
}

func (x *DeleteSessionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteSessionResponse", pflag.ContinueOnError)

	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeleteSessionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeleteSessionResponse.Details = x.detailsFlag.Details
	}

}

func (x *DeleteSessionResponseFlag) Changed() bool {
	return x.changed
}

type GetSessionRequestFlag struct {
	*GetSessionRequest

	changed bool
	set     *pflag.FlagSet

	sessionIdFlag    *cli_client.StringParser
	sessionTokenFlag *cli_client.StringParser
}

func (x *GetSessionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSessionRequest", pflag.ContinueOnError)

	x.sessionIdFlag = cli_client.NewStringParser(x.set, "session-id", "")
	x.sessionTokenFlag = cli_client.NewStringParser(x.set, "session-token", "")
	parent.AddFlagSet(x.set)
}

func (x *GetSessionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sessionIdFlag.Changed() {
		x.changed = true
		x.GetSessionRequest.SessionId = *x.sessionIdFlag.Value
	}
	if x.sessionTokenFlag.Changed() {
		x.changed = true
		x.GetSessionRequest.SessionToken = x.sessionTokenFlag.Value
	}
}

func (x *GetSessionRequestFlag) Changed() bool {
	return x.changed
}

type GetSessionResponseFlag struct {
	*GetSessionResponse

	changed bool
	set     *pflag.FlagSet

	sessionFlag *SessionFlag
}

func (x *GetSessionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSessionResponse", pflag.ContinueOnError)

	x.sessionFlag = &SessionFlag{Session: new(Session)}
	x.sessionFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetSessionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "session")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("session"); flagIdx != nil {
		x.sessionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.sessionFlag.Changed() {
		x.changed = true
		x.GetSessionResponse.Session = x.sessionFlag.Session
	}

}

func (x *GetSessionResponseFlag) Changed() bool {
	return x.changed
}

type ListSessionsRequestFlag struct {
	*ListSessionsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *v2beta.ListQueryFlag
	queriesFlag       []*SearchQueryFlag
	sortingColumnFlag *cli_client.EnumParser[SessionFieldName]
}

func (x *ListSessionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListSessionsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*SearchQueryFlag{}
	x.sortingColumnFlag = cli_client.NewEnumParser[SessionFieldName](x.set, "sorting-column", "")
	x.queryFlag = &v2beta.ListQueryFlag{ListQuery: new(v2beta.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListSessionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &SearchQueryFlag{SearchQuery: new(SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListSessionsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListSessionsRequest.Queries[i] = value.SearchQuery
		}
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListSessionsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
}

func (x *ListSessionsRequestFlag) Changed() bool {
	return x.changed
}

type ListSessionsResponseFlag struct {
	*ListSessionsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag  *v2beta.ListDetailsFlag
	sessionsFlag []*SessionFlag
}

func (x *ListSessionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListSessionsResponse", pflag.ContinueOnError)

	x.sessionsFlag = []*SessionFlag{}
	x.detailsFlag = &v2beta.ListDetailsFlag{ListDetails: new(v2beta.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListSessionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "sessions")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("sessions") {
		x.sessionsFlag = append(x.sessionsFlag, &SessionFlag{Session: new(Session)})
		x.sessionsFlag[len(x.sessionsFlag)-1].AddFlags(x.set)
		x.sessionsFlag[len(x.sessionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListSessionsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.sessionsFlag) > 0 {
		x.changed = true
		x.Sessions = make([]*Session, len(x.sessionsFlag))
		for i, value := range x.sessionsFlag {
			x.ListSessionsResponse.Sessions[i] = value.Session
		}
	}

}

func (x *ListSessionsResponseFlag) Changed() bool {
	return x.changed
}

type SetSessionRequestFlag struct {
	*SetSessionRequest

	changed bool
	set     *pflag.FlagSet

	sessionIdFlag    *cli_client.StringParser
	sessionTokenFlag *cli_client.StringParser
	checksFlag       *ChecksFlag
	challengesFlag   *RequestChallengesFlag
	lifetimeFlag     *cli_client.DurationParser
}

func (x *SetSessionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetSessionRequest", pflag.ContinueOnError)

	x.sessionIdFlag = cli_client.NewStringParser(x.set, "session-id", "")
	x.sessionTokenFlag = cli_client.NewStringParser(x.set, "session-token", "")
	x.lifetimeFlag = cli_client.NewDurationParser(x.set, "lifetime", "")
	x.checksFlag = &ChecksFlag{Checks: new(Checks)}
	x.checksFlag.AddFlags(x.set)
	x.challengesFlag = &RequestChallengesFlag{RequestChallenges: new(RequestChallenges)}
	x.challengesFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetSessionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "checks", "challenges")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("checks"); flagIdx != nil {
		x.checksFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("challenges"); flagIdx != nil {
		x.challengesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.sessionIdFlag.Changed() {
		x.changed = true
		x.SetSessionRequest.SessionId = *x.sessionIdFlag.Value
	}
	if x.sessionTokenFlag.Changed() {
		x.changed = true
		x.SetSessionRequest.SessionToken = *x.sessionTokenFlag.Value
	}

	if x.checksFlag.Changed() {
		x.changed = true
		x.SetSessionRequest.Checks = x.checksFlag.Checks
	}

	if x.challengesFlag.Changed() {
		x.changed = true
		x.SetSessionRequest.Challenges = x.challengesFlag.RequestChallenges
	}

	if x.lifetimeFlag.Changed() {
		x.changed = true
		x.SetSessionRequest.Lifetime = x.lifetimeFlag.Value
	}
}

func (x *SetSessionRequestFlag) Changed() bool {
	return x.changed
}

type SetSessionResponseFlag struct {
	*SetSessionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag      *v2beta.DetailsFlag
	sessionTokenFlag *cli_client.StringParser
	challengesFlag   *ChallengesFlag
}

func (x *SetSessionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetSessionResponse", pflag.ContinueOnError)

	x.sessionTokenFlag = cli_client.NewStringParser(x.set, "session-token", "")
	x.detailsFlag = &v2beta.DetailsFlag{Details: new(v2beta.Details)}
	x.detailsFlag.AddFlags(x.set)
	x.challengesFlag = &ChallengesFlag{Challenges: new(Challenges)}
	x.challengesFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetSessionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "challenges")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("challenges"); flagIdx != nil {
		x.challengesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetSessionResponse.Details = x.detailsFlag.Details
	}

	if x.sessionTokenFlag.Changed() {
		x.changed = true
		x.SetSessionResponse.SessionToken = *x.sessionTokenFlag.Value
	}

	if x.challengesFlag.Changed() {
		x.changed = true
		x.SetSessionResponse.Challenges = x.challengesFlag.Challenges
	}

}

func (x *SetSessionResponseFlag) Changed() bool {
	return x.changed
}
