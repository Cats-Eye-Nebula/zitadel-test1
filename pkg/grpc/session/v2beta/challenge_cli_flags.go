// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package session

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type ChallengesFlag struct {
	*Challenges

	changed bool
	set     *pflag.FlagSet

	webAuthNFlag *Challenges_WebAuthNFlag
	otpSmsFlag   *cli_client.StringParser
	otpEmailFlag *cli_client.StringParser
}

func (x *ChallengesFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Challenges", pflag.ContinueOnError)

	x.otpSmsFlag = cli_client.NewStringParser(x.set, "otp-sms", "")
	x.otpEmailFlag = cli_client.NewStringParser(x.set, "otp-email", "")
	x.webAuthNFlag = &Challenges_WebAuthNFlag{Challenges_WebAuthN: new(Challenges_WebAuthN)}
	x.webAuthNFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ChallengesFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "web-auth-n")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("web-auth-n"); flagIdx != nil {
		x.webAuthNFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.webAuthNFlag.Changed() {
		x.changed = true
		x.Challenges.WebAuthN = x.webAuthNFlag.Challenges_WebAuthN
	}

	if x.otpSmsFlag.Changed() {
		x.changed = true
		x.Challenges.OtpSms = x.otpSmsFlag.Value
	}
	if x.otpEmailFlag.Changed() {
		x.changed = true
		x.Challenges.OtpEmail = x.otpEmailFlag.Value
	}
}

func (x *ChallengesFlag) Changed() bool {
	return x.changed
}

type Challenges_WebAuthNFlag struct {
	*Challenges_WebAuthN

	changed bool
	set     *pflag.FlagSet

	publicKeyCredentialRequestOptionsFlag *cli_client.StructParser
}

func (x *Challenges_WebAuthNFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Challenges_WebAuthN", pflag.ContinueOnError)

	x.publicKeyCredentialRequestOptionsFlag = cli_client.NewStructParser(x.set, "public-key-credential-request-options", "")
	parent.AddFlagSet(x.set)
}

func (x *Challenges_WebAuthNFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.publicKeyCredentialRequestOptionsFlag.Changed() {
		x.changed = true
		x.Challenges_WebAuthN.PublicKeyCredentialRequestOptions = x.publicKeyCredentialRequestOptionsFlag.Value
	}
}

func (x *Challenges_WebAuthNFlag) Changed() bool {
	return x.changed
}

type RequestChallengesFlag struct {
	*RequestChallenges

	changed bool
	set     *pflag.FlagSet

	webAuthNFlag *RequestChallenges_WebAuthNFlag
	otpSmsFlag   *RequestChallenges_OTPSMSFlag
	otpEmailFlag *RequestChallenges_OTPEmailFlag
}

func (x *RequestChallengesFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestChallenges", pflag.ContinueOnError)

	x.webAuthNFlag = &RequestChallenges_WebAuthNFlag{RequestChallenges_WebAuthN: new(RequestChallenges_WebAuthN)}
	x.webAuthNFlag.AddFlags(x.set)
	x.otpSmsFlag = &RequestChallenges_OTPSMSFlag{RequestChallenges_OTPSMS: new(RequestChallenges_OTPSMS)}
	x.otpSmsFlag.AddFlags(x.set)
	x.otpEmailFlag = &RequestChallenges_OTPEmailFlag{RequestChallenges_OTPEmail: new(RequestChallenges_OTPEmail)}
	x.otpEmailFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RequestChallengesFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "web-auth-n", "otp-sms", "otp-email")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("web-auth-n"); flagIdx != nil {
		x.webAuthNFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("otp-sms"); flagIdx != nil {
		x.otpSmsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("otp-email"); flagIdx != nil {
		x.otpEmailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.webAuthNFlag.Changed() {
		x.changed = true
		x.RequestChallenges.WebAuthN = x.webAuthNFlag.RequestChallenges_WebAuthN
	}

	if x.otpSmsFlag.Changed() {
		x.changed = true
		x.RequestChallenges.OtpSms = x.otpSmsFlag.RequestChallenges_OTPSMS
	}

	if x.otpEmailFlag.Changed() {
		x.changed = true
		x.RequestChallenges.OtpEmail = x.otpEmailFlag.RequestChallenges_OTPEmail
	}

}

func (x *RequestChallengesFlag) Changed() bool {
	return x.changed
}

type RequestChallenges_OTPEmailFlag struct {
	*RequestChallenges_OTPEmail

	changed bool
	set     *pflag.FlagSet

	sendCodeFlag   *RequestChallenges_OTPEmail_SendCodeFlag
	returnCodeFlag *RequestChallenges_OTPEmail_ReturnCodeFlag
}

func (x *RequestChallenges_OTPEmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestChallenges_OTPEmail", pflag.ContinueOnError)

	x.sendCodeFlag = &RequestChallenges_OTPEmail_SendCodeFlag{RequestChallenges_OTPEmail_SendCode: new(RequestChallenges_OTPEmail_SendCode)}
	x.sendCodeFlag.AddFlags(x.set)
	x.returnCodeFlag = &RequestChallenges_OTPEmail_ReturnCodeFlag{RequestChallenges_OTPEmail_ReturnCode: new(RequestChallenges_OTPEmail_ReturnCode)}
	x.returnCodeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RequestChallenges_OTPEmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "send-code", "return-code")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("send-code"); flagIdx != nil {
		x.sendCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("return-code"); flagIdx != nil {
		x.returnCodeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "send-code", "return-code").Last().Flag {
	case "send-code":
		if x.sendCodeFlag.Changed() {
			x.changed = true
			x.RequestChallenges_OTPEmail.DeliveryType = &RequestChallenges_OTPEmail_SendCode_{SendCode: x.sendCodeFlag.RequestChallenges_OTPEmail_SendCode}
		}
	case "return-code":
		if x.returnCodeFlag.Changed() {
			x.changed = true
			x.RequestChallenges_OTPEmail.DeliveryType = &RequestChallenges_OTPEmail_ReturnCode_{ReturnCode: x.returnCodeFlag.RequestChallenges_OTPEmail_ReturnCode}
		}
	}
}

func (x *RequestChallenges_OTPEmailFlag) Changed() bool {
	return x.changed
}

type RequestChallenges_OTPEmail_ReturnCodeFlag struct {
	*RequestChallenges_OTPEmail_ReturnCode

	changed bool
	set     *pflag.FlagSet
}

func (x *RequestChallenges_OTPEmail_ReturnCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestChallenges_OTPEmail_ReturnCode", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RequestChallenges_OTPEmail_ReturnCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RequestChallenges_OTPEmail_ReturnCodeFlag) Changed() bool {
	return x.changed
}

type RequestChallenges_OTPEmail_SendCodeFlag struct {
	*RequestChallenges_OTPEmail_SendCode

	changed bool
	set     *pflag.FlagSet

	urlTemplateFlag *cli_client.StringParser
}

func (x *RequestChallenges_OTPEmail_SendCodeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestChallenges_OTPEmail_SendCode", pflag.ContinueOnError)

	x.urlTemplateFlag = cli_client.NewStringParser(x.set, "url-template", "")
	parent.AddFlagSet(x.set)
}

func (x *RequestChallenges_OTPEmail_SendCodeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.urlTemplateFlag.Changed() {
		x.changed = true
		x.RequestChallenges_OTPEmail_SendCode.UrlTemplate = x.urlTemplateFlag.Value
	}
}

func (x *RequestChallenges_OTPEmail_SendCodeFlag) Changed() bool {
	return x.changed
}

type RequestChallenges_OTPSMSFlag struct {
	*RequestChallenges_OTPSMS

	changed bool
	set     *pflag.FlagSet

	returnCodeFlag *cli_client.BoolParser
}

func (x *RequestChallenges_OTPSMSFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestChallenges_OTPSMS", pflag.ContinueOnError)

	x.returnCodeFlag = cli_client.NewBoolParser(x.set, "return-code", "")
	parent.AddFlagSet(x.set)
}

func (x *RequestChallenges_OTPSMSFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.returnCodeFlag.Changed() {
		x.changed = true
		x.RequestChallenges_OTPSMS.ReturnCode = *x.returnCodeFlag.Value
	}
}

func (x *RequestChallenges_OTPSMSFlag) Changed() bool {
	return x.changed
}

type RequestChallenges_WebAuthNFlag struct {
	*RequestChallenges_WebAuthN

	changed bool
	set     *pflag.FlagSet

	domainFlag                      *cli_client.StringParser
	userVerificationRequirementFlag *cli_client.EnumParser[UserVerificationRequirement]
}

func (x *RequestChallenges_WebAuthNFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RequestChallenges_WebAuthN", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	x.userVerificationRequirementFlag = cli_client.NewEnumParser[UserVerificationRequirement](x.set, "user-verification-requirement", "")
	parent.AddFlagSet(x.set)
}

func (x *RequestChallenges_WebAuthNFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.RequestChallenges_WebAuthN.Domain = *x.domainFlag.Value
	}
	if x.userVerificationRequirementFlag.Changed() {
		x.changed = true
		x.RequestChallenges_WebAuthN.UserVerificationRequirement = *x.userVerificationRequirementFlag.Value
	}
}

func (x *RequestChallenges_WebAuthNFlag) Changed() bool {
	return x.changed
}
