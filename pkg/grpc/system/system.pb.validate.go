// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zitadel/system.proto

package system

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	authn "github.com/zitadel/zitadel/pkg/grpc/authn"

	instance "github.com/zitadel/zitadel/pkg/grpc/instance"

	quota "github.com/zitadel/zitadel/pkg/grpc/quota"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = instance.FieldName(0)

	_ = instance.FieldName(0)

	_ = quota.Unit(0)

	_ = quota.Unit(0)

	_ = instance.DomainFieldName(0)

	_ = instance.DomainFieldName(0)

	_ = authn.KeyType(0)
)

// Validate checks the field values on HealthzRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthzRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzRequestValidationError is the validation error returned by
// HealthzRequest.Validate if the designated constraints aren't met.
type HealthzRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzRequestValidationError) ErrorName() string { return "HealthzRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthzRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzRequestValidationError{}

// Validate checks the field values on HealthzResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HealthzResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzResponseValidationError is the validation error returned by
// HealthzResponse.Validate if the designated constraints aren't met.
type HealthzResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzResponseValidationError) ErrorName() string { return "HealthzResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthzResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzResponseValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstancesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstancesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on GetInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return GetInstanceRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetInstanceRequestValidationError is the validation error returned by
// GetInstanceRequest.Validate if the designated constraints aren't met.
type GetInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceRequestValidationError) ErrorName() string {
	return "GetInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceRequestValidationError{}

// Validate checks the field values on GetInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetInstanceResponseValidationError is the validation error returned by
// GetInstanceResponse.Validate if the designated constraints aren't met.
type GetInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceResponseValidationError) ErrorName() string {
	return "GetInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceResponseValidationError{}

// Validate checks the field values on AddInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceName()); l < 1 || l > 200 {
		return AddInstanceRequestValidationError{
			field:  "InstanceName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFirstOrgName()) > 200 {
		return AddInstanceRequestValidationError{
			field:  "FirstOrgName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCustomDomain()) > 200 {
		return AddInstanceRequestValidationError{
			field:  "CustomDomain",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetOwnerUserName()) > 200 {
		return AddInstanceRequestValidationError{
			field:  "OwnerUserName",
			reason: "value length must be at most 200 runes",
		}
	}

	if m.GetOwnerEmail() == nil {
		return AddInstanceRequestValidationError{
			field:  "OwnerEmail",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOwnerEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddInstanceRequestValidationError{
				field:  "OwnerEmail",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwnerProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddInstanceRequestValidationError{
				field:  "OwnerProfile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetOwnerPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddInstanceRequestValidationError{
				field:  "OwnerPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetDefaultLanguage()) > 10 {
		return AddInstanceRequestValidationError{
			field:  "DefaultLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	return nil
}

// AddInstanceRequestValidationError is the validation error returned by
// AddInstanceRequest.Validate if the designated constraints aren't met.
type AddInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInstanceRequestValidationError) ErrorName() string {
	return "AddInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInstanceRequestValidationError{}

// Validate checks the field values on AddInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddInstanceResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddInstanceResponseValidationError is the validation error returned by
// AddInstanceResponse.Validate if the designated constraints aren't met.
type AddInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInstanceResponseValidationError) ErrorName() string {
	return "AddInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInstanceResponseValidationError{}

// Validate checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceName()); l < 1 || l > 200 {
		return CreateInstanceRequestValidationError{
			field:  "InstanceName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetFirstOrgName()) > 200 {
		return CreateInstanceRequestValidationError{
			field:  "FirstOrgName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetCustomDomain()) > 200 {
		return CreateInstanceRequestValidationError{
			field:  "CustomDomain",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDefaultLanguage()) > 10 {
		return CreateInstanceRequestValidationError{
			field:  "DefaultLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	switch m.Owner.(type) {

	case *CreateInstanceRequest_Human_:

		if v, ok := interface{}(m.GetHuman()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInstanceRequestValidationError{
					field:  "Human",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CreateInstanceRequest_Machine_:

		if v, ok := interface{}(m.GetMachine()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateInstanceRequestValidationError{
					field:  "Machine",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return CreateInstanceRequestValidationError{
			field:  "Owner",
			reason: "value is required",
		}

	}

	return nil
}

// CreateInstanceRequestValidationError is the validation error returned by
// CreateInstanceRequest.Validate if the designated constraints aren't met.
type CreateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequestValidationError) ErrorName() string {
	return "CreateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequestValidationError{}

// Validate checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Pat

	// no validation rules for MachineKey

	return nil
}

// CreateInstanceResponseValidationError is the validation error returned by
// CreateInstanceResponse.Validate if the designated constraints aren't met.
type CreateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceResponseValidationError) ErrorName() string {
	return "CreateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceResponseValidationError{}

// Validate checks the field values on UpdateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for InstanceId

	if l := utf8.RuneCountInString(m.GetInstanceName()); l < 1 || l > 200 {
		return UpdateInstanceRequestValidationError{
			field:  "InstanceName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateInstanceRequestValidationError is the validation error returned by
// UpdateInstanceRequest.Validate if the designated constraints aren't met.
type UpdateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstanceRequestValidationError) ErrorName() string {
	return "UpdateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstanceRequestValidationError{}

// Validate checks the field values on UpdateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateInstanceResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateInstanceResponseValidationError is the validation error returned by
// UpdateInstanceResponse.Validate if the designated constraints aren't met.
type UpdateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateInstanceResponseValidationError) ErrorName() string {
	return "UpdateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateInstanceResponseValidationError{}

// Validate checks the field values on RemoveInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return RemoveInstanceRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveInstanceRequestValidationError is the validation error returned by
// RemoveInstanceRequest.Validate if the designated constraints aren't met.
type RemoveInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveInstanceRequestValidationError) ErrorName() string {
	return "RemoveInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveInstanceRequestValidationError{}

// Validate checks the field values on RemoveInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveInstanceResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveInstanceResponseValidationError is the validation error returned by
// RemoveInstanceResponse.Validate if the designated constraints aren't met.
type RemoveInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveInstanceResponseValidationError) ErrorName() string {
	return "RemoveInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveInstanceResponseValidationError{}

// Validate checks the field values on ListIAMMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIAMMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIAMMembersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InstanceId

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIAMMembersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListIAMMembersRequestValidationError is the validation error returned by
// ListIAMMembersRequest.Validate if the designated constraints aren't met.
type ListIAMMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIAMMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIAMMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIAMMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIAMMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIAMMembersRequestValidationError) ErrorName() string {
	return "ListIAMMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIAMMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIAMMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIAMMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIAMMembersRequestValidationError{}

// Validate checks the field values on ListIAMMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIAMMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIAMMembersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIAMMembersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListIAMMembersResponseValidationError is the validation error returned by
// ListIAMMembersResponse.Validate if the designated constraints aren't met.
type ListIAMMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIAMMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIAMMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIAMMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIAMMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIAMMembersResponseValidationError) ErrorName() string {
	return "ListIAMMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIAMMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIAMMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIAMMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIAMMembersResponseValidationError{}

// Validate checks the field values on GetUsageRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetUsageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return GetUsageRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetUsageRequestValidationError is the validation error returned by
// GetUsageRequest.Validate if the designated constraints aren't met.
type GetUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUsageRequestValidationError) ErrorName() string { return "GetUsageRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUsageRequestValidationError{}

// Validate checks the field values on AddQuotaRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddQuotaRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return AddQuotaRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := _AddQuotaRequest_Unit_NotInLookup[m.GetUnit()]; ok {
		return AddQuotaRequestValidationError{
			field:  "Unit",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := quota.Unit_name[int32(m.GetUnit())]; !ok {
		return AddQuotaRequestValidationError{
			field:  "Unit",
			reason: "value must be one of the defined enum values",
		}
	}

	if m.GetFrom() == nil {
		return AddQuotaRequestValidationError{
			field:  "From",
			reason: "value is required",
		}
	}

	if m.GetResetInterval() == nil {
		return AddQuotaRequestValidationError{
			field:  "ResetInterval",
			reason: "value is required",
		}
	}

	if m.GetAmount() <= 0 {
		return AddQuotaRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Limit

	for idx, item := range m.GetNotifications() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddQuotaRequestValidationError{
					field:  fmt.Sprintf("Notifications[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AddQuotaRequestValidationError is the validation error returned by
// AddQuotaRequest.Validate if the designated constraints aren't met.
type AddQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQuotaRequestValidationError) ErrorName() string { return "AddQuotaRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQuotaRequestValidationError{}

var _AddQuotaRequest_Unit_NotInLookup = map[quota.Unit]struct{}{
	0: {},
}

// Validate checks the field values on AddQuotaResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddQuotaResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddQuotaResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddQuotaResponseValidationError is the validation error returned by
// AddQuotaResponse.Validate if the designated constraints aren't met.
type AddQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddQuotaResponseValidationError) ErrorName() string { return "AddQuotaResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddQuotaResponseValidationError{}

// Validate checks the field values on RemoveQuotaRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveQuotaRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return RemoveQuotaRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for Unit

	return nil
}

// RemoveQuotaRequestValidationError is the validation error returned by
// RemoveQuotaRequest.Validate if the designated constraints aren't met.
type RemoveQuotaRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveQuotaRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveQuotaRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveQuotaRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveQuotaRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveQuotaRequestValidationError) ErrorName() string {
	return "RemoveQuotaRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveQuotaRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveQuotaRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveQuotaRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveQuotaRequestValidationError{}

// Validate checks the field values on RemoveQuotaResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveQuotaResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveQuotaResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveQuotaResponseValidationError is the validation error returned by
// RemoveQuotaResponse.Validate if the designated constraints aren't met.
type RemoveQuotaResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveQuotaResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveQuotaResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveQuotaResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveQuotaResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveQuotaResponseValidationError) ErrorName() string {
	return "RemoveQuotaResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveQuotaResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveQuotaResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveQuotaResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveQuotaResponseValidationError{}

// Validate checks the field values on ExistsDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExistsDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return ExistsDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ExistsDomainRequestValidationError is the validation error returned by
// ExistsDomainRequest.Validate if the designated constraints aren't met.
type ExistsDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsDomainRequestValidationError) ErrorName() string {
	return "ExistsDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsDomainRequestValidationError{}

// Validate checks the field values on ExistsDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExistsDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Exists

	return nil
}

// ExistsDomainResponseValidationError is the validation error returned by
// ExistsDomainResponse.Validate if the designated constraints aren't met.
type ExistsDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExistsDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExistsDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExistsDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExistsDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExistsDomainResponseValidationError) ErrorName() string {
	return "ExistsDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExistsDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExistsDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExistsDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExistsDomainResponseValidationError{}

// Validate checks the field values on ListDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDomainsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return ListDomainsRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDomainsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDomainsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDomainsRequestValidationError is the validation error returned by
// ListDomainsRequest.Validate if the designated constraints aren't met.
type ListDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDomainsRequestValidationError) ErrorName() string {
	return "ListDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDomainsRequestValidationError{}

// Validate checks the field values on ListDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListDomainsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDomainsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDomainsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListDomainsResponseValidationError is the validation error returned by
// ListDomainsResponse.Validate if the designated constraints aren't met.
type ListDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDomainsResponseValidationError) ErrorName() string {
	return "ListDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDomainsResponseValidationError{}

// Validate checks the field values on AddDomainRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return AddDomainRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return AddDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddDomainRequestValidationError is the validation error returned by
// AddDomainRequest.Validate if the designated constraints aren't met.
type AddDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainRequestValidationError) ErrorName() string { return "AddDomainRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainRequestValidationError{}

// Validate checks the field values on AddDomainResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddDomainResponseValidationError is the validation error returned by
// AddDomainResponse.Validate if the designated constraints aren't met.
type AddDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddDomainResponseValidationError) ErrorName() string {
	return "AddDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddDomainResponseValidationError{}

// Validate checks the field values on RemoveDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return RemoveDomainRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return RemoveDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveDomainRequestValidationError is the validation error returned by
// RemoveDomainRequest.Validate if the designated constraints aren't met.
type RemoveDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDomainRequestValidationError) ErrorName() string {
	return "RemoveDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDomainRequestValidationError{}

// Validate checks the field values on RemoveDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveDomainResponseValidationError is the validation error returned by
// RemoveDomainResponse.Validate if the designated constraints aren't met.
type RemoveDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveDomainResponseValidationError) ErrorName() string {
	return "RemoveDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveDomainResponseValidationError{}

// Validate checks the field values on SetPrimaryDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetPrimaryDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetInstanceId()); l < 1 || l > 200 {
		return SetPrimaryDomainRequestValidationError{
			field:  "InstanceId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return SetPrimaryDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// SetPrimaryDomainRequestValidationError is the validation error returned by
// SetPrimaryDomainRequest.Validate if the designated constraints aren't met.
type SetPrimaryDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPrimaryDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPrimaryDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPrimaryDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPrimaryDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPrimaryDomainRequestValidationError) ErrorName() string {
	return "SetPrimaryDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPrimaryDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPrimaryDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPrimaryDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPrimaryDomainRequestValidationError{}

// Validate checks the field values on SetPrimaryDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetPrimaryDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetPrimaryDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetPrimaryDomainResponseValidationError is the validation error returned by
// SetPrimaryDomainResponse.Validate if the designated constraints aren't met.
type SetPrimaryDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPrimaryDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPrimaryDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPrimaryDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPrimaryDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPrimaryDomainResponseValidationError) ErrorName() string {
	return "SetPrimaryDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetPrimaryDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPrimaryDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPrimaryDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPrimaryDomainResponseValidationError{}

// Validate checks the field values on ChangeSubscriptionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangeSubscriptionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return ChangeSubscriptionRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSubscriptionName()); l < 1 || l > 200 {
		return ChangeSubscriptionRequestValidationError{
			field:  "SubscriptionName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for RequestLimit

	// no validation rules for ActionMinsLimit

	return nil
}

// ChangeSubscriptionRequestValidationError is the validation error returned by
// ChangeSubscriptionRequest.Validate if the designated constraints aren't met.
type ChangeSubscriptionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSubscriptionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSubscriptionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSubscriptionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSubscriptionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSubscriptionRequestValidationError) ErrorName() string {
	return "ChangeSubscriptionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSubscriptionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSubscriptionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSubscriptionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSubscriptionRequestValidationError{}

// Validate checks the field values on ChangeSubscriptionResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ChangeSubscriptionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ChangeSubscriptionResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ChangeSubscriptionResponseValidationError is the validation error returned
// by ChangeSubscriptionResponse.Validate if the designated constraints aren't met.
type ChangeSubscriptionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ChangeSubscriptionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ChangeSubscriptionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ChangeSubscriptionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ChangeSubscriptionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ChangeSubscriptionResponseValidationError) ErrorName() string {
	return "ChangeSubscriptionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ChangeSubscriptionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sChangeSubscriptionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ChangeSubscriptionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ChangeSubscriptionResponseValidationError{}

// Validate checks the field values on ListViewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListViewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListViewsRequestValidationError is the validation error returned by
// ListViewsRequest.Validate if the designated constraints aren't met.
type ListViewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsRequestValidationError) ErrorName() string { return "ListViewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListViewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsRequestValidationError{}

// Validate checks the field values on ListViewsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListViewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListViewsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListViewsResponseValidationError is the validation error returned by
// ListViewsResponse.Validate if the designated constraints aren't met.
type ListViewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsResponseValidationError) ErrorName() string {
	return "ListViewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListViewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsResponseValidationError{}

// Validate checks the field values on ClearViewRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClearViewRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDatabase()); l < 1 || l > 200 {
		return ClearViewRequestValidationError{
			field:  "Database",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetViewName()); l < 1 || l > 200 {
		return ClearViewRequestValidationError{
			field:  "ViewName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ClearViewRequestValidationError is the validation error returned by
// ClearViewRequest.Validate if the designated constraints aren't met.
type ClearViewRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearViewRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearViewRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearViewRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearViewRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearViewRequestValidationError) ErrorName() string { return "ClearViewRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClearViewRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearViewRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearViewRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearViewRequestValidationError{}

// Validate checks the field values on ClearViewResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClearViewResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ClearViewResponseValidationError is the validation error returned by
// ClearViewResponse.Validate if the designated constraints aren't met.
type ClearViewResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearViewResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearViewResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearViewResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearViewResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearViewResponseValidationError) ErrorName() string {
	return "ClearViewResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClearViewResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearViewResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearViewResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearViewResponseValidationError{}

// Validate checks the field values on ListFailedEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFailedEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListFailedEventsRequestValidationError is the validation error returned by
// ListFailedEventsRequest.Validate if the designated constraints aren't met.
type ListFailedEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedEventsRequestValidationError) ErrorName() string {
	return "ListFailedEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedEventsRequestValidationError{}

// Validate checks the field values on ListFailedEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFailedEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFailedEventsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListFailedEventsResponseValidationError is the validation error returned by
// ListFailedEventsResponse.Validate if the designated constraints aren't met.
type ListFailedEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedEventsResponseValidationError) ErrorName() string {
	return "ListFailedEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedEventsResponseValidationError{}

// Validate checks the field values on RemoveFailedEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFailedEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDatabase()); l < 1 || l > 200 {
		return RemoveFailedEventRequestValidationError{
			field:  "Database",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetViewName()); l < 1 || l > 200 {
		return RemoveFailedEventRequestValidationError{
			field:  "ViewName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for FailedSequence

	// no validation rules for InstanceId

	return nil
}

// RemoveFailedEventRequestValidationError is the validation error returned by
// RemoveFailedEventRequest.Validate if the designated constraints aren't met.
type RemoveFailedEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFailedEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFailedEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFailedEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFailedEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFailedEventRequestValidationError) ErrorName() string {
	return "RemoveFailedEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFailedEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFailedEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFailedEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFailedEventRequestValidationError{}

// Validate checks the field values on RemoveFailedEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFailedEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveFailedEventResponseValidationError is the validation error returned by
// RemoveFailedEventResponse.Validate if the designated constraints aren't met.
type RemoveFailedEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFailedEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFailedEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFailedEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFailedEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFailedEventResponseValidationError) ErrorName() string {
	return "RemoveFailedEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFailedEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFailedEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFailedEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFailedEventResponseValidationError{}

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *View) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Database

	// no validation rules for ViewName

	// no validation rules for ProcessedSequence

	if v, ok := interface{}(m.GetEventTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "EventTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastSuccessfulSpoolerRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "LastSuccessfulSpoolerRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Instance

	return nil
}

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on FailedEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FailedEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Database

	// no validation rules for ViewName

	// no validation rules for FailedSequence

	// no validation rules for FailureCount

	// no validation rules for ErrorMessage

	if v, ok := interface{}(m.GetLastFailed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FailedEventValidationError{
				field:  "LastFailed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FailedEventValidationError is the validation error returned by
// FailedEvent.Validate if the designated constraints aren't met.
type FailedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailedEventValidationError) ErrorName() string { return "FailedEventValidationError" }

// Error satisfies the builtin error interface
func (e FailedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailedEventValidationError{}

// Validate checks the field values on AddInstanceRequest_Profile with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInstanceRequest_Profile) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFirstName()) > 200 {
		return AddInstanceRequest_ProfileValidationError{
			field:  "FirstName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLastName()) > 200 {
		return AddInstanceRequest_ProfileValidationError{
			field:  "LastName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return AddInstanceRequest_ProfileValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	return nil
}

// AddInstanceRequest_ProfileValidationError is the validation error returned
// by AddInstanceRequest_Profile.Validate if the designated constraints aren't met.
type AddInstanceRequest_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInstanceRequest_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInstanceRequest_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInstanceRequest_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInstanceRequest_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInstanceRequest_ProfileValidationError) ErrorName() string {
	return "AddInstanceRequest_ProfileValidationError"
}

// Error satisfies the builtin error interface
func (e AddInstanceRequest_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInstanceRequest_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInstanceRequest_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInstanceRequest_ProfileValidationError{}

// Validate checks the field values on AddInstanceRequest_Email with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInstanceRequest_Email) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetEmail()); l < 1 || l > 200 {
		return AddInstanceRequest_EmailValidationError{
			field:  "Email",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for IsEmailVerified

	return nil
}

// AddInstanceRequest_EmailValidationError is the validation error returned by
// AddInstanceRequest_Email.Validate if the designated constraints aren't met.
type AddInstanceRequest_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInstanceRequest_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInstanceRequest_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInstanceRequest_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInstanceRequest_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInstanceRequest_EmailValidationError) ErrorName() string {
	return "AddInstanceRequest_EmailValidationError"
}

// Error satisfies the builtin error interface
func (e AddInstanceRequest_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInstanceRequest_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInstanceRequest_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInstanceRequest_EmailValidationError{}

// Validate checks the field values on AddInstanceRequest_Password with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddInstanceRequest_Password) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPassword()) > 200 {
		return AddInstanceRequest_PasswordValidationError{
			field:  "Password",
			reason: "value length must be at most 200 runes",
		}
	}

	// no validation rules for PasswordChangeRequired

	return nil
}

// AddInstanceRequest_PasswordValidationError is the validation error returned
// by AddInstanceRequest_Password.Validate if the designated constraints
// aren't met.
type AddInstanceRequest_PasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddInstanceRequest_PasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddInstanceRequest_PasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddInstanceRequest_PasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddInstanceRequest_PasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddInstanceRequest_PasswordValidationError) ErrorName() string {
	return "AddInstanceRequest_PasswordValidationError"
}

// Error satisfies the builtin error interface
func (e AddInstanceRequest_PasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddInstanceRequest_Password.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddInstanceRequest_PasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddInstanceRequest_PasswordValidationError{}

// Validate checks the field values on CreateInstanceRequest_Profile with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest_Profile) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetFirstName()) > 200 {
		return CreateInstanceRequest_ProfileValidationError{
			field:  "FirstName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetLastName()) > 200 {
		return CreateInstanceRequest_ProfileValidationError{
			field:  "LastName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return CreateInstanceRequest_ProfileValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	return nil
}

// CreateInstanceRequest_ProfileValidationError is the validation error
// returned by CreateInstanceRequest_Profile.Validate if the designated
// constraints aren't met.
type CreateInstanceRequest_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_ProfileValidationError) ErrorName() string {
	return "CreateInstanceRequest_ProfileValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_ProfileValidationError{}

// Validate checks the field values on CreateInstanceRequest_Email with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest_Email) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetEmail()); l < 1 || l > 200 {
		return CreateInstanceRequest_EmailValidationError{
			field:  "Email",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return CreateInstanceRequest_EmailValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	// no validation rules for IsEmailVerified

	return nil
}

func (m *CreateInstanceRequest_Email) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateInstanceRequest_Email) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateInstanceRequest_EmailValidationError is the validation error returned
// by CreateInstanceRequest_Email.Validate if the designated constraints
// aren't met.
type CreateInstanceRequest_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_EmailValidationError) ErrorName() string {
	return "CreateInstanceRequest_EmailValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_EmailValidationError{}

// Validate checks the field values on CreateInstanceRequest_Password with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest_Password) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPassword()) > 200 {
		return CreateInstanceRequest_PasswordValidationError{
			field:  "Password",
			reason: "value length must be at most 200 runes",
		}
	}

	// no validation rules for PasswordChangeRequired

	return nil
}

// CreateInstanceRequest_PasswordValidationError is the validation error
// returned by CreateInstanceRequest_Password.Validate if the designated
// constraints aren't met.
type CreateInstanceRequest_PasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_PasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_PasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_PasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_PasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_PasswordValidationError) ErrorName() string {
	return "CreateInstanceRequest_PasswordValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_PasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_Password.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_PasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_PasswordValidationError{}

// Validate checks the field values on CreateInstanceRequest_Human with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest_Human) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserName()) > 200 {
		return CreateInstanceRequest_HumanValidationError{
			field:  "UserName",
			reason: "value length must be at most 200 runes",
		}
	}

	if m.GetEmail() == nil {
		return CreateInstanceRequest_HumanValidationError{
			field:  "Email",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_HumanValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_HumanValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_HumanValidationError{
				field:  "Password",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateInstanceRequest_HumanValidationError is the validation error returned
// by CreateInstanceRequest_Human.Validate if the designated constraints
// aren't met.
type CreateInstanceRequest_HumanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_HumanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_HumanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_HumanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_HumanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_HumanValidationError) ErrorName() string {
	return "CreateInstanceRequest_HumanValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_HumanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_Human.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_HumanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_HumanValidationError{}

// Validate checks the field values on
// CreateInstanceRequest_PersonalAccessToken with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *CreateInstanceRequest_PersonalAccessToken) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_PersonalAccessTokenValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateInstanceRequest_PersonalAccessTokenValidationError is the validation
// error returned by CreateInstanceRequest_PersonalAccessToken.Validate if the
// designated constraints aren't met.
type CreateInstanceRequest_PersonalAccessTokenValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_PersonalAccessTokenValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_PersonalAccessTokenValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_PersonalAccessTokenValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_PersonalAccessTokenValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_PersonalAccessTokenValidationError) ErrorName() string {
	return "CreateInstanceRequest_PersonalAccessTokenValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_PersonalAccessTokenValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_PersonalAccessToken.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_PersonalAccessTokenValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_PersonalAccessTokenValidationError{}

// Validate checks the field values on CreateInstanceRequest_MachineKey with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *CreateInstanceRequest_MachineKey) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _CreateInstanceRequest_MachineKey_Type_NotInLookup[m.GetType()]; ok {
		return CreateInstanceRequest_MachineKeyValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := authn.KeyType_name[int32(m.GetType())]; !ok {
		return CreateInstanceRequest_MachineKeyValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_MachineKeyValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateInstanceRequest_MachineKeyValidationError is the validation error
// returned by CreateInstanceRequest_MachineKey.Validate if the designated
// constraints aren't met.
type CreateInstanceRequest_MachineKeyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_MachineKeyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_MachineKeyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_MachineKeyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_MachineKeyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_MachineKeyValidationError) ErrorName() string {
	return "CreateInstanceRequest_MachineKeyValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_MachineKeyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_MachineKey.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_MachineKeyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_MachineKeyValidationError{}

var _CreateInstanceRequest_MachineKey_Type_NotInLookup = map[authn.KeyType]struct{}{
	0: {},
}

// Validate checks the field values on CreateInstanceRequest_Machine with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateInstanceRequest_Machine) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserName()) > 200 {
		return CreateInstanceRequest_MachineValidationError{
			field:  "UserName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetName()) > 200 {
		return CreateInstanceRequest_MachineValidationError{
			field:  "Name",
			reason: "value length must be at most 200 runes",
		}
	}

	if v, ok := interface{}(m.GetPersonalAccessToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_MachineValidationError{
				field:  "PersonalAccessToken",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMachineKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceRequest_MachineValidationError{
				field:  "MachineKey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateInstanceRequest_MachineValidationError is the validation error
// returned by CreateInstanceRequest_Machine.Validate if the designated
// constraints aren't met.
type CreateInstanceRequest_MachineValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequest_MachineValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequest_MachineValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequest_MachineValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequest_MachineValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequest_MachineValidationError) ErrorName() string {
	return "CreateInstanceRequest_MachineValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequest_MachineValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest_Machine.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequest_MachineValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequest_MachineValidationError{}
