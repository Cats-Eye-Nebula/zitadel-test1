// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package system

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	authn "github.com/zitadel/zitadel/pkg/grpc/authn"
	feature "github.com/zitadel/zitadel/pkg/grpc/feature"
	instance "github.com/zitadel/zitadel/pkg/grpc/instance"
	member "github.com/zitadel/zitadel/pkg/grpc/member"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	quota "github.com/zitadel/zitadel/pkg/grpc/quota"
	os "os"
)

type AddDomainRequestFlag struct {
	*AddDomainRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	domainFlag     *cli_client.StringParser
}

func (x *AddDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddDomainRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *AddDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.AddDomainRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.AddDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *AddDomainRequestFlag) Changed() bool {
	return x.changed
}

type AddDomainResponseFlag struct {
	*AddDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddDomainResponseFlag) Changed() bool {
	return x.changed
}

type AddInstanceRequestFlag struct {
	*AddInstanceRequest

	changed bool
	set     *pflag.FlagSet

	instanceNameFlag    *cli_client.StringParser
	firstOrgNameFlag    *cli_client.StringParser
	customDomainFlag    *cli_client.StringParser
	ownerUserNameFlag   *cli_client.StringParser
	ownerEmailFlag      *AddInstanceRequest_EmailFlag
	ownerProfileFlag    *AddInstanceRequest_ProfileFlag
	ownerPasswordFlag   *AddInstanceRequest_PasswordFlag
	defaultLanguageFlag *cli_client.StringParser
}

func (x *AddInstanceRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddInstanceRequest", pflag.ContinueOnError)

	x.instanceNameFlag = cli_client.NewStringParser(x.set, "instance-name", "")
	x.firstOrgNameFlag = cli_client.NewStringParser(x.set, "first-org-name", "")
	x.customDomainFlag = cli_client.NewStringParser(x.set, "custom-domain", "")
	x.ownerUserNameFlag = cli_client.NewStringParser(x.set, "owner-user-name", "")
	x.defaultLanguageFlag = cli_client.NewStringParser(x.set, "default-language", "")
	x.ownerEmailFlag = &AddInstanceRequest_EmailFlag{AddInstanceRequest_Email: new(AddInstanceRequest_Email)}
	x.ownerEmailFlag.AddFlags(x.set)
	x.ownerProfileFlag = &AddInstanceRequest_ProfileFlag{AddInstanceRequest_Profile: new(AddInstanceRequest_Profile)}
	x.ownerProfileFlag.AddFlags(x.set)
	x.ownerPasswordFlag = &AddInstanceRequest_PasswordFlag{AddInstanceRequest_Password: new(AddInstanceRequest_Password)}
	x.ownerPasswordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddInstanceRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "owner-email", "owner-profile", "owner-password")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("owner-email"); flagIdx != nil {
		x.ownerEmailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("owner-profile"); flagIdx != nil {
		x.ownerProfileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("owner-password"); flagIdx != nil {
		x.ownerPasswordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.instanceNameFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.InstanceName = *x.instanceNameFlag.Value
	}
	if x.firstOrgNameFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.FirstOrgName = *x.firstOrgNameFlag.Value
	}
	if x.customDomainFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.CustomDomain = *x.customDomainFlag.Value
	}
	if x.ownerUserNameFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.OwnerUserName = *x.ownerUserNameFlag.Value
	}

	if x.ownerEmailFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.OwnerEmail = x.ownerEmailFlag.AddInstanceRequest_Email
	}

	if x.ownerProfileFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.OwnerProfile = x.ownerProfileFlag.AddInstanceRequest_Profile
	}

	if x.ownerPasswordFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.OwnerPassword = x.ownerPasswordFlag.AddInstanceRequest_Password
	}

	if x.defaultLanguageFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest.DefaultLanguage = *x.defaultLanguageFlag.Value
	}
}

func (x *AddInstanceRequestFlag) Changed() bool {
	return x.changed
}

type AddInstanceRequest_EmailFlag struct {
	*AddInstanceRequest_Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *AddInstanceRequest_EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddInstanceRequest_Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *AddInstanceRequest_EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *AddInstanceRequest_EmailFlag) Changed() bool {
	return x.changed
}

type AddInstanceRequest_PasswordFlag struct {
	*AddInstanceRequest_Password

	changed bool
	set     *pflag.FlagSet

	passwordFlag               *cli_client.StringParser
	passwordChangeRequiredFlag *cli_client.BoolParser
}

func (x *AddInstanceRequest_PasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddInstanceRequest_Password", pflag.ContinueOnError)

	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.passwordChangeRequiredFlag = cli_client.NewBoolParser(x.set, "password-change-required", "")
	parent.AddFlagSet(x.set)
}

func (x *AddInstanceRequest_PasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Password.Password = *x.passwordFlag.Value
	}
	if x.passwordChangeRequiredFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Password.PasswordChangeRequired = *x.passwordChangeRequiredFlag.Value
	}
}

func (x *AddInstanceRequest_PasswordFlag) Changed() bool {
	return x.changed
}

type AddInstanceRequest_ProfileFlag struct {
	*AddInstanceRequest_Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
}

func (x *AddInstanceRequest_ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddInstanceRequest_Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	parent.AddFlagSet(x.set)
}

func (x *AddInstanceRequest_ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Profile.LastName = *x.lastNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.AddInstanceRequest_Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
}

func (x *AddInstanceRequest_ProfileFlag) Changed() bool {
	return x.changed
}

type AddInstanceResponseFlag struct {
	*AddInstanceResponse

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	detailsFlag    *object.ObjectDetailsFlag
}

func (x *AddInstanceResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddInstanceResponse", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddInstanceResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.AddInstanceResponse.InstanceId = *x.instanceIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddInstanceResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddInstanceResponseFlag) Changed() bool {
	return x.changed
}

type AddQuotaRequestFlag struct {
	*AddQuotaRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag    *cli_client.StringParser
	unitFlag          *cli_client.EnumParser[quota.Unit]
	fromFlag          *cli_client.TimestampParser
	resetIntervalFlag *cli_client.DurationParser
	amountFlag        *cli_client.Uint64Parser
	limitFlag         *cli_client.BoolParser
	notificationsFlag []*quota.NotificationFlag
}

func (x *AddQuotaRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddQuotaRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.unitFlag = cli_client.NewEnumParser[quota.Unit](x.set, "unit", "")
	x.fromFlag = cli_client.NewTimestampParser(x.set, "from", "")
	x.resetIntervalFlag = cli_client.NewDurationParser(x.set, "reset-interval", "")
	x.amountFlag = cli_client.NewUint64Parser(x.set, "amount", "")
	x.limitFlag = cli_client.NewBoolParser(x.set, "limit", "")
	x.notificationsFlag = []*quota.NotificationFlag{}
	parent.AddFlagSet(x.set)
}

func (x *AddQuotaRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "notifications")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("notifications") {
		x.notificationsFlag = append(x.notificationsFlag, &quota.NotificationFlag{Notification: new(quota.Notification)})
		x.notificationsFlag[len(x.notificationsFlag)-1].AddFlags(x.set)
		x.notificationsFlag[len(x.notificationsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.AddQuotaRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.unitFlag.Changed() {
		x.changed = true
		x.AddQuotaRequest.Unit = *x.unitFlag.Value
	}
	if x.fromFlag.Changed() {
		x.changed = true
		x.AddQuotaRequest.From = x.fromFlag.Value
	}
	if x.resetIntervalFlag.Changed() {
		x.changed = true
		x.AddQuotaRequest.ResetInterval = x.resetIntervalFlag.Value
	}
	if x.amountFlag.Changed() {
		x.changed = true
		x.AddQuotaRequest.Amount = *x.amountFlag.Value
	}
	if x.limitFlag.Changed() {
		x.changed = true
		x.AddQuotaRequest.Limit = *x.limitFlag.Value
	}
	if len(x.notificationsFlag) > 0 {
		x.changed = true
		x.Notifications = make([]*quota.Notification, len(x.notificationsFlag))
		for i, value := range x.notificationsFlag {
			x.AddQuotaRequest.Notifications[i] = value.Notification
		}
	}

}

func (x *AddQuotaRequestFlag) Changed() bool {
	return x.changed
}

type AddQuotaResponseFlag struct {
	*AddQuotaResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddQuotaResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddQuotaResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddQuotaResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddQuotaResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddQuotaResponseFlag) Changed() bool {
	return x.changed
}

type BulkSetLimitsRequestFlag struct {
	*BulkSetLimitsRequest

	changed bool
	set     *pflag.FlagSet

	limitsFlag []*SetLimitsRequestFlag
}

func (x *BulkSetLimitsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetLimitsRequest", pflag.ContinueOnError)

	x.limitsFlag = []*SetLimitsRequestFlag{}
	parent.AddFlagSet(x.set)
}

func (x *BulkSetLimitsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "limits")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("limits") {
		x.limitsFlag = append(x.limitsFlag, &SetLimitsRequestFlag{SetLimitsRequest: new(SetLimitsRequest)})
		x.limitsFlag[len(x.limitsFlag)-1].AddFlags(x.set)
		x.limitsFlag[len(x.limitsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.limitsFlag) > 0 {
		x.changed = true
		x.Limits = make([]*SetLimitsRequest, len(x.limitsFlag))
		for i, value := range x.limitsFlag {
			x.BulkSetLimitsRequest.Limits[i] = value.SetLimitsRequest
		}
	}

}

func (x *BulkSetLimitsRequestFlag) Changed() bool {
	return x.changed
}

type BulkSetLimitsResponseFlag struct {
	*BulkSetLimitsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ObjectDetailsFlag
	targetDetailsFlag []*object.ObjectDetailsFlag
}

func (x *BulkSetLimitsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetLimitsResponse", pflag.ContinueOnError)

	x.targetDetailsFlag = []*object.ObjectDetailsFlag{}
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkSetLimitsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "target-details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("target-details") {
		x.targetDetailsFlag = append(x.targetDetailsFlag, &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)})
		x.targetDetailsFlag[len(x.targetDetailsFlag)-1].AddFlags(x.set)
		x.targetDetailsFlag[len(x.targetDetailsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkSetLimitsResponse.Details = x.detailsFlag.ObjectDetails
	}

	if len(x.targetDetailsFlag) > 0 {
		x.changed = true
		x.TargetDetails = make([]*object.ObjectDetails, len(x.targetDetailsFlag))
		for i, value := range x.targetDetailsFlag {
			x.BulkSetLimitsResponse.TargetDetails[i] = value.ObjectDetails
		}
	}

}

func (x *BulkSetLimitsResponseFlag) Changed() bool {
	return x.changed
}

type ChangeSubscriptionRequestFlag struct {
	*ChangeSubscriptionRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag           *cli_client.StringParser
	subscriptionNameFlag *cli_client.StringParser
	requestLimitFlag     *cli_client.Uint64Parser
	actionMinsLimitFlag  *cli_client.Uint64Parser
}

func (x *ChangeSubscriptionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ChangeSubscriptionRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	x.subscriptionNameFlag = cli_client.NewStringParser(x.set, "subscription-name", "")
	x.requestLimitFlag = cli_client.NewUint64Parser(x.set, "request-limit", "")
	x.actionMinsLimitFlag = cli_client.NewUint64Parser(x.set, "action-mins-limit", "")
	parent.AddFlagSet(x.set)
}

func (x *ChangeSubscriptionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.ChangeSubscriptionRequest.Domain = *x.domainFlag.Value
	}
	if x.subscriptionNameFlag.Changed() {
		x.changed = true
		x.ChangeSubscriptionRequest.SubscriptionName = *x.subscriptionNameFlag.Value
	}
	if x.requestLimitFlag.Changed() {
		x.changed = true
		x.ChangeSubscriptionRequest.RequestLimit = *x.requestLimitFlag.Value
	}
	if x.actionMinsLimitFlag.Changed() {
		x.changed = true
		x.ChangeSubscriptionRequest.ActionMinsLimit = *x.actionMinsLimitFlag.Value
	}
}

func (x *ChangeSubscriptionRequestFlag) Changed() bool {
	return x.changed
}

type ChangeSubscriptionResponseFlag struct {
	*ChangeSubscriptionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ChangeSubscriptionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ChangeSubscriptionResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ChangeSubscriptionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ChangeSubscriptionResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ChangeSubscriptionResponseFlag) Changed() bool {
	return x.changed
}

type ClearViewRequestFlag struct {
	*ClearViewRequest

	changed bool
	set     *pflag.FlagSet

	databaseFlag *cli_client.StringParser
	viewNameFlag *cli_client.StringParser
}

func (x *ClearViewRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ClearViewRequest", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	parent.AddFlagSet(x.set)
}

func (x *ClearViewRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.ClearViewRequest.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.ClearViewRequest.ViewName = *x.viewNameFlag.Value
	}
}

func (x *ClearViewRequestFlag) Changed() bool {
	return x.changed
}

type ClearViewResponseFlag struct {
	*ClearViewResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *ClearViewResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ClearViewResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ClearViewResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ClearViewResponseFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequestFlag struct {
	*CreateInstanceRequest

	changed bool
	set     *pflag.FlagSet

	instanceNameFlag    *cli_client.StringParser
	firstOrgNameFlag    *cli_client.StringParser
	customDomainFlag    *cli_client.StringParser
	humanFlag           *CreateInstanceRequest_HumanFlag
	machineFlag         *CreateInstanceRequest_MachineFlag
	defaultLanguageFlag *cli_client.StringParser
}

func (x *CreateInstanceRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest", pflag.ContinueOnError)

	x.instanceNameFlag = cli_client.NewStringParser(x.set, "instance-name", "")
	x.firstOrgNameFlag = cli_client.NewStringParser(x.set, "first-org-name", "")
	x.customDomainFlag = cli_client.NewStringParser(x.set, "custom-domain", "")
	x.defaultLanguageFlag = cli_client.NewStringParser(x.set, "default-language", "")
	x.humanFlag = &CreateInstanceRequest_HumanFlag{CreateInstanceRequest_Human: new(CreateInstanceRequest_Human)}
	x.humanFlag.AddFlags(x.set)
	x.machineFlag = &CreateInstanceRequest_MachineFlag{CreateInstanceRequest_Machine: new(CreateInstanceRequest_Machine)}
	x.machineFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "human", "machine")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("human"); flagIdx != nil {
		x.humanFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("machine"); flagIdx != nil {
		x.machineFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.instanceNameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest.InstanceName = *x.instanceNameFlag.Value
	}
	if x.firstOrgNameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest.FirstOrgName = *x.firstOrgNameFlag.Value
	}
	if x.customDomainFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest.CustomDomain = *x.customDomainFlag.Value
	}
	if x.defaultLanguageFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest.DefaultLanguage = *x.defaultLanguageFlag.Value
	}

	switch cli_client.FieldIndexes(args, "human", "machine").Last().Flag {
	case "human":
		if x.humanFlag.Changed() {
			x.changed = true
			x.CreateInstanceRequest.Owner = &CreateInstanceRequest_Human_{Human: x.humanFlag.CreateInstanceRequest_Human}
		}
	case "machine":
		if x.machineFlag.Changed() {
			x.changed = true
			x.CreateInstanceRequest.Owner = &CreateInstanceRequest_Machine_{Machine: x.machineFlag.CreateInstanceRequest_Machine}
		}
	}
}

func (x *CreateInstanceRequestFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_EmailFlag struct {
	*CreateInstanceRequest_Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *CreateInstanceRequest_EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *CreateInstanceRequest_EmailFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_HumanFlag struct {
	*CreateInstanceRequest_Human

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
	emailFlag    *CreateInstanceRequest_EmailFlag
	profileFlag  *CreateInstanceRequest_ProfileFlag
	passwordFlag *CreateInstanceRequest_PasswordFlag
}

func (x *CreateInstanceRequest_HumanFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_Human", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.emailFlag = &CreateInstanceRequest_EmailFlag{CreateInstanceRequest_Email: new(CreateInstanceRequest_Email)}
	x.emailFlag.AddFlags(x.set)
	x.profileFlag = &CreateInstanceRequest_ProfileFlag{CreateInstanceRequest_Profile: new(CreateInstanceRequest_Profile)}
	x.profileFlag.AddFlags(x.set)
	x.passwordFlag = &CreateInstanceRequest_PasswordFlag{CreateInstanceRequest_Password: new(CreateInstanceRequest_Password)}
	x.passwordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_HumanFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "email", "profile", "password")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password"); flagIdx != nil {
		x.passwordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Human.UserName = *x.userNameFlag.Value
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Human.Email = x.emailFlag.CreateInstanceRequest_Email
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Human.Profile = x.profileFlag.CreateInstanceRequest_Profile
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Human.Password = x.passwordFlag.CreateInstanceRequest_Password
	}

}

func (x *CreateInstanceRequest_HumanFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_MachineFlag struct {
	*CreateInstanceRequest_Machine

	changed bool
	set     *pflag.FlagSet

	userNameFlag            *cli_client.StringParser
	nameFlag                *cli_client.StringParser
	personalAccessTokenFlag *CreateInstanceRequest_PersonalAccessTokenFlag
	machineKeyFlag          *CreateInstanceRequest_MachineKeyFlag
}

func (x *CreateInstanceRequest_MachineFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_Machine", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.personalAccessTokenFlag = &CreateInstanceRequest_PersonalAccessTokenFlag{CreateInstanceRequest_PersonalAccessToken: new(CreateInstanceRequest_PersonalAccessToken)}
	x.personalAccessTokenFlag.AddFlags(x.set)
	x.machineKeyFlag = &CreateInstanceRequest_MachineKeyFlag{CreateInstanceRequest_MachineKey: new(CreateInstanceRequest_MachineKey)}
	x.machineKeyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_MachineFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "personal-access-token", "machine-key")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("personal-access-token"); flagIdx != nil {
		x.personalAccessTokenFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("machine-key"); flagIdx != nil {
		x.machineKeyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Machine.UserName = *x.userNameFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Machine.Name = *x.nameFlag.Value
	}

	if x.personalAccessTokenFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Machine.PersonalAccessToken = x.personalAccessTokenFlag.CreateInstanceRequest_PersonalAccessToken
	}

	if x.machineKeyFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Machine.MachineKey = x.machineKeyFlag.CreateInstanceRequest_MachineKey
	}

}

func (x *CreateInstanceRequest_MachineFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_MachineKeyFlag struct {
	*CreateInstanceRequest_MachineKey

	changed bool
	set     *pflag.FlagSet

	typeFlag           *cli_client.EnumParser[authn.KeyType]
	expirationDateFlag *cli_client.TimestampParser
}

func (x *CreateInstanceRequest_MachineKeyFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_MachineKey", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[authn.KeyType](x.set, "type", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_MachineKeyFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_MachineKey.Type = *x.typeFlag.Value
	}
	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_MachineKey.ExpirationDate = x.expirationDateFlag.Value
	}
}

func (x *CreateInstanceRequest_MachineKeyFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_PasswordFlag struct {
	*CreateInstanceRequest_Password

	changed bool
	set     *pflag.FlagSet

	passwordFlag               *cli_client.StringParser
	passwordChangeRequiredFlag *cli_client.BoolParser
}

func (x *CreateInstanceRequest_PasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_Password", pflag.ContinueOnError)

	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.passwordChangeRequiredFlag = cli_client.NewBoolParser(x.set, "password-change-required", "")
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_PasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Password.Password = *x.passwordFlag.Value
	}
	if x.passwordChangeRequiredFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Password.PasswordChangeRequired = *x.passwordChangeRequiredFlag.Value
	}
}

func (x *CreateInstanceRequest_PasswordFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_PersonalAccessTokenFlag struct {
	*CreateInstanceRequest_PersonalAccessToken

	changed bool
	set     *pflag.FlagSet

	expirationDateFlag *cli_client.TimestampParser
}

func (x *CreateInstanceRequest_PersonalAccessTokenFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_PersonalAccessToken", pflag.ContinueOnError)

	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_PersonalAccessTokenFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_PersonalAccessToken.ExpirationDate = x.expirationDateFlag.Value
	}
}

func (x *CreateInstanceRequest_PersonalAccessTokenFlag) Changed() bool {
	return x.changed
}

type CreateInstanceRequest_ProfileFlag struct {
	*CreateInstanceRequest_Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
}

func (x *CreateInstanceRequest_ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceRequest_Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceRequest_ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Profile.LastName = *x.lastNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.CreateInstanceRequest_Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
}

func (x *CreateInstanceRequest_ProfileFlag) Changed() bool {
	return x.changed
}

type CreateInstanceResponseFlag struct {
	*CreateInstanceResponse

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	detailsFlag    *object.ObjectDetailsFlag
	patFlag        *cli_client.StringParser
	machineKeyFlag *cli_client.BytesParser
}

func (x *CreateInstanceResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateInstanceResponse", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.patFlag = cli_client.NewStringParser(x.set, "pat", "")
	x.machineKeyFlag = cli_client.NewBytesParser(x.set, "machine-key", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateInstanceResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.CreateInstanceResponse.InstanceId = *x.instanceIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.CreateInstanceResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.patFlag.Changed() {
		x.changed = true
		x.CreateInstanceResponse.Pat = *x.patFlag.Value
	}
	if x.machineKeyFlag.Changed() {
		x.changed = true
		x.CreateInstanceResponse.MachineKey = *x.machineKeyFlag.Value
	}
}

func (x *CreateInstanceResponseFlag) Changed() bool {
	return x.changed
}

type ExistsDomainRequestFlag struct {
	*ExistsDomainRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
}

func (x *ExistsDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExistsDomainRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *ExistsDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.ExistsDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *ExistsDomainRequestFlag) Changed() bool {
	return x.changed
}

type ExistsDomainResponseFlag struct {
	*ExistsDomainResponse

	changed bool
	set     *pflag.FlagSet

	existsFlag *cli_client.BoolParser
}

func (x *ExistsDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExistsDomainResponse", pflag.ContinueOnError)

	x.existsFlag = cli_client.NewBoolParser(x.set, "exists", "")
	parent.AddFlagSet(x.set)
}

func (x *ExistsDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.existsFlag.Changed() {
		x.changed = true
		x.ExistsDomainResponse.Exists = *x.existsFlag.Value
	}
}

func (x *ExistsDomainResponseFlag) Changed() bool {
	return x.changed
}

type FailedEventFlag struct {
	*FailedEvent

	changed bool
	set     *pflag.FlagSet

	databaseFlag       *cli_client.StringParser
	viewNameFlag       *cli_client.StringParser
	failedSequenceFlag *cli_client.Uint64Parser
	failureCountFlag   *cli_client.Uint64Parser
	errorMessageFlag   *cli_client.StringParser
	lastFailedFlag     *cli_client.TimestampParser
}

func (x *FailedEventFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FailedEvent", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	x.failedSequenceFlag = cli_client.NewUint64Parser(x.set, "failed-sequence", "")
	x.failureCountFlag = cli_client.NewUint64Parser(x.set, "failure-count", "")
	x.errorMessageFlag = cli_client.NewStringParser(x.set, "error-message", "")
	x.lastFailedFlag = cli_client.NewTimestampParser(x.set, "last-failed", "")
	parent.AddFlagSet(x.set)
}

func (x *FailedEventFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.FailedEvent.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.FailedEvent.ViewName = *x.viewNameFlag.Value
	}
	if x.failedSequenceFlag.Changed() {
		x.changed = true
		x.FailedEvent.FailedSequence = *x.failedSequenceFlag.Value
	}
	if x.failureCountFlag.Changed() {
		x.changed = true
		x.FailedEvent.FailureCount = *x.failureCountFlag.Value
	}
	if x.errorMessageFlag.Changed() {
		x.changed = true
		x.FailedEvent.ErrorMessage = *x.errorMessageFlag.Value
	}
	if x.lastFailedFlag.Changed() {
		x.changed = true
		x.FailedEvent.LastFailed = x.lastFailedFlag.Value
	}
}

func (x *FailedEventFlag) Changed() bool {
	return x.changed
}

type GetInstanceRequestFlag struct {
	*GetInstanceRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
}

func (x *GetInstanceRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetInstanceRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetInstanceRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.GetInstanceRequest.InstanceId = *x.instanceIdFlag.Value
	}
}

func (x *GetInstanceRequestFlag) Changed() bool {
	return x.changed
}

type GetInstanceResponseFlag struct {
	*GetInstanceResponse

	changed bool
	set     *pflag.FlagSet

	instanceFlag *instance.InstanceDetailFlag
}

func (x *GetInstanceResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetInstanceResponse", pflag.ContinueOnError)

	x.instanceFlag = &instance.InstanceDetailFlag{InstanceDetail: new(instance.InstanceDetail)}
	x.instanceFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetInstanceResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "instance")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("instance"); flagIdx != nil {
		x.instanceFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.instanceFlag.Changed() {
		x.changed = true
		x.GetInstanceResponse.Instance = x.instanceFlag.InstanceDetail
	}

}

func (x *GetInstanceResponseFlag) Changed() bool {
	return x.changed
}

type GetUsageRequestFlag struct {
	*GetUsageRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
}

func (x *GetUsageRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUsageRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetUsageRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.GetUsageRequest.InstanceId = *x.instanceIdFlag.Value
	}
}

func (x *GetUsageRequestFlag) Changed() bool {
	return x.changed
}

type HealthzRequestFlag struct {
	*HealthzRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzRequestFlag) Changed() bool {
	return x.changed
}

type HealthzResponseFlag struct {
	*HealthzResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzResponseFlag) Changed() bool {
	return x.changed
}

type ListDomainsRequestFlag struct {
	*ListDomainsRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag    *cli_client.StringParser
	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[instance.DomainFieldName]
	queriesFlag       []*instance.DomainSearchQueryFlag
}

func (x *ListDomainsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListDomainsRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.sortingColumnFlag = cli_client.NewEnumParser[instance.DomainFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*instance.DomainSearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListDomainsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &instance.DomainSearchQueryFlag{DomainSearchQuery: new(instance.DomainSearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.ListDomainsRequest.InstanceId = *x.instanceIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListDomainsRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListDomainsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*instance.DomainSearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListDomainsRequest.Queries[i] = value.DomainSearchQuery
		}
	}

}

func (x *ListDomainsRequestFlag) Changed() bool {
	return x.changed
}

type ListDomainsResponseFlag struct {
	*ListDomainsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[instance.DomainFieldName]
	resultFlag        []*instance.DomainFlag
}

func (x *ListDomainsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListDomainsResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[instance.DomainFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*instance.DomainFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListDomainsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &instance.DomainFlag{Domain: new(instance.Domain)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListDomainsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListDomainsResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*instance.Domain, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListDomainsResponse.Result[i] = value.Domain
		}
	}

}

func (x *ListDomainsResponseFlag) Changed() bool {
	return x.changed
}

type ListFailedEventsRequestFlag struct {
	*ListFailedEventsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListFailedEventsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFailedEventsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListFailedEventsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListFailedEventsRequestFlag) Changed() bool {
	return x.changed
}

type ListFailedEventsResponseFlag struct {
	*ListFailedEventsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*FailedEventFlag
}

func (x *ListFailedEventsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFailedEventsResponse", pflag.ContinueOnError)

	x.resultFlag = []*FailedEventFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListFailedEventsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &FailedEventFlag{FailedEvent: new(FailedEvent)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*FailedEvent, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListFailedEventsResponse.Result[i] = value.FailedEvent
		}
	}

}

func (x *ListFailedEventsResponseFlag) Changed() bool {
	return x.changed
}

type ListIAMMembersRequestFlag struct {
	*ListIAMMembersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag      *object.ListQueryFlag
	instanceIdFlag *cli_client.StringParser
	queriesFlag    []*member.SearchQueryFlag
}

func (x *ListIAMMembersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIAMMembersRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.queriesFlag = []*member.SearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIAMMembersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &member.SearchQueryFlag{SearchQuery: new(member.SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListIAMMembersRequest.Query = x.queryFlag.ListQuery
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.ListIAMMembersRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*member.SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListIAMMembersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListIAMMembersRequestFlag) Changed() bool {
	return x.changed
}

type ListIAMMembersResponseFlag struct {
	*ListIAMMembersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*member.MemberFlag
}

func (x *ListIAMMembersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIAMMembersResponse", pflag.ContinueOnError)

	x.resultFlag = []*member.MemberFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIAMMembersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &member.MemberFlag{Member: new(member.Member)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListIAMMembersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*member.Member, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListIAMMembersResponse.Result[i] = value.Member
		}
	}

}

func (x *ListIAMMembersResponseFlag) Changed() bool {
	return x.changed
}

type ListInstancesRequestFlag struct {
	*ListInstancesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[instance.FieldName]
	queriesFlag       []*instance.QueryFlag
}

func (x *ListInstancesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListInstancesRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[instance.FieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*instance.QueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListInstancesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &instance.QueryFlag{Query: new(instance.Query)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListInstancesRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListInstancesRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*instance.Query, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListInstancesRequest.Queries[i] = value.Query
		}
	}

}

func (x *ListInstancesRequestFlag) Changed() bool {
	return x.changed
}

type ListInstancesResponseFlag struct {
	*ListInstancesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[instance.FieldName]
	resultFlag        []*instance.InstanceFlag
}

func (x *ListInstancesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListInstancesResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[instance.FieldName](x.set, "sorting-column", "")
	x.resultFlag = []*instance.InstanceFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListInstancesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &instance.InstanceFlag{Instance: new(instance.Instance)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListInstancesResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListInstancesResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*instance.Instance, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListInstancesResponse.Result[i] = value.Instance
		}
	}

}

func (x *ListInstancesResponseFlag) Changed() bool {
	return x.changed
}

type ListViewsRequestFlag struct {
	*ListViewsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListViewsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListViewsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListViewsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListViewsRequestFlag) Changed() bool {
	return x.changed
}

type ListViewsResponseFlag struct {
	*ListViewsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*ViewFlag
}

func (x *ListViewsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListViewsResponse", pflag.ContinueOnError)

	x.resultFlag = []*ViewFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListViewsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &ViewFlag{View: new(View)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*View, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListViewsResponse.Result[i] = value.View
		}
	}

}

func (x *ListViewsResponseFlag) Changed() bool {
	return x.changed
}

type RemoveDomainRequestFlag struct {
	*RemoveDomainRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	domainFlag     *cli_client.StringParser
}

func (x *RemoveDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveDomainRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.RemoveDomainRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.RemoveDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *RemoveDomainRequestFlag) Changed() bool {
	return x.changed
}

type RemoveDomainResponseFlag struct {
	*RemoveDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveDomainResponseFlag) Changed() bool {
	return x.changed
}

type RemoveFailedEventRequestFlag struct {
	*RemoveFailedEventRequest

	changed bool
	set     *pflag.FlagSet

	databaseFlag       *cli_client.StringParser
	viewNameFlag       *cli_client.StringParser
	failedSequenceFlag *cli_client.Uint64Parser
	instanceIdFlag     *cli_client.StringParser
}

func (x *RemoveFailedEventRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveFailedEventRequest", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	x.failedSequenceFlag = cli_client.NewUint64Parser(x.set, "failed-sequence", "")
	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveFailedEventRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.ViewName = *x.viewNameFlag.Value
	}
	if x.failedSequenceFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.FailedSequence = *x.failedSequenceFlag.Value
	}
	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.InstanceId = *x.instanceIdFlag.Value
	}
}

func (x *RemoveFailedEventRequestFlag) Changed() bool {
	return x.changed
}

type RemoveFailedEventResponseFlag struct {
	*RemoveFailedEventResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveFailedEventResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveFailedEventResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveFailedEventResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveFailedEventResponseFlag) Changed() bool {
	return x.changed
}

type RemoveInstanceRequestFlag struct {
	*RemoveInstanceRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
}

func (x *RemoveInstanceRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveInstanceRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveInstanceRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.RemoveInstanceRequest.InstanceId = *x.instanceIdFlag.Value
	}
}

func (x *RemoveInstanceRequestFlag) Changed() bool {
	return x.changed
}

type RemoveInstanceResponseFlag struct {
	*RemoveInstanceResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveInstanceResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveInstanceResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveInstanceResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveInstanceResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveInstanceResponseFlag) Changed() bool {
	return x.changed
}

type RemoveQuotaRequestFlag struct {
	*RemoveQuotaRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	unitFlag       *cli_client.EnumParser[quota.Unit]
}

func (x *RemoveQuotaRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveQuotaRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.unitFlag = cli_client.NewEnumParser[quota.Unit](x.set, "unit", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveQuotaRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.RemoveQuotaRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.unitFlag.Changed() {
		x.changed = true
		x.RemoveQuotaRequest.Unit = *x.unitFlag.Value
	}
}

func (x *RemoveQuotaRequestFlag) Changed() bool {
	return x.changed
}

type RemoveQuotaResponseFlag struct {
	*RemoveQuotaResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveQuotaResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveQuotaResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveQuotaResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveQuotaResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveQuotaResponseFlag) Changed() bool {
	return x.changed
}

type ResetLimitsRequestFlag struct {
	*ResetLimitsRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
}

func (x *ResetLimitsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLimitsRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetLimitsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.ResetLimitsRequest.InstanceId = *x.instanceIdFlag.Value
	}
}

func (x *ResetLimitsRequestFlag) Changed() bool {
	return x.changed
}

type ResetLimitsResponseFlag struct {
	*ResetLimitsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetLimitsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLimitsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetLimitsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetLimitsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetLimitsResponseFlag) Changed() bool {
	return x.changed
}

type SetInstanceFeatureRequestFlag struct {
	*SetInstanceFeatureRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	featureIdFlag  *cli_client.EnumParser[feature.InstanceFeature]
	boolFlag       *cli_client.BoolParser
}

func (x *SetInstanceFeatureRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetInstanceFeatureRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.featureIdFlag = cli_client.NewEnumParser[feature.InstanceFeature](x.set, "feature-id", "")
	x.boolFlag = cli_client.NewBoolParser(x.set, "bool", "")
	parent.AddFlagSet(x.set)
}

func (x *SetInstanceFeatureRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.SetInstanceFeatureRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.featureIdFlag.Changed() {
		x.changed = true
		x.SetInstanceFeatureRequest.FeatureId = *x.featureIdFlag.Value
	}

	switch cli_client.FieldIndexes(args, "bool").Last().Flag {
	case "bool":
		if x.boolFlag.Changed() {
			x.changed = true
			x.SetInstanceFeatureRequest.Value = &SetInstanceFeatureRequest_Bool{Bool: *x.boolFlag.Value}
		}
	}
}

func (x *SetInstanceFeatureRequestFlag) Changed() bool {
	return x.changed
}

type SetInstanceFeatureResponseFlag struct {
	*SetInstanceFeatureResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetInstanceFeatureResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetInstanceFeatureResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetInstanceFeatureResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetInstanceFeatureResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetInstanceFeatureResponseFlag) Changed() bool {
	return x.changed
}

type SetLimitsRequestFlag struct {
	*SetLimitsRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag        *cli_client.StringParser
	auditLogRetentionFlag *cli_client.DurationParser
	blockFlag             *cli_client.BoolParser
}

func (x *SetLimitsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetLimitsRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.auditLogRetentionFlag = cli_client.NewDurationParser(x.set, "audit-log-retention", "")
	x.blockFlag = cli_client.NewBoolParser(x.set, "block", "")
	parent.AddFlagSet(x.set)
}

func (x *SetLimitsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.SetLimitsRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.auditLogRetentionFlag.Changed() {
		x.changed = true
		x.SetLimitsRequest.AuditLogRetention = x.auditLogRetentionFlag.Value
	}
	if x.blockFlag.Changed() {
		x.changed = true
		x.SetLimitsRequest.Block = x.blockFlag.Value
	}
}

func (x *SetLimitsRequestFlag) Changed() bool {
	return x.changed
}

type SetLimitsResponseFlag struct {
	*SetLimitsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetLimitsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetLimitsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetLimitsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetLimitsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetLimitsResponseFlag) Changed() bool {
	return x.changed
}

type SetPrimaryDomainRequestFlag struct {
	*SetPrimaryDomainRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag *cli_client.StringParser
	domainFlag     *cli_client.StringParser
}

func (x *SetPrimaryDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPrimaryDomainRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *SetPrimaryDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.SetPrimaryDomainRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.SetPrimaryDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *SetPrimaryDomainRequestFlag) Changed() bool {
	return x.changed
}

type SetPrimaryDomainResponseFlag struct {
	*SetPrimaryDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetPrimaryDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPrimaryDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPrimaryDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetPrimaryDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetPrimaryDomainResponseFlag) Changed() bool {
	return x.changed
}

type SetQuotaRequestFlag struct {
	*SetQuotaRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag    *cli_client.StringParser
	unitFlag          *cli_client.EnumParser[quota.Unit]
	fromFlag          *cli_client.TimestampParser
	resetIntervalFlag *cli_client.DurationParser
	amountFlag        *cli_client.Uint64Parser
	limitFlag         *cli_client.BoolParser
	notificationsFlag []*quota.NotificationFlag
}

func (x *SetQuotaRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetQuotaRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.unitFlag = cli_client.NewEnumParser[quota.Unit](x.set, "unit", "")
	x.fromFlag = cli_client.NewTimestampParser(x.set, "from", "")
	x.resetIntervalFlag = cli_client.NewDurationParser(x.set, "reset-interval", "")
	x.amountFlag = cli_client.NewUint64Parser(x.set, "amount", "")
	x.limitFlag = cli_client.NewBoolParser(x.set, "limit", "")
	x.notificationsFlag = []*quota.NotificationFlag{}
	parent.AddFlagSet(x.set)
}

func (x *SetQuotaRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "notifications")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("notifications") {
		x.notificationsFlag = append(x.notificationsFlag, &quota.NotificationFlag{Notification: new(quota.Notification)})
		x.notificationsFlag[len(x.notificationsFlag)-1].AddFlags(x.set)
		x.notificationsFlag[len(x.notificationsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.SetQuotaRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.unitFlag.Changed() {
		x.changed = true
		x.SetQuotaRequest.Unit = *x.unitFlag.Value
	}
	if x.fromFlag.Changed() {
		x.changed = true
		x.SetQuotaRequest.From = x.fromFlag.Value
	}
	if x.resetIntervalFlag.Changed() {
		x.changed = true
		x.SetQuotaRequest.ResetInterval = x.resetIntervalFlag.Value
	}
	if x.amountFlag.Changed() {
		x.changed = true
		x.SetQuotaRequest.Amount = *x.amountFlag.Value
	}
	if x.limitFlag.Changed() {
		x.changed = true
		x.SetQuotaRequest.Limit = *x.limitFlag.Value
	}
	if len(x.notificationsFlag) > 0 {
		x.changed = true
		x.Notifications = make([]*quota.Notification, len(x.notificationsFlag))
		for i, value := range x.notificationsFlag {
			x.SetQuotaRequest.Notifications[i] = value.Notification
		}
	}

}

func (x *SetQuotaRequestFlag) Changed() bool {
	return x.changed
}

type SetQuotaResponseFlag struct {
	*SetQuotaResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetQuotaResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetQuotaResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetQuotaResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetQuotaResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetQuotaResponseFlag) Changed() bool {
	return x.changed
}

type UpdateInstanceRequestFlag struct {
	*UpdateInstanceRequest

	changed bool
	set     *pflag.FlagSet

	instanceIdFlag   *cli_client.StringParser
	instanceNameFlag *cli_client.StringParser
}

func (x *UpdateInstanceRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateInstanceRequest", pflag.ContinueOnError)

	x.instanceIdFlag = cli_client.NewStringParser(x.set, "instance-id", "")
	x.instanceNameFlag = cli_client.NewStringParser(x.set, "instance-name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateInstanceRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.instanceIdFlag.Changed() {
		x.changed = true
		x.UpdateInstanceRequest.InstanceId = *x.instanceIdFlag.Value
	}
	if x.instanceNameFlag.Changed() {
		x.changed = true
		x.UpdateInstanceRequest.InstanceName = *x.instanceNameFlag.Value
	}
}

func (x *UpdateInstanceRequestFlag) Changed() bool {
	return x.changed
}

type UpdateInstanceResponseFlag struct {
	*UpdateInstanceResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateInstanceResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateInstanceResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateInstanceResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateInstanceResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateInstanceResponseFlag) Changed() bool {
	return x.changed
}

type ViewFlag struct {
	*View

	changed bool
	set     *pflag.FlagSet

	databaseFlag                 *cli_client.StringParser
	viewNameFlag                 *cli_client.StringParser
	processedSequenceFlag        *cli_client.Uint64Parser
	eventTimestampFlag           *cli_client.TimestampParser
	lastSuccessfulSpoolerRunFlag *cli_client.TimestampParser
	instanceFlag                 *cli_client.StringParser
}

func (x *ViewFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("View", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	x.processedSequenceFlag = cli_client.NewUint64Parser(x.set, "processed-sequence", "")
	x.eventTimestampFlag = cli_client.NewTimestampParser(x.set, "event-timestamp", "")
	x.lastSuccessfulSpoolerRunFlag = cli_client.NewTimestampParser(x.set, "last-successful-spooler-run", "")
	x.instanceFlag = cli_client.NewStringParser(x.set, "instance", "")
	parent.AddFlagSet(x.set)
}

func (x *ViewFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.View.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.View.ViewName = *x.viewNameFlag.Value
	}
	if x.processedSequenceFlag.Changed() {
		x.changed = true
		x.View.ProcessedSequence = *x.processedSequenceFlag.Value
	}
	if x.eventTimestampFlag.Changed() {
		x.changed = true
		x.View.EventTimestamp = x.eventTimestampFlag.Value
	}
	if x.lastSuccessfulSpoolerRunFlag.Changed() {
		x.changed = true
		x.View.LastSuccessfulSpoolerRun = x.lastSuccessfulSpoolerRunFlag.Value
	}
	if x.instanceFlag.Changed() {
		x.changed = true
		x.View.Instance = *x.instanceFlag.Value
	}
}

func (x *ViewFlag) Changed() bool {
	return x.changed
}
