// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package instance

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type DomainFlag struct {
	*Domain

	changed bool
	set     *pflag.FlagSet

	detailsFlag   *object.ObjectDetailsFlag
	domainFlag    *cli_client.StringParser
	primaryFlag   *cli_client.BoolParser
	generatedFlag *cli_client.BoolParser
}

func (x *DomainFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Domain", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	x.primaryFlag = cli_client.NewBoolParser(x.set, "primary", "")
	x.generatedFlag = cli_client.NewBoolParser(x.set, "generated", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DomainFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Domain.Details = x.detailsFlag.ObjectDetails
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.Domain.Domain = *x.domainFlag.Value
	}
	if x.primaryFlag.Changed() {
		x.changed = true
		x.Domain.Primary = *x.primaryFlag.Value
	}
	if x.generatedFlag.Changed() {
		x.changed = true
		x.Domain.Generated = *x.generatedFlag.Value
	}
}

func (x *DomainFlag) Changed() bool {
	return x.changed
}

type DomainGeneratedQueryFlag struct {
	*DomainGeneratedQuery

	changed bool
	set     *pflag.FlagSet

	generatedFlag *cli_client.BoolParser
}

func (x *DomainGeneratedQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DomainGeneratedQuery", pflag.ContinueOnError)

	x.generatedFlag = cli_client.NewBoolParser(x.set, "generated", "")
	parent.AddFlagSet(x.set)
}

func (x *DomainGeneratedQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.generatedFlag.Changed() {
		x.changed = true
		x.DomainGeneratedQuery.Generated = *x.generatedFlag.Value
	}
}

func (x *DomainGeneratedQueryFlag) Changed() bool {
	return x.changed
}

type DomainPrimaryQueryFlag struct {
	*DomainPrimaryQuery

	changed bool
	set     *pflag.FlagSet

	primaryFlag *cli_client.BoolParser
}

func (x *DomainPrimaryQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DomainPrimaryQuery", pflag.ContinueOnError)

	x.primaryFlag = cli_client.NewBoolParser(x.set, "primary", "")
	parent.AddFlagSet(x.set)
}

func (x *DomainPrimaryQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.primaryFlag.Changed() {
		x.changed = true
		x.DomainPrimaryQuery.Primary = *x.primaryFlag.Value
	}
}

func (x *DomainPrimaryQueryFlag) Changed() bool {
	return x.changed
}

type DomainQueryFlag struct {
	*DomainQuery

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *DomainQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DomainQuery", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *DomainQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.DomainQuery.Domain = *x.domainFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.DomainQuery.Method = *x.methodFlag.Value
	}
}

func (x *DomainQueryFlag) Changed() bool {
	return x.changed
}

type DomainSearchQueryFlag struct {
	*DomainSearchQuery

	changed bool
	set     *pflag.FlagSet

	domainQueryFlag    *DomainQueryFlag
	generatedQueryFlag *DomainGeneratedQueryFlag
	primaryQueryFlag   *DomainPrimaryQueryFlag
}

func (x *DomainSearchQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DomainSearchQuery", pflag.ContinueOnError)

	x.domainQueryFlag = &DomainQueryFlag{DomainQuery: new(DomainQuery)}
	x.domainQueryFlag.AddFlags(x.set)
	x.generatedQueryFlag = &DomainGeneratedQueryFlag{DomainGeneratedQuery: new(DomainGeneratedQuery)}
	x.generatedQueryFlag.AddFlags(x.set)
	x.primaryQueryFlag = &DomainPrimaryQueryFlag{DomainPrimaryQuery: new(DomainPrimaryQuery)}
	x.primaryQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DomainSearchQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "domain-query", "generated-query", "primary-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("domain-query"); flagIdx != nil {
		x.domainQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("generated-query"); flagIdx != nil {
		x.generatedQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("primary-query"); flagIdx != nil {
		x.primaryQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "domain-query", "generated-query", "primary-query").Last().Flag {
	case "domain-query":
		if x.domainQueryFlag.Changed() {
			x.changed = true
			x.DomainSearchQuery.Query = &DomainSearchQuery_DomainQuery{DomainQuery: x.domainQueryFlag.DomainQuery}
		}
	case "generated-query":
		if x.generatedQueryFlag.Changed() {
			x.changed = true
			x.DomainSearchQuery.Query = &DomainSearchQuery_GeneratedQuery{GeneratedQuery: x.generatedQueryFlag.DomainGeneratedQuery}
		}
	case "primary-query":
		if x.primaryQueryFlag.Changed() {
			x.changed = true
			x.DomainSearchQuery.Query = &DomainSearchQuery_PrimaryQuery{PrimaryQuery: x.primaryQueryFlag.DomainPrimaryQuery}
		}
	}
}

func (x *DomainSearchQueryFlag) Changed() bool {
	return x.changed
}

type DomainsQueryFlag struct {
	*DomainsQuery

	changed bool
	set     *pflag.FlagSet

	domainsFlag *cli_client.StringSliceParser
}

func (x *DomainsQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DomainsQuery", pflag.ContinueOnError)

	x.domainsFlag = cli_client.NewStringSliceParser(x.set, "domains", "")
	parent.AddFlagSet(x.set)
}

func (x *DomainsQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainsFlag.Changed() {
		x.changed = true
		x.DomainsQuery.Domains = *x.domainsFlag.Value
	}
}

func (x *DomainsQueryFlag) Changed() bool {
	return x.changed
}

type IdsQueryFlag struct {
	*IdsQuery

	changed bool
	set     *pflag.FlagSet

	idsFlag *cli_client.StringSliceParser
}

func (x *IdsQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IdsQuery", pflag.ContinueOnError)

	x.idsFlag = cli_client.NewStringSliceParser(x.set, "ids", "")
	parent.AddFlagSet(x.set)
}

func (x *IdsQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idsFlag.Changed() {
		x.changed = true
		x.IdsQuery.Ids = *x.idsFlag.Value
	}
}

func (x *IdsQueryFlag) Changed() bool {
	return x.changed
}

type InstanceFlag struct {
	*Instance

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
	stateFlag   *cli_client.EnumParser[State]
	nameFlag    *cli_client.StringParser
	versionFlag *cli_client.StringParser
	domainsFlag []*DomainFlag
}

func (x *InstanceFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Instance", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[State](x.set, "state", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.versionFlag = cli_client.NewStringParser(x.set, "version", "")
	x.domainsFlag = []*DomainFlag{}
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *InstanceFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "domains")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("domains") {
		x.domainsFlag = append(x.domainsFlag, &DomainFlag{Domain: new(Domain)})
		x.domainsFlag[len(x.domainsFlag)-1].AddFlags(x.set)
		x.domainsFlag[len(x.domainsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.idFlag.Changed() {
		x.changed = true
		x.Instance.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Instance.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.Instance.State = *x.stateFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.Instance.Name = *x.nameFlag.Value
	}
	if x.versionFlag.Changed() {
		x.changed = true
		x.Instance.Version = *x.versionFlag.Value
	}
	if len(x.domainsFlag) > 0 {
		x.changed = true
		x.Domains = make([]*Domain, len(x.domainsFlag))
		for i, value := range x.domainsFlag {
			x.Instance.Domains[i] = value.Domain
		}
	}

}

func (x *InstanceFlag) Changed() bool {
	return x.changed
}

type InstanceDetailFlag struct {
	*InstanceDetail

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
	stateFlag   *cli_client.EnumParser[State]
	nameFlag    *cli_client.StringParser
	versionFlag *cli_client.StringParser
	domainsFlag []*DomainFlag
}

func (x *InstanceDetailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InstanceDetail", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[State](x.set, "state", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.versionFlag = cli_client.NewStringParser(x.set, "version", "")
	x.domainsFlag = []*DomainFlag{}
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *InstanceDetailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "domains")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("domains") {
		x.domainsFlag = append(x.domainsFlag, &DomainFlag{Domain: new(Domain)})
		x.domainsFlag[len(x.domainsFlag)-1].AddFlags(x.set)
		x.domainsFlag[len(x.domainsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.idFlag.Changed() {
		x.changed = true
		x.InstanceDetail.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.InstanceDetail.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.InstanceDetail.State = *x.stateFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.InstanceDetail.Name = *x.nameFlag.Value
	}
	if x.versionFlag.Changed() {
		x.changed = true
		x.InstanceDetail.Version = *x.versionFlag.Value
	}
	if len(x.domainsFlag) > 0 {
		x.changed = true
		x.Domains = make([]*Domain, len(x.domainsFlag))
		for i, value := range x.domainsFlag {
			x.InstanceDetail.Domains[i] = value.Domain
		}
	}

}

func (x *InstanceDetailFlag) Changed() bool {
	return x.changed
}

type QueryFlag struct {
	*Query

	changed bool
	set     *pflag.FlagSet

	idQueryFlag     *IdsQueryFlag
	domainQueryFlag *DomainsQueryFlag
}

func (x *QueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Query", pflag.ContinueOnError)

	x.idQueryFlag = &IdsQueryFlag{IdsQuery: new(IdsQuery)}
	x.idQueryFlag.AddFlags(x.set)
	x.domainQueryFlag = &DomainsQueryFlag{DomainsQuery: new(DomainsQuery)}
	x.domainQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *QueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "id-query", "domain-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("id-query"); flagIdx != nil {
		x.idQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("domain-query"); flagIdx != nil {
		x.domainQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "id-query", "domain-query").Last().Flag {
	case "id-query":
		if x.idQueryFlag.Changed() {
			x.changed = true
			x.Query.Query = &Query_IdQuery{IdQuery: x.idQueryFlag.IdsQuery}
		}
	case "domain-query":
		if x.domainQueryFlag.Changed() {
			x.changed = true
			x.Query.Query = &Query_DomainQuery{DomainQuery: x.domainQueryFlag.DomainsQuery}
		}
	}
}

func (x *QueryFlag) Changed() bool {
	return x.changed
}
