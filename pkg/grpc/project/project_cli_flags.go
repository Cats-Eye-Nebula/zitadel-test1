// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package project

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type AllProjectGrantQueryFlag struct {
	*AllProjectGrantQuery

	changed bool
	set     *pflag.FlagSet

	projectNameQueryFlag  *GrantProjectNameQueryFlag
	roleKeyQueryFlag      *GrantRoleKeyQueryFlag
	projectIdQueryFlag    *ProjectIDQueryFlag
	grantedOrgIdQueryFlag *GrantedOrgIDQueryFlag
}

func (x *AllProjectGrantQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AllProjectGrantQuery", pflag.ContinueOnError)

	x.projectNameQueryFlag = &GrantProjectNameQueryFlag{GrantProjectNameQuery: new(GrantProjectNameQuery)}
	x.projectNameQueryFlag.AddFlags(x.set)
	x.roleKeyQueryFlag = &GrantRoleKeyQueryFlag{GrantRoleKeyQuery: new(GrantRoleKeyQuery)}
	x.roleKeyQueryFlag.AddFlags(x.set)
	x.projectIdQueryFlag = &ProjectIDQueryFlag{ProjectIDQuery: new(ProjectIDQuery)}
	x.projectIdQueryFlag.AddFlags(x.set)
	x.grantedOrgIdQueryFlag = &GrantedOrgIDQueryFlag{GrantedOrgIDQuery: new(GrantedOrgIDQuery)}
	x.grantedOrgIdQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AllProjectGrantQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project-name-query", "role-key-query", "project-id-query", "granted-org-id-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project-name-query"); flagIdx != nil {
		x.projectNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("role-key-query"); flagIdx != nil {
		x.roleKeyQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("project-id-query"); flagIdx != nil {
		x.projectIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("granted-org-id-query"); flagIdx != nil {
		x.grantedOrgIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "project-name-query", "role-key-query", "project-id-query", "granted-org-id-query").Last().Flag {
	case "project-name-query":
		if x.projectNameQueryFlag.Changed() {
			x.changed = true
			x.AllProjectGrantQuery.Query = &AllProjectGrantQuery_ProjectNameQuery{ProjectNameQuery: x.projectNameQueryFlag.GrantProjectNameQuery}
		}
	case "role-key-query":
		if x.roleKeyQueryFlag.Changed() {
			x.changed = true
			x.AllProjectGrantQuery.Query = &AllProjectGrantQuery_RoleKeyQuery{RoleKeyQuery: x.roleKeyQueryFlag.GrantRoleKeyQuery}
		}
	case "project-id-query":
		if x.projectIdQueryFlag.Changed() {
			x.changed = true
			x.AllProjectGrantQuery.Query = &AllProjectGrantQuery_ProjectIdQuery{ProjectIdQuery: x.projectIdQueryFlag.ProjectIDQuery}
		}
	case "granted-org-id-query":
		if x.grantedOrgIdQueryFlag.Changed() {
			x.changed = true
			x.AllProjectGrantQuery.Query = &AllProjectGrantQuery_GrantedOrgIdQuery{GrantedOrgIdQuery: x.grantedOrgIdQueryFlag.GrantedOrgIDQuery}
		}
	}
}

func (x *AllProjectGrantQueryFlag) Changed() bool {
	return x.changed
}

type GrantProjectNameQueryFlag struct {
	*GrantProjectNameQuery

	changed bool
	set     *pflag.FlagSet

	nameFlag   *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *GrantProjectNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GrantProjectNameQuery", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *GrantProjectNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.GrantProjectNameQuery.Name = *x.nameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.GrantProjectNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *GrantProjectNameQueryFlag) Changed() bool {
	return x.changed
}

type GrantRoleKeyQueryFlag struct {
	*GrantRoleKeyQuery

	changed bool
	set     *pflag.FlagSet

	roleKeyFlag *cli_client.StringParser
	methodFlag  *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *GrantRoleKeyQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GrantRoleKeyQuery", pflag.ContinueOnError)

	x.roleKeyFlag = cli_client.NewStringParser(x.set, "role-key", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *GrantRoleKeyQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.roleKeyFlag.Changed() {
		x.changed = true
		x.GrantRoleKeyQuery.RoleKey = *x.roleKeyFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.GrantRoleKeyQuery.Method = *x.methodFlag.Value
	}
}

func (x *GrantRoleKeyQueryFlag) Changed() bool {
	return x.changed
}

type GrantedOrgIDQueryFlag struct {
	*GrantedOrgIDQuery

	changed bool
	set     *pflag.FlagSet

	grantedOrgIdFlag *cli_client.StringParser
}

func (x *GrantedOrgIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GrantedOrgIDQuery", pflag.ContinueOnError)

	x.grantedOrgIdFlag = cli_client.NewStringParser(x.set, "granted-org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GrantedOrgIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.grantedOrgIdFlag.Changed() {
		x.changed = true
		x.GrantedOrgIDQuery.GrantedOrgId = *x.grantedOrgIdFlag.Value
	}
}

func (x *GrantedOrgIDQueryFlag) Changed() bool {
	return x.changed
}

type GrantedProjectFlag struct {
	*GrantedProject

	changed bool
	set     *pflag.FlagSet

	grantIdFlag          *cli_client.StringParser
	grantedOrgIdFlag     *cli_client.StringParser
	grantedOrgNameFlag   *cli_client.StringParser
	grantedRoleKeysFlag  *cli_client.StringSliceParser
	stateFlag            *cli_client.EnumParser[ProjectGrantState]
	projectIdFlag        *cli_client.StringParser
	projectNameFlag      *cli_client.StringParser
	projectOwnerIdFlag   *cli_client.StringParser
	projectOwnerNameFlag *cli_client.StringParser
	detailsFlag          *object.ObjectDetailsFlag
}

func (x *GrantedProjectFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GrantedProject", pflag.ContinueOnError)

	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.grantedOrgIdFlag = cli_client.NewStringParser(x.set, "granted-org-id", "")
	x.grantedOrgNameFlag = cli_client.NewStringParser(x.set, "granted-org-name", "")
	x.grantedRoleKeysFlag = cli_client.NewStringSliceParser(x.set, "granted-role-keys", "")
	x.stateFlag = cli_client.NewEnumParser[ProjectGrantState](x.set, "state", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.projectNameFlag = cli_client.NewStringParser(x.set, "project-name", "")
	x.projectOwnerIdFlag = cli_client.NewStringParser(x.set, "project-owner-id", "")
	x.projectOwnerNameFlag = cli_client.NewStringParser(x.set, "project-owner-name", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GrantedProjectFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.grantIdFlag.Changed() {
		x.changed = true
		x.GrantedProject.GrantId = *x.grantIdFlag.Value
	}
	if x.grantedOrgIdFlag.Changed() {
		x.changed = true
		x.GrantedProject.GrantedOrgId = *x.grantedOrgIdFlag.Value
	}
	if x.grantedOrgNameFlag.Changed() {
		x.changed = true
		x.GrantedProject.GrantedOrgName = *x.grantedOrgNameFlag.Value
	}
	if x.grantedRoleKeysFlag.Changed() {
		x.changed = true
		x.GrantedProject.GrantedRoleKeys = *x.grantedRoleKeysFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.GrantedProject.State = *x.stateFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.GrantedProject.ProjectId = *x.projectIdFlag.Value
	}
	if x.projectNameFlag.Changed() {
		x.changed = true
		x.GrantedProject.ProjectName = *x.projectNameFlag.Value
	}
	if x.projectOwnerIdFlag.Changed() {
		x.changed = true
		x.GrantedProject.ProjectOwnerId = *x.projectOwnerIdFlag.Value
	}
	if x.projectOwnerNameFlag.Changed() {
		x.changed = true
		x.GrantedProject.ProjectOwnerName = *x.projectOwnerNameFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GrantedProject.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *GrantedProjectFlag) Changed() bool {
	return x.changed
}

type ProjectFlag struct {
	*Project

	changed bool
	set     *pflag.FlagSet

	idFlag                     *cli_client.StringParser
	detailsFlag                *object.ObjectDetailsFlag
	nameFlag                   *cli_client.StringParser
	stateFlag                  *cli_client.EnumParser[ProjectState]
	projectRoleAssertionFlag   *cli_client.BoolParser
	projectRoleCheckFlag       *cli_client.BoolParser
	hasProjectCheckFlag        *cli_client.BoolParser
	privateLabelingSettingFlag *cli_client.EnumParser[PrivateLabelingSetting]
}

func (x *ProjectFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Project", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stateFlag = cli_client.NewEnumParser[ProjectState](x.set, "state", "")
	x.projectRoleAssertionFlag = cli_client.NewBoolParser(x.set, "project-role-assertion", "")
	x.projectRoleCheckFlag = cli_client.NewBoolParser(x.set, "project-role-check", "")
	x.hasProjectCheckFlag = cli_client.NewBoolParser(x.set, "has-project-check", "")
	x.privateLabelingSettingFlag = cli_client.NewEnumParser[PrivateLabelingSetting](x.set, "private-labeling-setting", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProjectFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.Project.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Project.Details = x.detailsFlag.ObjectDetails
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.Project.Name = *x.nameFlag.Value
	}
	if x.stateFlag.Changed() {
		x.changed = true
		x.Project.State = *x.stateFlag.Value
	}
	if x.projectRoleAssertionFlag.Changed() {
		x.changed = true
		x.Project.ProjectRoleAssertion = *x.projectRoleAssertionFlag.Value
	}
	if x.projectRoleCheckFlag.Changed() {
		x.changed = true
		x.Project.ProjectRoleCheck = *x.projectRoleCheckFlag.Value
	}
	if x.hasProjectCheckFlag.Changed() {
		x.changed = true
		x.Project.HasProjectCheck = *x.hasProjectCheckFlag.Value
	}
	if x.privateLabelingSettingFlag.Changed() {
		x.changed = true
		x.Project.PrivateLabelingSetting = *x.privateLabelingSettingFlag.Value
	}
}

func (x *ProjectFlag) Changed() bool {
	return x.changed
}

type ProjectGrantQueryFlag struct {
	*ProjectGrantQuery

	changed bool
	set     *pflag.FlagSet

	projectNameQueryFlag *GrantProjectNameQueryFlag
	roleKeyQueryFlag     *GrantRoleKeyQueryFlag
}

func (x *ProjectGrantQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProjectGrantQuery", pflag.ContinueOnError)

	x.projectNameQueryFlag = &GrantProjectNameQueryFlag{GrantProjectNameQuery: new(GrantProjectNameQuery)}
	x.projectNameQueryFlag.AddFlags(x.set)
	x.roleKeyQueryFlag = &GrantRoleKeyQueryFlag{GrantRoleKeyQuery: new(GrantRoleKeyQuery)}
	x.roleKeyQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProjectGrantQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project-name-query", "role-key-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project-name-query"); flagIdx != nil {
		x.projectNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("role-key-query"); flagIdx != nil {
		x.roleKeyQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "project-name-query", "role-key-query").Last().Flag {
	case "project-name-query":
		if x.projectNameQueryFlag.Changed() {
			x.changed = true
			x.ProjectGrantQuery.Query = &ProjectGrantQuery_ProjectNameQuery{ProjectNameQuery: x.projectNameQueryFlag.GrantProjectNameQuery}
		}
	case "role-key-query":
		if x.roleKeyQueryFlag.Changed() {
			x.changed = true
			x.ProjectGrantQuery.Query = &ProjectGrantQuery_RoleKeyQuery{RoleKeyQuery: x.roleKeyQueryFlag.GrantRoleKeyQuery}
		}
	}
}

func (x *ProjectGrantQueryFlag) Changed() bool {
	return x.changed
}

type ProjectIDQueryFlag struct {
	*ProjectIDQuery

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
}

func (x *ProjectIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProjectIDQuery", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ProjectIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ProjectIDQuery.ProjectId = *x.projectIdFlag.Value
	}
}

func (x *ProjectIDQueryFlag) Changed() bool {
	return x.changed
}

type ProjectNameQueryFlag struct {
	*ProjectNameQuery

	changed bool
	set     *pflag.FlagSet

	nameFlag   *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *ProjectNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProjectNameQuery", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *ProjectNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.ProjectNameQuery.Name = *x.nameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.ProjectNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *ProjectNameQueryFlag) Changed() bool {
	return x.changed
}

type ProjectQueryFlag struct {
	*ProjectQuery

	changed bool
	set     *pflag.FlagSet

	nameQueryFlag                 *ProjectNameQueryFlag
	projectResourceOwnerQueryFlag *ProjectResourceOwnerQueryFlag
}

func (x *ProjectQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProjectQuery", pflag.ContinueOnError)

	x.nameQueryFlag = &ProjectNameQueryFlag{ProjectNameQuery: new(ProjectNameQuery)}
	x.nameQueryFlag.AddFlags(x.set)
	x.projectResourceOwnerQueryFlag = &ProjectResourceOwnerQueryFlag{ProjectResourceOwnerQuery: new(ProjectResourceOwnerQuery)}
	x.projectResourceOwnerQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProjectQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "name-query", "project-resource-owner-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("name-query"); flagIdx != nil {
		x.nameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("project-resource-owner-query"); flagIdx != nil {
		x.projectResourceOwnerQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "name-query", "project-resource-owner-query").Last().Flag {
	case "name-query":
		if x.nameQueryFlag.Changed() {
			x.changed = true
			x.ProjectQuery.Query = &ProjectQuery_NameQuery{NameQuery: x.nameQueryFlag.ProjectNameQuery}
		}
	case "project-resource-owner-query":
		if x.projectResourceOwnerQueryFlag.Changed() {
			x.changed = true
			x.ProjectQuery.Query = &ProjectQuery_ProjectResourceOwnerQuery{ProjectResourceOwnerQuery: x.projectResourceOwnerQueryFlag.ProjectResourceOwnerQuery}
		}
	}
}

func (x *ProjectQueryFlag) Changed() bool {
	return x.changed
}

type ProjectResourceOwnerQueryFlag struct {
	*ProjectResourceOwnerQuery

	changed bool
	set     *pflag.FlagSet

	resourceOwnerFlag *cli_client.StringParser
}

func (x *ProjectResourceOwnerQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProjectResourceOwnerQuery", pflag.ContinueOnError)

	x.resourceOwnerFlag = cli_client.NewStringParser(x.set, "resource-owner", "")
	parent.AddFlagSet(x.set)
}

func (x *ProjectResourceOwnerQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.resourceOwnerFlag.Changed() {
		x.changed = true
		x.ProjectResourceOwnerQuery.ResourceOwner = *x.resourceOwnerFlag.Value
	}
}

func (x *ProjectResourceOwnerQueryFlag) Changed() bool {
	return x.changed
}

type RoleFlag struct {
	*Role

	changed bool
	set     *pflag.FlagSet

	keyFlag         *cli_client.StringParser
	detailsFlag     *object.ObjectDetailsFlag
	displayNameFlag *cli_client.StringParser
	groupFlag       *cli_client.StringParser
}

func (x *RoleFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Role", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.groupFlag = cli_client.NewStringParser(x.set, "group", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RoleFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.Role.Key = *x.keyFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Role.Details = x.detailsFlag.ObjectDetails
	}

	if x.displayNameFlag.Changed() {
		x.changed = true
		x.Role.DisplayName = *x.displayNameFlag.Value
	}
	if x.groupFlag.Changed() {
		x.changed = true
		x.Role.Group = *x.groupFlag.Value
	}
}

func (x *RoleFlag) Changed() bool {
	return x.changed
}

type RoleDisplayNameQueryFlag struct {
	*RoleDisplayNameQuery

	changed bool
	set     *pflag.FlagSet

	displayNameFlag *cli_client.StringParser
	methodFlag      *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *RoleDisplayNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RoleDisplayNameQuery", pflag.ContinueOnError)

	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *RoleDisplayNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.displayNameFlag.Changed() {
		x.changed = true
		x.RoleDisplayNameQuery.DisplayName = *x.displayNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.RoleDisplayNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *RoleDisplayNameQueryFlag) Changed() bool {
	return x.changed
}

type RoleKeyQueryFlag struct {
	*RoleKeyQuery

	changed bool
	set     *pflag.FlagSet

	keyFlag    *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *RoleKeyQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RoleKeyQuery", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *RoleKeyQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.RoleKeyQuery.Key = *x.keyFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.RoleKeyQuery.Method = *x.methodFlag.Value
	}
}

func (x *RoleKeyQueryFlag) Changed() bool {
	return x.changed
}

type RoleQueryFlag struct {
	*RoleQuery

	changed bool
	set     *pflag.FlagSet

	keyQueryFlag         *RoleKeyQueryFlag
	displayNameQueryFlag *RoleDisplayNameQueryFlag
}

func (x *RoleQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RoleQuery", pflag.ContinueOnError)

	x.keyQueryFlag = &RoleKeyQueryFlag{RoleKeyQuery: new(RoleKeyQuery)}
	x.keyQueryFlag.AddFlags(x.set)
	x.displayNameQueryFlag = &RoleDisplayNameQueryFlag{RoleDisplayNameQuery: new(RoleDisplayNameQuery)}
	x.displayNameQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RoleQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "key-query", "display-name-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("key-query"); flagIdx != nil {
		x.keyQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("display-name-query"); flagIdx != nil {
		x.displayNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "key-query", "display-name-query").Last().Flag {
	case "key-query":
		if x.keyQueryFlag.Changed() {
			x.changed = true
			x.RoleQuery.Query = &RoleQuery_KeyQuery{KeyQuery: x.keyQueryFlag.RoleKeyQuery}
		}
	case "display-name-query":
		if x.displayNameQueryFlag.Changed() {
			x.changed = true
			x.RoleQuery.Query = &RoleQuery_DisplayNameQuery{DisplayNameQuery: x.displayNameQueryFlag.RoleDisplayNameQuery}
		}
	}
}

func (x *RoleQueryFlag) Changed() bool {
	return x.changed
}
