// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package protoc

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	os "os"
)

type AuthOptionFlag struct {
	*AuthOption

	changed bool
	set     *pflag.FlagSet

	permissionFlag *cli_client.StringParser
	orgFieldFlag   *cli_client.StringParser
}

func (x *AuthOptionFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AuthOption", pflag.ContinueOnError)

	x.permissionFlag = cli_client.NewStringParser(x.set, "permission", "")
	x.orgFieldFlag = cli_client.NewStringParser(x.set, "org-field", "")
	parent.AddFlagSet(x.set)
}

func (x *AuthOptionFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.permissionFlag.Changed() {
		x.changed = true
		x.AuthOption.Permission = *x.permissionFlag.Value
	}
	if x.orgFieldFlag.Changed() {
		x.changed = true
		x.AuthOption.OrgField = *x.orgFieldFlag.Value
	}
}

func (x *AuthOptionFlag) Changed() bool {
	return x.changed
}

type CustomHTTPResponseFlag struct {
	*CustomHTTPResponse

	changed bool
	set     *pflag.FlagSet

	successCodeFlag *cli_client.Int32Parser
}

func (x *CustomHTTPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CustomHTTPResponse", pflag.ContinueOnError)

	x.successCodeFlag = cli_client.NewInt32Parser(x.set, "success-code", "")
	parent.AddFlagSet(x.set)
}

func (x *CustomHTTPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.successCodeFlag.Changed() {
		x.changed = true
		x.CustomHTTPResponse.SuccessCode = *x.successCodeFlag.Value
	}
}

func (x *CustomHTTPResponseFlag) Changed() bool {
	return x.changed
}

type OptionsFlag struct {
	*Options

	changed bool
	set     *pflag.FlagSet

	authOptionFlag   *AuthOptionFlag
	httpResponseFlag *CustomHTTPResponseFlag
}

func (x *OptionsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Options", pflag.ContinueOnError)

	x.authOptionFlag = &AuthOptionFlag{AuthOption: new(AuthOption)}
	x.authOptionFlag.AddFlags(x.set)
	x.httpResponseFlag = &CustomHTTPResponseFlag{CustomHTTPResponse: new(CustomHTTPResponse)}
	x.httpResponseFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *OptionsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "auth-option", "http-response")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("auth-option"); flagIdx != nil {
		x.authOptionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("http-response"); flagIdx != nil {
		x.httpResponseFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.authOptionFlag.Changed() {
		x.changed = true
		x.Options.AuthOption = x.authOptionFlag.AuthOption
	}

	if x.httpResponseFlag.Changed() {
		x.changed = true
		x.Options.HttpResponse = x.httpResponseFlag.CustomHTTPResponse
	}

}

func (x *OptionsFlag) Changed() bool {
	return x.changed
}
