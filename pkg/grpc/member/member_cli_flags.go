// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package member

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	user "github.com/zitadel/zitadel/pkg/grpc/user"
	os "os"
)

type EmailQueryFlag struct {
	*EmailQuery

	changed bool
	set     *pflag.FlagSet

	emailFlag  *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *EmailQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("EmailQuery", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *EmailQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.EmailQuery.Email = *x.emailFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.EmailQuery.Method = *x.methodFlag.Value
	}
}

func (x *EmailQueryFlag) Changed() bool {
	return x.changed
}

type FirstNameQueryFlag struct {
	*FirstNameQuery

	changed bool
	set     *pflag.FlagSet

	firstNameFlag *cli_client.StringParser
	methodFlag    *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *FirstNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FirstNameQuery", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *FirstNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.FirstNameQuery.FirstName = *x.firstNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.FirstNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *FirstNameQueryFlag) Changed() bool {
	return x.changed
}

type LastNameQueryFlag struct {
	*LastNameQuery

	changed bool
	set     *pflag.FlagSet

	lastNameFlag *cli_client.StringParser
	methodFlag   *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *LastNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LastNameQuery", pflag.ContinueOnError)

	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *LastNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.lastNameFlag.Changed() {
		x.changed = true
		x.LastNameQuery.LastName = *x.lastNameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.LastNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *LastNameQueryFlag) Changed() bool {
	return x.changed
}

type MemberFlag struct {
	*Member

	changed bool
	set     *pflag.FlagSet

	userIdFlag             *cli_client.StringParser
	detailsFlag            *object.ObjectDetailsFlag
	rolesFlag              *cli_client.StringSliceParser
	preferredLoginNameFlag *cli_client.StringParser
	emailFlag              *cli_client.StringParser
	firstNameFlag          *cli_client.StringParser
	lastNameFlag           *cli_client.StringParser
	displayNameFlag        *cli_client.StringParser
	avatarUrlFlag          *cli_client.StringParser
	userTypeFlag           *cli_client.EnumParser[user.Type]
}

func (x *MemberFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Member", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	x.preferredLoginNameFlag = cli_client.NewStringParser(x.set, "preferred-login-name", "")
	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.avatarUrlFlag = cli_client.NewStringParser(x.set, "avatar-url", "")
	x.userTypeFlag = cli_client.NewEnumParser[user.Type](x.set, "user-type", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MemberFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.Member.UserId = *x.userIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Member.Details = x.detailsFlag.ObjectDetails
	}

	if x.rolesFlag.Changed() {
		x.changed = true
		x.Member.Roles = *x.rolesFlag.Value
	}
	if x.preferredLoginNameFlag.Changed() {
		x.changed = true
		x.Member.PreferredLoginName = *x.preferredLoginNameFlag.Value
	}
	if x.emailFlag.Changed() {
		x.changed = true
		x.Member.Email = *x.emailFlag.Value
	}
	if x.firstNameFlag.Changed() {
		x.changed = true
		x.Member.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.Member.LastName = *x.lastNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.Member.DisplayName = *x.displayNameFlag.Value
	}
	if x.avatarUrlFlag.Changed() {
		x.changed = true
		x.Member.AvatarUrl = *x.avatarUrlFlag.Value
	}
	if x.userTypeFlag.Changed() {
		x.changed = true
		x.Member.UserType = *x.userTypeFlag.Value
	}
}

func (x *MemberFlag) Changed() bool {
	return x.changed
}

type SearchQueryFlag struct {
	*SearchQuery

	changed bool
	set     *pflag.FlagSet

	firstNameQueryFlag *FirstNameQueryFlag
	lastNameQueryFlag  *LastNameQueryFlag
	emailQueryFlag     *EmailQueryFlag
	userIdQueryFlag    *UserIDQueryFlag
}

func (x *SearchQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SearchQuery", pflag.ContinueOnError)

	x.firstNameQueryFlag = &FirstNameQueryFlag{FirstNameQuery: new(FirstNameQuery)}
	x.firstNameQueryFlag.AddFlags(x.set)
	x.lastNameQueryFlag = &LastNameQueryFlag{LastNameQuery: new(LastNameQuery)}
	x.lastNameQueryFlag.AddFlags(x.set)
	x.emailQueryFlag = &EmailQueryFlag{EmailQuery: new(EmailQuery)}
	x.emailQueryFlag.AddFlags(x.set)
	x.userIdQueryFlag = &UserIDQueryFlag{UserIDQuery: new(UserIDQuery)}
	x.userIdQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SearchQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "first-name-query", "last-name-query", "email-query", "user-id-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("first-name-query"); flagIdx != nil {
		x.firstNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("last-name-query"); flagIdx != nil {
		x.lastNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-query"); flagIdx != nil {
		x.emailQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("user-id-query"); flagIdx != nil {
		x.userIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "first-name-query", "last-name-query", "email-query", "user-id-query").Last().Flag {
	case "first-name-query":
		if x.firstNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_FirstNameQuery{FirstNameQuery: x.firstNameQueryFlag.FirstNameQuery}
		}
	case "last-name-query":
		if x.lastNameQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_LastNameQuery{LastNameQuery: x.lastNameQueryFlag.LastNameQuery}
		}
	case "email-query":
		if x.emailQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_EmailQuery{EmailQuery: x.emailQueryFlag.EmailQuery}
		}
	case "user-id-query":
		if x.userIdQueryFlag.Changed() {
			x.changed = true
			x.SearchQuery.Query = &SearchQuery_UserIdQuery{UserIdQuery: x.userIdQueryFlag.UserIDQuery}
		}
	}
}

func (x *SearchQueryFlag) Changed() bool {
	return x.changed
}

type UserIDQueryFlag struct {
	*UserIDQuery

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *UserIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UserIDQuery", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *UserIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UserIDQuery.UserId = *x.userIdFlag.Value
	}
}

func (x *UserIDQueryFlag) Changed() bool {
	return x.changed
}
