// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zitadel/admin.proto

package admin

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	idp "github.com/zitadel/zitadel/pkg/grpc/idp"

	instance "github.com/zitadel/zitadel/pkg/grpc/instance"

	org "github.com/zitadel/zitadel/pkg/grpc/org"

	policy "github.com/zitadel/zitadel/pkg/grpc/policy"

	settings "github.com/zitadel/zitadel/pkg/grpc/settings"

	user "github.com/zitadel/zitadel/pkg/grpc/user"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = instance.DomainFieldName(0)

	_ = instance.DomainFieldName(0)

	_ = settings.SecretGeneratorType(0)

	_ = settings.SecretGeneratorType(0)

	_ = org.OrgFieldName(0)

	_ = org.OrgFieldName(0)

	_ = idp.IDPFieldName(0)

	_ = idp.IDPFieldName(0)

	_ = idp.IDPStylingType(0)

	_ = idp.OIDCMappingField(0)

	_ = idp.OIDCMappingField(0)

	_ = idp.IDPStylingType(0)

	_ = idp.IDPStylingType(0)

	_ = idp.OIDCMappingField(0)

	_ = idp.OIDCMappingField(0)

	_ = policy.PasswordlessType(0)

	_ = policy.SecondFactorType(0)

	_ = policy.SecondFactorType(0)

	_ = policy.MultiFactorType(0)

	_ = policy.MultiFactorType(0)

	_ = user.Gender(0)
)

// Validate checks the field values on HealthzRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthzRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzRequestValidationError is the validation error returned by
// HealthzRequest.Validate if the designated constraints aren't met.
type HealthzRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzRequestValidationError) ErrorName() string { return "HealthzRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthzRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzRequestValidationError{}

// Validate checks the field values on HealthzResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HealthzResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzResponseValidationError is the validation error returned by
// HealthzResponse.Validate if the designated constraints aren't met.
type HealthzResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzResponseValidationError) ErrorName() string { return "HealthzResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthzResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzResponseValidationError{}

// Validate checks the field values on GetSupportedLanguagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSupportedLanguagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSupportedLanguagesRequestValidationError is the validation error returned
// by GetSupportedLanguagesRequest.Validate if the designated constraints
// aren't met.
type GetSupportedLanguagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesRequestValidationError) ErrorName() string {
	return "GetSupportedLanguagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesRequestValidationError{}

// Validate checks the field values on GetSupportedLanguagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSupportedLanguagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSupportedLanguagesResponseValidationError is the validation error
// returned by GetSupportedLanguagesResponse.Validate if the designated
// constraints aren't met.
type GetSupportedLanguagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesResponseValidationError) ErrorName() string {
	return "GetSupportedLanguagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesResponseValidationError{}

// Validate checks the field values on SetDefaultLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetDefaultLanguageRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 10 {
		return SetDefaultLanguageRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 10 runes, inclusive",
		}
	}

	return nil
}

// SetDefaultLanguageRequestValidationError is the validation error returned by
// SetDefaultLanguageRequest.Validate if the designated constraints aren't met.
type SetDefaultLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultLanguageRequestValidationError) ErrorName() string {
	return "SetDefaultLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultLanguageRequestValidationError{}

// Validate checks the field values on SetDefaultLanguageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetDefaultLanguageResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultLanguageResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultLanguageResponseValidationError is the validation error returned
// by SetDefaultLanguageResponse.Validate if the designated constraints aren't met.
type SetDefaultLanguageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultLanguageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultLanguageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultLanguageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultLanguageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultLanguageResponseValidationError) ErrorName() string {
	return "SetDefaultLanguageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultLanguageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultLanguageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultLanguageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultLanguageResponseValidationError{}

// Validate checks the field values on GetDefaultLanguageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLanguageRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultLanguageRequestValidationError is the validation error returned by
// GetDefaultLanguageRequest.Validate if the designated constraints aren't met.
type GetDefaultLanguageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLanguageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLanguageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLanguageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLanguageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLanguageRequestValidationError) ErrorName() string {
	return "GetDefaultLanguageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLanguageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLanguageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLanguageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLanguageRequestValidationError{}

// Validate checks the field values on GetDefaultLanguageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLanguageResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Language

	return nil
}

// GetDefaultLanguageResponseValidationError is the validation error returned
// by GetDefaultLanguageResponse.Validate if the designated constraints aren't met.
type GetDefaultLanguageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLanguageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLanguageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLanguageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLanguageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLanguageResponseValidationError) ErrorName() string {
	return "GetDefaultLanguageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLanguageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLanguageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLanguageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLanguageResponseValidationError{}

// Validate checks the field values on SetDefaultOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetDefaultOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return SetDefaultOrgRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// SetDefaultOrgRequestValidationError is the validation error returned by
// SetDefaultOrgRequest.Validate if the designated constraints aren't met.
type SetDefaultOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultOrgRequestValidationError) ErrorName() string {
	return "SetDefaultOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultOrgRequestValidationError{}

// Validate checks the field values on SetDefaultOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetDefaultOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultOrgResponseValidationError is the validation error returned by
// SetDefaultOrgResponse.Validate if the designated constraints aren't met.
type SetDefaultOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultOrgResponseValidationError) ErrorName() string {
	return "SetDefaultOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultOrgResponseValidationError{}

// Validate checks the field values on GetDefaultOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultOrgRequestValidationError is the validation error returned by
// GetDefaultOrgRequest.Validate if the designated constraints aren't met.
type GetDefaultOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultOrgRequestValidationError) ErrorName() string {
	return "GetDefaultOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultOrgRequestValidationError{}

// Validate checks the field values on GetDefaultOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultOrgResponseValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultOrgResponseValidationError is the validation error returned by
// GetDefaultOrgResponse.Validate if the designated constraints aren't met.
type GetDefaultOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultOrgResponseValidationError) ErrorName() string {
	return "GetDefaultOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultOrgResponseValidationError{}

// Validate checks the field values on GetMyInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyInstanceRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyInstanceRequestValidationError is the validation error returned by
// GetMyInstanceRequest.Validate if the designated constraints aren't met.
type GetMyInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyInstanceRequestValidationError) ErrorName() string {
	return "GetMyInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyInstanceRequestValidationError{}

// Validate checks the field values on GetMyInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMyInstanceResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyInstanceResponseValidationError is the validation error returned by
// GetMyInstanceResponse.Validate if the designated constraints aren't met.
type GetMyInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyInstanceResponseValidationError) ErrorName() string {
	return "GetMyInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMyInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyInstanceResponseValidationError{}

// Validate checks the field values on ListInstanceDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstanceDomainsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstanceDomainsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstanceDomainsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstanceDomainsRequestValidationError is the validation error returned
// by ListInstanceDomainsRequest.Validate if the designated constraints aren't met.
type ListInstanceDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceDomainsRequestValidationError) ErrorName() string {
	return "ListInstanceDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceDomainsRequestValidationError{}

// Validate checks the field values on ListInstanceDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListInstanceDomainsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListInstanceDomainsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstanceDomainsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListInstanceDomainsResponseValidationError is the validation error returned
// by ListInstanceDomainsResponse.Validate if the designated constraints
// aren't met.
type ListInstanceDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstanceDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstanceDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstanceDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstanceDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstanceDomainsResponseValidationError) ErrorName() string {
	return "ListInstanceDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstanceDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstanceDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstanceDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstanceDomainsResponseValidationError{}

// Validate checks the field values on ListSecretGeneratorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSecretGeneratorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretGeneratorsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretGeneratorsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSecretGeneratorsRequestValidationError is the validation error returned
// by ListSecretGeneratorsRequest.Validate if the designated constraints
// aren't met.
type ListSecretGeneratorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretGeneratorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretGeneratorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretGeneratorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretGeneratorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretGeneratorsRequestValidationError) ErrorName() string {
	return "ListSecretGeneratorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretGeneratorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretGeneratorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretGeneratorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretGeneratorsRequestValidationError{}

// Validate checks the field values on ListSecretGeneratorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSecretGeneratorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSecretGeneratorsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSecretGeneratorsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSecretGeneratorsResponseValidationError is the validation error returned
// by ListSecretGeneratorsResponse.Validate if the designated constraints
// aren't met.
type ListSecretGeneratorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSecretGeneratorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSecretGeneratorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSecretGeneratorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSecretGeneratorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSecretGeneratorsResponseValidationError) ErrorName() string {
	return "ListSecretGeneratorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSecretGeneratorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSecretGeneratorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSecretGeneratorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSecretGeneratorsResponseValidationError{}

// Validate checks the field values on GetSecretGeneratorRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSecretGeneratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _GetSecretGeneratorRequest_GeneratorType_NotInLookup[m.GetGeneratorType()]; ok {
		return GetSecretGeneratorRequestValidationError{
			field:  "GeneratorType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := settings.SecretGeneratorType_name[int32(m.GetGeneratorType())]; !ok {
		return GetSecretGeneratorRequestValidationError{
			field:  "GeneratorType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// GetSecretGeneratorRequestValidationError is the validation error returned by
// GetSecretGeneratorRequest.Validate if the designated constraints aren't met.
type GetSecretGeneratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretGeneratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretGeneratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretGeneratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretGeneratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretGeneratorRequestValidationError) ErrorName() string {
	return "GetSecretGeneratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecretGeneratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretGeneratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretGeneratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretGeneratorRequestValidationError{}

var _GetSecretGeneratorRequest_GeneratorType_NotInLookup = map[settings.SecretGeneratorType]struct{}{
	0: {},
}

// Validate checks the field values on GetSecretGeneratorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSecretGeneratorResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSecretGenerator()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecretGeneratorResponseValidationError{
				field:  "SecretGenerator",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSecretGeneratorResponseValidationError is the validation error returned
// by GetSecretGeneratorResponse.Validate if the designated constraints aren't met.
type GetSecretGeneratorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecretGeneratorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecretGeneratorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecretGeneratorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecretGeneratorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecretGeneratorResponseValidationError) ErrorName() string {
	return "GetSecretGeneratorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecretGeneratorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecretGeneratorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecretGeneratorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecretGeneratorResponseValidationError{}

// Validate checks the field values on UpdateSecretGeneratorRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSecretGeneratorRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _UpdateSecretGeneratorRequest_GeneratorType_NotInLookup[m.GetGeneratorType()]; ok {
		return UpdateSecretGeneratorRequestValidationError{
			field:  "GeneratorType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := settings.SecretGeneratorType_name[int32(m.GetGeneratorType())]; !ok {
		return UpdateSecretGeneratorRequestValidationError{
			field:  "GeneratorType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for Length

	if v, ok := interface{}(m.GetExpiry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretGeneratorRequestValidationError{
				field:  "Expiry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IncludeLowerLetters

	// no validation rules for IncludeUpperLetters

	// no validation rules for IncludeDigits

	// no validation rules for IncludeSymbols

	return nil
}

// UpdateSecretGeneratorRequestValidationError is the validation error returned
// by UpdateSecretGeneratorRequest.Validate if the designated constraints
// aren't met.
type UpdateSecretGeneratorRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSecretGeneratorRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSecretGeneratorRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSecretGeneratorRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSecretGeneratorRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSecretGeneratorRequestValidationError) ErrorName() string {
	return "UpdateSecretGeneratorRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSecretGeneratorRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSecretGeneratorRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSecretGeneratorRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSecretGeneratorRequestValidationError{}

var _UpdateSecretGeneratorRequest_GeneratorType_NotInLookup = map[settings.SecretGeneratorType]struct{}{
	0: {},
}

// Validate checks the field values on UpdateSecretGeneratorResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSecretGeneratorResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSecretGeneratorResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSecretGeneratorResponseValidationError is the validation error
// returned by UpdateSecretGeneratorResponse.Validate if the designated
// constraints aren't met.
type UpdateSecretGeneratorResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSecretGeneratorResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSecretGeneratorResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSecretGeneratorResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSecretGeneratorResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSecretGeneratorResponseValidationError) ErrorName() string {
	return "UpdateSecretGeneratorResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSecretGeneratorResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSecretGeneratorResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSecretGeneratorResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSecretGeneratorResponseValidationError{}

// Validate checks the field values on GetSMTPConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSMTPConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSMTPConfigRequestValidationError is the validation error returned by
// GetSMTPConfigRequest.Validate if the designated constraints aren't met.
type GetSMTPConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSMTPConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSMTPConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSMTPConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSMTPConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSMTPConfigRequestValidationError) ErrorName() string {
	return "GetSMTPConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSMTPConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSMTPConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSMTPConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSMTPConfigRequestValidationError{}

// Validate checks the field values on GetSMTPConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSMTPConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSmtpConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSMTPConfigResponseValidationError{
				field:  "SmtpConfig",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSMTPConfigResponseValidationError is the validation error returned by
// GetSMTPConfigResponse.Validate if the designated constraints aren't met.
type GetSMTPConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSMTPConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSMTPConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSMTPConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSMTPConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSMTPConfigResponseValidationError) ErrorName() string {
	return "GetSMTPConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSMTPConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSMTPConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSMTPConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSMTPConfigResponseValidationError{}

// Validate checks the field values on AddSMTPConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSMTPConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetSenderAddress()); l < 1 || l > 200 {
		return AddSMTPConfigRequestValidationError{
			field:  "SenderAddress",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSenderName()); l < 1 || l > 200 {
		return AddSMTPConfigRequestValidationError{
			field:  "SenderName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for Tls

	if l := utf8.RuneCountInString(m.GetHost()); l < 1 || l > 500 {
		return AddSMTPConfigRequestValidationError{
			field:  "Host",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
	}

	// no validation rules for User

	// no validation rules for Password

	return nil
}

// AddSMTPConfigRequestValidationError is the validation error returned by
// AddSMTPConfigRequest.Validate if the designated constraints aren't met.
type AddSMTPConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSMTPConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSMTPConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSMTPConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSMTPConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSMTPConfigRequestValidationError) ErrorName() string {
	return "AddSMTPConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSMTPConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSMTPConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSMTPConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSMTPConfigRequestValidationError{}

// Validate checks the field values on AddSMTPConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSMTPConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSMTPConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddSMTPConfigResponseValidationError is the validation error returned by
// AddSMTPConfigResponse.Validate if the designated constraints aren't met.
type AddSMTPConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSMTPConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSMTPConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSMTPConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSMTPConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSMTPConfigResponseValidationError) ErrorName() string {
	return "AddSMTPConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSMTPConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSMTPConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSMTPConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSMTPConfigResponseValidationError{}

// Validate checks the field values on UpdateSMTPConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSMTPConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetSenderAddress()); l < 1 || l > 200 {
		return UpdateSMTPConfigRequestValidationError{
			field:  "SenderAddress",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSenderName()); l < 1 || l > 200 {
		return UpdateSMTPConfigRequestValidationError{
			field:  "SenderName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for Tls

	if l := utf8.RuneCountInString(m.GetHost()); l < 1 || l > 500 {
		return UpdateSMTPConfigRequestValidationError{
			field:  "Host",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
	}

	// no validation rules for User

	return nil
}

// UpdateSMTPConfigRequestValidationError is the validation error returned by
// UpdateSMTPConfigRequest.Validate if the designated constraints aren't met.
type UpdateSMTPConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMTPConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMTPConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMTPConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMTPConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMTPConfigRequestValidationError) ErrorName() string {
	return "UpdateSMTPConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMTPConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMTPConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMTPConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMTPConfigRequestValidationError{}

// Validate checks the field values on UpdateSMTPConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSMTPConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSMTPConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSMTPConfigResponseValidationError is the validation error returned by
// UpdateSMTPConfigResponse.Validate if the designated constraints aren't met.
type UpdateSMTPConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMTPConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMTPConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMTPConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMTPConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMTPConfigResponseValidationError) ErrorName() string {
	return "UpdateSMTPConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMTPConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMTPConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMTPConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMTPConfigResponseValidationError{}

// Validate checks the field values on UpdateSMTPConfigPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSMTPConfigPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Password

	return nil
}

// UpdateSMTPConfigPasswordRequestValidationError is the validation error
// returned by UpdateSMTPConfigPasswordRequest.Validate if the designated
// constraints aren't met.
type UpdateSMTPConfigPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMTPConfigPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMTPConfigPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMTPConfigPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMTPConfigPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMTPConfigPasswordRequestValidationError) ErrorName() string {
	return "UpdateSMTPConfigPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMTPConfigPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMTPConfigPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMTPConfigPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMTPConfigPasswordRequestValidationError{}

// Validate checks the field values on UpdateSMTPConfigPasswordResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateSMTPConfigPasswordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSMTPConfigPasswordResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSMTPConfigPasswordResponseValidationError is the validation error
// returned by UpdateSMTPConfigPasswordResponse.Validate if the designated
// constraints aren't met.
type UpdateSMTPConfigPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMTPConfigPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMTPConfigPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMTPConfigPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMTPConfigPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMTPConfigPasswordResponseValidationError) ErrorName() string {
	return "UpdateSMTPConfigPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMTPConfigPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMTPConfigPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMTPConfigPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMTPConfigPasswordResponseValidationError{}

// Validate checks the field values on RemoveSMTPConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSMTPConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveSMTPConfigRequestValidationError is the validation error returned by
// RemoveSMTPConfigRequest.Validate if the designated constraints aren't met.
type RemoveSMTPConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSMTPConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSMTPConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSMTPConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSMTPConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSMTPConfigRequestValidationError) ErrorName() string {
	return "RemoveSMTPConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSMTPConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSMTPConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSMTPConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSMTPConfigRequestValidationError{}

// Validate checks the field values on RemoveSMTPConfigResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSMTPConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveSMTPConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveSMTPConfigResponseValidationError is the validation error returned by
// RemoveSMTPConfigResponse.Validate if the designated constraints aren't met.
type RemoveSMTPConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSMTPConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSMTPConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSMTPConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSMTPConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSMTPConfigResponseValidationError) ErrorName() string {
	return "RemoveSMTPConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSMTPConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSMTPConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSMTPConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSMTPConfigResponseValidationError{}

// Validate checks the field values on ListSMSProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSMSProvidersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSMSProvidersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListSMSProvidersRequestValidationError is the validation error returned by
// ListSMSProvidersRequest.Validate if the designated constraints aren't met.
type ListSMSProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSMSProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSMSProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSMSProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSMSProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSMSProvidersRequestValidationError) ErrorName() string {
	return "ListSMSProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSMSProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSMSProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSMSProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSMSProvidersRequestValidationError{}

// Validate checks the field values on ListSMSProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListSMSProvidersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListSMSProvidersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSMSProvidersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListSMSProvidersResponseValidationError is the validation error returned by
// ListSMSProvidersResponse.Validate if the designated constraints aren't met.
type ListSMSProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSMSProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSMSProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSMSProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSMSProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSMSProvidersResponseValidationError) ErrorName() string {
	return "ListSMSProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSMSProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSMSProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSMSProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSMSProvidersResponseValidationError{}

// Validate checks the field values on GetSMSProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSMSProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 100 {
		return GetSMSProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
	}

	return nil
}

// GetSMSProviderRequestValidationError is the validation error returned by
// GetSMSProviderRequest.Validate if the designated constraints aren't met.
type GetSMSProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSMSProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSMSProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSMSProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSMSProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSMSProviderRequestValidationError) ErrorName() string {
	return "GetSMSProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSMSProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSMSProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSMSProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSMSProviderRequestValidationError{}

// Validate checks the field values on GetSMSProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSMSProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetConfig()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSMSProviderResponseValidationError{
				field:  "Config",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSMSProviderResponseValidationError is the validation error returned by
// GetSMSProviderResponse.Validate if the designated constraints aren't met.
type GetSMSProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSMSProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSMSProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSMSProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSMSProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSMSProviderResponseValidationError) ErrorName() string {
	return "GetSMSProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSMSProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSMSProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSMSProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSMSProviderResponseValidationError{}

// Validate checks the field values on AddSMSProviderTwilioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSMSProviderTwilioRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetSid()); l < 1 || l > 200 {
		return AddSMSProviderTwilioRequestValidationError{
			field:  "Sid",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 200 {
		return AddSMSProviderTwilioRequestValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSenderNumber()); l < 1 || l > 200 {
		return AddSMSProviderTwilioRequestValidationError{
			field:  "SenderNumber",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddSMSProviderTwilioRequestValidationError is the validation error returned
// by AddSMSProviderTwilioRequest.Validate if the designated constraints
// aren't met.
type AddSMSProviderTwilioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSMSProviderTwilioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSMSProviderTwilioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSMSProviderTwilioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSMSProviderTwilioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSMSProviderTwilioRequestValidationError) ErrorName() string {
	return "AddSMSProviderTwilioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSMSProviderTwilioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSMSProviderTwilioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSMSProviderTwilioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSMSProviderTwilioRequestValidationError{}

// Validate checks the field values on AddSMSProviderTwilioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSMSProviderTwilioResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSMSProviderTwilioResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	return nil
}

// AddSMSProviderTwilioResponseValidationError is the validation error returned
// by AddSMSProviderTwilioResponse.Validate if the designated constraints
// aren't met.
type AddSMSProviderTwilioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSMSProviderTwilioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSMSProviderTwilioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSMSProviderTwilioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSMSProviderTwilioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSMSProviderTwilioResponseValidationError) ErrorName() string {
	return "AddSMSProviderTwilioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSMSProviderTwilioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSMSProviderTwilioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSMSProviderTwilioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSMSProviderTwilioResponseValidationError{}

// Validate checks the field values on UpdateSMSProviderTwilioRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSMSProviderTwilioRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UpdateSMSProviderTwilioRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSid()); l < 1 || l > 200 {
		return UpdateSMSProviderTwilioRequestValidationError{
			field:  "Sid",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetSenderNumber()); l < 1 || l > 200 {
		return UpdateSMSProviderTwilioRequestValidationError{
			field:  "SenderNumber",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateSMSProviderTwilioRequestValidationError is the validation error
// returned by UpdateSMSProviderTwilioRequest.Validate if the designated
// constraints aren't met.
type UpdateSMSProviderTwilioRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMSProviderTwilioRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMSProviderTwilioRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMSProviderTwilioRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMSProviderTwilioRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMSProviderTwilioRequestValidationError) ErrorName() string {
	return "UpdateSMSProviderTwilioRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMSProviderTwilioRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMSProviderTwilioRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMSProviderTwilioRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMSProviderTwilioRequestValidationError{}

// Validate checks the field values on UpdateSMSProviderTwilioResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSMSProviderTwilioResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSMSProviderTwilioResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSMSProviderTwilioResponseValidationError is the validation error
// returned by UpdateSMSProviderTwilioResponse.Validate if the designated
// constraints aren't met.
type UpdateSMSProviderTwilioResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMSProviderTwilioResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMSProviderTwilioResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMSProviderTwilioResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMSProviderTwilioResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMSProviderTwilioResponseValidationError) ErrorName() string {
	return "UpdateSMSProviderTwilioResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMSProviderTwilioResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMSProviderTwilioResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMSProviderTwilioResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMSProviderTwilioResponseValidationError{}

// Validate checks the field values on UpdateSMSProviderTwilioTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateSMSProviderTwilioTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UpdateSMSProviderTwilioTokenRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetToken()); l < 1 || l > 200 {
		return UpdateSMSProviderTwilioTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateSMSProviderTwilioTokenRequestValidationError is the validation error
// returned by UpdateSMSProviderTwilioTokenRequest.Validate if the designated
// constraints aren't met.
type UpdateSMSProviderTwilioTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMSProviderTwilioTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMSProviderTwilioTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMSProviderTwilioTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMSProviderTwilioTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMSProviderTwilioTokenRequestValidationError) ErrorName() string {
	return "UpdateSMSProviderTwilioTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMSProviderTwilioTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMSProviderTwilioTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMSProviderTwilioTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMSProviderTwilioTokenRequestValidationError{}

// Validate checks the field values on UpdateSMSProviderTwilioTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateSMSProviderTwilioTokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSMSProviderTwilioTokenResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSMSProviderTwilioTokenResponseValidationError is the validation error
// returned by UpdateSMSProviderTwilioTokenResponse.Validate if the designated
// constraints aren't met.
type UpdateSMSProviderTwilioTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSMSProviderTwilioTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSMSProviderTwilioTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSMSProviderTwilioTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSMSProviderTwilioTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSMSProviderTwilioTokenResponseValidationError) ErrorName() string {
	return "UpdateSMSProviderTwilioTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSMSProviderTwilioTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSMSProviderTwilioTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSMSProviderTwilioTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSMSProviderTwilioTokenResponseValidationError{}

// Validate checks the field values on ActivateSMSProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActivateSMSProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return ActivateSMSProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ActivateSMSProviderRequestValidationError is the validation error returned
// by ActivateSMSProviderRequest.Validate if the designated constraints aren't met.
type ActivateSMSProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateSMSProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateSMSProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateSMSProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateSMSProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateSMSProviderRequestValidationError) ErrorName() string {
	return "ActivateSMSProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateSMSProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateSMSProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateSMSProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateSMSProviderRequestValidationError{}

// Validate checks the field values on ActivateSMSProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActivateSMSProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivateSMSProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActivateSMSProviderResponseValidationError is the validation error returned
// by ActivateSMSProviderResponse.Validate if the designated constraints
// aren't met.
type ActivateSMSProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateSMSProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateSMSProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateSMSProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateSMSProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateSMSProviderResponseValidationError) ErrorName() string {
	return "ActivateSMSProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateSMSProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateSMSProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateSMSProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateSMSProviderResponseValidationError{}

// Validate checks the field values on DeactivateSMSProviderRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateSMSProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return DeactivateSMSProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateSMSProviderRequestValidationError is the validation error returned
// by DeactivateSMSProviderRequest.Validate if the designated constraints
// aren't met.
type DeactivateSMSProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateSMSProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateSMSProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateSMSProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateSMSProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateSMSProviderRequestValidationError) ErrorName() string {
	return "DeactivateSMSProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateSMSProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateSMSProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateSMSProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateSMSProviderRequestValidationError{}

// Validate checks the field values on DeactivateSMSProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateSMSProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateSMSProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateSMSProviderResponseValidationError is the validation error
// returned by DeactivateSMSProviderResponse.Validate if the designated
// constraints aren't met.
type DeactivateSMSProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateSMSProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateSMSProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateSMSProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateSMSProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateSMSProviderResponseValidationError) ErrorName() string {
	return "DeactivateSMSProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateSMSProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateSMSProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateSMSProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateSMSProviderResponseValidationError{}

// Validate checks the field values on RemoveSMSProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSMSProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return RemoveSMSProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveSMSProviderRequestValidationError is the validation error returned by
// RemoveSMSProviderRequest.Validate if the designated constraints aren't met.
type RemoveSMSProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSMSProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSMSProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSMSProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSMSProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSMSProviderRequestValidationError) ErrorName() string {
	return "RemoveSMSProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSMSProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSMSProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSMSProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSMSProviderRequestValidationError{}

// Validate checks the field values on RemoveSMSProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveSMSProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveSMSProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveSMSProviderResponseValidationError is the validation error returned by
// RemoveSMSProviderResponse.Validate if the designated constraints aren't met.
type RemoveSMSProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSMSProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSMSProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSMSProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSMSProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSMSProviderResponseValidationError) ErrorName() string {
	return "RemoveSMSProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSMSProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSMSProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSMSProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSMSProviderResponseValidationError{}

// Validate checks the field values on GetFileSystemNotificationProviderRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetFileSystemNotificationProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetFileSystemNotificationProviderRequestValidationError is the validation
// error returned by GetFileSystemNotificationProviderRequest.Validate if the
// designated constraints aren't met.
type GetFileSystemNotificationProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileSystemNotificationProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileSystemNotificationProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileSystemNotificationProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileSystemNotificationProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileSystemNotificationProviderRequestValidationError) ErrorName() string {
	return "GetFileSystemNotificationProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileSystemNotificationProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileSystemNotificationProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileSystemNotificationProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileSystemNotificationProviderRequestValidationError{}

// Validate checks the field values on
// GetFileSystemNotificationProviderResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetFileSystemNotificationProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileSystemNotificationProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetFileSystemNotificationProviderResponseValidationError is the validation
// error returned by GetFileSystemNotificationProviderResponse.Validate if the
// designated constraints aren't met.
type GetFileSystemNotificationProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileSystemNotificationProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileSystemNotificationProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileSystemNotificationProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileSystemNotificationProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileSystemNotificationProviderResponseValidationError) ErrorName() string {
	return "GetFileSystemNotificationProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetFileSystemNotificationProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileSystemNotificationProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileSystemNotificationProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileSystemNotificationProviderResponseValidationError{}

// Validate checks the field values on GetLogNotificationProviderRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetLogNotificationProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLogNotificationProviderRequestValidationError is the validation error
// returned by GetLogNotificationProviderRequest.Validate if the designated
// constraints aren't met.
type GetLogNotificationProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogNotificationProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogNotificationProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogNotificationProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogNotificationProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogNotificationProviderRequestValidationError) ErrorName() string {
	return "GetLogNotificationProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogNotificationProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogNotificationProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogNotificationProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogNotificationProviderRequestValidationError{}

// Validate checks the field values on GetLogNotificationProviderResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetLogNotificationProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProvider()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLogNotificationProviderResponseValidationError{
				field:  "Provider",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetLogNotificationProviderResponseValidationError is the validation error
// returned by GetLogNotificationProviderResponse.Validate if the designated
// constraints aren't met.
type GetLogNotificationProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLogNotificationProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLogNotificationProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLogNotificationProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLogNotificationProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLogNotificationProviderResponseValidationError) ErrorName() string {
	return "GetLogNotificationProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLogNotificationProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLogNotificationProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLogNotificationProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLogNotificationProviderResponseValidationError{}

// Validate checks the field values on GetOIDCSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOIDCSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOIDCSettingsRequestValidationError is the validation error returned by
// GetOIDCSettingsRequest.Validate if the designated constraints aren't met.
type GetOIDCSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOIDCSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOIDCSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOIDCSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOIDCSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOIDCSettingsRequestValidationError) ErrorName() string {
	return "GetOIDCSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOIDCSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOIDCSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOIDCSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOIDCSettingsRequestValidationError{}

// Validate checks the field values on GetOIDCSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOIDCSettingsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOIDCSettingsResponseValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOIDCSettingsResponseValidationError is the validation error returned by
// GetOIDCSettingsResponse.Validate if the designated constraints aren't met.
type GetOIDCSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOIDCSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOIDCSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOIDCSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOIDCSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOIDCSettingsResponseValidationError) ErrorName() string {
	return "GetOIDCSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOIDCSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOIDCSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOIDCSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOIDCSettingsResponseValidationError{}

// Validate checks the field values on AddOIDCSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOIDCSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAccessTokenLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCSettingsRequestValidationError{
				field:  "AccessTokenLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIdTokenLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCSettingsRequestValidationError{
				field:  "IdTokenLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRefreshTokenIdleExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCSettingsRequestValidationError{
				field:  "RefreshTokenIdleExpiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRefreshTokenExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCSettingsRequestValidationError{
				field:  "RefreshTokenExpiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddOIDCSettingsRequestValidationError is the validation error returned by
// AddOIDCSettingsRequest.Validate if the designated constraints aren't met.
type AddOIDCSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOIDCSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOIDCSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOIDCSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOIDCSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOIDCSettingsRequestValidationError) ErrorName() string {
	return "AddOIDCSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOIDCSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOIDCSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOIDCSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOIDCSettingsRequestValidationError{}

// Validate checks the field values on AddOIDCSettingsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOIDCSettingsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCSettingsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddOIDCSettingsResponseValidationError is the validation error returned by
// AddOIDCSettingsResponse.Validate if the designated constraints aren't met.
type AddOIDCSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOIDCSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOIDCSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOIDCSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOIDCSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOIDCSettingsResponseValidationError) ErrorName() string {
	return "AddOIDCSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOIDCSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOIDCSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOIDCSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOIDCSettingsResponseValidationError{}

// Validate checks the field values on UpdateOIDCSettingsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOIDCSettingsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAccessTokenLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCSettingsRequestValidationError{
				field:  "AccessTokenLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetIdTokenLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCSettingsRequestValidationError{
				field:  "IdTokenLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRefreshTokenIdleExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCSettingsRequestValidationError{
				field:  "RefreshTokenIdleExpiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRefreshTokenExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCSettingsRequestValidationError{
				field:  "RefreshTokenExpiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOIDCSettingsRequestValidationError is the validation error returned by
// UpdateOIDCSettingsRequest.Validate if the designated constraints aren't met.
type UpdateOIDCSettingsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOIDCSettingsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOIDCSettingsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOIDCSettingsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOIDCSettingsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOIDCSettingsRequestValidationError) ErrorName() string {
	return "UpdateOIDCSettingsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOIDCSettingsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOIDCSettingsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOIDCSettingsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOIDCSettingsRequestValidationError{}

// Validate checks the field values on UpdateOIDCSettingsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOIDCSettingsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCSettingsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOIDCSettingsResponseValidationError is the validation error returned
// by UpdateOIDCSettingsResponse.Validate if the designated constraints aren't met.
type UpdateOIDCSettingsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOIDCSettingsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOIDCSettingsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOIDCSettingsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOIDCSettingsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOIDCSettingsResponseValidationError) ErrorName() string {
	return "UpdateOIDCSettingsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOIDCSettingsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOIDCSettingsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOIDCSettingsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOIDCSettingsResponseValidationError{}

// Validate checks the field values on GetSecurityPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSecurityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSecurityPolicyRequestValidationError is the validation error returned by
// GetSecurityPolicyRequest.Validate if the designated constraints aren't met.
type GetSecurityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecurityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecurityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecurityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecurityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecurityPolicyRequestValidationError) ErrorName() string {
	return "GetSecurityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecurityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecurityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecurityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecurityPolicyRequestValidationError{}

// Validate checks the field values on GetSecurityPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSecurityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSecurityPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetSecurityPolicyResponseValidationError is the validation error returned by
// GetSecurityPolicyResponse.Validate if the designated constraints aren't met.
type GetSecurityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSecurityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSecurityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSecurityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSecurityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSecurityPolicyResponseValidationError) ErrorName() string {
	return "GetSecurityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSecurityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSecurityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSecurityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSecurityPolicyResponseValidationError{}

// Validate checks the field values on SetSecurityPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetSecurityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for EnableIframeEmbedding

	return nil
}

// SetSecurityPolicyRequestValidationError is the validation error returned by
// SetSecurityPolicyRequest.Validate if the designated constraints aren't met.
type SetSecurityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSecurityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSecurityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSecurityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSecurityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSecurityPolicyRequestValidationError) ErrorName() string {
	return "SetSecurityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSecurityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSecurityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSecurityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSecurityPolicyRequestValidationError{}

// Validate checks the field values on SetSecurityPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetSecurityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetSecurityPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetSecurityPolicyResponseValidationError is the validation error returned by
// SetSecurityPolicyResponse.Validate if the designated constraints aren't met.
type SetSecurityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSecurityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSecurityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSecurityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSecurityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSecurityPolicyResponseValidationError) ErrorName() string {
	return "SetSecurityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSecurityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSecurityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSecurityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSecurityPolicyResponseValidationError{}

// Validate checks the field values on IsOrgUniqueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsOrgUniqueRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetName()) > 200 {
		return IsOrgUniqueRequestValidationError{
			field:  "Name",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDomain()) > 200 {
		return IsOrgUniqueRequestValidationError{
			field:  "Domain",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// IsOrgUniqueRequestValidationError is the validation error returned by
// IsOrgUniqueRequest.Validate if the designated constraints aren't met.
type IsOrgUniqueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsOrgUniqueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsOrgUniqueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsOrgUniqueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsOrgUniqueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsOrgUniqueRequestValidationError) ErrorName() string {
	return "IsOrgUniqueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsOrgUniqueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsOrgUniqueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsOrgUniqueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsOrgUniqueRequestValidationError{}

// Validate checks the field values on IsOrgUniqueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsOrgUniqueResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsUnique

	return nil
}

// IsOrgUniqueResponseValidationError is the validation error returned by
// IsOrgUniqueResponse.Validate if the designated constraints aren't met.
type IsOrgUniqueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsOrgUniqueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsOrgUniqueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsOrgUniqueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsOrgUniqueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsOrgUniqueResponseValidationError) ErrorName() string {
	return "IsOrgUniqueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsOrgUniqueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsOrgUniqueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsOrgUniqueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsOrgUniqueResponseValidationError{}

// Validate checks the field values on GetOrgByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetOrgByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetOrgByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetOrgByIDRequestValidationError is the validation error returned by
// GetOrgByIDRequest.Validate if the designated constraints aren't met.
type GetOrgByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgByIDRequestValidationError) ErrorName() string {
	return "GetOrgByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgByIDRequestValidationError{}

// Validate checks the field values on GetOrgByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgByIDResponseValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOrgByIDResponseValidationError is the validation error returned by
// GetOrgByIDResponse.Validate if the designated constraints aren't met.
type GetOrgByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgByIDResponseValidationError) ErrorName() string {
	return "GetOrgByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgByIDResponseValidationError{}

// Validate checks the field values on ListOrgsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListOrgsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgsRequestValidationError is the validation error returned by
// ListOrgsRequest.Validate if the designated constraints aren't met.
type ListOrgsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgsRequestValidationError) ErrorName() string { return "ListOrgsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListOrgsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgsRequestValidationError{}

// Validate checks the field values on ListOrgsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListOrgsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgsResponseValidationError is the validation error returned by
// ListOrgsResponse.Validate if the designated constraints aren't met.
type ListOrgsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgsResponseValidationError) ErrorName() string { return "ListOrgsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListOrgsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgsResponseValidationError{}

// Validate checks the field values on SetUpOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetUpOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOrg() == nil {
		return SetUpOrgRequestValidationError{
			field:  "Org",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUpOrgRequestValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.User.(type) {

	case *SetUpOrgRequest_Human_:

		if v, ok := interface{}(m.GetHuman()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SetUpOrgRequestValidationError{
					field:  "Human",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return SetUpOrgRequestValidationError{
			field:  "User",
			reason: "value is required",
		}

	}

	return nil
}

// SetUpOrgRequestValidationError is the validation error returned by
// SetUpOrgRequest.Validate if the designated constraints aren't met.
type SetUpOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgRequestValidationError) ErrorName() string { return "SetUpOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e SetUpOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgRequestValidationError{}

// Validate checks the field values on SetUpOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetUpOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUpOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for OrgId

	// no validation rules for UserId

	return nil
}

// SetUpOrgResponseValidationError is the validation error returned by
// SetUpOrgResponse.Validate if the designated constraints aren't met.
type SetUpOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgResponseValidationError) ErrorName() string { return "SetUpOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e SetUpOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgResponseValidationError{}

// Validate checks the field values on RemoveOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return RemoveOrgRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveOrgRequestValidationError is the validation error returned by
// RemoveOrgRequest.Validate if the designated constraints aren't met.
type RemoveOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgRequestValidationError) ErrorName() string { return "RemoveOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e RemoveOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgRequestValidationError{}

// Validate checks the field values on RemoveOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveOrgResponseValidationError is the validation error returned by
// RemoveOrgResponse.Validate if the designated constraints aren't met.
type RemoveOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgResponseValidationError) ErrorName() string {
	return "RemoveOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgResponseValidationError{}

// Validate checks the field values on GetIDPByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetIDPByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetIDPByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetIDPByIDRequestValidationError is the validation error returned by
// GetIDPByIDRequest.Validate if the designated constraints aren't met.
type GetIDPByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIDPByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIDPByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIDPByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIDPByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIDPByIDRequestValidationError) ErrorName() string {
	return "GetIDPByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetIDPByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIDPByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIDPByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIDPByIDRequestValidationError{}

// Validate checks the field values on GetIDPByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetIDPByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetIDPByIDResponseValidationError{
				field:  "Idp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetIDPByIDResponseValidationError is the validation error returned by
// GetIDPByIDResponse.Validate if the designated constraints aren't met.
type GetIDPByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIDPByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIDPByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIDPByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIDPByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIDPByIDResponseValidationError) ErrorName() string {
	return "GetIDPByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetIDPByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIDPByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIDPByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIDPByIDResponseValidationError{}

// Validate checks the field values on ListIDPsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListIDPsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIDPsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIDPsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListIDPsRequestValidationError is the validation error returned by
// ListIDPsRequest.Validate if the designated constraints aren't met.
type ListIDPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIDPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIDPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIDPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIDPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIDPsRequestValidationError) ErrorName() string { return "ListIDPsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListIDPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIDPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIDPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIDPsRequestValidationError{}

// Validate checks the field values on IDPQuery with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IDPQuery) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Query.(type) {

	case *IDPQuery_IdpIdQuery:

		if v, ok := interface{}(m.GetIdpIdQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDPQueryValidationError{
					field:  "IdpIdQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *IDPQuery_IdpNameQuery:

		if v, ok := interface{}(m.GetIdpNameQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDPQueryValidationError{
					field:  "IdpNameQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// IDPQueryValidationError is the validation error returned by
// IDPQuery.Validate if the designated constraints aren't met.
type IDPQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDPQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDPQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDPQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDPQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDPQueryValidationError) ErrorName() string { return "IDPQueryValidationError" }

// Error satisfies the builtin error interface
func (e IDPQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDPQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDPQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDPQueryValidationError{}

// Validate checks the field values on ListIDPsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListIDPsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIDPsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIDPsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListIDPsResponseValidationError is the validation error returned by
// ListIDPsResponse.Validate if the designated constraints aren't met.
type ListIDPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIDPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIDPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIDPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIDPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIDPsResponseValidationError) ErrorName() string { return "ListIDPsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListIDPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIDPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIDPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIDPsResponseValidationError{}

// Validate checks the field values on AddOIDCIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddOIDCIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddOIDCIDPRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.IDPStylingType_name[int32(m.GetStylingType())]; !ok {
		return AddOIDCIDPRequestValidationError{
			field:  "StylingType",
			reason: "value must be one of the defined enum values",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 1 || l > 200 {
		return AddOIDCIDPRequestValidationError{
			field:  "ClientId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientSecret()); l < 1 || l > 200 {
		return AddOIDCIDPRequestValidationError{
			field:  "ClientSecret",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return AddOIDCIDPRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetDisplayNameMapping())]; !ok {
		return AddOIDCIDPRequestValidationError{
			field:  "DisplayNameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetUsernameMapping())]; !ok {
		return AddOIDCIDPRequestValidationError{
			field:  "UsernameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for AutoRegister

	return nil
}

// AddOIDCIDPRequestValidationError is the validation error returned by
// AddOIDCIDPRequest.Validate if the designated constraints aren't met.
type AddOIDCIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOIDCIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOIDCIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOIDCIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOIDCIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOIDCIDPRequestValidationError) ErrorName() string {
	return "AddOIDCIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOIDCIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOIDCIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOIDCIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOIDCIDPRequestValidationError{}

// Validate checks the field values on AddOIDCIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOIDCIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdpId

	return nil
}

// AddOIDCIDPResponseValidationError is the validation error returned by
// AddOIDCIDPResponse.Validate if the designated constraints aren't met.
type AddOIDCIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOIDCIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOIDCIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOIDCIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOIDCIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOIDCIDPResponseValidationError) ErrorName() string {
	return "AddOIDCIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOIDCIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOIDCIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOIDCIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOIDCIDPResponseValidationError{}

// Validate checks the field values on AddJWTIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddJWTIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddJWTIDPRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.IDPStylingType_name[int32(m.GetStylingType())]; !ok {
		return AddJWTIDPRequestValidationError{
			field:  "StylingType",
			reason: "value must be one of the defined enum values",
		}
	}

	if l := utf8.RuneCountInString(m.GetJwtEndpoint()); l < 1 || l > 200 {
		return AddJWTIDPRequestValidationError{
			field:  "JwtEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return AddJWTIDPRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeysEndpoint()); l < 1 || l > 200 {
		return AddJWTIDPRequestValidationError{
			field:  "KeysEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHeaderName()); l < 1 || l > 200 {
		return AddJWTIDPRequestValidationError{
			field:  "HeaderName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for AutoRegister

	return nil
}

// AddJWTIDPRequestValidationError is the validation error returned by
// AddJWTIDPRequest.Validate if the designated constraints aren't met.
type AddJWTIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddJWTIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddJWTIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddJWTIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddJWTIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddJWTIDPRequestValidationError) ErrorName() string { return "AddJWTIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddJWTIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddJWTIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddJWTIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddJWTIDPRequestValidationError{}

// Validate checks the field values on AddJWTIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddJWTIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddJWTIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdpId

	return nil
}

// AddJWTIDPResponseValidationError is the validation error returned by
// AddJWTIDPResponse.Validate if the designated constraints aren't met.
type AddJWTIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddJWTIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddJWTIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddJWTIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddJWTIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddJWTIDPResponseValidationError) ErrorName() string {
	return "AddJWTIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddJWTIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddJWTIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddJWTIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddJWTIDPResponseValidationError{}

// Validate checks the field values on UpdateIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return UpdateIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateIDPRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.IDPStylingType_name[int32(m.GetStylingType())]; !ok {
		return UpdateIDPRequestValidationError{
			field:  "StylingType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for AutoRegister

	return nil
}

// UpdateIDPRequestValidationError is the validation error returned by
// UpdateIDPRequest.Validate if the designated constraints aren't met.
type UpdateIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPRequestValidationError) ErrorName() string { return "UpdateIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPRequestValidationError{}

// Validate checks the field values on UpdateIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateIDPResponseValidationError is the validation error returned by
// UpdateIDPResponse.Validate if the designated constraints aren't met.
type UpdateIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPResponseValidationError) ErrorName() string {
	return "UpdateIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPResponseValidationError{}

// Validate checks the field values on DeactivateIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return DeactivateIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateIDPRequestValidationError is the validation error returned by
// DeactivateIDPRequest.Validate if the designated constraints aren't met.
type DeactivateIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateIDPRequestValidationError) ErrorName() string {
	return "DeactivateIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateIDPRequestValidationError{}

// Validate checks the field values on DeactivateIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateIDPResponseValidationError is the validation error returned by
// DeactivateIDPResponse.Validate if the designated constraints aren't met.
type DeactivateIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateIDPResponseValidationError) ErrorName() string {
	return "DeactivateIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateIDPResponseValidationError{}

// Validate checks the field values on ReactivateIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return ReactivateIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateIDPRequestValidationError is the validation error returned by
// ReactivateIDPRequest.Validate if the designated constraints aren't met.
type ReactivateIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateIDPRequestValidationError) ErrorName() string {
	return "ReactivateIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateIDPRequestValidationError{}

// Validate checks the field values on ReactivateIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateIDPResponseValidationError is the validation error returned by
// ReactivateIDPResponse.Validate if the designated constraints aren't met.
type ReactivateIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateIDPResponseValidationError) ErrorName() string {
	return "ReactivateIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateIDPResponseValidationError{}

// Validate checks the field values on RemoveIDPRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return RemoveIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveIDPRequestValidationError is the validation error returned by
// RemoveIDPRequest.Validate if the designated constraints aren't met.
type RemoveIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIDPRequestValidationError) ErrorName() string { return "RemoveIDPRequestValidationError" }

// Error satisfies the builtin error interface
func (e RemoveIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIDPRequestValidationError{}

// Validate checks the field values on RemoveIDPResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveIDPResponseValidationError is the validation error returned by
// RemoveIDPResponse.Validate if the designated constraints aren't met.
type RemoveIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIDPResponseValidationError) ErrorName() string {
	return "RemoveIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIDPResponseValidationError{}

// Validate checks the field values on UpdateIDPOIDCConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIDPOIDCConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return UpdateIDPOIDCConfigRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return UpdateIDPOIDCConfigRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 1 || l > 200 {
		return UpdateIDPOIDCConfigRequestValidationError{
			field:  "ClientId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetClientSecret()) > 200 {
		return UpdateIDPOIDCConfigRequestValidationError{
			field:  "ClientSecret",
			reason: "value length must be at most 200 runes",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetDisplayNameMapping())]; !ok {
		return UpdateIDPOIDCConfigRequestValidationError{
			field:  "DisplayNameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetUsernameMapping())]; !ok {
		return UpdateIDPOIDCConfigRequestValidationError{
			field:  "UsernameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// UpdateIDPOIDCConfigRequestValidationError is the validation error returned
// by UpdateIDPOIDCConfigRequest.Validate if the designated constraints aren't met.
type UpdateIDPOIDCConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPOIDCConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPOIDCConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPOIDCConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPOIDCConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPOIDCConfigRequestValidationError) ErrorName() string {
	return "UpdateIDPOIDCConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPOIDCConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPOIDCConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPOIDCConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPOIDCConfigRequestValidationError{}

// Validate checks the field values on UpdateIDPOIDCConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIDPOIDCConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIDPOIDCConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateIDPOIDCConfigResponseValidationError is the validation error returned
// by UpdateIDPOIDCConfigResponse.Validate if the designated constraints
// aren't met.
type UpdateIDPOIDCConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPOIDCConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPOIDCConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPOIDCConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPOIDCConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPOIDCConfigResponseValidationError) ErrorName() string {
	return "UpdateIDPOIDCConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPOIDCConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPOIDCConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPOIDCConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPOIDCConfigResponseValidationError{}

// Validate checks the field values on UpdateIDPJWTConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIDPJWTConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return UpdateIDPJWTConfigRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetJwtEndpoint()); l < 1 || l > 200 {
		return UpdateIDPJWTConfigRequestValidationError{
			field:  "JwtEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return UpdateIDPJWTConfigRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeysEndpoint()); l < 1 || l > 200 {
		return UpdateIDPJWTConfigRequestValidationError{
			field:  "KeysEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHeaderName()); l < 1 || l > 200 {
		return UpdateIDPJWTConfigRequestValidationError{
			field:  "HeaderName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateIDPJWTConfigRequestValidationError is the validation error returned by
// UpdateIDPJWTConfigRequest.Validate if the designated constraints aren't met.
type UpdateIDPJWTConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPJWTConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPJWTConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPJWTConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPJWTConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPJWTConfigRequestValidationError) ErrorName() string {
	return "UpdateIDPJWTConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPJWTConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPJWTConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPJWTConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPJWTConfigRequestValidationError{}

// Validate checks the field values on UpdateIDPJWTConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIDPJWTConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIDPJWTConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateIDPJWTConfigResponseValidationError is the validation error returned
// by UpdateIDPJWTConfigResponse.Validate if the designated constraints aren't met.
type UpdateIDPJWTConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIDPJWTConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIDPJWTConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIDPJWTConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIDPJWTConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIDPJWTConfigResponseValidationError) ErrorName() string {
	return "UpdateIDPJWTConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIDPJWTConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIDPJWTConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIDPJWTConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIDPJWTConfigResponseValidationError{}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProvidersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ProviderQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProviderQuery) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Query.(type) {

	case *ProviderQuery_IdpIdQuery:

		if v, ok := interface{}(m.GetIdpIdQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderQueryValidationError{
					field:  "IdpIdQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProviderQuery_IdpNameQuery:

		if v, ok := interface{}(m.GetIdpNameQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderQueryValidationError{
					field:  "IdpNameQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProviderQueryValidationError is the validation error returned by
// ProviderQuery.Validate if the designated constraints aren't met.
type ProviderQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderQueryValidationError) ErrorName() string { return "ProviderQueryValidationError" }

// Error satisfies the builtin error interface
func (e ProviderQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderQueryValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProvidersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on GetProviderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProviderByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetProviderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetProviderByIDRequestValidationError is the validation error returned by
// GetProviderByIDRequest.Validate if the designated constraints aren't met.
type GetProviderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderByIDRequestValidationError) ErrorName() string {
	return "GetProviderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderByIDRequestValidationError{}

// Validate checks the field values on GetProviderByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProviderByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProviderByIDResponseValidationError{
				field:  "Idp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProviderByIDResponseValidationError is the validation error returned by
// GetProviderByIDResponse.Validate if the designated constraints aren't met.
type GetProviderByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderByIDResponseValidationError) ErrorName() string {
	return "GetProviderByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderByIDResponseValidationError{}

// Validate checks the field values on AddLDAPProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddLDAPProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHost()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Host",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPort()) > 5 {
		return AddLDAPProviderRequestValidationError{
			field:  "Port",
			reason: "value length must be at most 5 runes",
		}
	}

	// no validation rules for Tls

	if l := utf8.RuneCountInString(m.GetBaseDn()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "BaseDn",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserObjectClass()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "UserObjectClass",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserUniqueAttribute()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "UserUniqueAttribute",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAdmin()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Admin",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLDAPProviderRequestValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProviderOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLDAPProviderRequestValidationError{
				field:  "ProviderOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddLDAPProviderRequestValidationError is the validation error returned by
// AddLDAPProviderRequest.Validate if the designated constraints aren't met.
type AddLDAPProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLDAPProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLDAPProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLDAPProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLDAPProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLDAPProviderRequestValidationError) ErrorName() string {
	return "AddLDAPProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddLDAPProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLDAPProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLDAPProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLDAPProviderRequestValidationError{}

// Validate checks the field values on AddLDAPProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddLDAPProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLDAPProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	return nil
}

// AddLDAPProviderResponseValidationError is the validation error returned by
// AddLDAPProviderResponse.Validate if the designated constraints aren't met.
type AddLDAPProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLDAPProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLDAPProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLDAPProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLDAPProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLDAPProviderResponseValidationError) ErrorName() string {
	return "AddLDAPProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddLDAPProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLDAPProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLDAPProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLDAPProviderResponseValidationError{}

// Validate checks the field values on UpdateLDAPProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLDAPProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHost()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Host",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPort()) > 5 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Port",
			reason: "value length must be at most 5 runes",
		}
	}

	// no validation rules for Tls

	if l := utf8.RuneCountInString(m.GetBaseDn()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "BaseDn",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserObjectClass()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "UserObjectClass",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserUniqueAttribute()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "UserUniqueAttribute",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAdmin()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Admin",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Password",
			reason: "value length must be at most 200 runes",
		}
	}

	if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLDAPProviderRequestValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProviderOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLDAPProviderRequestValidationError{
				field:  "ProviderOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLDAPProviderRequestValidationError is the validation error returned by
// UpdateLDAPProviderRequest.Validate if the designated constraints aren't met.
type UpdateLDAPProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLDAPProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLDAPProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLDAPProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLDAPProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLDAPProviderRequestValidationError) ErrorName() string {
	return "UpdateLDAPProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLDAPProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLDAPProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLDAPProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLDAPProviderRequestValidationError{}

// Validate checks the field values on UpdateLDAPProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLDAPProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLDAPProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLDAPProviderResponseValidationError is the validation error returned
// by UpdateLDAPProviderResponse.Validate if the designated constraints aren't met.
type UpdateLDAPProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLDAPProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLDAPProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLDAPProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLDAPProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLDAPProviderResponseValidationError) ErrorName() string {
	return "UpdateLDAPProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLDAPProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLDAPProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLDAPProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLDAPProviderResponseValidationError{}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return DeleteProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteProviderResponseValidationError is the validation error returned by
// DeleteProviderResponse.Validate if the designated constraints aren't met.
type DeleteProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderResponseValidationError) ErrorName() string {
	return "DeleteProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderResponseValidationError{}

// Validate checks the field values on GetOrgIAMPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgIAMPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOrgIAMPolicyRequestValidationError is the validation error returned by
// GetOrgIAMPolicyRequest.Validate if the designated constraints aren't met.
type GetOrgIAMPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgIAMPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgIAMPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgIAMPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgIAMPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgIAMPolicyRequestValidationError) ErrorName() string {
	return "GetOrgIAMPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgIAMPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgIAMPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgIAMPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgIAMPolicyRequestValidationError{}

// Validate checks the field values on GetOrgIAMPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgIAMPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgIAMPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOrgIAMPolicyResponseValidationError is the validation error returned by
// GetOrgIAMPolicyResponse.Validate if the designated constraints aren't met.
type GetOrgIAMPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgIAMPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgIAMPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgIAMPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgIAMPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgIAMPolicyResponseValidationError) ErrorName() string {
	return "GetOrgIAMPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgIAMPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgIAMPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgIAMPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgIAMPolicyResponseValidationError{}

// Validate checks the field values on UpdateOrgIAMPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIAMPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserLoginMustBeDomain

	return nil
}

// UpdateOrgIAMPolicyRequestValidationError is the validation error returned by
// UpdateOrgIAMPolicyRequest.Validate if the designated constraints aren't met.
type UpdateOrgIAMPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIAMPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIAMPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIAMPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIAMPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIAMPolicyRequestValidationError) ErrorName() string {
	return "UpdateOrgIAMPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIAMPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIAMPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIAMPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIAMPolicyRequestValidationError{}

// Validate checks the field values on UpdateOrgIAMPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIAMPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgIAMPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOrgIAMPolicyResponseValidationError is the validation error returned
// by UpdateOrgIAMPolicyResponse.Validate if the designated constraints aren't met.
type UpdateOrgIAMPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIAMPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIAMPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIAMPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIAMPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIAMPolicyResponseValidationError) ErrorName() string {
	return "UpdateOrgIAMPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIAMPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIAMPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIAMPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIAMPolicyResponseValidationError{}

// Validate checks the field values on GetCustomOrgIAMPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomOrgIAMPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return GetCustomOrgIAMPolicyRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomOrgIAMPolicyRequestValidationError is the validation error returned
// by GetCustomOrgIAMPolicyRequest.Validate if the designated constraints
// aren't met.
type GetCustomOrgIAMPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomOrgIAMPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomOrgIAMPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomOrgIAMPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomOrgIAMPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomOrgIAMPolicyRequestValidationError) ErrorName() string {
	return "GetCustomOrgIAMPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomOrgIAMPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomOrgIAMPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomOrgIAMPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomOrgIAMPolicyRequestValidationError{}

// Validate checks the field values on GetCustomOrgIAMPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomOrgIAMPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomOrgIAMPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetCustomOrgIAMPolicyResponseValidationError is the validation error
// returned by GetCustomOrgIAMPolicyResponse.Validate if the designated
// constraints aren't met.
type GetCustomOrgIAMPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomOrgIAMPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomOrgIAMPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomOrgIAMPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomOrgIAMPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomOrgIAMPolicyResponseValidationError) ErrorName() string {
	return "GetCustomOrgIAMPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomOrgIAMPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomOrgIAMPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomOrgIAMPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomOrgIAMPolicyResponseValidationError{}

// Validate checks the field values on AddCustomOrgIAMPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomOrgIAMPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return AddCustomOrgIAMPolicyRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for UserLoginMustBeDomain

	return nil
}

// AddCustomOrgIAMPolicyRequestValidationError is the validation error returned
// by AddCustomOrgIAMPolicyRequest.Validate if the designated constraints
// aren't met.
type AddCustomOrgIAMPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomOrgIAMPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomOrgIAMPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomOrgIAMPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomOrgIAMPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomOrgIAMPolicyRequestValidationError) ErrorName() string {
	return "AddCustomOrgIAMPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomOrgIAMPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomOrgIAMPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomOrgIAMPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomOrgIAMPolicyRequestValidationError{}

// Validate checks the field values on AddCustomOrgIAMPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomOrgIAMPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomOrgIAMPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomOrgIAMPolicyResponseValidationError is the validation error
// returned by AddCustomOrgIAMPolicyResponse.Validate if the designated
// constraints aren't met.
type AddCustomOrgIAMPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomOrgIAMPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomOrgIAMPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomOrgIAMPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomOrgIAMPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomOrgIAMPolicyResponseValidationError) ErrorName() string {
	return "AddCustomOrgIAMPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomOrgIAMPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomOrgIAMPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomOrgIAMPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomOrgIAMPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomOrgIAMPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomOrgIAMPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return UpdateCustomOrgIAMPolicyRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for UserLoginMustBeDomain

	return nil
}

// UpdateCustomOrgIAMPolicyRequestValidationError is the validation error
// returned by UpdateCustomOrgIAMPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomOrgIAMPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomOrgIAMPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomOrgIAMPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomOrgIAMPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomOrgIAMPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomOrgIAMPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomOrgIAMPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomOrgIAMPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomOrgIAMPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomOrgIAMPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomOrgIAMPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomOrgIAMPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateCustomOrgIAMPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomOrgIAMPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomOrgIAMPolicyResponseValidationError is the validation error
// returned by UpdateCustomOrgIAMPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomOrgIAMPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomOrgIAMPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomOrgIAMPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomOrgIAMPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomOrgIAMPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomOrgIAMPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomOrgIAMPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomOrgIAMPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomOrgIAMPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomOrgIAMPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomOrgIAMPolicyResponseValidationError{}

// Validate checks the field values on ResetCustomOrgIAMPolicyToDefaultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomOrgIAMPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return ResetCustomOrgIAMPolicyToDefaultRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomOrgIAMPolicyToDefaultRequestValidationError is the validation
// error returned by ResetCustomOrgIAMPolicyToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomOrgIAMPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomOrgIAMPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomOrgIAMPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomOrgIAMPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomOrgIAMPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomOrgIAMPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomOrgIAMPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomOrgIAMPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomOrgIAMPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomOrgIAMPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomOrgIAMPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetCustomOrgIAMPolicyToDefaultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomOrgIAMPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomOrgIAMPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomOrgIAMPolicyToDefaultResponseValidationError is the validation
// error returned by ResetCustomOrgIAMPolicyToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomOrgIAMPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomOrgIAMPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomOrgIAMPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomOrgIAMPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomOrgIAMPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomOrgIAMPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomOrgIAMPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomOrgIAMPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomOrgIAMPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomOrgIAMPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomOrgIAMPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetDomainPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDomainPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDomainPolicyRequestValidationError is the validation error returned by
// GetDomainPolicyRequest.Validate if the designated constraints aren't met.
type GetDomainPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainPolicyRequestValidationError) ErrorName() string {
	return "GetDomainPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainPolicyRequestValidationError{}

// Validate checks the field values on GetDomainPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDomainPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDomainPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDomainPolicyResponseValidationError is the validation error returned by
// GetDomainPolicyResponse.Validate if the designated constraints aren't met.
type GetDomainPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainPolicyResponseValidationError) ErrorName() string {
	return "GetDomainPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainPolicyResponseValidationError{}

// Validate checks the field values on UpdateDomainPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDomainPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserLoginMustBeDomain

	// no validation rules for ValidateOrgDomains

	// no validation rules for SmtpSenderAddressMatchesInstanceDomain

	return nil
}

// UpdateDomainPolicyRequestValidationError is the validation error returned by
// UpdateDomainPolicyRequest.Validate if the designated constraints aren't met.
type UpdateDomainPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainPolicyRequestValidationError) ErrorName() string {
	return "UpdateDomainPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainPolicyRequestValidationError{}

// Validate checks the field values on UpdateDomainPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateDomainPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateDomainPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateDomainPolicyResponseValidationError is the validation error returned
// by UpdateDomainPolicyResponse.Validate if the designated constraints aren't met.
type UpdateDomainPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDomainPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDomainPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDomainPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDomainPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDomainPolicyResponseValidationError) ErrorName() string {
	return "UpdateDomainPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateDomainPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDomainPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDomainPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDomainPolicyResponseValidationError{}

// Validate checks the field values on GetCustomDomainPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomDomainPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return GetCustomDomainPolicyRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomDomainPolicyRequestValidationError is the validation error returned
// by GetCustomDomainPolicyRequest.Validate if the designated constraints
// aren't met.
type GetCustomDomainPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomDomainPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomDomainPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomDomainPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomDomainPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomDomainPolicyRequestValidationError) ErrorName() string {
	return "GetCustomDomainPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomDomainPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomDomainPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomDomainPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomDomainPolicyRequestValidationError{}

// Validate checks the field values on GetCustomDomainPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomDomainPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomDomainPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetCustomDomainPolicyResponseValidationError is the validation error
// returned by GetCustomDomainPolicyResponse.Validate if the designated
// constraints aren't met.
type GetCustomDomainPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomDomainPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomDomainPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomDomainPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomDomainPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomDomainPolicyResponseValidationError) ErrorName() string {
	return "GetCustomDomainPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomDomainPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomDomainPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomDomainPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomDomainPolicyResponseValidationError{}

// Validate checks the field values on AddCustomDomainPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomDomainPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return AddCustomDomainPolicyRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for UserLoginMustBeDomain

	// no validation rules for ValidateOrgDomains

	// no validation rules for SmtpSenderAddressMatchesInstanceDomain

	return nil
}

// AddCustomDomainPolicyRequestValidationError is the validation error returned
// by AddCustomDomainPolicyRequest.Validate if the designated constraints
// aren't met.
type AddCustomDomainPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomDomainPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomDomainPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomDomainPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomDomainPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomDomainPolicyRequestValidationError) ErrorName() string {
	return "AddCustomDomainPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomDomainPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomDomainPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomDomainPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomDomainPolicyRequestValidationError{}

// Validate checks the field values on AddCustomDomainPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomDomainPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomDomainPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomDomainPolicyResponseValidationError is the validation error
// returned by AddCustomDomainPolicyResponse.Validate if the designated
// constraints aren't met.
type AddCustomDomainPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomDomainPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomDomainPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomDomainPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomDomainPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomDomainPolicyResponseValidationError) ErrorName() string {
	return "AddCustomDomainPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomDomainPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomDomainPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomDomainPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomDomainPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomDomainPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomDomainPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return UpdateCustomDomainPolicyRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for UserLoginMustBeDomain

	// no validation rules for ValidateOrgDomains

	// no validation rules for SmtpSenderAddressMatchesInstanceDomain

	return nil
}

// UpdateCustomDomainPolicyRequestValidationError is the validation error
// returned by UpdateCustomDomainPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomDomainPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomDomainPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomDomainPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomDomainPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomDomainPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomDomainPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomDomainPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomDomainPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomDomainPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomDomainPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomDomainPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomDomainPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateCustomDomainPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomDomainPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomDomainPolicyResponseValidationError is the validation error
// returned by UpdateCustomDomainPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomDomainPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomDomainPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomDomainPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomDomainPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomDomainPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomDomainPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomDomainPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomDomainPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomDomainPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomDomainPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomDomainPolicyResponseValidationError{}

// Validate checks the field values on ResetCustomDomainPolicyToDefaultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomDomainPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetOrgId()); l < 1 || l > 200 {
		return ResetCustomDomainPolicyToDefaultRequestValidationError{
			field:  "OrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomDomainPolicyToDefaultRequestValidationError is the validation
// error returned by ResetCustomDomainPolicyToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomDomainPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomDomainPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomDomainPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomDomainPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomDomainPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomDomainPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomDomainPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomDomainPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomDomainPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomDomainPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomDomainPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetCustomDomainPolicyToDefaultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomDomainPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomDomainPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomDomainPolicyToDefaultResponseValidationError is the validation
// error returned by ResetCustomDomainPolicyToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomDomainPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomDomainPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomDomainPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomDomainPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomDomainPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomDomainPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomDomainPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomDomainPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomDomainPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomDomainPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomDomainPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetLabelPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLabelPolicyRequestValidationError is the validation error returned by
// GetLabelPolicyRequest.Validate if the designated constraints aren't met.
type GetLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelPolicyRequestValidationError) ErrorName() string {
	return "GetLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelPolicyRequestValidationError{}

// Validate checks the field values on GetLabelPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLabelPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetLabelPolicyResponseValidationError is the validation error returned by
// GetLabelPolicyResponse.Validate if the designated constraints aren't met.
type GetLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelPolicyResponseValidationError) ErrorName() string {
	return "GetLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelPolicyResponseValidationError{}

// Validate checks the field values on GetPreviewLabelPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPreviewLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPreviewLabelPolicyRequestValidationError is the validation error returned
// by GetPreviewLabelPolicyRequest.Validate if the designated constraints
// aren't met.
type GetPreviewLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPreviewLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPreviewLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPreviewLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPreviewLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPreviewLabelPolicyRequestValidationError) ErrorName() string {
	return "GetPreviewLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPreviewLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPreviewLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPreviewLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPreviewLabelPolicyRequestValidationError{}

// Validate checks the field values on GetPreviewLabelPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPreviewLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPreviewLabelPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPreviewLabelPolicyResponseValidationError is the validation error
// returned by GetPreviewLabelPolicyResponse.Validate if the designated
// constraints aren't met.
type GetPreviewLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPreviewLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPreviewLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPreviewLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPreviewLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPreviewLabelPolicyResponseValidationError) ErrorName() string {
	return "GetPreviewLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPreviewLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPreviewLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPreviewLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPreviewLabelPolicyResponseValidationError{}

// Validate checks the field values on UpdateLabelPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPrimaryColor()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "PrimaryColor",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for HideLoginNameSuffix

	if utf8.RuneCountInString(m.GetWarnColor()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "WarnColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBackgroundColor()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "BackgroundColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFontColor()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "FontColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPrimaryColorDark()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "PrimaryColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBackgroundColorDark()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "BackgroundColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetWarnColorDark()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "WarnColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFontColorDark()) > 50 {
		return UpdateLabelPolicyRequestValidationError{
			field:  "FontColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for DisableWatermark

	return nil
}

// UpdateLabelPolicyRequestValidationError is the validation error returned by
// UpdateLabelPolicyRequest.Validate if the designated constraints aren't met.
type UpdateLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabelPolicyRequestValidationError) ErrorName() string {
	return "UpdateLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabelPolicyRequestValidationError{}

// Validate checks the field values on UpdateLabelPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLabelPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLabelPolicyResponseValidationError is the validation error returned by
// UpdateLabelPolicyResponse.Validate if the designated constraints aren't met.
type UpdateLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLabelPolicyResponseValidationError) ErrorName() string {
	return "UpdateLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLabelPolicyResponseValidationError{}

// Validate checks the field values on ActivateLabelPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActivateLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ActivateLabelPolicyRequestValidationError is the validation error returned
// by ActivateLabelPolicyRequest.Validate if the designated constraints aren't met.
type ActivateLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateLabelPolicyRequestValidationError) ErrorName() string {
	return "ActivateLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateLabelPolicyRequestValidationError{}

// Validate checks the field values on ActivateLabelPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ActivateLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivateLabelPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActivateLabelPolicyResponseValidationError is the validation error returned
// by ActivateLabelPolicyResponse.Validate if the designated constraints
// aren't met.
type ActivateLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateLabelPolicyResponseValidationError) ErrorName() string {
	return "ActivateLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateLabelPolicyResponseValidationError{}

// Validate checks the field values on RemoveLabelPolicyLogoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLabelPolicyLogoRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveLabelPolicyLogoRequestValidationError is the validation error returned
// by RemoveLabelPolicyLogoRequest.Validate if the designated constraints
// aren't met.
type RemoveLabelPolicyLogoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyLogoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyLogoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyLogoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyLogoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyLogoRequestValidationError) ErrorName() string {
	return "RemoveLabelPolicyLogoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyLogoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyLogoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyLogoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyLogoRequestValidationError{}

// Validate checks the field values on RemoveLabelPolicyLogoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLabelPolicyLogoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveLabelPolicyLogoResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveLabelPolicyLogoResponseValidationError is the validation error
// returned by RemoveLabelPolicyLogoResponse.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyLogoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyLogoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyLogoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyLogoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyLogoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyLogoResponseValidationError) ErrorName() string {
	return "RemoveLabelPolicyLogoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyLogoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyLogoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyLogoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyLogoResponseValidationError{}

// Validate checks the field values on RemoveLabelPolicyLogoDarkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveLabelPolicyLogoDarkRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveLabelPolicyLogoDarkRequestValidationError is the validation error
// returned by RemoveLabelPolicyLogoDarkRequest.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyLogoDarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyLogoDarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyLogoDarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyLogoDarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyLogoDarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyLogoDarkRequestValidationError) ErrorName() string {
	return "RemoveLabelPolicyLogoDarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyLogoDarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyLogoDarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyLogoDarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyLogoDarkRequestValidationError{}

// Validate checks the field values on RemoveLabelPolicyLogoDarkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveLabelPolicyLogoDarkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveLabelPolicyLogoDarkResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveLabelPolicyLogoDarkResponseValidationError is the validation error
// returned by RemoveLabelPolicyLogoDarkResponse.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyLogoDarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyLogoDarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyLogoDarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyLogoDarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyLogoDarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyLogoDarkResponseValidationError) ErrorName() string {
	return "RemoveLabelPolicyLogoDarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyLogoDarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyLogoDarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyLogoDarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyLogoDarkResponseValidationError{}

// Validate checks the field values on RemoveLabelPolicyIconRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLabelPolicyIconRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveLabelPolicyIconRequestValidationError is the validation error returned
// by RemoveLabelPolicyIconRequest.Validate if the designated constraints
// aren't met.
type RemoveLabelPolicyIconRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyIconRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyIconRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyIconRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyIconRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyIconRequestValidationError) ErrorName() string {
	return "RemoveLabelPolicyIconRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyIconRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyIconRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyIconRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyIconRequestValidationError{}

// Validate checks the field values on RemoveLabelPolicyIconResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLabelPolicyIconResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveLabelPolicyIconResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveLabelPolicyIconResponseValidationError is the validation error
// returned by RemoveLabelPolicyIconResponse.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyIconResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyIconResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyIconResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyIconResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyIconResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyIconResponseValidationError) ErrorName() string {
	return "RemoveLabelPolicyIconResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyIconResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyIconResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyIconResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyIconResponseValidationError{}

// Validate checks the field values on RemoveLabelPolicyIconDarkRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveLabelPolicyIconDarkRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveLabelPolicyIconDarkRequestValidationError is the validation error
// returned by RemoveLabelPolicyIconDarkRequest.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyIconDarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyIconDarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyIconDarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyIconDarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyIconDarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyIconDarkRequestValidationError) ErrorName() string {
	return "RemoveLabelPolicyIconDarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyIconDarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyIconDarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyIconDarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyIconDarkRequestValidationError{}

// Validate checks the field values on RemoveLabelPolicyIconDarkResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveLabelPolicyIconDarkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveLabelPolicyIconDarkResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveLabelPolicyIconDarkResponseValidationError is the validation error
// returned by RemoveLabelPolicyIconDarkResponse.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyIconDarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyIconDarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyIconDarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyIconDarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyIconDarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyIconDarkResponseValidationError) ErrorName() string {
	return "RemoveLabelPolicyIconDarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyIconDarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyIconDarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyIconDarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyIconDarkResponseValidationError{}

// Validate checks the field values on RemoveLabelPolicyFontRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLabelPolicyFontRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveLabelPolicyFontRequestValidationError is the validation error returned
// by RemoveLabelPolicyFontRequest.Validate if the designated constraints
// aren't met.
type RemoveLabelPolicyFontRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyFontRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyFontRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyFontRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyFontRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyFontRequestValidationError) ErrorName() string {
	return "RemoveLabelPolicyFontRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyFontRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyFontRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyFontRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyFontRequestValidationError{}

// Validate checks the field values on RemoveLabelPolicyFontResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveLabelPolicyFontResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveLabelPolicyFontResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveLabelPolicyFontResponseValidationError is the validation error
// returned by RemoveLabelPolicyFontResponse.Validate if the designated
// constraints aren't met.
type RemoveLabelPolicyFontResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveLabelPolicyFontResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveLabelPolicyFontResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveLabelPolicyFontResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveLabelPolicyFontResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveLabelPolicyFontResponseValidationError) ErrorName() string {
	return "RemoveLabelPolicyFontResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveLabelPolicyFontResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveLabelPolicyFontResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveLabelPolicyFontResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveLabelPolicyFontResponseValidationError{}

// Validate checks the field values on GetLoginPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLoginPolicyRequestValidationError is the validation error returned by
// GetLoginPolicyRequest.Validate if the designated constraints aren't met.
type GetLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginPolicyRequestValidationError) ErrorName() string {
	return "GetLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginPolicyRequestValidationError{}

// Validate checks the field values on GetLoginPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetLoginPolicyResponseValidationError is the validation error returned by
// GetLoginPolicyResponse.Validate if the designated constraints aren't met.
type GetLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginPolicyResponseValidationError) ErrorName() string {
	return "GetLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginPolicyResponseValidationError{}

// Validate checks the field values on UpdateLoginPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllowUsernamePassword

	// no validation rules for AllowRegister

	// no validation rules for AllowExternalIdp

	// no validation rules for ForceMfa

	if _, ok := policy.PasswordlessType_name[int32(m.GetPasswordlessType())]; !ok {
		return UpdateLoginPolicyRequestValidationError{
			field:  "PasswordlessType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for HidePasswordReset

	// no validation rules for IgnoreUnknownUsernames

	// no validation rules for DefaultRedirectUri

	if v, ok := interface{}(m.GetPasswordCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginPolicyRequestValidationError{
				field:  "PasswordCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalLoginCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginPolicyRequestValidationError{
				field:  "ExternalLoginCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMfaInitSkipLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginPolicyRequestValidationError{
				field:  "MfaInitSkipLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecondFactorCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginPolicyRequestValidationError{
				field:  "SecondFactorCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMultiFactorCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginPolicyRequestValidationError{
				field:  "MultiFactorCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowDomainDiscovery

	// no validation rules for DisableLoginWithEmail

	// no validation rules for DisableLoginWithPhone

	return nil
}

// UpdateLoginPolicyRequestValidationError is the validation error returned by
// UpdateLoginPolicyRequest.Validate if the designated constraints aren't met.
type UpdateLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLoginPolicyRequestValidationError) ErrorName() string {
	return "UpdateLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLoginPolicyRequestValidationError{}

// Validate checks the field values on UpdateLoginPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLoginPolicyResponseValidationError is the validation error returned by
// UpdateLoginPolicyResponse.Validate if the designated constraints aren't met.
type UpdateLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLoginPolicyResponseValidationError) ErrorName() string {
	return "UpdateLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLoginPolicyResponseValidationError{}

// Validate checks the field values on ListLoginPolicyIDPsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoginPolicyIDPsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicyIDPsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLoginPolicyIDPsRequestValidationError is the validation error returned
// by ListLoginPolicyIDPsRequest.Validate if the designated constraints aren't met.
type ListLoginPolicyIDPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyIDPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyIDPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyIDPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyIDPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyIDPsRequestValidationError) ErrorName() string {
	return "ListLoginPolicyIDPsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyIDPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyIDPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyIDPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyIDPsRequestValidationError{}

// Validate checks the field values on ListLoginPolicyIDPsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoginPolicyIDPsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicyIDPsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoginPolicyIDPsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLoginPolicyIDPsResponseValidationError is the validation error returned
// by ListLoginPolicyIDPsResponse.Validate if the designated constraints
// aren't met.
type ListLoginPolicyIDPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyIDPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyIDPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyIDPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyIDPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyIDPsResponseValidationError) ErrorName() string {
	return "ListLoginPolicyIDPsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyIDPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyIDPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyIDPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyIDPsResponseValidationError{}

// Validate checks the field values on AddIDPToLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddIDPToLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return AddIDPToLoginPolicyRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddIDPToLoginPolicyRequestValidationError is the validation error returned
// by AddIDPToLoginPolicyRequest.Validate if the designated constraints aren't met.
type AddIDPToLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIDPToLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIDPToLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIDPToLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIDPToLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIDPToLoginPolicyRequestValidationError) ErrorName() string {
	return "AddIDPToLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddIDPToLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIDPToLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIDPToLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIDPToLoginPolicyRequestValidationError{}

// Validate checks the field values on AddIDPToLoginPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddIDPToLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddIDPToLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddIDPToLoginPolicyResponseValidationError is the validation error returned
// by AddIDPToLoginPolicyResponse.Validate if the designated constraints
// aren't met.
type AddIDPToLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIDPToLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIDPToLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIDPToLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIDPToLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIDPToLoginPolicyResponseValidationError) ErrorName() string {
	return "AddIDPToLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddIDPToLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIDPToLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIDPToLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIDPToLoginPolicyResponseValidationError{}

// Validate checks the field values on RemoveIDPFromLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveIDPFromLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return RemoveIDPFromLoginPolicyRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveIDPFromLoginPolicyRequestValidationError is the validation error
// returned by RemoveIDPFromLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type RemoveIDPFromLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIDPFromLoginPolicyRequestValidationError) ErrorName() string {
	return "RemoveIDPFromLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIDPFromLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIDPFromLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIDPFromLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIDPFromLoginPolicyRequestValidationError{}

// Validate checks the field values on RemoveIDPFromLoginPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveIDPFromLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveIDPFromLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveIDPFromLoginPolicyResponseValidationError is the validation error
// returned by RemoveIDPFromLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type RemoveIDPFromLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIDPFromLoginPolicyResponseValidationError) ErrorName() string {
	return "RemoveIDPFromLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIDPFromLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIDPFromLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIDPFromLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIDPFromLoginPolicyResponseValidationError{}

// Validate checks the field values on ListLoginPolicySecondFactorsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListLoginPolicySecondFactorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLoginPolicySecondFactorsRequestValidationError is the validation error
// returned by ListLoginPolicySecondFactorsRequest.Validate if the designated
// constraints aren't met.
type ListLoginPolicySecondFactorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicySecondFactorsRequestValidationError) ErrorName() string {
	return "ListLoginPolicySecondFactorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicySecondFactorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicySecondFactorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicySecondFactorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicySecondFactorsRequestValidationError{}

// Validate checks the field values on ListLoginPolicySecondFactorsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListLoginPolicySecondFactorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicySecondFactorsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLoginPolicySecondFactorsResponseValidationError is the validation error
// returned by ListLoginPolicySecondFactorsResponse.Validate if the designated
// constraints aren't met.
type ListLoginPolicySecondFactorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicySecondFactorsResponseValidationError) ErrorName() string {
	return "ListLoginPolicySecondFactorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicySecondFactorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicySecondFactorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicySecondFactorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicySecondFactorsResponseValidationError{}

// Validate checks the field values on AddSecondFactorToLoginPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddSecondFactorToLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AddSecondFactorToLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return AddSecondFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.SecondFactorType_name[int32(m.GetType())]; !ok {
		return AddSecondFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddSecondFactorToLoginPolicyRequestValidationError is the validation error
// returned by AddSecondFactorToLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type AddSecondFactorToLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSecondFactorToLoginPolicyRequestValidationError) ErrorName() string {
	return "AddSecondFactorToLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSecondFactorToLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSecondFactorToLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSecondFactorToLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSecondFactorToLoginPolicyRequestValidationError{}

var _AddSecondFactorToLoginPolicyRequest_Type_NotInLookup = map[policy.SecondFactorType]struct{}{
	0: {},
}

// Validate checks the field values on AddSecondFactorToLoginPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *AddSecondFactorToLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSecondFactorToLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddSecondFactorToLoginPolicyResponseValidationError is the validation error
// returned by AddSecondFactorToLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type AddSecondFactorToLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSecondFactorToLoginPolicyResponseValidationError) ErrorName() string {
	return "AddSecondFactorToLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSecondFactorToLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSecondFactorToLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSecondFactorToLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSecondFactorToLoginPolicyResponseValidationError{}

// Validate checks the field values on RemoveSecondFactorFromLoginPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveSecondFactorFromLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RemoveSecondFactorFromLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return RemoveSecondFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.SecondFactorType_name[int32(m.GetType())]; !ok {
		return RemoveSecondFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// RemoveSecondFactorFromLoginPolicyRequestValidationError is the validation
// error returned by RemoveSecondFactorFromLoginPolicyRequest.Validate if the
// designated constraints aren't met.
type RemoveSecondFactorFromLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) ErrorName() string {
	return "RemoveSecondFactorFromLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSecondFactorFromLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSecondFactorFromLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSecondFactorFromLoginPolicyRequestValidationError{}

var _RemoveSecondFactorFromLoginPolicyRequest_Type_NotInLookup = map[policy.SecondFactorType]struct{}{
	0: {},
}

// Validate checks the field values on
// RemoveSecondFactorFromLoginPolicyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RemoveSecondFactorFromLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveSecondFactorFromLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveSecondFactorFromLoginPolicyResponseValidationError is the validation
// error returned by RemoveSecondFactorFromLoginPolicyResponse.Validate if the
// designated constraints aren't met.
type RemoveSecondFactorFromLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) ErrorName() string {
	return "RemoveSecondFactorFromLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSecondFactorFromLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSecondFactorFromLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSecondFactorFromLoginPolicyResponseValidationError{}

// Validate checks the field values on ListLoginPolicyMultiFactorsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListLoginPolicyMultiFactorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLoginPolicyMultiFactorsRequestValidationError is the validation error
// returned by ListLoginPolicyMultiFactorsRequest.Validate if the designated
// constraints aren't met.
type ListLoginPolicyMultiFactorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyMultiFactorsRequestValidationError) ErrorName() string {
	return "ListLoginPolicyMultiFactorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyMultiFactorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyMultiFactorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyMultiFactorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyMultiFactorsRequestValidationError{}

// Validate checks the field values on ListLoginPolicyMultiFactorsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListLoginPolicyMultiFactorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicyMultiFactorsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLoginPolicyMultiFactorsResponseValidationError is the validation error
// returned by ListLoginPolicyMultiFactorsResponse.Validate if the designated
// constraints aren't met.
type ListLoginPolicyMultiFactorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyMultiFactorsResponseValidationError) ErrorName() string {
	return "ListLoginPolicyMultiFactorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyMultiFactorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyMultiFactorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyMultiFactorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyMultiFactorsResponseValidationError{}

// Validate checks the field values on AddMultiFactorToLoginPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddMultiFactorToLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AddMultiFactorToLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return AddMultiFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.MultiFactorType_name[int32(m.GetType())]; !ok {
		return AddMultiFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddMultiFactorToLoginPolicyRequestValidationError is the validation error
// returned by AddMultiFactorToLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type AddMultiFactorToLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMultiFactorToLoginPolicyRequestValidationError) ErrorName() string {
	return "AddMultiFactorToLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMultiFactorToLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMultiFactorToLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMultiFactorToLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMultiFactorToLoginPolicyRequestValidationError{}

var _AddMultiFactorToLoginPolicyRequest_Type_NotInLookup = map[policy.MultiFactorType]struct{}{
	0: {},
}

// Validate checks the field values on AddMultiFactorToLoginPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddMultiFactorToLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMultiFactorToLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMultiFactorToLoginPolicyResponseValidationError is the validation error
// returned by AddMultiFactorToLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type AddMultiFactorToLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMultiFactorToLoginPolicyResponseValidationError) ErrorName() string {
	return "AddMultiFactorToLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMultiFactorToLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMultiFactorToLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMultiFactorToLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMultiFactorToLoginPolicyResponseValidationError{}

// Validate checks the field values on RemoveMultiFactorFromLoginPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveMultiFactorFromLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RemoveMultiFactorFromLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return RemoveMultiFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.MultiFactorType_name[int32(m.GetType())]; !ok {
		return RemoveMultiFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// RemoveMultiFactorFromLoginPolicyRequestValidationError is the validation
// error returned by RemoveMultiFactorFromLoginPolicyRequest.Validate if the
// designated constraints aren't met.
type RemoveMultiFactorFromLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) ErrorName() string {
	return "RemoveMultiFactorFromLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMultiFactorFromLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMultiFactorFromLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMultiFactorFromLoginPolicyRequestValidationError{}

var _RemoveMultiFactorFromLoginPolicyRequest_Type_NotInLookup = map[policy.MultiFactorType]struct{}{
	0: {},
}

// Validate checks the field values on RemoveMultiFactorFromLoginPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveMultiFactorFromLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMultiFactorFromLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMultiFactorFromLoginPolicyResponseValidationError is the validation
// error returned by RemoveMultiFactorFromLoginPolicyResponse.Validate if the
// designated constraints aren't met.
type RemoveMultiFactorFromLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) ErrorName() string {
	return "RemoveMultiFactorFromLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMultiFactorFromLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMultiFactorFromLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMultiFactorFromLoginPolicyResponseValidationError{}

// Validate checks the field values on GetPasswordComplexityPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPasswordComplexityPolicyRequestValidationError is the validation error
// returned by GetPasswordComplexityPolicyRequest.Validate if the designated
// constraints aren't met.
type GetPasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "GetPasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on GetPasswordComplexityPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPasswordComplexityPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPasswordComplexityPolicyResponseValidationError is the validation error
// returned by GetPasswordComplexityPolicyResponse.Validate if the designated
// constraints aren't met.
type GetPasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "GetPasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on UpdatePasswordComplexityPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdatePasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinLength

	// no validation rules for HasUppercase

	// no validation rules for HasLowercase

	// no validation rules for HasNumber

	// no validation rules for HasSymbol

	return nil
}

// UpdatePasswordComplexityPolicyRequestValidationError is the validation error
// returned by UpdatePasswordComplexityPolicyRequest.Validate if the
// designated constraints aren't met.
type UpdatePasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "UpdatePasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on UpdatePasswordComplexityPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdatePasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePasswordComplexityPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePasswordComplexityPolicyResponseValidationError is the validation
// error returned by UpdatePasswordComplexityPolicyResponse.Validate if the
// designated constraints aren't met.
type UpdatePasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "UpdatePasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on GetPasswordAgePolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPasswordAgePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPasswordAgePolicyRequestValidationError is the validation error returned
// by GetPasswordAgePolicyRequest.Validate if the designated constraints
// aren't met.
type GetPasswordAgePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordAgePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordAgePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordAgePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordAgePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordAgePolicyRequestValidationError) ErrorName() string {
	return "GetPasswordAgePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordAgePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordAgePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordAgePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordAgePolicyRequestValidationError{}

// Validate checks the field values on GetPasswordAgePolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPasswordAgePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPasswordAgePolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPasswordAgePolicyResponseValidationError is the validation error returned
// by GetPasswordAgePolicyResponse.Validate if the designated constraints
// aren't met.
type GetPasswordAgePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordAgePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordAgePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordAgePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordAgePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordAgePolicyResponseValidationError) ErrorName() string {
	return "GetPasswordAgePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordAgePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordAgePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordAgePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordAgePolicyResponseValidationError{}

// Validate checks the field values on UpdatePasswordAgePolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePasswordAgePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxAgeDays

	// no validation rules for ExpireWarnDays

	return nil
}

// UpdatePasswordAgePolicyRequestValidationError is the validation error
// returned by UpdatePasswordAgePolicyRequest.Validate if the designated
// constraints aren't met.
type UpdatePasswordAgePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordAgePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordAgePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordAgePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordAgePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordAgePolicyRequestValidationError) ErrorName() string {
	return "UpdatePasswordAgePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordAgePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordAgePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordAgePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordAgePolicyRequestValidationError{}

// Validate checks the field values on UpdatePasswordAgePolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePasswordAgePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePasswordAgePolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePasswordAgePolicyResponseValidationError is the validation error
// returned by UpdatePasswordAgePolicyResponse.Validate if the designated
// constraints aren't met.
type UpdatePasswordAgePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePasswordAgePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePasswordAgePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePasswordAgePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePasswordAgePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePasswordAgePolicyResponseValidationError) ErrorName() string {
	return "UpdatePasswordAgePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePasswordAgePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePasswordAgePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePasswordAgePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePasswordAgePolicyResponseValidationError{}

// Validate checks the field values on GetLockoutPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLockoutPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLockoutPolicyRequestValidationError is the validation error returned by
// GetLockoutPolicyRequest.Validate if the designated constraints aren't met.
type GetLockoutPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockoutPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockoutPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockoutPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockoutPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockoutPolicyRequestValidationError) ErrorName() string {
	return "GetLockoutPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLockoutPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockoutPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockoutPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockoutPolicyRequestValidationError{}

// Validate checks the field values on GetLockoutPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLockoutPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockoutPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetLockoutPolicyResponseValidationError is the validation error returned by
// GetLockoutPolicyResponse.Validate if the designated constraints aren't met.
type GetLockoutPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockoutPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockoutPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockoutPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockoutPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockoutPolicyResponseValidationError) ErrorName() string {
	return "GetLockoutPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLockoutPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockoutPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockoutPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockoutPolicyResponseValidationError{}

// Validate checks the field values on UpdateLockoutPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLockoutPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxPasswordAttempts

	return nil
}

// UpdateLockoutPolicyRequestValidationError is the validation error returned
// by UpdateLockoutPolicyRequest.Validate if the designated constraints aren't met.
type UpdateLockoutPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLockoutPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLockoutPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLockoutPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLockoutPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLockoutPolicyRequestValidationError) ErrorName() string {
	return "UpdateLockoutPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLockoutPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLockoutPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLockoutPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLockoutPolicyRequestValidationError{}

// Validate checks the field values on UpdateLockoutPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLockoutPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLockoutPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLockoutPolicyResponseValidationError is the validation error returned
// by UpdateLockoutPolicyResponse.Validate if the designated constraints
// aren't met.
type UpdateLockoutPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLockoutPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLockoutPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLockoutPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLockoutPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLockoutPolicyResponseValidationError) ErrorName() string {
	return "UpdateLockoutPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLockoutPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLockoutPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLockoutPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLockoutPolicyResponseValidationError{}

// Validate checks the field values on GetPrivacyPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPrivacyPolicyRequestValidationError is the validation error returned by
// GetPrivacyPolicyRequest.Validate if the designated constraints aren't met.
type GetPrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivacyPolicyRequestValidationError) ErrorName() string {
	return "GetPrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivacyPolicyRequestValidationError{}

// Validate checks the field values on GetPrivacyPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrivacyPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPrivacyPolicyResponseValidationError is the validation error returned by
// GetPrivacyPolicyResponse.Validate if the designated constraints aren't met.
type GetPrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivacyPolicyResponseValidationError) ErrorName() string {
	return "GetPrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivacyPolicyResponseValidationError{}

// Validate checks the field values on UpdatePrivacyPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TosLink

	// no validation rules for PrivacyLink

	// no validation rules for HelpLink

	return nil
}

// UpdatePrivacyPolicyRequestValidationError is the validation error returned
// by UpdatePrivacyPolicyRequest.Validate if the designated constraints aren't met.
type UpdatePrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePrivacyPolicyRequestValidationError) ErrorName() string {
	return "UpdatePrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePrivacyPolicyRequestValidationError{}

// Validate checks the field values on UpdatePrivacyPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdatePrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdatePrivacyPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdatePrivacyPolicyResponseValidationError is the validation error returned
// by UpdatePrivacyPolicyResponse.Validate if the designated constraints
// aren't met.
type UpdatePrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdatePrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdatePrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdatePrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdatePrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdatePrivacyPolicyResponseValidationError) ErrorName() string {
	return "UpdatePrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdatePrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdatePrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdatePrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdatePrivacyPolicyResponseValidationError{}

// Validate checks the field values on AddNotificationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PasswordChange

	return nil
}

// AddNotificationPolicyRequestValidationError is the validation error returned
// by AddNotificationPolicyRequest.Validate if the designated constraints
// aren't met.
type AddNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNotificationPolicyRequestValidationError) ErrorName() string {
	return "AddNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNotificationPolicyRequestValidationError{}

// Validate checks the field values on AddNotificationPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddNotificationPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddNotificationPolicyResponseValidationError is the validation error
// returned by AddNotificationPolicyResponse.Validate if the designated
// constraints aren't met.
type AddNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddNotificationPolicyResponseValidationError) ErrorName() string {
	return "AddNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddNotificationPolicyResponseValidationError{}

// Validate checks the field values on GetNotificationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetNotificationPolicyRequestValidationError is the validation error returned
// by GetNotificationPolicyRequest.Validate if the designated constraints
// aren't met.
type GetNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationPolicyRequestValidationError) ErrorName() string {
	return "GetNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationPolicyRequestValidationError{}

// Validate checks the field values on GetNotificationPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotificationPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNotificationPolicyResponseValidationError is the validation error
// returned by GetNotificationPolicyResponse.Validate if the designated
// constraints aren't met.
type GetNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationPolicyResponseValidationError) ErrorName() string {
	return "GetNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationPolicyResponseValidationError{}

// Validate checks the field values on UpdateNotificationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PasswordChange

	return nil
}

// UpdateNotificationPolicyRequestValidationError is the validation error
// returned by UpdateNotificationPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationPolicyRequestValidationError) ErrorName() string {
	return "UpdateNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationPolicyRequestValidationError{}

// Validate checks the field values on UpdateNotificationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateNotificationPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateNotificationPolicyResponseValidationError is the validation error
// returned by UpdateNotificationPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateNotificationPolicyResponseValidationError) ErrorName() string {
	return "UpdateNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateNotificationPolicyResponseValidationError{}

// Validate checks the field values on GetDefaultInitMessageTextRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultInitMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultInitMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultInitMessageTextRequestValidationError is the validation error
// returned by GetDefaultInitMessageTextRequest.Validate if the designated
// constraints aren't met.
type GetDefaultInitMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultInitMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultInitMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultInitMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultInitMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultInitMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultInitMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultInitMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultInitMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultInitMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultInitMessageTextRequestValidationError{}

// Validate checks the field values on GetDefaultInitMessageTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultInitMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultInitMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultInitMessageTextResponseValidationError is the validation error
// returned by GetDefaultInitMessageTextResponse.Validate if the designated
// constraints aren't met.
type GetDefaultInitMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultInitMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultInitMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultInitMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultInitMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultInitMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultInitMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultInitMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultInitMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultInitMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultInitMessageTextResponseValidationError{}

// Validate checks the field values on GetCustomInitMessageTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomInitMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomInitMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomInitMessageTextRequestValidationError is the validation error
// returned by GetCustomInitMessageTextRequest.Validate if the designated
// constraints aren't met.
type GetCustomInitMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomInitMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomInitMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomInitMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomInitMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomInitMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomInitMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomInitMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomInitMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomInitMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomInitMessageTextRequestValidationError{}

// Validate checks the field values on GetCustomInitMessageTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomInitMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomInitMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomInitMessageTextResponseValidationError is the validation error
// returned by GetCustomInitMessageTextResponse.Validate if the designated
// constraints aren't met.
type GetCustomInitMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomInitMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomInitMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomInitMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomInitMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomInitMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomInitMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomInitMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomInitMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomInitMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomInitMessageTextResponseValidationError{}

// Validate checks the field values on SetDefaultInitMessageTextRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SetDefaultInitMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 1000 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 1000 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultInitMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultInitMessageTextRequestValidationError is the validation error
// returned by SetDefaultInitMessageTextRequest.Validate if the designated
// constraints aren't met.
type SetDefaultInitMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultInitMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultInitMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultInitMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultInitMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultInitMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultInitMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultInitMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultInitMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultInitMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultInitMessageTextRequestValidationError{}

// Validate checks the field values on SetDefaultInitMessageTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SetDefaultInitMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultInitMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultInitMessageTextResponseValidationError is the validation error
// returned by SetDefaultInitMessageTextResponse.Validate if the designated
// constraints aren't met.
type SetDefaultInitMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultInitMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultInitMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultInitMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultInitMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultInitMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultInitMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultInitMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultInitMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultInitMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultInitMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomInitMessageTextToDefaultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ResetCustomInitMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomInitMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomInitMessageTextToDefaultRequestValidationError is the validation
// error returned by ResetCustomInitMessageTextToDefaultRequest.Validate if
// the designated constraints aren't met.
type ResetCustomInitMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomInitMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomInitMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomInitMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomInitMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomInitMessageTextToDefaultResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ResetCustomInitMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomInitMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomInitMessageTextToDefaultResponseValidationError is the validation
// error returned by ResetCustomInitMessageTextToDefaultResponse.Validate if
// the designated constraints aren't met.
type ResetCustomInitMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomInitMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomInitMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomInitMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomInitMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordResetMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordResetMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultPasswordResetMessageTextRequestValidationError is the validation
// error returned by GetDefaultPasswordResetMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordResetMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordResetMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordResetMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordResetMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordResetMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordResetMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordResetMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordResetMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordResetMessageTextResponseValidationError is the validation
// error returned by GetDefaultPasswordResetMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordResetMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordResetMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordResetMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordResetMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordResetMessageTextResponseValidationError{}

// Validate checks the field values on GetCustomPasswordResetMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomPasswordResetMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomPasswordResetMessageTextRequestValidationError is the validation
// error returned by GetCustomPasswordResetMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomPasswordResetMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordResetMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomPasswordResetMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordResetMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordResetMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordResetMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordResetMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomPasswordResetMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomPasswordResetMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomPasswordResetMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomPasswordResetMessageTextResponseValidationError is the validation
// error returned by GetCustomPasswordResetMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomPasswordResetMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordResetMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomPasswordResetMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordResetMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordResetMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordResetMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordResetMessageTextResponseValidationError{}

// Validate checks the field values on
// SetDefaultPasswordResetMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetDefaultPasswordResetMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultPasswordResetMessageTextRequestValidationError is the validation
// error returned by SetDefaultPasswordResetMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetDefaultPasswordResetMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPasswordResetMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultPasswordResetMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultPasswordResetMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultPasswordResetMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPasswordResetMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultPasswordResetMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPasswordResetMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPasswordResetMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPasswordResetMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPasswordResetMessageTextRequestValidationError{}

// Validate checks the field values on
// SetDefaultPasswordResetMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetDefaultPasswordResetMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultPasswordResetMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultPasswordResetMessageTextResponseValidationError is the validation
// error returned by SetDefaultPasswordResetMessageTextResponse.Validate if
// the designated constraints aren't met.
type SetDefaultPasswordResetMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPasswordResetMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultPasswordResetMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultPasswordResetMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultPasswordResetMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPasswordResetMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultPasswordResetMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPasswordResetMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPasswordResetMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPasswordResetMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPasswordResetMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomPasswordResetMessageTextToDefaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomPasswordResetMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomPasswordResetMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomPasswordResetMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomPasswordResetMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordResetMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomPasswordResetMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordResetMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordResetMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordResetMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomPasswordResetMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomPasswordResetMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomPasswordResetMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomPasswordResetMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomPasswordResetMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordResetMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomPasswordResetMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordResetMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordResetMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordResetMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetDefaultVerifyEmailMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyEmailMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultVerifyEmailMessageTextRequestValidationError is the validation
// error returned by GetDefaultVerifyEmailMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyEmailMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultVerifyEmailMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyEmailMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyEmailMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyEmailMessageTextRequestValidationError{}

// Validate checks the field values on GetDefaultVerifyEmailMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyEmailMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultVerifyEmailMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultVerifyEmailMessageTextResponseValidationError is the validation
// error returned by GetDefaultVerifyEmailMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyEmailMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultVerifyEmailMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyEmailMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyEmailMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyEmailMessageTextResponseValidationError{}

// Validate checks the field values on GetCustomVerifyEmailMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyEmailMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomVerifyEmailMessageTextRequestValidationError is the validation
// error returned by GetCustomVerifyEmailMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomVerifyEmailMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomVerifyEmailMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyEmailMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyEmailMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyEmailMessageTextRequestValidationError{}

// Validate checks the field values on GetCustomVerifyEmailMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyEmailMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomVerifyEmailMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomVerifyEmailMessageTextResponseValidationError is the validation
// error returned by GetCustomVerifyEmailMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomVerifyEmailMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomVerifyEmailMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyEmailMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyEmailMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyEmailMessageTextResponseValidationError{}

// Validate checks the field values on SetDefaultVerifyEmailMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetDefaultVerifyEmailMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultVerifyEmailMessageTextRequestValidationError is the validation
// error returned by SetDefaultVerifyEmailMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetDefaultVerifyEmailMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultVerifyEmailMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultVerifyEmailMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultVerifyEmailMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultVerifyEmailMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultVerifyEmailMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultVerifyEmailMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultVerifyEmailMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultVerifyEmailMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultVerifyEmailMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultVerifyEmailMessageTextRequestValidationError{}

// Validate checks the field values on SetDefaultVerifyEmailMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetDefaultVerifyEmailMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultVerifyEmailMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultVerifyEmailMessageTextResponseValidationError is the validation
// error returned by SetDefaultVerifyEmailMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetDefaultVerifyEmailMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultVerifyEmailMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultVerifyEmailMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultVerifyEmailMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultVerifyEmailMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultVerifyEmailMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultVerifyEmailMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultVerifyEmailMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultVerifyEmailMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultVerifyEmailMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultVerifyEmailMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomVerifyEmailMessageTextToDefaultRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetCustomVerifyEmailMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomVerifyEmailMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyEmailMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomVerifyEmailMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomVerifyEmailMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomVerifyEmailMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyEmailMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetDefaultVerifyPhoneMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyPhoneMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultVerifyPhoneMessageTextRequestValidationError is the validation
// error returned by GetDefaultVerifyPhoneMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyPhoneMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultVerifyPhoneMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyPhoneMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyPhoneMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyPhoneMessageTextRequestValidationError{}

// Validate checks the field values on GetDefaultVerifyPhoneMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyPhoneMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultVerifyPhoneMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultVerifyPhoneMessageTextResponseValidationError is the validation
// error returned by GetDefaultVerifyPhoneMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyPhoneMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultVerifyPhoneMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyPhoneMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyPhoneMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyPhoneMessageTextResponseValidationError{}

// Validate checks the field values on GetCustomVerifyPhoneMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyPhoneMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomVerifyPhoneMessageTextRequestValidationError is the validation
// error returned by GetCustomVerifyPhoneMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomVerifyPhoneMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomVerifyPhoneMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyPhoneMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyPhoneMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyPhoneMessageTextRequestValidationError{}

// Validate checks the field values on GetCustomVerifyPhoneMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyPhoneMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomVerifyPhoneMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomVerifyPhoneMessageTextResponseValidationError is the validation
// error returned by GetCustomVerifyPhoneMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomVerifyPhoneMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomVerifyPhoneMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyPhoneMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyPhoneMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyPhoneMessageTextResponseValidationError{}

// Validate checks the field values on SetDefaultVerifyPhoneMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetDefaultVerifyPhoneMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultVerifyPhoneMessageTextRequestValidationError is the validation
// error returned by SetDefaultVerifyPhoneMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetDefaultVerifyPhoneMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultVerifyPhoneMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultVerifyPhoneMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultVerifyPhoneMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultVerifyPhoneMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultVerifyPhoneMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultVerifyPhoneMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultVerifyPhoneMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultVerifyPhoneMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultVerifyPhoneMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultVerifyPhoneMessageTextRequestValidationError{}

// Validate checks the field values on SetDefaultVerifyPhoneMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetDefaultVerifyPhoneMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultVerifyPhoneMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultVerifyPhoneMessageTextResponseValidationError is the validation
// error returned by SetDefaultVerifyPhoneMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetDefaultVerifyPhoneMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultVerifyPhoneMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultVerifyPhoneMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultVerifyPhoneMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultVerifyPhoneMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultVerifyPhoneMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultVerifyPhoneMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultVerifyPhoneMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultVerifyPhoneMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultVerifyPhoneMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultVerifyPhoneMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomVerifyPhoneMessageTextToDefaultRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetCustomVerifyPhoneMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomVerifyPhoneMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyPhoneMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomVerifyPhoneMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomVerifyPhoneMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomVerifyPhoneMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyPhoneMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on
// GetDefaultDomainClaimedMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultDomainClaimedMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultDomainClaimedMessageTextRequestValidationError is the validation
// error returned by GetDefaultDomainClaimedMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultDomainClaimedMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultDomainClaimedMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultDomainClaimedMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultDomainClaimedMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultDomainClaimedMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultDomainClaimedMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultDomainClaimedMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultDomainClaimedMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultDomainClaimedMessageTextResponseValidationError is the validation
// error returned by GetDefaultDomainClaimedMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetDefaultDomainClaimedMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultDomainClaimedMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultDomainClaimedMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultDomainClaimedMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultDomainClaimedMessageTextResponseValidationError{}

// Validate checks the field values on GetCustomDomainClaimedMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomDomainClaimedMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomDomainClaimedMessageTextRequestValidationError is the validation
// error returned by GetCustomDomainClaimedMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomDomainClaimedMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomDomainClaimedMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomDomainClaimedMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomDomainClaimedMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomDomainClaimedMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomDomainClaimedMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomDomainClaimedMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomDomainClaimedMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomDomainClaimedMessageTextResponseValidationError is the validation
// error returned by GetCustomDomainClaimedMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomDomainClaimedMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomDomainClaimedMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomDomainClaimedMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomDomainClaimedMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomDomainClaimedMessageTextResponseValidationError{}

// Validate checks the field values on
// SetDefaultDomainClaimedMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetDefaultDomainClaimedMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultDomainClaimedMessageTextRequestValidationError is the validation
// error returned by SetDefaultDomainClaimedMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetDefaultDomainClaimedMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultDomainClaimedMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultDomainClaimedMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultDomainClaimedMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultDomainClaimedMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultDomainClaimedMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultDomainClaimedMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultDomainClaimedMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultDomainClaimedMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultDomainClaimedMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultDomainClaimedMessageTextRequestValidationError{}

// Validate checks the field values on
// SetDefaultDomainClaimedMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetDefaultDomainClaimedMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultDomainClaimedMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultDomainClaimedMessageTextResponseValidationError is the validation
// error returned by SetDefaultDomainClaimedMessageTextResponse.Validate if
// the designated constraints aren't met.
type SetDefaultDomainClaimedMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultDomainClaimedMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultDomainClaimedMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultDomainClaimedMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultDomainClaimedMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultDomainClaimedMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultDomainClaimedMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultDomainClaimedMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultDomainClaimedMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultDomainClaimedMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultDomainClaimedMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomDomainClaimedMessageTextToDefaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomDomainClaimedMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomDomainClaimedMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomDomainClaimedMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomDomainClaimedMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomDomainClaimedMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomDomainClaimedMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomDomainClaimedMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordChangeMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordChangeMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultPasswordChangeMessageTextRequestValidationError is the validation
// error returned by GetDefaultPasswordChangeMessageTextRequest.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordChangeMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordChangeMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordChangeMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordChangeMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordChangeMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordChangeMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordChangeMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordChangeMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordChangeMessageTextResponseValidationError is the validation
// error returned by GetDefaultPasswordChangeMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordChangeMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordChangeMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordChangeMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordChangeMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordChangeMessageTextResponseValidationError{}

// Validate checks the field values on
// GetCustomPasswordChangeMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomPasswordChangeMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomPasswordChangeMessageTextRequestValidationError is the validation
// error returned by GetCustomPasswordChangeMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomPasswordChangeMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomPasswordChangeMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordChangeMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordChangeMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordChangeMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomPasswordChangeMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomPasswordChangeMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomPasswordChangeMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomPasswordChangeMessageTextResponseValidationError is the validation
// error returned by GetCustomPasswordChangeMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetCustomPasswordChangeMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomPasswordChangeMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordChangeMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordChangeMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordChangeMessageTextResponseValidationError{}

// Validate checks the field values on
// SetDefaultPasswordChangeMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetDefaultPasswordChangeMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultPasswordChangeMessageTextRequestValidationError is the validation
// error returned by SetDefaultPasswordChangeMessageTextRequest.Validate if
// the designated constraints aren't met.
type SetDefaultPasswordChangeMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPasswordChangeMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultPasswordChangeMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultPasswordChangeMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultPasswordChangeMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPasswordChangeMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultPasswordChangeMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPasswordChangeMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPasswordChangeMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPasswordChangeMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPasswordChangeMessageTextRequestValidationError{}

// Validate checks the field values on
// SetDefaultPasswordChangeMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetDefaultPasswordChangeMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultPasswordChangeMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultPasswordChangeMessageTextResponseValidationError is the validation
// error returned by SetDefaultPasswordChangeMessageTextResponse.Validate if
// the designated constraints aren't met.
type SetDefaultPasswordChangeMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPasswordChangeMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetDefaultPasswordChangeMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetDefaultPasswordChangeMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetDefaultPasswordChangeMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPasswordChangeMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultPasswordChangeMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPasswordChangeMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPasswordChangeMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPasswordChangeMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPasswordChangeMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomPasswordChangeMessageTextToDefaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomPasswordChangeMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomPasswordChangeMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordChangeMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomPasswordChangeMessageTextToDefaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCustomPasswordChangeMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomPasswordChangeMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordChangeMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordlessRegistrationMessageTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDefaultPasswordlessRegistrationMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultPasswordlessRegistrationMessageTextRequestValidationError is the
// validation error returned by
// GetDefaultPasswordlessRegistrationMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordlessRegistrationMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordlessRegistrationMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordlessRegistrationMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordlessRegistrationMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordlessRegistrationMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordlessRegistrationMessageTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultPasswordlessRegistrationMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordlessRegistrationMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordlessRegistrationMessageTextResponseValidationError is the
// validation error returned by
// GetDefaultPasswordlessRegistrationMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordlessRegistrationMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordlessRegistrationMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordlessRegistrationMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordlessRegistrationMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordlessRegistrationMessageTextResponseValidationError{}

// Validate checks the field values on
// GetCustomPasswordlessRegistrationMessageTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCustomPasswordlessRegistrationMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomPasswordlessRegistrationMessageTextRequestValidationError is the
// validation error returned by
// GetCustomPasswordlessRegistrationMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomPasswordlessRegistrationMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomPasswordlessRegistrationMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordlessRegistrationMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordlessRegistrationMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordlessRegistrationMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomPasswordlessRegistrationMessageTextResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCustomPasswordlessRegistrationMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomPasswordlessRegistrationMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomPasswordlessRegistrationMessageTextResponseValidationError is the
// validation error returned by
// GetCustomPasswordlessRegistrationMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomPasswordlessRegistrationMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomPasswordlessRegistrationMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordlessRegistrationMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordlessRegistrationMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordlessRegistrationMessageTextResponseValidationError{}

// Validate checks the field values on
// SetDefaultPasswordlessRegistrationMessageTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetDefaultPasswordlessRegistrationMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetDefaultPasswordlessRegistrationMessageTextRequestValidationError is the
// validation error returned by
// SetDefaultPasswordlessRegistrationMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetDefaultPasswordlessRegistrationMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetDefaultPasswordlessRegistrationMessageTextRequestValidationError) ErrorName() string {
	return "SetDefaultPasswordlessRegistrationMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPasswordlessRegistrationMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPasswordlessRegistrationMessageTextRequestValidationError{}

// Validate checks the field values on
// SetDefaultPasswordlessRegistrationMessageTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetDefaultPasswordlessRegistrationMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetDefaultPasswordlessRegistrationMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetDefaultPasswordlessRegistrationMessageTextResponseValidationError is the
// validation error returned by
// SetDefaultPasswordlessRegistrationMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetDefaultPasswordlessRegistrationMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e SetDefaultPasswordlessRegistrationMessageTextResponseValidationError) ErrorName() string {
	return "SetDefaultPasswordlessRegistrationMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetDefaultPasswordlessRegistrationMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetDefaultPasswordlessRegistrationMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetDefaultPasswordlessRegistrationMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError
// is the validation error returned by
// ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.Validate if
// the designated constraints aren't met.
type ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError
// is the validation error returned by
// ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.Validate if
// the designated constraints aren't met.
type ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetDefaultLoginTextsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLoginTextsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultLoginTextsRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultLoginTextsRequestValidationError is the validation error returned
// by GetDefaultLoginTextsRequest.Validate if the designated constraints
// aren't met.
type GetDefaultLoginTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLoginTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLoginTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLoginTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLoginTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLoginTextsRequestValidationError) ErrorName() string {
	return "GetDefaultLoginTextsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLoginTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLoginTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLoginTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLoginTextsRequestValidationError{}

// Validate checks the field values on GetDefaultLoginTextsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLoginTextsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultLoginTextsResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultLoginTextsResponseValidationError is the validation error returned
// by GetDefaultLoginTextsResponse.Validate if the designated constraints
// aren't met.
type GetDefaultLoginTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLoginTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLoginTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLoginTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLoginTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLoginTextsResponseValidationError) ErrorName() string {
	return "GetDefaultLoginTextsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLoginTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLoginTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLoginTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLoginTextsResponseValidationError{}

// Validate checks the field values on GetCustomLoginTextsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomLoginTextsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomLoginTextsRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomLoginTextsRequestValidationError is the validation error returned
// by GetCustomLoginTextsRequest.Validate if the designated constraints aren't met.
type GetCustomLoginTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomLoginTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomLoginTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomLoginTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomLoginTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomLoginTextsRequestValidationError) ErrorName() string {
	return "GetCustomLoginTextsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomLoginTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomLoginTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomLoginTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomLoginTextsRequestValidationError{}

// Validate checks the field values on GetCustomLoginTextsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomLoginTextsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomLoginTextsResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomLoginTextsResponseValidationError is the validation error returned
// by GetCustomLoginTextsResponse.Validate if the designated constraints
// aren't met.
type GetCustomLoginTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomLoginTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomLoginTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomLoginTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomLoginTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomLoginTextsResponseValidationError) ErrorName() string {
	return "GetCustomLoginTextsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomLoginTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomLoginTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomLoginTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomLoginTextsResponseValidationError{}

// Validate checks the field values on SetCustomLoginTextsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetCustomLoginTextsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomLoginTextsRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetSelectAccountText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "SelectAccountText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLoginText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "LoginText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUsernameChangeText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "UsernameChangeText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUsernameChangeDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "UsernameChangeDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitPasswordText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitPasswordText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitPasswordDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitPasswordDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEmailVerificationText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "EmailVerificationText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEmailVerificationDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "EmailVerificationDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitializeUserText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitializeUserText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitializeDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitializeDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaPromptText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaPromptText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaOtpText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaOtpText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaU2FText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaU2FText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMfaProvidersText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "MfaProvidersText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVerifyMfaOtpText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "VerifyMfaOtpText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVerifyMfaU2FText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "VerifyMfaU2FText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordChangeText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordChangeText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordChangeDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordChangeDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordResetDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordResetDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistrationOptionText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "RegistrationOptionText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistrationUserText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "RegistrationUserText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistrationOrgText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "RegistrationOrgText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLinkingUserDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "LinkingUserDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalUserNotFoundText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "ExternalUserNotFoundText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessLoginText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "SuccessLoginText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLogoutText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "LogoutText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFooterText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "FooterText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessPromptText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessPromptText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessRegistrationText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessRegistrationText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessRegistrationDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessRegistrationDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalRegistrationUserOverviewText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "ExternalRegistrationUserOverviewText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomLoginTextsRequestValidationError is the validation error returned
// by SetCustomLoginTextsRequest.Validate if the designated constraints aren't met.
type SetCustomLoginTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomLoginTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomLoginTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomLoginTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomLoginTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomLoginTextsRequestValidationError) ErrorName() string {
	return "SetCustomLoginTextsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomLoginTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomLoginTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomLoginTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomLoginTextsRequestValidationError{}

// Validate checks the field values on SetCustomLoginTextsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetCustomLoginTextsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomLoginTextsResponseValidationError is the validation error returned
// by SetCustomLoginTextsResponse.Validate if the designated constraints
// aren't met.
type SetCustomLoginTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomLoginTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomLoginTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomLoginTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomLoginTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomLoginTextsResponseValidationError) ErrorName() string {
	return "SetCustomLoginTextsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomLoginTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomLoginTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomLoginTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomLoginTextsResponseValidationError{}

// Validate checks the field values on ResetCustomLoginTextsToDefaultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomLoginTextsToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomLoginTextsToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomLoginTextsToDefaultRequestValidationError is the validation error
// returned by ResetCustomLoginTextsToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomLoginTextsToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomLoginTextsToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomLoginTextsToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomLoginTextsToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomLoginTextsToDefaultRequestValidationError{}

// Validate checks the field values on ResetCustomLoginTextsToDefaultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomLoginTextsToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomLoginTextsToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomLoginTextsToDefaultResponseValidationError is the validation
// error returned by ResetCustomLoginTextsToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomLoginTextsToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomLoginTextsToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomLoginTextsToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomLoginTextsToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomLoginTextsToDefaultResponseValidationError{}

// Validate checks the field values on AddIAMMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddIAMMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return AddIAMMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddIAMMemberRequestValidationError is the validation error returned by
// AddIAMMemberRequest.Validate if the designated constraints aren't met.
type AddIAMMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIAMMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIAMMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIAMMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIAMMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIAMMemberRequestValidationError) ErrorName() string {
	return "AddIAMMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddIAMMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIAMMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIAMMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIAMMemberRequestValidationError{}

// Validate checks the field values on AddIAMMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddIAMMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddIAMMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddIAMMemberResponseValidationError is the validation error returned by
// AddIAMMemberResponse.Validate if the designated constraints aren't met.
type AddIAMMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIAMMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIAMMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIAMMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIAMMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIAMMemberResponseValidationError) ErrorName() string {
	return "AddIAMMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddIAMMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIAMMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIAMMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIAMMemberResponseValidationError{}

// Validate checks the field values on UpdateIAMMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIAMMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateIAMMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateIAMMemberRequestValidationError is the validation error returned by
// UpdateIAMMemberRequest.Validate if the designated constraints aren't met.
type UpdateIAMMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIAMMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIAMMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIAMMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIAMMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIAMMemberRequestValidationError) ErrorName() string {
	return "UpdateIAMMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIAMMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIAMMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIAMMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIAMMemberRequestValidationError{}

// Validate checks the field values on UpdateIAMMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateIAMMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateIAMMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateIAMMemberResponseValidationError is the validation error returned by
// UpdateIAMMemberResponse.Validate if the designated constraints aren't met.
type UpdateIAMMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateIAMMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateIAMMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateIAMMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateIAMMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateIAMMemberResponseValidationError) ErrorName() string {
	return "UpdateIAMMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateIAMMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateIAMMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateIAMMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateIAMMemberResponseValidationError{}

// Validate checks the field values on RemoveIAMMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveIAMMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveIAMMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveIAMMemberRequestValidationError is the validation error returned by
// RemoveIAMMemberRequest.Validate if the designated constraints aren't met.
type RemoveIAMMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIAMMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIAMMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIAMMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIAMMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIAMMemberRequestValidationError) ErrorName() string {
	return "RemoveIAMMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIAMMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIAMMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIAMMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIAMMemberRequestValidationError{}

// Validate checks the field values on RemoveIAMMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveIAMMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveIAMMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveIAMMemberResponseValidationError is the validation error returned by
// RemoveIAMMemberResponse.Validate if the designated constraints aren't met.
type RemoveIAMMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIAMMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIAMMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIAMMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIAMMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIAMMemberResponseValidationError) ErrorName() string {
	return "RemoveIAMMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIAMMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIAMMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIAMMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIAMMemberResponseValidationError{}

// Validate checks the field values on ListIAMMemberRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIAMMemberRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListIAMMemberRolesRequestValidationError is the validation error returned by
// ListIAMMemberRolesRequest.Validate if the designated constraints aren't met.
type ListIAMMemberRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIAMMemberRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIAMMemberRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIAMMemberRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIAMMemberRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIAMMemberRolesRequestValidationError) ErrorName() string {
	return "ListIAMMemberRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIAMMemberRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIAMMemberRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIAMMemberRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIAMMemberRolesRequestValidationError{}

// Validate checks the field values on ListIAMMemberRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIAMMemberRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIAMMemberRolesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListIAMMemberRolesResponseValidationError is the validation error returned
// by ListIAMMemberRolesResponse.Validate if the designated constraints aren't met.
type ListIAMMemberRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIAMMemberRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIAMMemberRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIAMMemberRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIAMMemberRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIAMMemberRolesResponseValidationError) ErrorName() string {
	return "ListIAMMemberRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIAMMemberRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIAMMemberRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIAMMemberRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIAMMemberRolesResponseValidationError{}

// Validate checks the field values on ListIAMMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIAMMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIAMMembersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIAMMembersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListIAMMembersRequestValidationError is the validation error returned by
// ListIAMMembersRequest.Validate if the designated constraints aren't met.
type ListIAMMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIAMMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIAMMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIAMMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIAMMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIAMMembersRequestValidationError) ErrorName() string {
	return "ListIAMMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListIAMMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIAMMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIAMMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIAMMembersRequestValidationError{}

// Validate checks the field values on ListIAMMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListIAMMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListIAMMembersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListIAMMembersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListIAMMembersResponseValidationError is the validation error returned by
// ListIAMMembersResponse.Validate if the designated constraints aren't met.
type ListIAMMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListIAMMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListIAMMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListIAMMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListIAMMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListIAMMembersResponseValidationError) ErrorName() string {
	return "ListIAMMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListIAMMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListIAMMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListIAMMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListIAMMembersResponseValidationError{}

// Validate checks the field values on ListViewsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListViewsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListViewsRequestValidationError is the validation error returned by
// ListViewsRequest.Validate if the designated constraints aren't met.
type ListViewsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsRequestValidationError) ErrorName() string { return "ListViewsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListViewsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsRequestValidationError{}

// Validate checks the field values on ListViewsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListViewsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListViewsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListViewsResponseValidationError is the validation error returned by
// ListViewsResponse.Validate if the designated constraints aren't met.
type ListViewsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListViewsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListViewsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListViewsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListViewsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListViewsResponseValidationError) ErrorName() string {
	return "ListViewsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListViewsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListViewsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListViewsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListViewsResponseValidationError{}

// Validate checks the field values on ListFailedEventsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFailedEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListFailedEventsRequestValidationError is the validation error returned by
// ListFailedEventsRequest.Validate if the designated constraints aren't met.
type ListFailedEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedEventsRequestValidationError) ErrorName() string {
	return "ListFailedEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedEventsRequestValidationError{}

// Validate checks the field values on ListFailedEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFailedEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFailedEventsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListFailedEventsResponseValidationError is the validation error returned by
// ListFailedEventsResponse.Validate if the designated constraints aren't met.
type ListFailedEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFailedEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFailedEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFailedEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFailedEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFailedEventsResponseValidationError) ErrorName() string {
	return "ListFailedEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFailedEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFailedEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFailedEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFailedEventsResponseValidationError{}

// Validate checks the field values on RemoveFailedEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFailedEventRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDatabase()); l < 1 || l > 200 {
		return RemoveFailedEventRequestValidationError{
			field:  "Database",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetViewName()); l < 1 || l > 200 {
		return RemoveFailedEventRequestValidationError{
			field:  "ViewName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for FailedSequence

	return nil
}

// RemoveFailedEventRequestValidationError is the validation error returned by
// RemoveFailedEventRequest.Validate if the designated constraints aren't met.
type RemoveFailedEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFailedEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFailedEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFailedEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFailedEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFailedEventRequestValidationError) ErrorName() string {
	return "RemoveFailedEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFailedEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFailedEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFailedEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFailedEventRequestValidationError{}

// Validate checks the field values on RemoveFailedEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveFailedEventResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveFailedEventResponseValidationError is the validation error returned by
// RemoveFailedEventResponse.Validate if the designated constraints aren't met.
type RemoveFailedEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveFailedEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveFailedEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveFailedEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveFailedEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveFailedEventResponseValidationError) ErrorName() string {
	return "RemoveFailedEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveFailedEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveFailedEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveFailedEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveFailedEventResponseValidationError{}

// Validate checks the field values on View with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *View) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Database

	// no validation rules for ViewName

	// no validation rules for ProcessedSequence

	if v, ok := interface{}(m.GetEventTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "EventTimestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLastSuccessfulSpoolerRun()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ViewValidationError{
				field:  "LastSuccessfulSpoolerRun",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ViewValidationError is the validation error returned by View.Validate if the
// designated constraints aren't met.
type ViewValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ViewValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ViewValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ViewValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ViewValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ViewValidationError) ErrorName() string { return "ViewValidationError" }

// Error satisfies the builtin error interface
func (e ViewValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sView.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ViewValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ViewValidationError{}

// Validate checks the field values on FailedEvent with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *FailedEvent) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Database

	// no validation rules for ViewName

	// no validation rules for FailedSequence

	// no validation rules for FailureCount

	// no validation rules for ErrorMessage

	if v, ok := interface{}(m.GetLastFailed()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FailedEventValidationError{
				field:  "LastFailed",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// FailedEventValidationError is the validation error returned by
// FailedEvent.Validate if the designated constraints aren't met.
type FailedEventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FailedEventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FailedEventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FailedEventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FailedEventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FailedEventValidationError) ErrorName() string { return "FailedEventValidationError" }

// Error satisfies the builtin error interface
func (e FailedEventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFailedEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FailedEventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FailedEventValidationError{}

// Validate checks the field values on ImportDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ImportDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Timeout

	switch m.Data.(type) {

	case *ImportDataRequest_DataOrgs:

		if v, ok := interface{}(m.GetDataOrgs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsv1:

		if v, ok := interface{}(m.GetDataOrgsv1()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsv1",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsLocal:

		if v, ok := interface{}(m.GetDataOrgsLocal()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsLocal",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsv1Local:

		if v, ok := interface{}(m.GetDataOrgsv1Local()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsv1Local",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsS3:

		if v, ok := interface{}(m.GetDataOrgsS3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsS3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsv1S3:

		if v, ok := interface{}(m.GetDataOrgsv1S3()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsv1S3",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsGcs:

		if v, ok := interface{}(m.GetDataOrgsGcs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsGcs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ImportDataRequest_DataOrgsv1Gcs:

		if v, ok := interface{}(m.GetDataOrgsv1Gcs()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataRequestValidationError{
					field:  "DataOrgsv1Gcs",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportDataRequestValidationError is the validation error returned by
// ImportDataRequest.Validate if the designated constraints aren't met.
type ImportDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataRequestValidationError) ErrorName() string {
	return "ImportDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataRequestValidationError{}

// Validate checks the field values on ImportDataOrg with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ImportDataOrg) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataOrgValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportDataOrgValidationError is the validation error returned by
// ImportDataOrg.Validate if the designated constraints aren't met.
type ImportDataOrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataOrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataOrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataOrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataOrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataOrgValidationError) ErrorName() string { return "ImportDataOrgValidationError" }

// Error satisfies the builtin error interface
func (e ImportDataOrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataOrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataOrgValidationError{}

// Validate checks the field values on DataOrg with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *DataOrg) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrgId

	if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetDomainPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "DomainPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLabelPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "LabelPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLockoutPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "LockoutPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLoginPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "LoginPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordComplexityPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "PasswordComplexityPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPrivacyPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DataOrgValidationError{
				field:  "PrivacyPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("ProjectRoles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetApiApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("ApiApps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOidcApps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("OidcApps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetHumanUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("HumanUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMachineUsers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("MachineUsers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetTriggerActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("TriggerActions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectGrants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("ProjectGrants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserGrants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("UserGrants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOrgMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("OrgMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("ProjectMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectGrantMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("ProjectGrantMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("UserMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLoginTexts() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("LoginTexts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInitMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("InitMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPasswordResetMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("PasswordResetMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVerifyEmailMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("VerifyEmailMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVerifyPhoneMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("VerifyPhoneMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDomainClaimedMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("DomainClaimedMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetPasswordlessRegistrationMessages() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("PasswordlessRegistrationMessages[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetOidcIdps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("OidcIdps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetJwtIdps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("JwtIdps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserLinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("UserLinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAppKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("AppKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetMachineKeys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DataOrgValidationError{
					field:  fmt.Sprintf("MachineKeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// DataOrgValidationError is the validation error returned by DataOrg.Validate
// if the designated constraints aren't met.
type DataOrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DataOrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DataOrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DataOrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DataOrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DataOrgValidationError) ErrorName() string { return "DataOrgValidationError" }

// Error satisfies the builtin error interface
func (e DataOrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDataOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DataOrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DataOrgValidationError{}

// Validate checks the field values on ImportDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if v, ok := interface{}(m.GetSuccess()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportDataResponseValidationError{
				field:  "Success",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ImportDataResponseValidationError is the validation error returned by
// ImportDataResponse.Validate if the designated constraints aren't met.
type ImportDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataResponseValidationError) ErrorName() string {
	return "ImportDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataResponseValidationError{}

// Validate checks the field values on ImportDataError with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ImportDataError) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	// no validation rules for Id

	// no validation rules for Message

	return nil
}

// ImportDataErrorValidationError is the validation error returned by
// ImportDataError.Validate if the designated constraints aren't met.
type ImportDataErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataErrorValidationError) ErrorName() string { return "ImportDataErrorValidationError" }

// Error satisfies the builtin error interface
func (e ImportDataErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataErrorValidationError{}

// Validate checks the field values on ImportDataSuccess with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ImportDataSuccess) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportDataSuccessValidationError is the validation error returned by
// ImportDataSuccess.Validate if the designated constraints aren't met.
type ImportDataSuccessValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessValidationError) ErrorName() string {
	return "ImportDataSuccessValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccess.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessValidationError{}

// Validate checks the field values on ImportDataSuccessOrg with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataSuccessOrg) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for OrgId

	for idx, item := range m.GetTriggerActions() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("TriggerActions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectGrants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("ProjectGrants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserGrants() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("UserGrants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("ProjectMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetProjectGrantMembers() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("ProjectGrantMembers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserLinks() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("UserLinks[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetUserMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportDataSuccessOrgValidationError{
					field:  fmt.Sprintf("UserMetadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportDataSuccessOrgValidationError is the validation error returned by
// ImportDataSuccessOrg.Validate if the designated constraints aren't met.
type ImportDataSuccessOrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessOrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessOrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessOrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessOrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessOrgValidationError) ErrorName() string {
	return "ImportDataSuccessOrgValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessOrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessOrg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessOrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessOrgValidationError{}

// Validate checks the field values on ImportDataSuccessProjectGrant with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataSuccessProjectGrant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GrantId

	// no validation rules for ProjectId

	// no validation rules for OrgId

	return nil
}

// ImportDataSuccessProjectGrantValidationError is the validation error
// returned by ImportDataSuccessProjectGrant.Validate if the designated
// constraints aren't met.
type ImportDataSuccessProjectGrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessProjectGrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessProjectGrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessProjectGrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessProjectGrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessProjectGrantValidationError) ErrorName() string {
	return "ImportDataSuccessProjectGrantValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessProjectGrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessProjectGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessProjectGrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessProjectGrantValidationError{}

// Validate checks the field values on ImportDataSuccessUserGrant with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataSuccessUserGrant) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for UserId

	return nil
}

// ImportDataSuccessUserGrantValidationError is the validation error returned
// by ImportDataSuccessUserGrant.Validate if the designated constraints aren't met.
type ImportDataSuccessUserGrantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessUserGrantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessUserGrantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessUserGrantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessUserGrantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessUserGrantValidationError) ErrorName() string {
	return "ImportDataSuccessUserGrantValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessUserGrantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessUserGrant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessUserGrantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessUserGrantValidationError{}

// Validate checks the field values on ImportDataSuccessProjectMember with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataSuccessProjectMember) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for UserId

	return nil
}

// ImportDataSuccessProjectMemberValidationError is the validation error
// returned by ImportDataSuccessProjectMember.Validate if the designated
// constraints aren't met.
type ImportDataSuccessProjectMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessProjectMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessProjectMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessProjectMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessProjectMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessProjectMemberValidationError) ErrorName() string {
	return "ImportDataSuccessProjectMemberValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessProjectMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessProjectMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessProjectMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessProjectMemberValidationError{}

// Validate checks the field values on ImportDataSuccessProjectGrantMember with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ImportDataSuccessProjectGrantMember) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ProjectId

	// no validation rules for GrantId

	// no validation rules for UserId

	return nil
}

// ImportDataSuccessProjectGrantMemberValidationError is the validation error
// returned by ImportDataSuccessProjectGrantMember.Validate if the designated
// constraints aren't met.
type ImportDataSuccessProjectGrantMemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessProjectGrantMemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessProjectGrantMemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessProjectGrantMemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessProjectGrantMemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessProjectGrantMemberValidationError) ErrorName() string {
	return "ImportDataSuccessProjectGrantMemberValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessProjectGrantMemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessProjectGrantMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessProjectGrantMemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessProjectGrantMemberValidationError{}

// Validate checks the field values on ImportDataSuccessUserLinks with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataSuccessUserLinks) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for ExternalUserId

	// no validation rules for DisplayName

	// no validation rules for IdpId

	return nil
}

// ImportDataSuccessUserLinksValidationError is the validation error returned
// by ImportDataSuccessUserLinks.Validate if the designated constraints aren't met.
type ImportDataSuccessUserLinksValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessUserLinksValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessUserLinksValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessUserLinksValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessUserLinksValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessUserLinksValidationError) ErrorName() string {
	return "ImportDataSuccessUserLinksValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessUserLinksValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessUserLinks.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessUserLinksValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessUserLinksValidationError{}

// Validate checks the field values on ImportDataSuccessUserMetadata with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataSuccessUserMetadata) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	// no validation rules for Key

	return nil
}

// ImportDataSuccessUserMetadataValidationError is the validation error
// returned by ImportDataSuccessUserMetadata.Validate if the designated
// constraints aren't met.
type ImportDataSuccessUserMetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataSuccessUserMetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataSuccessUserMetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataSuccessUserMetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataSuccessUserMetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataSuccessUserMetadataValidationError) ErrorName() string {
	return "ImportDataSuccessUserMetadataValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataSuccessUserMetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataSuccessUserMetadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataSuccessUserMetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataSuccessUserMetadataValidationError{}

// Validate checks the field values on ExportDataRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ExportDataRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for WithPasswords

	// no validation rules for WithOtp

	// no validation rules for ResponseOutput

	if v, ok := interface{}(m.GetLocalOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportDataRequestValidationError{
				field:  "LocalOutput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetS3Output()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportDataRequestValidationError{
				field:  "S3Output",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetGcsOutput()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ExportDataRequestValidationError{
				field:  "GcsOutput",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Timeout

	return nil
}

// ExportDataRequestValidationError is the validation error returned by
// ExportDataRequest.Validate if the designated constraints aren't met.
type ExportDataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataRequestValidationError) ErrorName() string {
	return "ExportDataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataRequestValidationError{}

// Validate checks the field values on ExportDataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExportDataResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetOrgs() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExportDataResponseValidationError{
					field:  fmt.Sprintf("Orgs[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ExportDataResponseValidationError is the validation error returned by
// ExportDataResponse.Validate if the designated constraints aren't met.
type ExportDataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataResponseValidationError) ErrorName() string {
	return "ExportDataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataResponseValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListEventsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Sequence

	// no validation rules for Limit

	// no validation rules for Asc

	if l := utf8.RuneCountInString(m.GetEditorUserId()); l < 0 || l > 200 {
		return ListEventsRequestValidationError{
			field:  "EditorUserId",
			reason: "value length must be between 0 and 200 runes, inclusive",
		}
	}

	if len(m.GetEventTypes()) > 30 {
		return ListEventsRequestValidationError{
			field:  "EventTypes",
			reason: "value must contain no more than 30 item(s)",
		}
	}

	if l := utf8.RuneCountInString(m.GetAggregateId()); l < 0 || l > 200 {
		return ListEventsRequestValidationError{
			field:  "AggregateId",
			reason: "value length must be between 0 and 200 runes, inclusive",
		}
	}

	if len(m.GetAggregateTypes()) > 10 {
		return ListEventsRequestValidationError{
			field:  "AggregateTypes",
			reason: "value must contain no more than 10 item(s)",
		}
	}

	if l := utf8.RuneCountInString(m.GetResourceOwner()); l < 0 || l > 200 {
		return ListEventsRequestValidationError{
			field:  "ResourceOwner",
			reason: "value length must be between 0 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetCreationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListEventsRequestValidationError{
				field:  "CreationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEventsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEventsResponseValidationError is the validation error returned by
// ListEventsResponse.Validate if the designated constraints aren't met.
type ListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponseValidationError) ErrorName() string {
	return "ListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponseValidationError{}

// Validate checks the field values on ListEventTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEventTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListEventTypesRequestValidationError is the validation error returned by
// ListEventTypesRequest.Validate if the designated constraints aren't met.
type ListEventTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventTypesRequestValidationError) ErrorName() string {
	return "ListEventTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventTypesRequestValidationError{}

// Validate checks the field values on ListEventTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListEventTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetEventTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListEventTypesResponseValidationError{
					field:  fmt.Sprintf("EventTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListEventTypesResponseValidationError is the validation error returned by
// ListEventTypesResponse.Validate if the designated constraints aren't met.
type ListEventTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventTypesResponseValidationError) ErrorName() string {
	return "ListEventTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventTypesResponseValidationError{}

// Validate checks the field values on ListAggregateTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregateTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListAggregateTypesRequestValidationError is the validation error returned by
// ListAggregateTypesRequest.Validate if the designated constraints aren't met.
type ListAggregateTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregateTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregateTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregateTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregateTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregateTypesRequestValidationError) ErrorName() string {
	return "ListAggregateTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregateTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregateTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregateTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregateTypesRequestValidationError{}

// Validate checks the field values on ListAggregateTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAggregateTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetAggregateTypes() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAggregateTypesResponseValidationError{
					field:  fmt.Sprintf("AggregateTypes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAggregateTypesResponseValidationError is the validation error returned
// by ListAggregateTypesResponse.Validate if the designated constraints aren't met.
type ListAggregateTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAggregateTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAggregateTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAggregateTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAggregateTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAggregateTypesResponseValidationError) ErrorName() string {
	return "ListAggregateTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAggregateTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAggregateTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAggregateTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAggregateTypesResponseValidationError{}

// Validate checks the field values on SetUpOrgRequest_Org with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpOrgRequest_Org) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return SetUpOrgRequest_OrgValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDomain()) > 200 {
		return SetUpOrgRequest_OrgValidationError{
			field:  "Domain",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetUpOrgRequest_OrgValidationError is the validation error returned by
// SetUpOrgRequest_Org.Validate if the designated constraints aren't met.
type SetUpOrgRequest_OrgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgRequest_OrgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgRequest_OrgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgRequest_OrgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgRequest_OrgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgRequest_OrgValidationError) ErrorName() string {
	return "SetUpOrgRequest_OrgValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpOrgRequest_OrgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgRequest_Org.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgRequest_OrgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgRequest_OrgValidationError{}

// Validate checks the field values on SetUpOrgRequest_Human with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpOrgRequest_Human) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 1 || l > 200 {
		return SetUpOrgRequest_HumanValidationError{
			field:  "UserName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if m.GetProfile() == nil {
		return SetUpOrgRequest_HumanValidationError{
			field:  "Profile",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUpOrgRequest_HumanValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEmail() == nil {
		return SetUpOrgRequest_HumanValidationError{
			field:  "Email",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUpOrgRequest_HumanValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUpOrgRequest_HumanValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	return nil
}

// SetUpOrgRequest_HumanValidationError is the validation error returned by
// SetUpOrgRequest_Human.Validate if the designated constraints aren't met.
type SetUpOrgRequest_HumanValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgRequest_HumanValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgRequest_HumanValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgRequest_HumanValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgRequest_HumanValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgRequest_HumanValidationError) ErrorName() string {
	return "SetUpOrgRequest_HumanValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpOrgRequest_HumanValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgRequest_Human.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgRequest_HumanValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgRequest_HumanValidationError{}

// Validate checks the field values on SetUpOrgRequest_Human_Profile with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpOrgRequest_Human_Profile) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 200 {
		return SetUpOrgRequest_Human_ProfileValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 200 {
		return SetUpOrgRequest_Human_ProfileValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetNickName()) > 200 {
		return SetUpOrgRequest_Human_ProfileValidationError{
			field:  "NickName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 200 {
		return SetUpOrgRequest_Human_ProfileValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return SetUpOrgRequest_Human_ProfileValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	// no validation rules for Gender

	return nil
}

// SetUpOrgRequest_Human_ProfileValidationError is the validation error
// returned by SetUpOrgRequest_Human_Profile.Validate if the designated
// constraints aren't met.
type SetUpOrgRequest_Human_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgRequest_Human_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgRequest_Human_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgRequest_Human_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgRequest_Human_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgRequest_Human_ProfileValidationError) ErrorName() string {
	return "SetUpOrgRequest_Human_ProfileValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpOrgRequest_Human_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgRequest_Human_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgRequest_Human_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgRequest_Human_ProfileValidationError{}

// Validate checks the field values on SetUpOrgRequest_Human_Email with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpOrgRequest_Human_Email) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return SetUpOrgRequest_Human_EmailValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	// no validation rules for IsEmailVerified

	return nil
}

func (m *SetUpOrgRequest_Human_Email) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetUpOrgRequest_Human_Email) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetUpOrgRequest_Human_EmailValidationError is the validation error returned
// by SetUpOrgRequest_Human_Email.Validate if the designated constraints
// aren't met.
type SetUpOrgRequest_Human_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgRequest_Human_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgRequest_Human_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgRequest_Human_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgRequest_Human_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgRequest_Human_EmailValidationError) ErrorName() string {
	return "SetUpOrgRequest_Human_EmailValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpOrgRequest_Human_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgRequest_Human_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgRequest_Human_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgRequest_Human_EmailValidationError{}

// Validate checks the field values on SetUpOrgRequest_Human_Phone with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUpOrgRequest_Human_Phone) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 50 {
		return SetUpOrgRequest_Human_PhoneValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetPhone(), "+") {
		return SetUpOrgRequest_Human_PhoneValidationError{
			field:  "Phone",
			reason: "value does not have prefix \"+\"",
		}
	}

	// no validation rules for IsPhoneVerified

	return nil
}

// SetUpOrgRequest_Human_PhoneValidationError is the validation error returned
// by SetUpOrgRequest_Human_Phone.Validate if the designated constraints
// aren't met.
type SetUpOrgRequest_Human_PhoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUpOrgRequest_Human_PhoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUpOrgRequest_Human_PhoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUpOrgRequest_Human_PhoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUpOrgRequest_Human_PhoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUpOrgRequest_Human_PhoneValidationError) ErrorName() string {
	return "SetUpOrgRequest_Human_PhoneValidationError"
}

// Error satisfies the builtin error interface
func (e SetUpOrgRequest_Human_PhoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUpOrgRequest_Human_Phone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUpOrgRequest_Human_PhoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUpOrgRequest_Human_PhoneValidationError{}

// Validate checks the field values on ImportDataRequest_LocalInput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataRequest_LocalInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	return nil
}

// ImportDataRequest_LocalInputValidationError is the validation error returned
// by ImportDataRequest_LocalInput.Validate if the designated constraints
// aren't met.
type ImportDataRequest_LocalInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataRequest_LocalInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataRequest_LocalInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataRequest_LocalInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataRequest_LocalInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataRequest_LocalInputValidationError) ErrorName() string {
	return "ImportDataRequest_LocalInputValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataRequest_LocalInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataRequest_LocalInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataRequest_LocalInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataRequest_LocalInputValidationError{}

// Validate checks the field values on ImportDataRequest_S3Input with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataRequest_S3Input) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	// no validation rules for Endpoint

	// no validation rules for AccessKeyId

	// no validation rules for SecretAccessKey

	// no validation rules for Ssl

	// no validation rules for Bucket

	return nil
}

// ImportDataRequest_S3InputValidationError is the validation error returned by
// ImportDataRequest_S3Input.Validate if the designated constraints aren't met.
type ImportDataRequest_S3InputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataRequest_S3InputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataRequest_S3InputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataRequest_S3InputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataRequest_S3InputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataRequest_S3InputValidationError) ErrorName() string {
	return "ImportDataRequest_S3InputValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataRequest_S3InputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataRequest_S3Input.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataRequest_S3InputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataRequest_S3InputValidationError{}

// Validate checks the field values on ImportDataRequest_GCSInput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportDataRequest_GCSInput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Bucket

	// no validation rules for ServiceaccountJson

	// no validation rules for Path

	return nil
}

// ImportDataRequest_GCSInputValidationError is the validation error returned
// by ImportDataRequest_GCSInput.Validate if the designated constraints aren't met.
type ImportDataRequest_GCSInputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportDataRequest_GCSInputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportDataRequest_GCSInputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportDataRequest_GCSInputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportDataRequest_GCSInputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportDataRequest_GCSInputValidationError) ErrorName() string {
	return "ImportDataRequest_GCSInputValidationError"
}

// Error satisfies the builtin error interface
func (e ImportDataRequest_GCSInputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportDataRequest_GCSInput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportDataRequest_GCSInputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportDataRequest_GCSInputValidationError{}

// Validate checks the field values on ExportDataRequest_LocalOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExportDataRequest_LocalOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	return nil
}

// ExportDataRequest_LocalOutputValidationError is the validation error
// returned by ExportDataRequest_LocalOutput.Validate if the designated
// constraints aren't met.
type ExportDataRequest_LocalOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataRequest_LocalOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataRequest_LocalOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataRequest_LocalOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataRequest_LocalOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataRequest_LocalOutputValidationError) ErrorName() string {
	return "ExportDataRequest_LocalOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataRequest_LocalOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataRequest_LocalOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataRequest_LocalOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataRequest_LocalOutputValidationError{}

// Validate checks the field values on ExportDataRequest_S3Output with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExportDataRequest_S3Output) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Path

	// no validation rules for Endpoint

	// no validation rules for AccessKeyId

	// no validation rules for SecretAccessKey

	// no validation rules for Ssl

	// no validation rules for Bucket

	return nil
}

// ExportDataRequest_S3OutputValidationError is the validation error returned
// by ExportDataRequest_S3Output.Validate if the designated constraints aren't met.
type ExportDataRequest_S3OutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataRequest_S3OutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataRequest_S3OutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataRequest_S3OutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataRequest_S3OutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataRequest_S3OutputValidationError) ErrorName() string {
	return "ExportDataRequest_S3OutputValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataRequest_S3OutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataRequest_S3Output.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataRequest_S3OutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataRequest_S3OutputValidationError{}

// Validate checks the field values on ExportDataRequest_GCSOutput with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ExportDataRequest_GCSOutput) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Bucket

	// no validation rules for ServiceaccountJson

	// no validation rules for Path

	return nil
}

// ExportDataRequest_GCSOutputValidationError is the validation error returned
// by ExportDataRequest_GCSOutput.Validate if the designated constraints
// aren't met.
type ExportDataRequest_GCSOutputValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExportDataRequest_GCSOutputValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExportDataRequest_GCSOutputValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExportDataRequest_GCSOutputValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExportDataRequest_GCSOutputValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExportDataRequest_GCSOutputValidationError) ErrorName() string {
	return "ExportDataRequest_GCSOutputValidationError"
}

// Error satisfies the builtin error interface
func (e ExportDataRequest_GCSOutputValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExportDataRequest_GCSOutput.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExportDataRequest_GCSOutputValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExportDataRequest_GCSOutputValidationError{}
