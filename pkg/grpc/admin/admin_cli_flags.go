// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package admin

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	event "github.com/zitadel/zitadel/pkg/grpc/event"
	idp "github.com/zitadel/zitadel/pkg/grpc/idp"
	instance "github.com/zitadel/zitadel/pkg/grpc/instance"
	management "github.com/zitadel/zitadel/pkg/grpc/management"
	member "github.com/zitadel/zitadel/pkg/grpc/member"
	milestone "github.com/zitadel/zitadel/pkg/grpc/milestone"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	org "github.com/zitadel/zitadel/pkg/grpc/org"
	policy "github.com/zitadel/zitadel/pkg/grpc/policy"
	settings "github.com/zitadel/zitadel/pkg/grpc/settings"
	text "github.com/zitadel/zitadel/pkg/grpc/text"
	user "github.com/zitadel/zitadel/pkg/grpc/user"
	v1 "github.com/zitadel/zitadel/pkg/grpc/v1"
	os "os"
)

type ActivateFeatureLoginDefaultOrgRequestFlag struct {
	*ActivateFeatureLoginDefaultOrgRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ActivateFeatureLoginDefaultOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateFeatureLoginDefaultOrgRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ActivateFeatureLoginDefaultOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ActivateFeatureLoginDefaultOrgRequestFlag) Changed() bool {
	return x.changed
}

type ActivateFeatureLoginDefaultOrgResponseFlag struct {
	*ActivateFeatureLoginDefaultOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ActivateFeatureLoginDefaultOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateFeatureLoginDefaultOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ActivateFeatureLoginDefaultOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ActivateFeatureLoginDefaultOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ActivateFeatureLoginDefaultOrgResponseFlag) Changed() bool {
	return x.changed
}

type ActivateLabelPolicyRequestFlag struct {
	*ActivateLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ActivateLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ActivateLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ActivateLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type ActivateLabelPolicyResponseFlag struct {
	*ActivateLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ActivateLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateLabelPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ActivateLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ActivateLabelPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ActivateLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type ActivateSMSProviderRequestFlag struct {
	*ActivateSMSProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *ActivateSMSProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateSMSProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *ActivateSMSProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.ActivateSMSProviderRequest.Id = *x.idFlag.Value
	}
}

func (x *ActivateSMSProviderRequestFlag) Changed() bool {
	return x.changed
}

type ActivateSMSProviderResponseFlag struct {
	*ActivateSMSProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ActivateSMSProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateSMSProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ActivateSMSProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ActivateSMSProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ActivateSMSProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddAppleProviderRequestFlag struct {
	*AddAppleProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	teamIdFlag          *cli_client.StringParser
	keyIdFlag           *cli_client.StringParser
	privateKeyFlag      *cli_client.BytesParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddAppleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAppleProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.teamIdFlag = cli_client.NewStringParser(x.set, "team-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.privateKeyFlag = cli_client.NewBytesParser(x.set, "private-key", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAppleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.teamIdFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.TeamId = *x.teamIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.KeyId = *x.keyIdFlag.Value
	}
	if x.privateKeyFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.PrivateKey = *x.privateKeyFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddAppleProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddAppleProviderResponseFlag struct {
	*AddAppleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddAppleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAppleProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAppleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddAppleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddAppleProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddAppleProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddAzureADProviderRequestFlag struct {
	*AddAzureADProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	tenantFlag          *idp.AzureADTenantFlag
	emailVerifiedFlag   *cli_client.BoolParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddAzureADProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAzureADProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.emailVerifiedFlag = cli_client.NewBoolParser(x.set, "email-verified", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.tenantFlag = &idp.AzureADTenantFlag{AzureADTenant: new(idp.AzureADTenant)}
	x.tenantFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAzureADProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "tenant", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("tenant"); flagIdx != nil {
		x.tenantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.tenantFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.Tenant = x.tenantFlag.AzureADTenant
	}

	if x.emailVerifiedFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.EmailVerified = *x.emailVerifiedFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddAzureADProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddAzureADProviderResponseFlag struct {
	*AddAzureADProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddAzureADProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAzureADProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAzureADProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddAzureADProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomDomainPolicyRequestFlag struct {
	*AddCustomDomainPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                                  *cli_client.StringParser
	userLoginMustBeDomainFlag                  *cli_client.BoolParser
	validateOrgDomainsFlag                     *cli_client.BoolParser
	smtpSenderAddressMatchesInstanceDomainFlag *cli_client.BoolParser
}

func (x *AddCustomDomainPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomDomainPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	x.validateOrgDomainsFlag = cli_client.NewBoolParser(x.set, "validate-org-domains", "")
	x.smtpSenderAddressMatchesInstanceDomainFlag = cli_client.NewBoolParser(x.set, "smtp-sender-address-matches-instance-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomDomainPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.AddCustomDomainPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.AddCustomDomainPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
	if x.validateOrgDomainsFlag.Changed() {
		x.changed = true
		x.AddCustomDomainPolicyRequest.ValidateOrgDomains = *x.validateOrgDomainsFlag.Value
	}
	if x.smtpSenderAddressMatchesInstanceDomainFlag.Changed() {
		x.changed = true
		x.AddCustomDomainPolicyRequest.SmtpSenderAddressMatchesInstanceDomain = *x.smtpSenderAddressMatchesInstanceDomainFlag.Value
	}
}

func (x *AddCustomDomainPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomDomainPolicyResponseFlag struct {
	*AddCustomDomainPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomDomainPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomDomainPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomDomainPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomDomainPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomDomainPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomOrgIAMPolicyRequestFlag struct {
	*AddCustomOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                 *cli_client.StringParser
	userLoginMustBeDomainFlag *cli_client.BoolParser
}

func (x *AddCustomOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomOrgIAMPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.AddCustomOrgIAMPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.AddCustomOrgIAMPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
}

func (x *AddCustomOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomOrgIAMPolicyResponseFlag struct {
	*AddCustomOrgIAMPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomOrgIAMPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomOrgIAMPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomOrgIAMPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomOrgIAMPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomOrgIAMPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddGenericOAuthProviderRequestFlag struct {
	*AddGenericOAuthProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag                  *cli_client.StringParser
	clientIdFlag              *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	idAttributeFlag           *cli_client.StringParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *AddGenericOAuthProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOAuthProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.idAttributeFlag = cli_client.NewStringParser(x.set, "id-attribute", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOAuthProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.Scopes = *x.scopesFlag.Value
	}
	if x.idAttributeFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.IdAttribute = *x.idAttributeFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGenericOAuthProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGenericOAuthProviderResponseFlag struct {
	*AddGenericOAuthProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGenericOAuthProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOAuthProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOAuthProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGenericOAuthProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGenericOIDCProviderRequestFlag struct {
	*AddGenericOIDCProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag             *cli_client.StringParser
	issuerFlag           *cli_client.StringParser
	clientIdFlag         *cli_client.StringParser
	clientSecretFlag     *cli_client.StringParser
	scopesFlag           *cli_client.StringSliceParser
	providerOptionsFlag  *idp.OptionsFlag
	isIdTokenMappingFlag *cli_client.BoolParser
}

func (x *AddGenericOIDCProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOIDCProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.isIdTokenMappingFlag = cli_client.NewBoolParser(x.set, "is-id-token-mapping", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOIDCProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	if x.isIdTokenMappingFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.IsIdTokenMapping = *x.isIdTokenMappingFlag.Value
	}
}

func (x *AddGenericOIDCProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGenericOIDCProviderResponseFlag struct {
	*AddGenericOIDCProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGenericOIDCProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOIDCProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOIDCProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGenericOIDCProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitHubEnterpriseServerProviderRequestFlag struct {
	*AddGitHubEnterpriseServerProviderRequest

	changed bool
	set     *pflag.FlagSet

	clientIdFlag              *cli_client.StringParser
	nameFlag                  *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *AddGitHubEnterpriseServerProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubEnterpriseServerProviderRequest", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubEnterpriseServerProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitHubEnterpriseServerProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitHubEnterpriseServerProviderResponseFlag struct {
	*AddGitHubEnterpriseServerProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitHubEnterpriseServerProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubEnterpriseServerProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubEnterpriseServerProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitHubEnterpriseServerProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitHubProviderRequestFlag struct {
	*AddGitHubProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGitHubProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitHubProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitHubProviderResponseFlag struct {
	*AddGitHubProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitHubProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitHubProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitLabProviderRequestFlag struct {
	*AddGitLabProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGitLabProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitLabProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitLabProviderResponseFlag struct {
	*AddGitLabProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitLabProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitLabProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitLabSelfHostedProviderRequestFlag struct {
	*AddGitLabSelfHostedProviderRequest

	changed bool
	set     *pflag.FlagSet

	issuerFlag          *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGitLabSelfHostedProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabSelfHostedProviderRequest", pflag.ContinueOnError)

	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabSelfHostedProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitLabSelfHostedProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitLabSelfHostedProviderResponseFlag struct {
	*AddGitLabSelfHostedProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitLabSelfHostedProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabSelfHostedProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabSelfHostedProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitLabSelfHostedProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGoogleProviderRequestFlag struct {
	*AddGoogleProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGoogleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGoogleProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGoogleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGoogleProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGoogleProviderResponseFlag struct {
	*AddGoogleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGoogleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGoogleProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGoogleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGoogleProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddIAMMemberRequestFlag struct {
	*AddIAMMemberRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	rolesFlag  *cli_client.StringSliceParser
}

func (x *AddIAMMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIAMMemberRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *AddIAMMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddIAMMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.AddIAMMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *AddIAMMemberRequestFlag) Changed() bool {
	return x.changed
}

type AddIAMMemberResponseFlag struct {
	*AddIAMMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddIAMMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIAMMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddIAMMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddIAMMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddIAMMemberResponseFlag) Changed() bool {
	return x.changed
}

type AddIDPToLoginPolicyRequestFlag struct {
	*AddIDPToLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *AddIDPToLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIDPToLoginPolicyRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *AddIDPToLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddIDPToLoginPolicyRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *AddIDPToLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddIDPToLoginPolicyResponseFlag struct {
	*AddIDPToLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddIDPToLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIDPToLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddIDPToLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddIDPToLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddIDPToLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddJWTIDPRequestFlag struct {
	*AddJWTIDPRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag         *cli_client.StringParser
	stylingTypeFlag  *cli_client.EnumParser[idp.IDPStylingType]
	jwtEndpointFlag  *cli_client.StringParser
	issuerFlag       *cli_client.StringParser
	keysEndpointFlag *cli_client.StringParser
	headerNameFlag   *cli_client.StringParser
	autoRegisterFlag *cli_client.BoolParser
}

func (x *AddJWTIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddJWTIDPRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[idp.IDPStylingType](x.set, "styling-type", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	parent.AddFlagSet(x.set)
}

func (x *AddJWTIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.StylingType = *x.stylingTypeFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.Issuer = *x.issuerFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.HeaderName = *x.headerNameFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.AddJWTIDPRequest.AutoRegister = *x.autoRegisterFlag.Value
	}
}

func (x *AddJWTIDPRequestFlag) Changed() bool {
	return x.changed
}

type AddJWTIDPResponseFlag struct {
	*AddJWTIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idpIdFlag   *cli_client.StringParser
}

func (x *AddJWTIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddJWTIDPResponse", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddJWTIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddJWTIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddJWTIDPResponse.IdpId = *x.idpIdFlag.Value
	}
}

func (x *AddJWTIDPResponseFlag) Changed() bool {
	return x.changed
}

type AddJWTProviderRequestFlag struct {
	*AddJWTProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	issuerFlag          *cli_client.StringParser
	jwtEndpointFlag     *cli_client.StringParser
	keysEndpointFlag    *cli_client.StringParser
	headerNameFlag      *cli_client.StringParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddJWTProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddJWTProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddJWTProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.HeaderName = *x.headerNameFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddJWTProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddJWTProviderResponseFlag struct {
	*AddJWTProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddJWTProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddJWTProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddJWTProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddJWTProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddJWTProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddJWTProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddLDAPProviderRequestFlag struct {
	*AddLDAPProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag              *cli_client.StringParser
	serversFlag           *cli_client.StringSliceParser
	startTlsFlag          *cli_client.BoolParser
	baseDnFlag            *cli_client.StringParser
	bindDnFlag            *cli_client.StringParser
	bindPasswordFlag      *cli_client.StringParser
	userBaseFlag          *cli_client.StringParser
	userObjectClassesFlag *cli_client.StringSliceParser
	userFiltersFlag       *cli_client.StringSliceParser
	timeoutFlag           *cli_client.DurationParser
	attributesFlag        *idp.LDAPAttributesFlag
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *AddLDAPProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddLDAPProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.serversFlag = cli_client.NewStringSliceParser(x.set, "servers", "")
	x.startTlsFlag = cli_client.NewBoolParser(x.set, "start-tls", "")
	x.baseDnFlag = cli_client.NewStringParser(x.set, "base-dn", "")
	x.bindDnFlag = cli_client.NewStringParser(x.set, "bind-dn", "")
	x.bindPasswordFlag = cli_client.NewStringParser(x.set, "bind-password", "")
	x.userBaseFlag = cli_client.NewStringParser(x.set, "user-base", "")
	x.userObjectClassesFlag = cli_client.NewStringSliceParser(x.set, "user-object-classes", "")
	x.userFiltersFlag = cli_client.NewStringSliceParser(x.set, "user-filters", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.attributesFlag = &idp.LDAPAttributesFlag{LDAPAttributes: new(idp.LDAPAttributes)}
	x.attributesFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddLDAPProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "attributes", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("attributes"); flagIdx != nil {
		x.attributesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Name = *x.nameFlag.Value
	}
	if x.serversFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Servers = *x.serversFlag.Value
	}
	if x.startTlsFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.StartTls = *x.startTlsFlag.Value
	}
	if x.baseDnFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.BaseDn = *x.baseDnFlag.Value
	}
	if x.bindDnFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.BindDn = *x.bindDnFlag.Value
	}
	if x.bindPasswordFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.BindPassword = *x.bindPasswordFlag.Value
	}
	if x.userBaseFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.UserBase = *x.userBaseFlag.Value
	}
	if x.userObjectClassesFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.UserObjectClasses = *x.userObjectClassesFlag.Value
	}
	if x.userFiltersFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.UserFilters = *x.userFiltersFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Timeout = x.timeoutFlag.Value
	}

	if x.attributesFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Attributes = x.attributesFlag.LDAPAttributes
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddLDAPProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddLDAPProviderResponseFlag struct {
	*AddLDAPProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddLDAPProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddLDAPProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddLDAPProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddLDAPProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddMultiFactorToLoginPolicyRequestFlag struct {
	*AddMultiFactorToLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.MultiFactorType]
}

func (x *AddMultiFactorToLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMultiFactorToLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.MultiFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *AddMultiFactorToLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.AddMultiFactorToLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *AddMultiFactorToLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddMultiFactorToLoginPolicyResponseFlag struct {
	*AddMultiFactorToLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMultiFactorToLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMultiFactorToLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMultiFactorToLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMultiFactorToLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMultiFactorToLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddNotificationPolicyRequestFlag struct {
	*AddNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet

	passwordChangeFlag *cli_client.BoolParser
}

func (x *AddNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddNotificationPolicyRequest", pflag.ContinueOnError)

	x.passwordChangeFlag = cli_client.NewBoolParser(x.set, "password-change", "")
	parent.AddFlagSet(x.set)
}

func (x *AddNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordChangeFlag.Changed() {
		x.changed = true
		x.AddNotificationPolicyRequest.PasswordChange = *x.passwordChangeFlag.Value
	}
}

func (x *AddNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddNotificationPolicyResponseFlag struct {
	*AddNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddNotificationPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddNotificationPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddOIDCIDPRequestFlag struct {
	*AddOIDCIDPRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag               *cli_client.StringParser
	stylingTypeFlag        *cli_client.EnumParser[idp.IDPStylingType]
	clientIdFlag           *cli_client.StringParser
	clientSecretFlag       *cli_client.StringParser
	issuerFlag             *cli_client.StringParser
	scopesFlag             *cli_client.StringSliceParser
	displayNameMappingFlag *cli_client.EnumParser[idp.OIDCMappingField]
	usernameMappingFlag    *cli_client.EnumParser[idp.OIDCMappingField]
	autoRegisterFlag       *cli_client.BoolParser
}

func (x *AddOIDCIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOIDCIDPRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[idp.IDPStylingType](x.set, "styling-type", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.displayNameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "display-name-mapping", "")
	x.usernameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "username-mapping", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOIDCIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.StylingType = *x.stylingTypeFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.Issuer = *x.issuerFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.Scopes = *x.scopesFlag.Value
	}
	if x.displayNameMappingFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.DisplayNameMapping = *x.displayNameMappingFlag.Value
	}
	if x.usernameMappingFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.UsernameMapping = *x.usernameMappingFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPRequest.AutoRegister = *x.autoRegisterFlag.Value
	}
}

func (x *AddOIDCIDPRequestFlag) Changed() bool {
	return x.changed
}

type AddOIDCIDPResponseFlag struct {
	*AddOIDCIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idpIdFlag   *cli_client.StringParser
}

func (x *AddOIDCIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOIDCIDPResponse", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOIDCIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddOIDCIDPResponse.IdpId = *x.idpIdFlag.Value
	}
}

func (x *AddOIDCIDPResponseFlag) Changed() bool {
	return x.changed
}

type AddOIDCSettingsRequestFlag struct {
	*AddOIDCSettingsRequest

	changed bool
	set     *pflag.FlagSet

	accessTokenLifetimeFlag        *cli_client.DurationParser
	idTokenLifetimeFlag            *cli_client.DurationParser
	refreshTokenIdleExpirationFlag *cli_client.DurationParser
	refreshTokenExpirationFlag     *cli_client.DurationParser
}

func (x *AddOIDCSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOIDCSettingsRequest", pflag.ContinueOnError)

	x.accessTokenLifetimeFlag = cli_client.NewDurationParser(x.set, "access-token-lifetime", "")
	x.idTokenLifetimeFlag = cli_client.NewDurationParser(x.set, "id-token-lifetime", "")
	x.refreshTokenIdleExpirationFlag = cli_client.NewDurationParser(x.set, "refresh-token-idle-expiration", "")
	x.refreshTokenExpirationFlag = cli_client.NewDurationParser(x.set, "refresh-token-expiration", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOIDCSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.accessTokenLifetimeFlag.Changed() {
		x.changed = true
		x.AddOIDCSettingsRequest.AccessTokenLifetime = x.accessTokenLifetimeFlag.Value
	}
	if x.idTokenLifetimeFlag.Changed() {
		x.changed = true
		x.AddOIDCSettingsRequest.IdTokenLifetime = x.idTokenLifetimeFlag.Value
	}
	if x.refreshTokenIdleExpirationFlag.Changed() {
		x.changed = true
		x.AddOIDCSettingsRequest.RefreshTokenIdleExpiration = x.refreshTokenIdleExpirationFlag.Value
	}
	if x.refreshTokenExpirationFlag.Changed() {
		x.changed = true
		x.AddOIDCSettingsRequest.RefreshTokenExpiration = x.refreshTokenExpirationFlag.Value
	}
}

func (x *AddOIDCSettingsRequestFlag) Changed() bool {
	return x.changed
}

type AddOIDCSettingsResponseFlag struct {
	*AddOIDCSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddOIDCSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOIDCSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOIDCSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOIDCSettingsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddOIDCSettingsResponseFlag) Changed() bool {
	return x.changed
}

type AddSAMLProviderRequestFlag struct {
	*AddSAMLProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag              *cli_client.StringParser
	metadataXmlFlag       *cli_client.BytesParser
	metadataUrlFlag       *cli_client.StringParser
	bindingFlag           *cli_client.EnumParser[idp.SAMLBinding]
	withSignedRequestFlag *cli_client.BoolParser
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *AddSAMLProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSAMLProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.metadataUrlFlag = cli_client.NewStringParser(x.set, "metadata-url", "")
	x.bindingFlag = cli_client.NewEnumParser[idp.SAMLBinding](x.set, "binding", "")
	x.withSignedRequestFlag = cli_client.NewBoolParser(x.set, "with-signed-request", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSAMLProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.Name = *x.nameFlag.Value
	}
	if x.bindingFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.Binding = *x.bindingFlag.Value
	}
	if x.withSignedRequestFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.WithSignedRequest = *x.withSignedRequestFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	switch cli_client.FieldIndexes(args, "metadata-xml", "metadata-url").Last().Flag {
	case "metadata-xml":
		if x.metadataXmlFlag.Changed() {
			x.changed = true
			x.AddSAMLProviderRequest.Metadata = &AddSAMLProviderRequest_MetadataXml{MetadataXml: *x.metadataXmlFlag.Value}
		}
	case "metadata-url":
		if x.metadataUrlFlag.Changed() {
			x.changed = true
			x.AddSAMLProviderRequest.Metadata = &AddSAMLProviderRequest_MetadataUrl{MetadataUrl: *x.metadataUrlFlag.Value}
		}
	}
}

func (x *AddSAMLProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddSAMLProviderResponseFlag struct {
	*AddSAMLProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddSAMLProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSAMLProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSAMLProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddSAMLProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddSMSProviderTwilioRequestFlag struct {
	*AddSMSProviderTwilioRequest

	changed bool
	set     *pflag.FlagSet

	sidFlag          *cli_client.StringParser
	tokenFlag        *cli_client.StringParser
	senderNumberFlag *cli_client.StringParser
}

func (x *AddSMSProviderTwilioRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSMSProviderTwilioRequest", pflag.ContinueOnError)

	x.sidFlag = cli_client.NewStringParser(x.set, "sid", "")
	x.tokenFlag = cli_client.NewStringParser(x.set, "token", "")
	x.senderNumberFlag = cli_client.NewStringParser(x.set, "sender-number", "")
	parent.AddFlagSet(x.set)
}

func (x *AddSMSProviderTwilioRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sidFlag.Changed() {
		x.changed = true
		x.AddSMSProviderTwilioRequest.Sid = *x.sidFlag.Value
	}
	if x.tokenFlag.Changed() {
		x.changed = true
		x.AddSMSProviderTwilioRequest.Token = *x.tokenFlag.Value
	}
	if x.senderNumberFlag.Changed() {
		x.changed = true
		x.AddSMSProviderTwilioRequest.SenderNumber = *x.senderNumberFlag.Value
	}
}

func (x *AddSMSProviderTwilioRequestFlag) Changed() bool {
	return x.changed
}

type AddSMSProviderTwilioResponseFlag struct {
	*AddSMSProviderTwilioResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddSMSProviderTwilioResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSMSProviderTwilioResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSMSProviderTwilioResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSMSProviderTwilioResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddSMSProviderTwilioResponse.Id = *x.idFlag.Value
	}
}

func (x *AddSMSProviderTwilioResponseFlag) Changed() bool {
	return x.changed
}

type AddSMTPConfigRequestFlag struct {
	*AddSMTPConfigRequest

	changed bool
	set     *pflag.FlagSet

	senderAddressFlag  *cli_client.StringParser
	senderNameFlag     *cli_client.StringParser
	tlsFlag            *cli_client.BoolParser
	hostFlag           *cli_client.StringParser
	userFlag           *cli_client.StringParser
	passwordFlag       *cli_client.StringParser
	replyToAddressFlag *cli_client.StringParser
}

func (x *AddSMTPConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSMTPConfigRequest", pflag.ContinueOnError)

	x.senderAddressFlag = cli_client.NewStringParser(x.set, "sender-address", "")
	x.senderNameFlag = cli_client.NewStringParser(x.set, "sender-name", "")
	x.tlsFlag = cli_client.NewBoolParser(x.set, "tls", "")
	x.hostFlag = cli_client.NewStringParser(x.set, "host", "")
	x.userFlag = cli_client.NewStringParser(x.set, "user", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.replyToAddressFlag = cli_client.NewStringParser(x.set, "reply-to-address", "")
	parent.AddFlagSet(x.set)
}

func (x *AddSMTPConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.senderAddressFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.SenderAddress = *x.senderAddressFlag.Value
	}
	if x.senderNameFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.SenderName = *x.senderNameFlag.Value
	}
	if x.tlsFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.Tls = *x.tlsFlag.Value
	}
	if x.hostFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.Host = *x.hostFlag.Value
	}
	if x.userFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.User = *x.userFlag.Value
	}
	if x.passwordFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.Password = *x.passwordFlag.Value
	}
	if x.replyToAddressFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigRequest.ReplyToAddress = *x.replyToAddressFlag.Value
	}
}

func (x *AddSMTPConfigRequestFlag) Changed() bool {
	return x.changed
}

type AddSMTPConfigResponseFlag struct {
	*AddSMTPConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddSMTPConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSMTPConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSMTPConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSMTPConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddSMTPConfigResponseFlag) Changed() bool {
	return x.changed
}

type AddSecondFactorToLoginPolicyRequestFlag struct {
	*AddSecondFactorToLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.SecondFactorType]
}

func (x *AddSecondFactorToLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSecondFactorToLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.SecondFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *AddSecondFactorToLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.AddSecondFactorToLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *AddSecondFactorToLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddSecondFactorToLoginPolicyResponseFlag struct {
	*AddSecondFactorToLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddSecondFactorToLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSecondFactorToLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSecondFactorToLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSecondFactorToLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddSecondFactorToLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type DataOrgFlag struct {
	*DataOrg

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                            *cli_client.StringParser
	orgFlag                              *management.AddOrgRequestFlag
	domainPolicyFlag                     *AddCustomDomainPolicyRequestFlag
	labelPolicyFlag                      *management.AddCustomLabelPolicyRequestFlag
	lockoutPolicyFlag                    *management.AddCustomLockoutPolicyRequestFlag
	loginPolicyFlag                      *management.AddCustomLoginPolicyRequestFlag
	passwordComplexityPolicyFlag         *management.AddCustomPasswordComplexityPolicyRequestFlag
	privacyPolicyFlag                    *management.AddCustomPrivacyPolicyRequestFlag
	projectsFlag                         []*v1.DataProjectFlag
	projectRolesFlag                     []*management.AddProjectRoleRequestFlag
	apiAppsFlag                          []*v1.DataAPIApplicationFlag
	oidcAppsFlag                         []*v1.DataOIDCApplicationFlag
	humanUsersFlag                       []*v1.DataHumanUserFlag
	machineUsersFlag                     []*v1.DataMachineUserFlag
	triggerActionsFlag                   []*management.SetTriggerActionsRequestFlag
	actionsFlag                          []*v1.DataActionFlag
	projectGrantsFlag                    []*v1.DataProjectGrantFlag
	userGrantsFlag                       []*management.AddUserGrantRequestFlag
	orgMembersFlag                       []*management.AddOrgMemberRequestFlag
	projectMembersFlag                   []*management.AddProjectMemberRequestFlag
	projectGrantMembersFlag              []*management.AddProjectGrantMemberRequestFlag
	userMetadataFlag                     []*management.SetUserMetadataRequestFlag
	loginTextsFlag                       []*management.SetCustomLoginTextsRequestFlag
	initMessagesFlag                     []*management.SetCustomInitMessageTextRequestFlag
	passwordResetMessagesFlag            []*management.SetCustomPasswordResetMessageTextRequestFlag
	verifyEmailMessagesFlag              []*management.SetCustomVerifyEmailMessageTextRequestFlag
	verifyPhoneMessagesFlag              []*management.SetCustomVerifyPhoneMessageTextRequestFlag
	domainClaimedMessagesFlag            []*management.SetCustomDomainClaimedMessageTextRequestFlag
	passwordlessRegistrationMessagesFlag []*management.SetCustomPasswordlessRegistrationMessageTextRequestFlag
	oidcIdpsFlag                         []*v1.DataOIDCIDPFlag
	jwtIdpsFlag                          []*v1.DataJWTIDPFlag
	userLinksFlag                        []*idp.IDPUserLinkFlag
	domainsFlag                          []*org.DomainFlag
	appKeysFlag                          []*v1.DataAppKeyFlag
	machineKeysFlag                      []*v1.DataMachineKeyFlag
	verifySmsOtpMessagesFlag             []*management.SetCustomVerifySMSOTPMessageTextRequestFlag
	verifyEmailOtpMessagesFlag           []*management.SetCustomVerifyEmailOTPMessageTextRequestFlag
}

func (x *DataOrgFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DataOrg", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.projectsFlag = []*v1.DataProjectFlag{}
	x.projectRolesFlag = []*management.AddProjectRoleRequestFlag{}
	x.apiAppsFlag = []*v1.DataAPIApplicationFlag{}
	x.oidcAppsFlag = []*v1.DataOIDCApplicationFlag{}
	x.humanUsersFlag = []*v1.DataHumanUserFlag{}
	x.machineUsersFlag = []*v1.DataMachineUserFlag{}
	x.triggerActionsFlag = []*management.SetTriggerActionsRequestFlag{}
	x.actionsFlag = []*v1.DataActionFlag{}
	x.projectGrantsFlag = []*v1.DataProjectGrantFlag{}
	x.userGrantsFlag = []*management.AddUserGrantRequestFlag{}
	x.orgMembersFlag = []*management.AddOrgMemberRequestFlag{}
	x.projectMembersFlag = []*management.AddProjectMemberRequestFlag{}
	x.projectGrantMembersFlag = []*management.AddProjectGrantMemberRequestFlag{}
	x.userMetadataFlag = []*management.SetUserMetadataRequestFlag{}
	x.loginTextsFlag = []*management.SetCustomLoginTextsRequestFlag{}
	x.initMessagesFlag = []*management.SetCustomInitMessageTextRequestFlag{}
	x.passwordResetMessagesFlag = []*management.SetCustomPasswordResetMessageTextRequestFlag{}
	x.verifyEmailMessagesFlag = []*management.SetCustomVerifyEmailMessageTextRequestFlag{}
	x.verifyPhoneMessagesFlag = []*management.SetCustomVerifyPhoneMessageTextRequestFlag{}
	x.domainClaimedMessagesFlag = []*management.SetCustomDomainClaimedMessageTextRequestFlag{}
	x.passwordlessRegistrationMessagesFlag = []*management.SetCustomPasswordlessRegistrationMessageTextRequestFlag{}
	x.oidcIdpsFlag = []*v1.DataOIDCIDPFlag{}
	x.jwtIdpsFlag = []*v1.DataJWTIDPFlag{}
	x.userLinksFlag = []*idp.IDPUserLinkFlag{}
	x.domainsFlag = []*org.DomainFlag{}
	x.appKeysFlag = []*v1.DataAppKeyFlag{}
	x.machineKeysFlag = []*v1.DataMachineKeyFlag{}
	x.verifySmsOtpMessagesFlag = []*management.SetCustomVerifySMSOTPMessageTextRequestFlag{}
	x.verifyEmailOtpMessagesFlag = []*management.SetCustomVerifyEmailOTPMessageTextRequestFlag{}
	x.orgFlag = &management.AddOrgRequestFlag{AddOrgRequest: new(management.AddOrgRequest)}
	x.orgFlag.AddFlags(x.set)
	x.domainPolicyFlag = &AddCustomDomainPolicyRequestFlag{AddCustomDomainPolicyRequest: new(AddCustomDomainPolicyRequest)}
	x.domainPolicyFlag.AddFlags(x.set)
	x.labelPolicyFlag = &management.AddCustomLabelPolicyRequestFlag{AddCustomLabelPolicyRequest: new(management.AddCustomLabelPolicyRequest)}
	x.labelPolicyFlag.AddFlags(x.set)
	x.lockoutPolicyFlag = &management.AddCustomLockoutPolicyRequestFlag{AddCustomLockoutPolicyRequest: new(management.AddCustomLockoutPolicyRequest)}
	x.lockoutPolicyFlag.AddFlags(x.set)
	x.loginPolicyFlag = &management.AddCustomLoginPolicyRequestFlag{AddCustomLoginPolicyRequest: new(management.AddCustomLoginPolicyRequest)}
	x.loginPolicyFlag.AddFlags(x.set)
	x.passwordComplexityPolicyFlag = &management.AddCustomPasswordComplexityPolicyRequestFlag{AddCustomPasswordComplexityPolicyRequest: new(management.AddCustomPasswordComplexityPolicyRequest)}
	x.passwordComplexityPolicyFlag.AddFlags(x.set)
	x.privacyPolicyFlag = &management.AddCustomPrivacyPolicyRequestFlag{AddCustomPrivacyPolicyRequest: new(management.AddCustomPrivacyPolicyRequest)}
	x.privacyPolicyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DataOrgFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org", "domain-policy", "label-policy", "lockout-policy", "login-policy", "password-complexity-policy", "privacy-policy", "projects", "project-roles", "api-apps", "oidc-apps", "human-users", "machine-users", "trigger-actions", "actions", "project-grants", "user-grants", "org-members", "project-members", "project-grant-members", "user-metadata", "login-texts", "init-messages", "password-reset-messages", "verify-email-messages", "verify-phone-messages", "domain-claimed-messages", "passwordless-registration-messages", "oidc-idps", "jwt-idps", "user-links", "domains", "app-keys", "machine-keys", "verify-sms-otp-messages", "verify-email-otp-messages")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("domain-policy"); flagIdx != nil {
		x.domainPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("label-policy"); flagIdx != nil {
		x.labelPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("lockout-policy"); flagIdx != nil {
		x.lockoutPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-policy"); flagIdx != nil {
		x.loginPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-complexity-policy"); flagIdx != nil {
		x.passwordComplexityPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("privacy-policy"); flagIdx != nil {
		x.privacyPolicyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("projects") {
		x.projectsFlag = append(x.projectsFlag, &v1.DataProjectFlag{DataProject: new(v1.DataProject)})
		x.projectsFlag[len(x.projectsFlag)-1].AddFlags(x.set)
		x.projectsFlag[len(x.projectsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-roles") {
		x.projectRolesFlag = append(x.projectRolesFlag, &management.AddProjectRoleRequestFlag{AddProjectRoleRequest: new(management.AddProjectRoleRequest)})
		x.projectRolesFlag[len(x.projectRolesFlag)-1].AddFlags(x.set)
		x.projectRolesFlag[len(x.projectRolesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("api-apps") {
		x.apiAppsFlag = append(x.apiAppsFlag, &v1.DataAPIApplicationFlag{DataAPIApplication: new(v1.DataAPIApplication)})
		x.apiAppsFlag[len(x.apiAppsFlag)-1].AddFlags(x.set)
		x.apiAppsFlag[len(x.apiAppsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("oidc-apps") {
		x.oidcAppsFlag = append(x.oidcAppsFlag, &v1.DataOIDCApplicationFlag{DataOIDCApplication: new(v1.DataOIDCApplication)})
		x.oidcAppsFlag[len(x.oidcAppsFlag)-1].AddFlags(x.set)
		x.oidcAppsFlag[len(x.oidcAppsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("human-users") {
		x.humanUsersFlag = append(x.humanUsersFlag, &v1.DataHumanUserFlag{DataHumanUser: new(v1.DataHumanUser)})
		x.humanUsersFlag[len(x.humanUsersFlag)-1].AddFlags(x.set)
		x.humanUsersFlag[len(x.humanUsersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("machine-users") {
		x.machineUsersFlag = append(x.machineUsersFlag, &v1.DataMachineUserFlag{DataMachineUser: new(v1.DataMachineUser)})
		x.machineUsersFlag[len(x.machineUsersFlag)-1].AddFlags(x.set)
		x.machineUsersFlag[len(x.machineUsersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("trigger-actions") {
		x.triggerActionsFlag = append(x.triggerActionsFlag, &management.SetTriggerActionsRequestFlag{SetTriggerActionsRequest: new(management.SetTriggerActionsRequest)})
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].AddFlags(x.set)
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("actions") {
		x.actionsFlag = append(x.actionsFlag, &v1.DataActionFlag{DataAction: new(v1.DataAction)})
		x.actionsFlag[len(x.actionsFlag)-1].AddFlags(x.set)
		x.actionsFlag[len(x.actionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-grants") {
		x.projectGrantsFlag = append(x.projectGrantsFlag, &v1.DataProjectGrantFlag{DataProjectGrant: new(v1.DataProjectGrant)})
		x.projectGrantsFlag[len(x.projectGrantsFlag)-1].AddFlags(x.set)
		x.projectGrantsFlag[len(x.projectGrantsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-grants") {
		x.userGrantsFlag = append(x.userGrantsFlag, &management.AddUserGrantRequestFlag{AddUserGrantRequest: new(management.AddUserGrantRequest)})
		x.userGrantsFlag[len(x.userGrantsFlag)-1].AddFlags(x.set)
		x.userGrantsFlag[len(x.userGrantsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("org-members") {
		x.orgMembersFlag = append(x.orgMembersFlag, &management.AddOrgMemberRequestFlag{AddOrgMemberRequest: new(management.AddOrgMemberRequest)})
		x.orgMembersFlag[len(x.orgMembersFlag)-1].AddFlags(x.set)
		x.orgMembersFlag[len(x.orgMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-members") {
		x.projectMembersFlag = append(x.projectMembersFlag, &management.AddProjectMemberRequestFlag{AddProjectMemberRequest: new(management.AddProjectMemberRequest)})
		x.projectMembersFlag[len(x.projectMembersFlag)-1].AddFlags(x.set)
		x.projectMembersFlag[len(x.projectMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-grant-members") {
		x.projectGrantMembersFlag = append(x.projectGrantMembersFlag, &management.AddProjectGrantMemberRequestFlag{AddProjectGrantMemberRequest: new(management.AddProjectGrantMemberRequest)})
		x.projectGrantMembersFlag[len(x.projectGrantMembersFlag)-1].AddFlags(x.set)
		x.projectGrantMembersFlag[len(x.projectGrantMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-metadata") {
		x.userMetadataFlag = append(x.userMetadataFlag, &management.SetUserMetadataRequestFlag{SetUserMetadataRequest: new(management.SetUserMetadataRequest)})
		x.userMetadataFlag[len(x.userMetadataFlag)-1].AddFlags(x.set)
		x.userMetadataFlag[len(x.userMetadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("login-texts") {
		x.loginTextsFlag = append(x.loginTextsFlag, &management.SetCustomLoginTextsRequestFlag{SetCustomLoginTextsRequest: new(management.SetCustomLoginTextsRequest)})
		x.loginTextsFlag[len(x.loginTextsFlag)-1].AddFlags(x.set)
		x.loginTextsFlag[len(x.loginTextsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("init-messages") {
		x.initMessagesFlag = append(x.initMessagesFlag, &management.SetCustomInitMessageTextRequestFlag{SetCustomInitMessageTextRequest: new(management.SetCustomInitMessageTextRequest)})
		x.initMessagesFlag[len(x.initMessagesFlag)-1].AddFlags(x.set)
		x.initMessagesFlag[len(x.initMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("password-reset-messages") {
		x.passwordResetMessagesFlag = append(x.passwordResetMessagesFlag, &management.SetCustomPasswordResetMessageTextRequestFlag{SetCustomPasswordResetMessageTextRequest: new(management.SetCustomPasswordResetMessageTextRequest)})
		x.passwordResetMessagesFlag[len(x.passwordResetMessagesFlag)-1].AddFlags(x.set)
		x.passwordResetMessagesFlag[len(x.passwordResetMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("verify-email-messages") {
		x.verifyEmailMessagesFlag = append(x.verifyEmailMessagesFlag, &management.SetCustomVerifyEmailMessageTextRequestFlag{SetCustomVerifyEmailMessageTextRequest: new(management.SetCustomVerifyEmailMessageTextRequest)})
		x.verifyEmailMessagesFlag[len(x.verifyEmailMessagesFlag)-1].AddFlags(x.set)
		x.verifyEmailMessagesFlag[len(x.verifyEmailMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("verify-phone-messages") {
		x.verifyPhoneMessagesFlag = append(x.verifyPhoneMessagesFlag, &management.SetCustomVerifyPhoneMessageTextRequestFlag{SetCustomVerifyPhoneMessageTextRequest: new(management.SetCustomVerifyPhoneMessageTextRequest)})
		x.verifyPhoneMessagesFlag[len(x.verifyPhoneMessagesFlag)-1].AddFlags(x.set)
		x.verifyPhoneMessagesFlag[len(x.verifyPhoneMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("domain-claimed-messages") {
		x.domainClaimedMessagesFlag = append(x.domainClaimedMessagesFlag, &management.SetCustomDomainClaimedMessageTextRequestFlag{SetCustomDomainClaimedMessageTextRequest: new(management.SetCustomDomainClaimedMessageTextRequest)})
		x.domainClaimedMessagesFlag[len(x.domainClaimedMessagesFlag)-1].AddFlags(x.set)
		x.domainClaimedMessagesFlag[len(x.domainClaimedMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("passwordless-registration-messages") {
		x.passwordlessRegistrationMessagesFlag = append(x.passwordlessRegistrationMessagesFlag, &management.SetCustomPasswordlessRegistrationMessageTextRequestFlag{SetCustomPasswordlessRegistrationMessageTextRequest: new(management.SetCustomPasswordlessRegistrationMessageTextRequest)})
		x.passwordlessRegistrationMessagesFlag[len(x.passwordlessRegistrationMessagesFlag)-1].AddFlags(x.set)
		x.passwordlessRegistrationMessagesFlag[len(x.passwordlessRegistrationMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("oidc-idps") {
		x.oidcIdpsFlag = append(x.oidcIdpsFlag, &v1.DataOIDCIDPFlag{DataOIDCIDP: new(v1.DataOIDCIDP)})
		x.oidcIdpsFlag[len(x.oidcIdpsFlag)-1].AddFlags(x.set)
		x.oidcIdpsFlag[len(x.oidcIdpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("jwt-idps") {
		x.jwtIdpsFlag = append(x.jwtIdpsFlag, &v1.DataJWTIDPFlag{DataJWTIDP: new(v1.DataJWTIDP)})
		x.jwtIdpsFlag[len(x.jwtIdpsFlag)-1].AddFlags(x.set)
		x.jwtIdpsFlag[len(x.jwtIdpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-links") {
		x.userLinksFlag = append(x.userLinksFlag, &idp.IDPUserLinkFlag{IDPUserLink: new(idp.IDPUserLink)})
		x.userLinksFlag[len(x.userLinksFlag)-1].AddFlags(x.set)
		x.userLinksFlag[len(x.userLinksFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("domains") {
		x.domainsFlag = append(x.domainsFlag, &org.DomainFlag{Domain: new(org.Domain)})
		x.domainsFlag[len(x.domainsFlag)-1].AddFlags(x.set)
		x.domainsFlag[len(x.domainsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("app-keys") {
		x.appKeysFlag = append(x.appKeysFlag, &v1.DataAppKeyFlag{DataAppKey: new(v1.DataAppKey)})
		x.appKeysFlag[len(x.appKeysFlag)-1].AddFlags(x.set)
		x.appKeysFlag[len(x.appKeysFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("machine-keys") {
		x.machineKeysFlag = append(x.machineKeysFlag, &v1.DataMachineKeyFlag{DataMachineKey: new(v1.DataMachineKey)})
		x.machineKeysFlag[len(x.machineKeysFlag)-1].AddFlags(x.set)
		x.machineKeysFlag[len(x.machineKeysFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("verify-sms-otp-messages") {
		x.verifySmsOtpMessagesFlag = append(x.verifySmsOtpMessagesFlag, &management.SetCustomVerifySMSOTPMessageTextRequestFlag{SetCustomVerifySMSOTPMessageTextRequest: new(management.SetCustomVerifySMSOTPMessageTextRequest)})
		x.verifySmsOtpMessagesFlag[len(x.verifySmsOtpMessagesFlag)-1].AddFlags(x.set)
		x.verifySmsOtpMessagesFlag[len(x.verifySmsOtpMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("verify-email-otp-messages") {
		x.verifyEmailOtpMessagesFlag = append(x.verifyEmailOtpMessagesFlag, &management.SetCustomVerifyEmailOTPMessageTextRequestFlag{SetCustomVerifyEmailOTPMessageTextRequest: new(management.SetCustomVerifyEmailOTPMessageTextRequest)})
		x.verifyEmailOtpMessagesFlag[len(x.verifyEmailOtpMessagesFlag)-1].AddFlags(x.set)
		x.verifyEmailOtpMessagesFlag[len(x.verifyEmailOtpMessagesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.orgIdFlag.Changed() {
		x.changed = true
		x.DataOrg.OrgId = *x.orgIdFlag.Value
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.DataOrg.Org = x.orgFlag.AddOrgRequest
	}

	if x.domainPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.DomainPolicy = x.domainPolicyFlag.AddCustomDomainPolicyRequest
	}

	if x.labelPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.LabelPolicy = x.labelPolicyFlag.AddCustomLabelPolicyRequest
	}

	if x.lockoutPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.LockoutPolicy = x.lockoutPolicyFlag.AddCustomLockoutPolicyRequest
	}

	if x.loginPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.LoginPolicy = x.loginPolicyFlag.AddCustomLoginPolicyRequest
	}

	if x.passwordComplexityPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.PasswordComplexityPolicy = x.passwordComplexityPolicyFlag.AddCustomPasswordComplexityPolicyRequest
	}

	if x.privacyPolicyFlag.Changed() {
		x.changed = true
		x.DataOrg.PrivacyPolicy = x.privacyPolicyFlag.AddCustomPrivacyPolicyRequest
	}

	if len(x.projectsFlag) > 0 {
		x.changed = true
		x.Projects = make([]*v1.DataProject, len(x.projectsFlag))
		for i, value := range x.projectsFlag {
			x.DataOrg.Projects[i] = value.DataProject
		}
	}

	if len(x.projectRolesFlag) > 0 {
		x.changed = true
		x.ProjectRoles = make([]*management.AddProjectRoleRequest, len(x.projectRolesFlag))
		for i, value := range x.projectRolesFlag {
			x.DataOrg.ProjectRoles[i] = value.AddProjectRoleRequest
		}
	}

	if len(x.apiAppsFlag) > 0 {
		x.changed = true
		x.ApiApps = make([]*v1.DataAPIApplication, len(x.apiAppsFlag))
		for i, value := range x.apiAppsFlag {
			x.DataOrg.ApiApps[i] = value.DataAPIApplication
		}
	}

	if len(x.oidcAppsFlag) > 0 {
		x.changed = true
		x.OidcApps = make([]*v1.DataOIDCApplication, len(x.oidcAppsFlag))
		for i, value := range x.oidcAppsFlag {
			x.DataOrg.OidcApps[i] = value.DataOIDCApplication
		}
	}

	if len(x.humanUsersFlag) > 0 {
		x.changed = true
		x.HumanUsers = make([]*v1.DataHumanUser, len(x.humanUsersFlag))
		for i, value := range x.humanUsersFlag {
			x.DataOrg.HumanUsers[i] = value.DataHumanUser
		}
	}

	if len(x.machineUsersFlag) > 0 {
		x.changed = true
		x.MachineUsers = make([]*v1.DataMachineUser, len(x.machineUsersFlag))
		for i, value := range x.machineUsersFlag {
			x.DataOrg.MachineUsers[i] = value.DataMachineUser
		}
	}

	if len(x.triggerActionsFlag) > 0 {
		x.changed = true
		x.TriggerActions = make([]*management.SetTriggerActionsRequest, len(x.triggerActionsFlag))
		for i, value := range x.triggerActionsFlag {
			x.DataOrg.TriggerActions[i] = value.SetTriggerActionsRequest
		}
	}

	if len(x.actionsFlag) > 0 {
		x.changed = true
		x.Actions = make([]*v1.DataAction, len(x.actionsFlag))
		for i, value := range x.actionsFlag {
			x.DataOrg.Actions[i] = value.DataAction
		}
	}

	if len(x.projectGrantsFlag) > 0 {
		x.changed = true
		x.ProjectGrants = make([]*v1.DataProjectGrant, len(x.projectGrantsFlag))
		for i, value := range x.projectGrantsFlag {
			x.DataOrg.ProjectGrants[i] = value.DataProjectGrant
		}
	}

	if len(x.userGrantsFlag) > 0 {
		x.changed = true
		x.UserGrants = make([]*management.AddUserGrantRequest, len(x.userGrantsFlag))
		for i, value := range x.userGrantsFlag {
			x.DataOrg.UserGrants[i] = value.AddUserGrantRequest
		}
	}

	if len(x.orgMembersFlag) > 0 {
		x.changed = true
		x.OrgMembers = make([]*management.AddOrgMemberRequest, len(x.orgMembersFlag))
		for i, value := range x.orgMembersFlag {
			x.DataOrg.OrgMembers[i] = value.AddOrgMemberRequest
		}
	}

	if len(x.projectMembersFlag) > 0 {
		x.changed = true
		x.ProjectMembers = make([]*management.AddProjectMemberRequest, len(x.projectMembersFlag))
		for i, value := range x.projectMembersFlag {
			x.DataOrg.ProjectMembers[i] = value.AddProjectMemberRequest
		}
	}

	if len(x.projectGrantMembersFlag) > 0 {
		x.changed = true
		x.ProjectGrantMembers = make([]*management.AddProjectGrantMemberRequest, len(x.projectGrantMembersFlag))
		for i, value := range x.projectGrantMembersFlag {
			x.DataOrg.ProjectGrantMembers[i] = value.AddProjectGrantMemberRequest
		}
	}

	if len(x.userMetadataFlag) > 0 {
		x.changed = true
		x.UserMetadata = make([]*management.SetUserMetadataRequest, len(x.userMetadataFlag))
		for i, value := range x.userMetadataFlag {
			x.DataOrg.UserMetadata[i] = value.SetUserMetadataRequest
		}
	}

	if len(x.loginTextsFlag) > 0 {
		x.changed = true
		x.LoginTexts = make([]*management.SetCustomLoginTextsRequest, len(x.loginTextsFlag))
		for i, value := range x.loginTextsFlag {
			x.DataOrg.LoginTexts[i] = value.SetCustomLoginTextsRequest
		}
	}

	if len(x.initMessagesFlag) > 0 {
		x.changed = true
		x.InitMessages = make([]*management.SetCustomInitMessageTextRequest, len(x.initMessagesFlag))
		for i, value := range x.initMessagesFlag {
			x.DataOrg.InitMessages[i] = value.SetCustomInitMessageTextRequest
		}
	}

	if len(x.passwordResetMessagesFlag) > 0 {
		x.changed = true
		x.PasswordResetMessages = make([]*management.SetCustomPasswordResetMessageTextRequest, len(x.passwordResetMessagesFlag))
		for i, value := range x.passwordResetMessagesFlag {
			x.DataOrg.PasswordResetMessages[i] = value.SetCustomPasswordResetMessageTextRequest
		}
	}

	if len(x.verifyEmailMessagesFlag) > 0 {
		x.changed = true
		x.VerifyEmailMessages = make([]*management.SetCustomVerifyEmailMessageTextRequest, len(x.verifyEmailMessagesFlag))
		for i, value := range x.verifyEmailMessagesFlag {
			x.DataOrg.VerifyEmailMessages[i] = value.SetCustomVerifyEmailMessageTextRequest
		}
	}

	if len(x.verifyPhoneMessagesFlag) > 0 {
		x.changed = true
		x.VerifyPhoneMessages = make([]*management.SetCustomVerifyPhoneMessageTextRequest, len(x.verifyPhoneMessagesFlag))
		for i, value := range x.verifyPhoneMessagesFlag {
			x.DataOrg.VerifyPhoneMessages[i] = value.SetCustomVerifyPhoneMessageTextRequest
		}
	}

	if len(x.domainClaimedMessagesFlag) > 0 {
		x.changed = true
		x.DomainClaimedMessages = make([]*management.SetCustomDomainClaimedMessageTextRequest, len(x.domainClaimedMessagesFlag))
		for i, value := range x.domainClaimedMessagesFlag {
			x.DataOrg.DomainClaimedMessages[i] = value.SetCustomDomainClaimedMessageTextRequest
		}
	}

	if len(x.passwordlessRegistrationMessagesFlag) > 0 {
		x.changed = true
		x.PasswordlessRegistrationMessages = make([]*management.SetCustomPasswordlessRegistrationMessageTextRequest, len(x.passwordlessRegistrationMessagesFlag))
		for i, value := range x.passwordlessRegistrationMessagesFlag {
			x.DataOrg.PasswordlessRegistrationMessages[i] = value.SetCustomPasswordlessRegistrationMessageTextRequest
		}
	}

	if len(x.oidcIdpsFlag) > 0 {
		x.changed = true
		x.OidcIdps = make([]*v1.DataOIDCIDP, len(x.oidcIdpsFlag))
		for i, value := range x.oidcIdpsFlag {
			x.DataOrg.OidcIdps[i] = value.DataOIDCIDP
		}
	}

	if len(x.jwtIdpsFlag) > 0 {
		x.changed = true
		x.JwtIdps = make([]*v1.DataJWTIDP, len(x.jwtIdpsFlag))
		for i, value := range x.jwtIdpsFlag {
			x.DataOrg.JwtIdps[i] = value.DataJWTIDP
		}
	}

	if len(x.userLinksFlag) > 0 {
		x.changed = true
		x.UserLinks = make([]*idp.IDPUserLink, len(x.userLinksFlag))
		for i, value := range x.userLinksFlag {
			x.DataOrg.UserLinks[i] = value.IDPUserLink
		}
	}

	if len(x.domainsFlag) > 0 {
		x.changed = true
		x.Domains = make([]*org.Domain, len(x.domainsFlag))
		for i, value := range x.domainsFlag {
			x.DataOrg.Domains[i] = value.Domain
		}
	}

	if len(x.appKeysFlag) > 0 {
		x.changed = true
		x.AppKeys = make([]*v1.DataAppKey, len(x.appKeysFlag))
		for i, value := range x.appKeysFlag {
			x.DataOrg.AppKeys[i] = value.DataAppKey
		}
	}

	if len(x.machineKeysFlag) > 0 {
		x.changed = true
		x.MachineKeys = make([]*v1.DataMachineKey, len(x.machineKeysFlag))
		for i, value := range x.machineKeysFlag {
			x.DataOrg.MachineKeys[i] = value.DataMachineKey
		}
	}

	if len(x.verifySmsOtpMessagesFlag) > 0 {
		x.changed = true
		x.VerifySmsOtpMessages = make([]*management.SetCustomVerifySMSOTPMessageTextRequest, len(x.verifySmsOtpMessagesFlag))
		for i, value := range x.verifySmsOtpMessagesFlag {
			x.DataOrg.VerifySmsOtpMessages[i] = value.SetCustomVerifySMSOTPMessageTextRequest
		}
	}

	if len(x.verifyEmailOtpMessagesFlag) > 0 {
		x.changed = true
		x.VerifyEmailOtpMessages = make([]*management.SetCustomVerifyEmailOTPMessageTextRequest, len(x.verifyEmailOtpMessagesFlag))
		for i, value := range x.verifyEmailOtpMessagesFlag {
			x.DataOrg.VerifyEmailOtpMessages[i] = value.SetCustomVerifyEmailOTPMessageTextRequest
		}
	}

}

func (x *DataOrgFlag) Changed() bool {
	return x.changed
}

type DeactivateIDPRequestFlag struct {
	*DeactivateIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *DeactivateIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.DeactivateIDPRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *DeactivateIDPRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateIDPResponseFlag struct {
	*DeactivateIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateIDPResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateSMSProviderRequestFlag struct {
	*DeactivateSMSProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeactivateSMSProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateSMSProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateSMSProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeactivateSMSProviderRequest.Id = *x.idFlag.Value
	}
}

func (x *DeactivateSMSProviderRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateSMSProviderResponseFlag struct {
	*DeactivateSMSProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateSMSProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateSMSProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateSMSProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateSMSProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateSMSProviderResponseFlag) Changed() bool {
	return x.changed
}

type DeleteProviderRequestFlag struct {
	*DeleteProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeleteProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeleteProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeleteProviderRequest.Id = *x.idFlag.Value
	}
}

func (x *DeleteProviderRequestFlag) Changed() bool {
	return x.changed
}

type DeleteProviderResponseFlag struct {
	*DeleteProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeleteProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeleteProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeleteProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeleteProviderResponseFlag) Changed() bool {
	return x.changed
}

type ExportDataRequestFlag struct {
	*ExportDataRequest

	changed bool
	set     *pflag.FlagSet

	orgIdsFlag         *cli_client.StringSliceParser
	excludedOrgIdsFlag *cli_client.StringSliceParser
	withPasswordsFlag  *cli_client.BoolParser
	withOtpFlag        *cli_client.BoolParser
	responseOutputFlag *cli_client.BoolParser
	localOutputFlag    *ExportDataRequest_LocalOutputFlag
	s3OutputFlag       *ExportDataRequest_S3OutputFlag
	gcsOutputFlag      *ExportDataRequest_GCSOutputFlag
	timeoutFlag        *cli_client.StringParser
}

func (x *ExportDataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportDataRequest", pflag.ContinueOnError)

	x.orgIdsFlag = cli_client.NewStringSliceParser(x.set, "org-ids", "")
	x.excludedOrgIdsFlag = cli_client.NewStringSliceParser(x.set, "excluded-org-ids", "")
	x.withPasswordsFlag = cli_client.NewBoolParser(x.set, "with-passwords", "")
	x.withOtpFlag = cli_client.NewBoolParser(x.set, "with-otp", "")
	x.responseOutputFlag = cli_client.NewBoolParser(x.set, "response-output", "")
	x.timeoutFlag = cli_client.NewStringParser(x.set, "timeout", "")
	x.localOutputFlag = &ExportDataRequest_LocalOutputFlag{ExportDataRequest_LocalOutput: new(ExportDataRequest_LocalOutput)}
	x.localOutputFlag.AddFlags(x.set)
	x.s3OutputFlag = &ExportDataRequest_S3OutputFlag{ExportDataRequest_S3Output: new(ExportDataRequest_S3Output)}
	x.s3OutputFlag.AddFlags(x.set)
	x.gcsOutputFlag = &ExportDataRequest_GCSOutputFlag{ExportDataRequest_GCSOutput: new(ExportDataRequest_GCSOutput)}
	x.gcsOutputFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ExportDataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "local-output", "s3-output", "gcs-output")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("local-output"); flagIdx != nil {
		x.localOutputFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("s3-output"); flagIdx != nil {
		x.s3OutputFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("gcs-output"); flagIdx != nil {
		x.gcsOutputFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgIdsFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.OrgIds = *x.orgIdsFlag.Value
	}
	if x.excludedOrgIdsFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.ExcludedOrgIds = *x.excludedOrgIdsFlag.Value
	}
	if x.withPasswordsFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.WithPasswords = *x.withPasswordsFlag.Value
	}
	if x.withOtpFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.WithOtp = *x.withOtpFlag.Value
	}
	if x.responseOutputFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.ResponseOutput = *x.responseOutputFlag.Value
	}

	if x.localOutputFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.LocalOutput = x.localOutputFlag.ExportDataRequest_LocalOutput
	}

	if x.s3OutputFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.S3Output = x.s3OutputFlag.ExportDataRequest_S3Output
	}

	if x.gcsOutputFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.GcsOutput = x.gcsOutputFlag.ExportDataRequest_GCSOutput
	}

	if x.timeoutFlag.Changed() {
		x.changed = true
		x.ExportDataRequest.Timeout = *x.timeoutFlag.Value
	}
}

func (x *ExportDataRequestFlag) Changed() bool {
	return x.changed
}

type ExportDataRequest_GCSOutputFlag struct {
	*ExportDataRequest_GCSOutput

	changed bool
	set     *pflag.FlagSet

	bucketFlag             *cli_client.StringParser
	serviceaccountJsonFlag *cli_client.StringParser
	pathFlag               *cli_client.StringParser
}

func (x *ExportDataRequest_GCSOutputFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportDataRequest_GCSOutput", pflag.ContinueOnError)

	x.bucketFlag = cli_client.NewStringParser(x.set, "bucket", "")
	x.serviceaccountJsonFlag = cli_client.NewStringParser(x.set, "serviceaccount-json", "")
	x.pathFlag = cli_client.NewStringParser(x.set, "path", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportDataRequest_GCSOutputFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.bucketFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_GCSOutput.Bucket = *x.bucketFlag.Value
	}
	if x.serviceaccountJsonFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_GCSOutput.ServiceaccountJson = *x.serviceaccountJsonFlag.Value
	}
	if x.pathFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_GCSOutput.Path = *x.pathFlag.Value
	}
}

func (x *ExportDataRequest_GCSOutputFlag) Changed() bool {
	return x.changed
}

type ExportDataRequest_LocalOutputFlag struct {
	*ExportDataRequest_LocalOutput

	changed bool
	set     *pflag.FlagSet

	pathFlag *cli_client.StringParser
}

func (x *ExportDataRequest_LocalOutputFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportDataRequest_LocalOutput", pflag.ContinueOnError)

	x.pathFlag = cli_client.NewStringParser(x.set, "path", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportDataRequest_LocalOutputFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.pathFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_LocalOutput.Path = *x.pathFlag.Value
	}
}

func (x *ExportDataRequest_LocalOutputFlag) Changed() bool {
	return x.changed
}

type ExportDataRequest_S3OutputFlag struct {
	*ExportDataRequest_S3Output

	changed bool
	set     *pflag.FlagSet

	pathFlag            *cli_client.StringParser
	endpointFlag        *cli_client.StringParser
	accessKeyIdFlag     *cli_client.StringParser
	secretAccessKeyFlag *cli_client.StringParser
	sslFlag             *cli_client.BoolParser
	bucketFlag          *cli_client.StringParser
}

func (x *ExportDataRequest_S3OutputFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportDataRequest_S3Output", pflag.ContinueOnError)

	x.pathFlag = cli_client.NewStringParser(x.set, "path", "")
	x.endpointFlag = cli_client.NewStringParser(x.set, "endpoint", "")
	x.accessKeyIdFlag = cli_client.NewStringParser(x.set, "access-key-id", "")
	x.secretAccessKeyFlag = cli_client.NewStringParser(x.set, "secret-access-key", "")
	x.sslFlag = cli_client.NewBoolParser(x.set, "ssl", "")
	x.bucketFlag = cli_client.NewStringParser(x.set, "bucket", "")
	parent.AddFlagSet(x.set)
}

func (x *ExportDataRequest_S3OutputFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.pathFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_S3Output.Path = *x.pathFlag.Value
	}
	if x.endpointFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_S3Output.Endpoint = *x.endpointFlag.Value
	}
	if x.accessKeyIdFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_S3Output.AccessKeyId = *x.accessKeyIdFlag.Value
	}
	if x.secretAccessKeyFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_S3Output.SecretAccessKey = *x.secretAccessKeyFlag.Value
	}
	if x.sslFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_S3Output.Ssl = *x.sslFlag.Value
	}
	if x.bucketFlag.Changed() {
		x.changed = true
		x.ExportDataRequest_S3Output.Bucket = *x.bucketFlag.Value
	}
}

func (x *ExportDataRequest_S3OutputFlag) Changed() bool {
	return x.changed
}

type ExportDataResponseFlag struct {
	*ExportDataResponse

	changed bool
	set     *pflag.FlagSet

	orgsFlag []*DataOrgFlag
}

func (x *ExportDataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExportDataResponse", pflag.ContinueOnError)

	x.orgsFlag = []*DataOrgFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ExportDataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "orgs")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("orgs") {
		x.orgsFlag = append(x.orgsFlag, &DataOrgFlag{DataOrg: new(DataOrg)})
		x.orgsFlag[len(x.orgsFlag)-1].AddFlags(x.set)
		x.orgsFlag[len(x.orgsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.orgsFlag) > 0 {
		x.changed = true
		x.Orgs = make([]*DataOrg, len(x.orgsFlag))
		for i, value := range x.orgsFlag {
			x.ExportDataResponse.Orgs[i] = value.DataOrg
		}
	}

}

func (x *ExportDataResponseFlag) Changed() bool {
	return x.changed
}

type FailedEventFlag struct {
	*FailedEvent

	changed bool
	set     *pflag.FlagSet

	databaseFlag       *cli_client.StringParser
	viewNameFlag       *cli_client.StringParser
	failedSequenceFlag *cli_client.Uint64Parser
	failureCountFlag   *cli_client.Uint64Parser
	errorMessageFlag   *cli_client.StringParser
	lastFailedFlag     *cli_client.TimestampParser
}

func (x *FailedEventFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FailedEvent", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	x.failedSequenceFlag = cli_client.NewUint64Parser(x.set, "failed-sequence", "")
	x.failureCountFlag = cli_client.NewUint64Parser(x.set, "failure-count", "")
	x.errorMessageFlag = cli_client.NewStringParser(x.set, "error-message", "")
	x.lastFailedFlag = cli_client.NewTimestampParser(x.set, "last-failed", "")
	parent.AddFlagSet(x.set)
}

func (x *FailedEventFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.FailedEvent.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.FailedEvent.ViewName = *x.viewNameFlag.Value
	}
	if x.failedSequenceFlag.Changed() {
		x.changed = true
		x.FailedEvent.FailedSequence = *x.failedSequenceFlag.Value
	}
	if x.failureCountFlag.Changed() {
		x.changed = true
		x.FailedEvent.FailureCount = *x.failureCountFlag.Value
	}
	if x.errorMessageFlag.Changed() {
		x.changed = true
		x.FailedEvent.ErrorMessage = *x.errorMessageFlag.Value
	}
	if x.lastFailedFlag.Changed() {
		x.changed = true
		x.FailedEvent.LastFailed = x.lastFailedFlag.Value
	}
}

func (x *FailedEventFlag) Changed() bool {
	return x.changed
}

type GetAllowedLanguagesRequestFlag struct {
	*GetAllowedLanguagesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetAllowedLanguagesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAllowedLanguagesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetAllowedLanguagesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetAllowedLanguagesRequestFlag) Changed() bool {
	return x.changed
}

type GetAllowedLanguagesResponseFlag struct {
	*GetAllowedLanguagesResponse

	changed bool
	set     *pflag.FlagSet

	languagesFlag *cli_client.StringSliceParser
}

func (x *GetAllowedLanguagesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAllowedLanguagesResponse", pflag.ContinueOnError)

	x.languagesFlag = cli_client.NewStringSliceParser(x.set, "languages", "")
	parent.AddFlagSet(x.set)
}

func (x *GetAllowedLanguagesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languagesFlag.Changed() {
		x.changed = true
		x.GetAllowedLanguagesResponse.Languages = *x.languagesFlag.Value
	}
}

func (x *GetAllowedLanguagesResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomDomainClaimedMessageTextRequestFlag struct {
	*GetCustomDomainClaimedMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomDomainClaimedMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomDomainClaimedMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomDomainClaimedMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomDomainClaimedMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomDomainClaimedMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomDomainClaimedMessageTextResponseFlag struct {
	*GetCustomDomainClaimedMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomDomainClaimedMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomDomainClaimedMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomDomainClaimedMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomDomainClaimedMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomDomainClaimedMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomDomainPolicyRequestFlag struct {
	*GetCustomDomainPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *GetCustomDomainPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomDomainPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomDomainPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.GetCustomDomainPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
}

func (x *GetCustomDomainPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomDomainPolicyResponseFlag struct {
	*GetCustomDomainPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.DomainPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetCustomDomainPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomDomainPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.DomainPolicyFlag{DomainPolicy: new(policy.DomainPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomDomainPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetCustomDomainPolicyResponse.Policy = x.policyFlag.DomainPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetCustomDomainPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetCustomDomainPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomInitMessageTextRequestFlag struct {
	*GetCustomInitMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomInitMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomInitMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomInitMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomInitMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomInitMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomInitMessageTextResponseFlag struct {
	*GetCustomInitMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomInitMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomInitMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomInitMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomInitMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomInitMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomLoginTextsRequestFlag struct {
	*GetCustomLoginTextsRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomLoginTextsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomLoginTextsRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomLoginTextsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomLoginTextsRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomLoginTextsRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomLoginTextsResponseFlag struct {
	*GetCustomLoginTextsResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.LoginCustomTextFlag
}

func (x *GetCustomLoginTextsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomLoginTextsResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.LoginCustomTextFlag{LoginCustomText: new(text.LoginCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomLoginTextsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomLoginTextsResponse.CustomText = x.customTextFlag.LoginCustomText
	}

}

func (x *GetCustomLoginTextsResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomOrgIAMPolicyRequestFlag struct {
	*GetCustomOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *GetCustomOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomOrgIAMPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.GetCustomOrgIAMPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
}

func (x *GetCustomOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomOrgIAMPolicyResponseFlag struct {
	*GetCustomOrgIAMPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.OrgIAMPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetCustomOrgIAMPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomOrgIAMPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.OrgIAMPolicyFlag{OrgIAMPolicy: new(policy.OrgIAMPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomOrgIAMPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetCustomOrgIAMPolicyResponse.Policy = x.policyFlag.OrgIAMPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetCustomOrgIAMPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetCustomOrgIAMPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordChangeMessageTextRequestFlag struct {
	*GetCustomPasswordChangeMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomPasswordChangeMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordChangeMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordChangeMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordChangeMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomPasswordChangeMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordChangeMessageTextResponseFlag struct {
	*GetCustomPasswordChangeMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomPasswordChangeMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordChangeMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordChangeMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordChangeMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomPasswordChangeMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordResetMessageTextRequestFlag struct {
	*GetCustomPasswordResetMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomPasswordResetMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordResetMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordResetMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordResetMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomPasswordResetMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordResetMessageTextResponseFlag struct {
	*GetCustomPasswordResetMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomPasswordResetMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordResetMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordResetMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordResetMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomPasswordResetMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordlessRegistrationMessageTextRequestFlag struct {
	*GetCustomPasswordlessRegistrationMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordlessRegistrationMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordlessRegistrationMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordlessRegistrationMessageTextResponseFlag struct {
	*GetCustomPasswordlessRegistrationMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordlessRegistrationMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordlessRegistrationMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomPasswordlessRegistrationMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailMessageTextRequestFlag struct {
	*GetCustomVerifyEmailMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifyEmailMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifyEmailMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailMessageTextResponseFlag struct {
	*GetCustomVerifyEmailMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifyEmailMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifyEmailMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailOTPMessageTextRequestFlag struct {
	*GetCustomVerifyEmailOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifyEmailOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifyEmailOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailOTPMessageTextResponseFlag struct {
	*GetCustomVerifyEmailOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifyEmailOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifyEmailOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyPhoneMessageTextRequestFlag struct {
	*GetCustomVerifyPhoneMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifyPhoneMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyPhoneMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyPhoneMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyPhoneMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifyPhoneMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyPhoneMessageTextResponseFlag struct {
	*GetCustomVerifyPhoneMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifyPhoneMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyPhoneMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyPhoneMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyPhoneMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifyPhoneMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifySMSOTPMessageTextRequestFlag struct {
	*GetCustomVerifySMSOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifySMSOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifySMSOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifySMSOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifySMSOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifySMSOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifySMSOTPMessageTextResponseFlag struct {
	*GetCustomVerifySMSOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifySMSOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifySMSOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifySMSOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifySMSOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifySMSOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultDomainClaimedMessageTextRequestFlag struct {
	*GetDefaultDomainClaimedMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultDomainClaimedMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultDomainClaimedMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultDomainClaimedMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultDomainClaimedMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultDomainClaimedMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultDomainClaimedMessageTextResponseFlag struct {
	*GetDefaultDomainClaimedMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultDomainClaimedMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultDomainClaimedMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultDomainClaimedMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultDomainClaimedMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultDomainClaimedMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultInitMessageTextRequestFlag struct {
	*GetDefaultInitMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultInitMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultInitMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultInitMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultInitMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultInitMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultInitMessageTextResponseFlag struct {
	*GetDefaultInitMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultInitMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultInitMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultInitMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultInitMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultInitMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultLanguageRequestFlag struct {
	*GetDefaultLanguageRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultLanguageRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLanguageRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLanguageRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultLanguageRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultLanguageResponseFlag struct {
	*GetDefaultLanguageResponse

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultLanguageResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLanguageResponse", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLanguageResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultLanguageResponse.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultLanguageResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultLoginTextsRequestFlag struct {
	*GetDefaultLoginTextsRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultLoginTextsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLoginTextsRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLoginTextsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultLoginTextsRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultLoginTextsRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultLoginTextsResponseFlag struct {
	*GetDefaultLoginTextsResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.LoginCustomTextFlag
}

func (x *GetDefaultLoginTextsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLoginTextsResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.LoginCustomTextFlag{LoginCustomText: new(text.LoginCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLoginTextsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultLoginTextsResponse.CustomText = x.customTextFlag.LoginCustomText
	}

}

func (x *GetDefaultLoginTextsResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultOrgRequestFlag struct {
	*GetDefaultOrgRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultOrgRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultOrgRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultOrgResponseFlag struct {
	*GetDefaultOrgResponse

	changed bool
	set     *pflag.FlagSet

	orgFlag *org.OrgFlag
}

func (x *GetDefaultOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultOrgResponse", pflag.ContinueOnError)

	x.orgFlag = &org.OrgFlag{Org: new(org.Org)}
	x.orgFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.GetDefaultOrgResponse.Org = x.orgFlag.Org
	}

}

func (x *GetDefaultOrgResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordChangeMessageTextRequestFlag struct {
	*GetDefaultPasswordChangeMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultPasswordChangeMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordChangeMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordChangeMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordChangeMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultPasswordChangeMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordChangeMessageTextResponseFlag struct {
	*GetDefaultPasswordChangeMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultPasswordChangeMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordChangeMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordChangeMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordChangeMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultPasswordChangeMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordResetMessageTextRequestFlag struct {
	*GetDefaultPasswordResetMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultPasswordResetMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordResetMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordResetMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordResetMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultPasswordResetMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordResetMessageTextResponseFlag struct {
	*GetDefaultPasswordResetMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultPasswordResetMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordResetMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordResetMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordResetMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultPasswordResetMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordlessRegistrationMessageTextRequestFlag struct {
	*GetDefaultPasswordlessRegistrationMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordlessRegistrationMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordlessRegistrationMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordlessRegistrationMessageTextResponseFlag struct {
	*GetDefaultPasswordlessRegistrationMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordlessRegistrationMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordlessRegistrationMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailMessageTextRequestFlag struct {
	*GetDefaultVerifyEmailMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifyEmailMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifyEmailMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailMessageTextResponseFlag struct {
	*GetDefaultVerifyEmailMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifyEmailMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifyEmailMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailOTPMessageTextRequestFlag struct {
	*GetDefaultVerifyEmailOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifyEmailOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifyEmailOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailOTPMessageTextResponseFlag struct {
	*GetDefaultVerifyEmailOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifyEmailOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifyEmailOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyPhoneMessageTextRequestFlag struct {
	*GetDefaultVerifyPhoneMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifyPhoneMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyPhoneMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyPhoneMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyPhoneMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifyPhoneMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyPhoneMessageTextResponseFlag struct {
	*GetDefaultVerifyPhoneMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifyPhoneMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyPhoneMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyPhoneMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyPhoneMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifyPhoneMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifySMSOTPMessageTextRequestFlag struct {
	*GetDefaultVerifySMSOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifySMSOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifySMSOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifySMSOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifySMSOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifySMSOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifySMSOTPMessageTextResponseFlag struct {
	*GetDefaultVerifySMSOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifySMSOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifySMSOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifySMSOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifySMSOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifySMSOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDomainPolicyRequestFlag struct {
	*GetDomainPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDomainPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDomainPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDomainPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDomainPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDomainPolicyResponseFlag struct {
	*GetDomainPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.DomainPolicyFlag
}

func (x *GetDomainPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDomainPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.DomainPolicyFlag{DomainPolicy: new(policy.DomainPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDomainPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDomainPolicyResponse.Policy = x.policyFlag.DomainPolicy
	}

}

func (x *GetDomainPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetFileSystemNotificationProviderRequestFlag struct {
	*GetFileSystemNotificationProviderRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetFileSystemNotificationProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetFileSystemNotificationProviderRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetFileSystemNotificationProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetFileSystemNotificationProviderRequestFlag) Changed() bool {
	return x.changed
}

type GetFileSystemNotificationProviderResponseFlag struct {
	*GetFileSystemNotificationProviderResponse

	changed bool
	set     *pflag.FlagSet

	providerFlag *settings.DebugNotificationProviderFlag
}

func (x *GetFileSystemNotificationProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetFileSystemNotificationProviderResponse", pflag.ContinueOnError)

	x.providerFlag = &settings.DebugNotificationProviderFlag{DebugNotificationProvider: new(settings.DebugNotificationProvider)}
	x.providerFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetFileSystemNotificationProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider"); flagIdx != nil {
		x.providerFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.providerFlag.Changed() {
		x.changed = true
		x.GetFileSystemNotificationProviderResponse.Provider = x.providerFlag.DebugNotificationProvider
	}

}

func (x *GetFileSystemNotificationProviderResponseFlag) Changed() bool {
	return x.changed
}

type GetIDPByIDRequestFlag struct {
	*GetIDPByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetIDPByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetIDPByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetIDPByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetIDPByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetIDPByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetIDPByIDResponseFlag struct {
	*GetIDPByIDResponse

	changed bool
	set     *pflag.FlagSet

	idpFlag *idp.IDPFlag
}

func (x *GetIDPByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetIDPByIDResponse", pflag.ContinueOnError)

	x.idpFlag = &idp.IDPFlag{IDP: new(idp.IDP)}
	x.idpFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetIDPByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp"); flagIdx != nil {
		x.idpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpFlag.Changed() {
		x.changed = true
		x.GetIDPByIDResponse.Idp = x.idpFlag.IDP
	}

}

func (x *GetIDPByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetLabelPolicyRequestFlag struct {
	*GetLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetLabelPolicyResponseFlag struct {
	*GetLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LabelPolicyFlag
}

func (x *GetLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLabelPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LabelPolicyFlag{LabelPolicy: new(policy.LabelPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetLabelPolicyResponse.Policy = x.policyFlag.LabelPolicy
	}

}

func (x *GetLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetLockoutPolicyRequestFlag struct {
	*GetLockoutPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLockoutPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLockoutPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLockoutPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLockoutPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetLockoutPolicyResponseFlag struct {
	*GetLockoutPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LockoutPolicyFlag
}

func (x *GetLockoutPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLockoutPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LockoutPolicyFlag{LockoutPolicy: new(policy.LockoutPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLockoutPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetLockoutPolicyResponse.Policy = x.policyFlag.LockoutPolicy
	}

}

func (x *GetLockoutPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetLogNotificationProviderRequestFlag struct {
	*GetLogNotificationProviderRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLogNotificationProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLogNotificationProviderRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLogNotificationProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLogNotificationProviderRequestFlag) Changed() bool {
	return x.changed
}

type GetLogNotificationProviderResponseFlag struct {
	*GetLogNotificationProviderResponse

	changed bool
	set     *pflag.FlagSet

	providerFlag *settings.DebugNotificationProviderFlag
}

func (x *GetLogNotificationProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLogNotificationProviderResponse", pflag.ContinueOnError)

	x.providerFlag = &settings.DebugNotificationProviderFlag{DebugNotificationProvider: new(settings.DebugNotificationProvider)}
	x.providerFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLogNotificationProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider"); flagIdx != nil {
		x.providerFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.providerFlag.Changed() {
		x.changed = true
		x.GetLogNotificationProviderResponse.Provider = x.providerFlag.DebugNotificationProvider
	}

}

func (x *GetLogNotificationProviderResponseFlag) Changed() bool {
	return x.changed
}

type GetLoginPolicyRequestFlag struct {
	*GetLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLoginPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetLoginPolicyResponseFlag struct {
	*GetLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LoginPolicyFlag
}

func (x *GetLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLoginPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LoginPolicyFlag{LoginPolicy: new(policy.LoginPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetLoginPolicyResponse.Policy = x.policyFlag.LoginPolicy
	}

}

func (x *GetLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetMyInstanceRequestFlag struct {
	*GetMyInstanceRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyInstanceRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyInstanceRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyInstanceRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyInstanceRequestFlag) Changed() bool {
	return x.changed
}

type GetMyInstanceResponseFlag struct {
	*GetMyInstanceResponse

	changed bool
	set     *pflag.FlagSet

	instanceFlag *instance.InstanceDetailFlag
}

func (x *GetMyInstanceResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyInstanceResponse", pflag.ContinueOnError)

	x.instanceFlag = &instance.InstanceDetailFlag{InstanceDetail: new(instance.InstanceDetail)}
	x.instanceFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyInstanceResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "instance")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("instance"); flagIdx != nil {
		x.instanceFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.instanceFlag.Changed() {
		x.changed = true
		x.GetMyInstanceResponse.Instance = x.instanceFlag.InstanceDetail
	}

}

func (x *GetMyInstanceResponseFlag) Changed() bool {
	return x.changed
}

type GetNotificationPolicyRequestFlag struct {
	*GetNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetNotificationPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetNotificationPolicyResponseFlag struct {
	*GetNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.NotificationPolicyFlag
}

func (x *GetNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetNotificationPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.NotificationPolicyFlag{NotificationPolicy: new(policy.NotificationPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetNotificationPolicyResponse.Policy = x.policyFlag.NotificationPolicy
	}

}

func (x *GetNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetOIDCSettingsRequestFlag struct {
	*GetOIDCSettingsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetOIDCSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOIDCSettingsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetOIDCSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetOIDCSettingsRequestFlag) Changed() bool {
	return x.changed
}

type GetOIDCSettingsResponseFlag struct {
	*GetOIDCSettingsResponse

	changed bool
	set     *pflag.FlagSet

	settingsFlag *settings.OIDCSettingsFlag
}

func (x *GetOIDCSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOIDCSettingsResponse", pflag.ContinueOnError)

	x.settingsFlag = &settings.OIDCSettingsFlag{OIDCSettings: new(settings.OIDCSettings)}
	x.settingsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOIDCSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "settings")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("settings"); flagIdx != nil {
		x.settingsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.settingsFlag.Changed() {
		x.changed = true
		x.GetOIDCSettingsResponse.Settings = x.settingsFlag.OIDCSettings
	}

}

func (x *GetOIDCSettingsResponseFlag) Changed() bool {
	return x.changed
}

type GetOrgByIDRequestFlag struct {
	*GetOrgByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetOrgByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetOrgByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetOrgByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetOrgByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetOrgByIDResponseFlag struct {
	*GetOrgByIDResponse

	changed bool
	set     *pflag.FlagSet

	orgFlag *org.OrgFlag
}

func (x *GetOrgByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgByIDResponse", pflag.ContinueOnError)

	x.orgFlag = &org.OrgFlag{Org: new(org.Org)}
	x.orgFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOrgByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.GetOrgByIDResponse.Org = x.orgFlag.Org
	}

}

func (x *GetOrgByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetOrgIAMPolicyRequestFlag struct {
	*GetOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgIAMPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetOrgIAMPolicyResponseFlag struct {
	*GetOrgIAMPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.OrgIAMPolicyFlag
}

func (x *GetOrgIAMPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgIAMPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.OrgIAMPolicyFlag{OrgIAMPolicy: new(policy.OrgIAMPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOrgIAMPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetOrgIAMPolicyResponse.Policy = x.policyFlag.OrgIAMPolicy
	}

}

func (x *GetOrgIAMPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPasswordAgePolicyRequestFlag struct {
	*GetPasswordAgePolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPasswordAgePolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordAgePolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPasswordAgePolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPasswordAgePolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPasswordAgePolicyResponseFlag struct {
	*GetPasswordAgePolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PasswordAgePolicyFlag
}

func (x *GetPasswordAgePolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordAgePolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PasswordAgePolicyFlag{PasswordAgePolicy: new(policy.PasswordAgePolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPasswordAgePolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPasswordAgePolicyResponse.Policy = x.policyFlag.PasswordAgePolicy
	}

}

func (x *GetPasswordAgePolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPasswordComplexityPolicyRequestFlag struct {
	*GetPasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordComplexityPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPasswordComplexityPolicyResponseFlag struct {
	*GetPasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PasswordComplexityPolicyFlag
}

func (x *GetPasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PasswordComplexityPolicyFlag{PasswordComplexityPolicy: new(policy.PasswordComplexityPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPasswordComplexityPolicyResponse.Policy = x.policyFlag.PasswordComplexityPolicy
	}

}

func (x *GetPasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPreviewLabelPolicyRequestFlag struct {
	*GetPreviewLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPreviewLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPreviewLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPreviewLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPreviewLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPreviewLabelPolicyResponseFlag struct {
	*GetPreviewLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LabelPolicyFlag
}

func (x *GetPreviewLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPreviewLabelPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LabelPolicyFlag{LabelPolicy: new(policy.LabelPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPreviewLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPreviewLabelPolicyResponse.Policy = x.policyFlag.LabelPolicy
	}

}

func (x *GetPreviewLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPrivacyPolicyRequestFlag struct {
	*GetPrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPrivacyPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPrivacyPolicyResponseFlag struct {
	*GetPrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PrivacyPolicyFlag
}

func (x *GetPrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPrivacyPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PrivacyPolicyFlag{PrivacyPolicy: new(policy.PrivacyPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPrivacyPolicyResponse.Policy = x.policyFlag.PrivacyPolicy
	}

}

func (x *GetPrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetProviderByIDRequestFlag struct {
	*GetProviderByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetProviderByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProviderByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetProviderByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetProviderByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetProviderByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetProviderByIDResponseFlag struct {
	*GetProviderByIDResponse

	changed bool
	set     *pflag.FlagSet

	idpFlag *idp.ProviderFlag
}

func (x *GetProviderByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProviderByIDResponse", pflag.ContinueOnError)

	x.idpFlag = &idp.ProviderFlag{Provider: new(idp.Provider)}
	x.idpFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetProviderByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp"); flagIdx != nil {
		x.idpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpFlag.Changed() {
		x.changed = true
		x.GetProviderByIDResponse.Idp = x.idpFlag.Provider
	}

}

func (x *GetProviderByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetRestrictionsRequestFlag struct {
	*GetRestrictionsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetRestrictionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetRestrictionsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetRestrictionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetRestrictionsRequestFlag) Changed() bool {
	return x.changed
}

type GetRestrictionsResponseFlag struct {
	*GetRestrictionsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag                       *object.ObjectDetailsFlag
	disallowPublicOrgRegistrationFlag *cli_client.BoolParser
	allowedLanguagesFlag              *cli_client.StringSliceParser
}

func (x *GetRestrictionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetRestrictionsResponse", pflag.ContinueOnError)

	x.disallowPublicOrgRegistrationFlag = cli_client.NewBoolParser(x.set, "disallow-public-org-registration", "")
	x.allowedLanguagesFlag = cli_client.NewStringSliceParser(x.set, "allowed-languages", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetRestrictionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetRestrictionsResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.disallowPublicOrgRegistrationFlag.Changed() {
		x.changed = true
		x.GetRestrictionsResponse.DisallowPublicOrgRegistration = *x.disallowPublicOrgRegistrationFlag.Value
	}
	if x.allowedLanguagesFlag.Changed() {
		x.changed = true
		x.GetRestrictionsResponse.AllowedLanguages = *x.allowedLanguagesFlag.Value
	}
}

func (x *GetRestrictionsResponseFlag) Changed() bool {
	return x.changed
}

type GetSMSProviderRequestFlag struct {
	*GetSMSProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetSMSProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSMSProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetSMSProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetSMSProviderRequest.Id = *x.idFlag.Value
	}
}

func (x *GetSMSProviderRequestFlag) Changed() bool {
	return x.changed
}

type GetSMSProviderResponseFlag struct {
	*GetSMSProviderResponse

	changed bool
	set     *pflag.FlagSet

	configFlag *settings.SMSProviderFlag
}

func (x *GetSMSProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSMSProviderResponse", pflag.ContinueOnError)

	x.configFlag = &settings.SMSProviderFlag{SMSProvider: new(settings.SMSProvider)}
	x.configFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetSMSProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "config")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("config"); flagIdx != nil {
		x.configFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.configFlag.Changed() {
		x.changed = true
		x.GetSMSProviderResponse.Config = x.configFlag.SMSProvider
	}

}

func (x *GetSMSProviderResponseFlag) Changed() bool {
	return x.changed
}

type GetSMTPConfigRequestFlag struct {
	*GetSMTPConfigRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetSMTPConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSMTPConfigRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetSMTPConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetSMTPConfigRequestFlag) Changed() bool {
	return x.changed
}

type GetSMTPConfigResponseFlag struct {
	*GetSMTPConfigResponse

	changed bool
	set     *pflag.FlagSet

	smtpConfigFlag *settings.SMTPConfigFlag
}

func (x *GetSMTPConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSMTPConfigResponse", pflag.ContinueOnError)

	x.smtpConfigFlag = &settings.SMTPConfigFlag{SMTPConfig: new(settings.SMTPConfig)}
	x.smtpConfigFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetSMTPConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "smtp-config")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("smtp-config"); flagIdx != nil {
		x.smtpConfigFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.smtpConfigFlag.Changed() {
		x.changed = true
		x.GetSMTPConfigResponse.SmtpConfig = x.smtpConfigFlag.SMTPConfig
	}

}

func (x *GetSMTPConfigResponseFlag) Changed() bool {
	return x.changed
}

type GetSecretGeneratorRequestFlag struct {
	*GetSecretGeneratorRequest

	changed bool
	set     *pflag.FlagSet

	generatorTypeFlag *cli_client.EnumParser[settings.SecretGeneratorType]
}

func (x *GetSecretGeneratorRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSecretGeneratorRequest", pflag.ContinueOnError)

	x.generatorTypeFlag = cli_client.NewEnumParser[settings.SecretGeneratorType](x.set, "generator-type", "")
	parent.AddFlagSet(x.set)
}

func (x *GetSecretGeneratorRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.generatorTypeFlag.Changed() {
		x.changed = true
		x.GetSecretGeneratorRequest.GeneratorType = *x.generatorTypeFlag.Value
	}
}

func (x *GetSecretGeneratorRequestFlag) Changed() bool {
	return x.changed
}

type GetSecretGeneratorResponseFlag struct {
	*GetSecretGeneratorResponse

	changed bool
	set     *pflag.FlagSet

	secretGeneratorFlag *settings.SecretGeneratorFlag
}

func (x *GetSecretGeneratorResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSecretGeneratorResponse", pflag.ContinueOnError)

	x.secretGeneratorFlag = &settings.SecretGeneratorFlag{SecretGenerator: new(settings.SecretGenerator)}
	x.secretGeneratorFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetSecretGeneratorResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "secret-generator")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("secret-generator"); flagIdx != nil {
		x.secretGeneratorFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.secretGeneratorFlag.Changed() {
		x.changed = true
		x.GetSecretGeneratorResponse.SecretGenerator = x.secretGeneratorFlag.SecretGenerator
	}

}

func (x *GetSecretGeneratorResponseFlag) Changed() bool {
	return x.changed
}

type GetSecurityPolicyRequestFlag struct {
	*GetSecurityPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetSecurityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSecurityPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetSecurityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetSecurityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetSecurityPolicyResponseFlag struct {
	*GetSecurityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *settings.SecurityPolicyFlag
}

func (x *GetSecurityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSecurityPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &settings.SecurityPolicyFlag{SecurityPolicy: new(settings.SecurityPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetSecurityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetSecurityPolicyResponse.Policy = x.policyFlag.SecurityPolicy
	}

}

func (x *GetSecurityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetSupportedLanguagesRequestFlag struct {
	*GetSupportedLanguagesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetSupportedLanguagesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSupportedLanguagesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetSupportedLanguagesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetSupportedLanguagesRequestFlag) Changed() bool {
	return x.changed
}

type GetSupportedLanguagesResponseFlag struct {
	*GetSupportedLanguagesResponse

	changed bool
	set     *pflag.FlagSet

	languagesFlag *cli_client.StringSliceParser
}

func (x *GetSupportedLanguagesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSupportedLanguagesResponse", pflag.ContinueOnError)

	x.languagesFlag = cli_client.NewStringSliceParser(x.set, "languages", "")
	parent.AddFlagSet(x.set)
}

func (x *GetSupportedLanguagesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languagesFlag.Changed() {
		x.changed = true
		x.GetSupportedLanguagesResponse.Languages = *x.languagesFlag.Value
	}
}

func (x *GetSupportedLanguagesResponseFlag) Changed() bool {
	return x.changed
}

type HealthzRequestFlag struct {
	*HealthzRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzRequestFlag) Changed() bool {
	return x.changed
}

type HealthzResponseFlag struct {
	*HealthzResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzResponseFlag) Changed() bool {
	return x.changed
}

type IDPQueryFlag struct {
	*IDPQuery

	changed bool
	set     *pflag.FlagSet

	idpIdQueryFlag   *idp.IDPIDQueryFlag
	idpNameQueryFlag *idp.IDPNameQueryFlag
}

func (x *IDPQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPQuery", pflag.ContinueOnError)

	x.idpIdQueryFlag = &idp.IDPIDQueryFlag{IDPIDQuery: new(idp.IDPIDQuery)}
	x.idpIdQueryFlag.AddFlags(x.set)
	x.idpNameQueryFlag = &idp.IDPNameQueryFlag{IDPNameQuery: new(idp.IDPNameQuery)}
	x.idpNameQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *IDPQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp-id-query"); flagIdx != nil {
		x.idpIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-name-query"); flagIdx != nil {
		x.idpNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query").Last().Flag {
	case "idp-id-query":
		if x.idpIdQueryFlag.Changed() {
			x.changed = true
			x.IDPQuery.Query = &IDPQuery_IdpIdQuery{IdpIdQuery: x.idpIdQueryFlag.IDPIDQuery}
		}
	case "idp-name-query":
		if x.idpNameQueryFlag.Changed() {
			x.changed = true
			x.IDPQuery.Query = &IDPQuery_IdpNameQuery{IdpNameQuery: x.idpNameQueryFlag.IDPNameQuery}
		}
	}
}

func (x *IDPQueryFlag) Changed() bool {
	return x.changed
}

type ImportDataErrorFlag struct {
	*ImportDataError

	changed bool
	set     *pflag.FlagSet

	typeFlag    *cli_client.StringParser
	idFlag      *cli_client.StringParser
	messageFlag *cli_client.StringParser
}

func (x *ImportDataErrorFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataError", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewStringParser(x.set, "type", "")
	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.messageFlag = cli_client.NewStringParser(x.set, "message", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataErrorFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.ImportDataError.Type = *x.typeFlag.Value
	}
	if x.idFlag.Changed() {
		x.changed = true
		x.ImportDataError.Id = *x.idFlag.Value
	}
	if x.messageFlag.Changed() {
		x.changed = true
		x.ImportDataError.Message = *x.messageFlag.Value
	}
}

func (x *ImportDataErrorFlag) Changed() bool {
	return x.changed
}

type ImportDataOrgFlag struct {
	*ImportDataOrg

	changed bool
	set     *pflag.FlagSet

	orgsFlag []*DataOrgFlag
}

func (x *ImportDataOrgFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataOrg", pflag.ContinueOnError)

	x.orgsFlag = []*DataOrgFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ImportDataOrgFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "orgs")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("orgs") {
		x.orgsFlag = append(x.orgsFlag, &DataOrgFlag{DataOrg: new(DataOrg)})
		x.orgsFlag[len(x.orgsFlag)-1].AddFlags(x.set)
		x.orgsFlag[len(x.orgsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.orgsFlag) > 0 {
		x.changed = true
		x.Orgs = make([]*DataOrg, len(x.orgsFlag))
		for i, value := range x.orgsFlag {
			x.ImportDataOrg.Orgs[i] = value.DataOrg
		}
	}

}

func (x *ImportDataOrgFlag) Changed() bool {
	return x.changed
}

type ImportDataRequestFlag struct {
	*ImportDataRequest

	changed bool
	set     *pflag.FlagSet

	dataOrgsFlag        *ImportDataOrgFlag
	dataOrgsv1Flag      *v1.ImportDataOrgFlag
	dataOrgsLocalFlag   *ImportDataRequest_LocalInputFlag
	dataOrgsv1LocalFlag *ImportDataRequest_LocalInputFlag
	dataOrgsS3Flag      *ImportDataRequest_S3InputFlag
	dataOrgsv1S3Flag    *ImportDataRequest_S3InputFlag
	dataOrgsGcsFlag     *ImportDataRequest_GCSInputFlag
	dataOrgsv1GcsFlag   *ImportDataRequest_GCSInputFlag
	timeoutFlag         *cli_client.StringParser
}

func (x *ImportDataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataRequest", pflag.ContinueOnError)

	x.timeoutFlag = cli_client.NewStringParser(x.set, "timeout", "")
	x.dataOrgsFlag = &ImportDataOrgFlag{ImportDataOrg: new(ImportDataOrg)}
	x.dataOrgsFlag.AddFlags(x.set)
	x.dataOrgsv1Flag = &v1.ImportDataOrgFlag{ImportDataOrg: new(v1.ImportDataOrg)}
	x.dataOrgsv1Flag.AddFlags(x.set)
	x.dataOrgsLocalFlag = &ImportDataRequest_LocalInputFlag{ImportDataRequest_LocalInput: new(ImportDataRequest_LocalInput)}
	x.dataOrgsLocalFlag.AddFlags(x.set)
	x.dataOrgsv1LocalFlag = &ImportDataRequest_LocalInputFlag{ImportDataRequest_LocalInput: new(ImportDataRequest_LocalInput)}
	x.dataOrgsv1LocalFlag.AddFlags(x.set)
	x.dataOrgsS3Flag = &ImportDataRequest_S3InputFlag{ImportDataRequest_S3Input: new(ImportDataRequest_S3Input)}
	x.dataOrgsS3Flag.AddFlags(x.set)
	x.dataOrgsv1S3Flag = &ImportDataRequest_S3InputFlag{ImportDataRequest_S3Input: new(ImportDataRequest_S3Input)}
	x.dataOrgsv1S3Flag.AddFlags(x.set)
	x.dataOrgsGcsFlag = &ImportDataRequest_GCSInputFlag{ImportDataRequest_GCSInput: new(ImportDataRequest_GCSInput)}
	x.dataOrgsGcsFlag.AddFlags(x.set)
	x.dataOrgsv1GcsFlag = &ImportDataRequest_GCSInputFlag{ImportDataRequest_GCSInput: new(ImportDataRequest_GCSInput)}
	x.dataOrgsv1GcsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ImportDataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "data-orgs", "data-orgsv1", "data-orgs-local", "data-orgsv1-local", "data-orgs-s3", "data-orgsv1-s3", "data-orgs-gcs", "data-orgsv1-gcs")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("data-orgs"); flagIdx != nil {
		x.dataOrgsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgsv1"); flagIdx != nil {
		x.dataOrgsv1Flag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgs-local"); flagIdx != nil {
		x.dataOrgsLocalFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgsv1-local"); flagIdx != nil {
		x.dataOrgsv1LocalFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgs-s3"); flagIdx != nil {
		x.dataOrgsS3Flag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgsv1-s3"); flagIdx != nil {
		x.dataOrgsv1S3Flag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgs-gcs"); flagIdx != nil {
		x.dataOrgsGcsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("data-orgsv1-gcs"); flagIdx != nil {
		x.dataOrgsv1GcsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.timeoutFlag.Changed() {
		x.changed = true
		x.ImportDataRequest.Timeout = *x.timeoutFlag.Value
	}

	switch cli_client.FieldIndexes(args, "data-orgs", "data-orgsv1", "data-orgs-local", "data-orgsv1-local", "data-orgs-s3", "data-orgsv1-s3", "data-orgs-gcs", "data-orgsv1-gcs").Last().Flag {
	case "data-orgs":
		if x.dataOrgsFlag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgs{DataOrgs: x.dataOrgsFlag.ImportDataOrg}
		}
	case "data-orgsv1":
		if x.dataOrgsv1Flag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsv1{DataOrgsv1: x.dataOrgsv1Flag.ImportDataOrg}
		}
	case "data-orgs-local":
		if x.dataOrgsLocalFlag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsLocal{DataOrgsLocal: x.dataOrgsLocalFlag.ImportDataRequest_LocalInput}
		}
	case "data-orgsv1-local":
		if x.dataOrgsv1LocalFlag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsv1Local{DataOrgsv1Local: x.dataOrgsv1LocalFlag.ImportDataRequest_LocalInput}
		}
	case "data-orgs-s3":
		if x.dataOrgsS3Flag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsS3{DataOrgsS3: x.dataOrgsS3Flag.ImportDataRequest_S3Input}
		}
	case "data-orgsv1-s3":
		if x.dataOrgsv1S3Flag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsv1S3{DataOrgsv1S3: x.dataOrgsv1S3Flag.ImportDataRequest_S3Input}
		}
	case "data-orgs-gcs":
		if x.dataOrgsGcsFlag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsGcs{DataOrgsGcs: x.dataOrgsGcsFlag.ImportDataRequest_GCSInput}
		}
	case "data-orgsv1-gcs":
		if x.dataOrgsv1GcsFlag.Changed() {
			x.changed = true
			x.ImportDataRequest.Data = &ImportDataRequest_DataOrgsv1Gcs{DataOrgsv1Gcs: x.dataOrgsv1GcsFlag.ImportDataRequest_GCSInput}
		}
	}
}

func (x *ImportDataRequestFlag) Changed() bool {
	return x.changed
}

type ImportDataRequest_GCSInputFlag struct {
	*ImportDataRequest_GCSInput

	changed bool
	set     *pflag.FlagSet

	bucketFlag             *cli_client.StringParser
	serviceaccountJsonFlag *cli_client.StringParser
	pathFlag               *cli_client.StringParser
}

func (x *ImportDataRequest_GCSInputFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataRequest_GCSInput", pflag.ContinueOnError)

	x.bucketFlag = cli_client.NewStringParser(x.set, "bucket", "")
	x.serviceaccountJsonFlag = cli_client.NewStringParser(x.set, "serviceaccount-json", "")
	x.pathFlag = cli_client.NewStringParser(x.set, "path", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataRequest_GCSInputFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.bucketFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_GCSInput.Bucket = *x.bucketFlag.Value
	}
	if x.serviceaccountJsonFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_GCSInput.ServiceaccountJson = *x.serviceaccountJsonFlag.Value
	}
	if x.pathFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_GCSInput.Path = *x.pathFlag.Value
	}
}

func (x *ImportDataRequest_GCSInputFlag) Changed() bool {
	return x.changed
}

type ImportDataRequest_LocalInputFlag struct {
	*ImportDataRequest_LocalInput

	changed bool
	set     *pflag.FlagSet

	pathFlag *cli_client.StringParser
}

func (x *ImportDataRequest_LocalInputFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataRequest_LocalInput", pflag.ContinueOnError)

	x.pathFlag = cli_client.NewStringParser(x.set, "path", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataRequest_LocalInputFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.pathFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_LocalInput.Path = *x.pathFlag.Value
	}
}

func (x *ImportDataRequest_LocalInputFlag) Changed() bool {
	return x.changed
}

type ImportDataRequest_S3InputFlag struct {
	*ImportDataRequest_S3Input

	changed bool
	set     *pflag.FlagSet

	pathFlag            *cli_client.StringParser
	endpointFlag        *cli_client.StringParser
	accessKeyIdFlag     *cli_client.StringParser
	secretAccessKeyFlag *cli_client.StringParser
	sslFlag             *cli_client.BoolParser
	bucketFlag          *cli_client.StringParser
}

func (x *ImportDataRequest_S3InputFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataRequest_S3Input", pflag.ContinueOnError)

	x.pathFlag = cli_client.NewStringParser(x.set, "path", "")
	x.endpointFlag = cli_client.NewStringParser(x.set, "endpoint", "")
	x.accessKeyIdFlag = cli_client.NewStringParser(x.set, "access-key-id", "")
	x.secretAccessKeyFlag = cli_client.NewStringParser(x.set, "secret-access-key", "")
	x.sslFlag = cli_client.NewBoolParser(x.set, "ssl", "")
	x.bucketFlag = cli_client.NewStringParser(x.set, "bucket", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataRequest_S3InputFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.pathFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_S3Input.Path = *x.pathFlag.Value
	}
	if x.endpointFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_S3Input.Endpoint = *x.endpointFlag.Value
	}
	if x.accessKeyIdFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_S3Input.AccessKeyId = *x.accessKeyIdFlag.Value
	}
	if x.secretAccessKeyFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_S3Input.SecretAccessKey = *x.secretAccessKeyFlag.Value
	}
	if x.sslFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_S3Input.Ssl = *x.sslFlag.Value
	}
	if x.bucketFlag.Changed() {
		x.changed = true
		x.ImportDataRequest_S3Input.Bucket = *x.bucketFlag.Value
	}
}

func (x *ImportDataRequest_S3InputFlag) Changed() bool {
	return x.changed
}

type ImportDataResponseFlag struct {
	*ImportDataResponse

	changed bool
	set     *pflag.FlagSet

	errorsFlag  []*ImportDataErrorFlag
	successFlag *ImportDataSuccessFlag
}

func (x *ImportDataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataResponse", pflag.ContinueOnError)

	x.errorsFlag = []*ImportDataErrorFlag{}
	x.successFlag = &ImportDataSuccessFlag{ImportDataSuccess: new(ImportDataSuccess)}
	x.successFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ImportDataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "errors", "success")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("success"); flagIdx != nil {
		x.successFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("errors") {
		x.errorsFlag = append(x.errorsFlag, &ImportDataErrorFlag{ImportDataError: new(ImportDataError)})
		x.errorsFlag[len(x.errorsFlag)-1].AddFlags(x.set)
		x.errorsFlag[len(x.errorsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if len(x.errorsFlag) > 0 {
		x.changed = true
		x.Errors = make([]*ImportDataError, len(x.errorsFlag))
		for i, value := range x.errorsFlag {
			x.ImportDataResponse.Errors[i] = value.ImportDataError
		}
	}

	if x.successFlag.Changed() {
		x.changed = true
		x.ImportDataResponse.Success = x.successFlag.ImportDataSuccess
	}

}

func (x *ImportDataResponseFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessFlag struct {
	*ImportDataSuccess

	changed bool
	set     *pflag.FlagSet

	orgsFlag []*ImportDataSuccessOrgFlag
}

func (x *ImportDataSuccessFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccess", pflag.ContinueOnError)

	x.orgsFlag = []*ImportDataSuccessOrgFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "orgs")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("orgs") {
		x.orgsFlag = append(x.orgsFlag, &ImportDataSuccessOrgFlag{ImportDataSuccessOrg: new(ImportDataSuccessOrg)})
		x.orgsFlag[len(x.orgsFlag)-1].AddFlags(x.set)
		x.orgsFlag[len(x.orgsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.orgsFlag) > 0 {
		x.changed = true
		x.Orgs = make([]*ImportDataSuccessOrg, len(x.orgsFlag))
		for i, value := range x.orgsFlag {
			x.ImportDataSuccess.Orgs[i] = value.ImportDataSuccessOrg
		}
	}

}

func (x *ImportDataSuccessFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessOrgFlag struct {
	*ImportDataSuccessOrg

	changed bool
	set     *pflag.FlagSet

	orgIdFlag               *cli_client.StringParser
	projectIdsFlag          *cli_client.StringSliceParser
	projectRolesFlag        *cli_client.StringSliceParser
	oidcAppIdsFlag          *cli_client.StringSliceParser
	apiAppIdsFlag           *cli_client.StringSliceParser
	humanUserIdsFlag        *cli_client.StringSliceParser
	machineUserIdsFlag      *cli_client.StringSliceParser
	actionIdsFlag           *cli_client.StringSliceParser
	triggerActionsFlag      []*management.SetTriggerActionsRequestFlag
	projectGrantsFlag       []*ImportDataSuccessProjectGrantFlag
	userGrantsFlag          []*ImportDataSuccessUserGrantFlag
	orgMembersFlag          *cli_client.StringSliceParser
	projectMembersFlag      []*ImportDataSuccessProjectMemberFlag
	projectGrantMembersFlag []*ImportDataSuccessProjectGrantMemberFlag
	oidcIpdsFlag            *cli_client.StringSliceParser
	jwtIdpsFlag             *cli_client.StringSliceParser
	idpLinksFlag            *cli_client.StringSliceParser
	userLinksFlag           []*ImportDataSuccessUserLinksFlag
	userMetadataFlag        []*ImportDataSuccessUserMetadataFlag
	domainsFlag             *cli_client.StringSliceParser
	appKeysFlag             *cli_client.StringSliceParser
	machineKeysFlag         *cli_client.StringSliceParser
}

func (x *ImportDataSuccessOrgFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessOrg", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.projectIdsFlag = cli_client.NewStringSliceParser(x.set, "project-ids", "")
	x.projectRolesFlag = cli_client.NewStringSliceParser(x.set, "project-roles", "")
	x.oidcAppIdsFlag = cli_client.NewStringSliceParser(x.set, "oidc-app-ids", "")
	x.apiAppIdsFlag = cli_client.NewStringSliceParser(x.set, "api-app-ids", "")
	x.humanUserIdsFlag = cli_client.NewStringSliceParser(x.set, "human-user-ids", "")
	x.machineUserIdsFlag = cli_client.NewStringSliceParser(x.set, "machine-user-ids", "")
	x.actionIdsFlag = cli_client.NewStringSliceParser(x.set, "action-ids", "")
	x.triggerActionsFlag = []*management.SetTriggerActionsRequestFlag{}
	x.projectGrantsFlag = []*ImportDataSuccessProjectGrantFlag{}
	x.userGrantsFlag = []*ImportDataSuccessUserGrantFlag{}
	x.orgMembersFlag = cli_client.NewStringSliceParser(x.set, "org-members", "")
	x.projectMembersFlag = []*ImportDataSuccessProjectMemberFlag{}
	x.projectGrantMembersFlag = []*ImportDataSuccessProjectGrantMemberFlag{}
	x.oidcIpdsFlag = cli_client.NewStringSliceParser(x.set, "oidc-ipds", "")
	x.jwtIdpsFlag = cli_client.NewStringSliceParser(x.set, "jwt-idps", "")
	x.idpLinksFlag = cli_client.NewStringSliceParser(x.set, "idp-links", "")
	x.userLinksFlag = []*ImportDataSuccessUserLinksFlag{}
	x.userMetadataFlag = []*ImportDataSuccessUserMetadataFlag{}
	x.domainsFlag = cli_client.NewStringSliceParser(x.set, "domains", "")
	x.appKeysFlag = cli_client.NewStringSliceParser(x.set, "app-keys", "")
	x.machineKeysFlag = cli_client.NewStringSliceParser(x.set, "machine-keys", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessOrgFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "trigger-actions", "project-grants", "user-grants", "project-members", "project-grant-members", "user-links", "user-metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("trigger-actions") {
		x.triggerActionsFlag = append(x.triggerActionsFlag, &management.SetTriggerActionsRequestFlag{SetTriggerActionsRequest: new(management.SetTriggerActionsRequest)})
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].AddFlags(x.set)
		x.triggerActionsFlag[len(x.triggerActionsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-grants") {
		x.projectGrantsFlag = append(x.projectGrantsFlag, &ImportDataSuccessProjectGrantFlag{ImportDataSuccessProjectGrant: new(ImportDataSuccessProjectGrant)})
		x.projectGrantsFlag[len(x.projectGrantsFlag)-1].AddFlags(x.set)
		x.projectGrantsFlag[len(x.projectGrantsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-grants") {
		x.userGrantsFlag = append(x.userGrantsFlag, &ImportDataSuccessUserGrantFlag{ImportDataSuccessUserGrant: new(ImportDataSuccessUserGrant)})
		x.userGrantsFlag[len(x.userGrantsFlag)-1].AddFlags(x.set)
		x.userGrantsFlag[len(x.userGrantsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-members") {
		x.projectMembersFlag = append(x.projectMembersFlag, &ImportDataSuccessProjectMemberFlag{ImportDataSuccessProjectMember: new(ImportDataSuccessProjectMember)})
		x.projectMembersFlag[len(x.projectMembersFlag)-1].AddFlags(x.set)
		x.projectMembersFlag[len(x.projectMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("project-grant-members") {
		x.projectGrantMembersFlag = append(x.projectGrantMembersFlag, &ImportDataSuccessProjectGrantMemberFlag{ImportDataSuccessProjectGrantMember: new(ImportDataSuccessProjectGrantMember)})
		x.projectGrantMembersFlag[len(x.projectGrantMembersFlag)-1].AddFlags(x.set)
		x.projectGrantMembersFlag[len(x.projectGrantMembersFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-links") {
		x.userLinksFlag = append(x.userLinksFlag, &ImportDataSuccessUserLinksFlag{ImportDataSuccessUserLinks: new(ImportDataSuccessUserLinks)})
		x.userLinksFlag[len(x.userLinksFlag)-1].AddFlags(x.set)
		x.userLinksFlag[len(x.userLinksFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("user-metadata") {
		x.userMetadataFlag = append(x.userMetadataFlag, &ImportDataSuccessUserMetadataFlag{ImportDataSuccessUserMetadata: new(ImportDataSuccessUserMetadata)})
		x.userMetadataFlag[len(x.userMetadataFlag)-1].AddFlags(x.set)
		x.userMetadataFlag[len(x.userMetadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.OrgId = *x.orgIdFlag.Value
	}
	if x.projectIdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.ProjectIds = *x.projectIdsFlag.Value
	}
	if x.projectRolesFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.ProjectRoles = *x.projectRolesFlag.Value
	}
	if x.oidcAppIdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.OidcAppIds = *x.oidcAppIdsFlag.Value
	}
	if x.apiAppIdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.ApiAppIds = *x.apiAppIdsFlag.Value
	}
	if x.humanUserIdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.HumanUserIds = *x.humanUserIdsFlag.Value
	}
	if x.machineUserIdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.MachineUserIds = *x.machineUserIdsFlag.Value
	}
	if x.actionIdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.ActionIds = *x.actionIdsFlag.Value
	}
	if len(x.triggerActionsFlag) > 0 {
		x.changed = true
		x.TriggerActions = make([]*management.SetTriggerActionsRequest, len(x.triggerActionsFlag))
		for i, value := range x.triggerActionsFlag {
			x.ImportDataSuccessOrg.TriggerActions[i] = value.SetTriggerActionsRequest
		}
	}

	if len(x.projectGrantsFlag) > 0 {
		x.changed = true
		x.ProjectGrants = make([]*ImportDataSuccessProjectGrant, len(x.projectGrantsFlag))
		for i, value := range x.projectGrantsFlag {
			x.ImportDataSuccessOrg.ProjectGrants[i] = value.ImportDataSuccessProjectGrant
		}
	}

	if len(x.userGrantsFlag) > 0 {
		x.changed = true
		x.UserGrants = make([]*ImportDataSuccessUserGrant, len(x.userGrantsFlag))
		for i, value := range x.userGrantsFlag {
			x.ImportDataSuccessOrg.UserGrants[i] = value.ImportDataSuccessUserGrant
		}
	}

	if x.orgMembersFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.OrgMembers = *x.orgMembersFlag.Value
	}
	if len(x.projectMembersFlag) > 0 {
		x.changed = true
		x.ProjectMembers = make([]*ImportDataSuccessProjectMember, len(x.projectMembersFlag))
		for i, value := range x.projectMembersFlag {
			x.ImportDataSuccessOrg.ProjectMembers[i] = value.ImportDataSuccessProjectMember
		}
	}

	if len(x.projectGrantMembersFlag) > 0 {
		x.changed = true
		x.ProjectGrantMembers = make([]*ImportDataSuccessProjectGrantMember, len(x.projectGrantMembersFlag))
		for i, value := range x.projectGrantMembersFlag {
			x.ImportDataSuccessOrg.ProjectGrantMembers[i] = value.ImportDataSuccessProjectGrantMember
		}
	}

	if x.oidcIpdsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.OidcIpds = *x.oidcIpdsFlag.Value
	}
	if x.jwtIdpsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.JwtIdps = *x.jwtIdpsFlag.Value
	}
	if x.idpLinksFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.IdpLinks = *x.idpLinksFlag.Value
	}
	if len(x.userLinksFlag) > 0 {
		x.changed = true
		x.UserLinks = make([]*ImportDataSuccessUserLinks, len(x.userLinksFlag))
		for i, value := range x.userLinksFlag {
			x.ImportDataSuccessOrg.UserLinks[i] = value.ImportDataSuccessUserLinks
		}
	}

	if len(x.userMetadataFlag) > 0 {
		x.changed = true
		x.UserMetadata = make([]*ImportDataSuccessUserMetadata, len(x.userMetadataFlag))
		for i, value := range x.userMetadataFlag {
			x.ImportDataSuccessOrg.UserMetadata[i] = value.ImportDataSuccessUserMetadata
		}
	}

	if x.domainsFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.Domains = *x.domainsFlag.Value
	}
	if x.appKeysFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.AppKeys = *x.appKeysFlag.Value
	}
	if x.machineKeysFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessOrg.MachineKeys = *x.machineKeysFlag.Value
	}
}

func (x *ImportDataSuccessOrgFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessProjectGrantFlag struct {
	*ImportDataSuccessProjectGrant

	changed bool
	set     *pflag.FlagSet

	grantIdFlag   *cli_client.StringParser
	projectIdFlag *cli_client.StringParser
	orgIdFlag     *cli_client.StringParser
}

func (x *ImportDataSuccessProjectGrantFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessProjectGrant", pflag.ContinueOnError)

	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessProjectGrantFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectGrant.GrantId = *x.grantIdFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectGrant.ProjectId = *x.projectIdFlag.Value
	}
	if x.orgIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectGrant.OrgId = *x.orgIdFlag.Value
	}
}

func (x *ImportDataSuccessProjectGrantFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessProjectGrantMemberFlag struct {
	*ImportDataSuccessProjectGrantMember

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
}

func (x *ImportDataSuccessProjectGrantMemberFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessProjectGrantMember", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessProjectGrantMemberFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectGrantMember.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectGrantMember.GrantId = *x.grantIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectGrantMember.UserId = *x.userIdFlag.Value
	}
}

func (x *ImportDataSuccessProjectGrantMemberFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessProjectMemberFlag struct {
	*ImportDataSuccessProjectMember

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
}

func (x *ImportDataSuccessProjectMemberFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessProjectMember", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessProjectMemberFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectMember.ProjectId = *x.projectIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessProjectMember.UserId = *x.userIdFlag.Value
	}
}

func (x *ImportDataSuccessProjectMemberFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessUserGrantFlag struct {
	*ImportDataSuccessUserGrant

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
}

func (x *ImportDataSuccessUserGrantFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessUserGrant", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessUserGrantFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserGrant.ProjectId = *x.projectIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserGrant.UserId = *x.userIdFlag.Value
	}
}

func (x *ImportDataSuccessUserGrantFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessUserLinksFlag struct {
	*ImportDataSuccessUserLinks

	changed bool
	set     *pflag.FlagSet

	userIdFlag         *cli_client.StringParser
	externalUserIdFlag *cli_client.StringParser
	displayNameFlag    *cli_client.StringParser
	idpIdFlag          *cli_client.StringParser
}

func (x *ImportDataSuccessUserLinksFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessUserLinks", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.externalUserIdFlag = cli_client.NewStringParser(x.set, "external-user-id", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessUserLinksFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserLinks.UserId = *x.userIdFlag.Value
	}
	if x.externalUserIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserLinks.ExternalUserId = *x.externalUserIdFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserLinks.DisplayName = *x.displayNameFlag.Value
	}
	if x.idpIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserLinks.IdpId = *x.idpIdFlag.Value
	}
}

func (x *ImportDataSuccessUserLinksFlag) Changed() bool {
	return x.changed
}

type ImportDataSuccessUserMetadataFlag struct {
	*ImportDataSuccessUserMetadata

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	keyFlag    *cli_client.StringParser
}

func (x *ImportDataSuccessUserMetadataFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportDataSuccessUserMetadata", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportDataSuccessUserMetadataFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserMetadata.UserId = *x.userIdFlag.Value
	}
	if x.keyFlag.Changed() {
		x.changed = true
		x.ImportDataSuccessUserMetadata.Key = *x.keyFlag.Value
	}
}

func (x *ImportDataSuccessUserMetadataFlag) Changed() bool {
	return x.changed
}

type IsOrgUniqueRequestFlag struct {
	*IsOrgUniqueRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag   *cli_client.StringParser
	domainFlag *cli_client.StringParser
}

func (x *IsOrgUniqueRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IsOrgUniqueRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *IsOrgUniqueRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.IsOrgUniqueRequest.Name = *x.nameFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.IsOrgUniqueRequest.Domain = *x.domainFlag.Value
	}
}

func (x *IsOrgUniqueRequestFlag) Changed() bool {
	return x.changed
}

type IsOrgUniqueResponseFlag struct {
	*IsOrgUniqueResponse

	changed bool
	set     *pflag.FlagSet

	isUniqueFlag *cli_client.BoolParser
}

func (x *IsOrgUniqueResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IsOrgUniqueResponse", pflag.ContinueOnError)

	x.isUniqueFlag = cli_client.NewBoolParser(x.set, "is-unique", "")
	parent.AddFlagSet(x.set)
}

func (x *IsOrgUniqueResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.isUniqueFlag.Changed() {
		x.changed = true
		x.IsOrgUniqueResponse.IsUnique = *x.isUniqueFlag.Value
	}
}

func (x *IsOrgUniqueResponseFlag) Changed() bool {
	return x.changed
}

type ListAggregateTypesRequestFlag struct {
	*ListAggregateTypesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListAggregateTypesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAggregateTypesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListAggregateTypesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListAggregateTypesRequestFlag) Changed() bool {
	return x.changed
}

type ListAggregateTypesResponseFlag struct {
	*ListAggregateTypesResponse

	changed bool
	set     *pflag.FlagSet

	aggregateTypesFlag []*event.AggregateTypeFlag
}

func (x *ListAggregateTypesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAggregateTypesResponse", pflag.ContinueOnError)

	x.aggregateTypesFlag = []*event.AggregateTypeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListAggregateTypesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "aggregate-types")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("aggregate-types") {
		x.aggregateTypesFlag = append(x.aggregateTypesFlag, &event.AggregateTypeFlag{AggregateType: new(event.AggregateType)})
		x.aggregateTypesFlag[len(x.aggregateTypesFlag)-1].AddFlags(x.set)
		x.aggregateTypesFlag[len(x.aggregateTypesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.aggregateTypesFlag) > 0 {
		x.changed = true
		x.AggregateTypes = make([]*event.AggregateType, len(x.aggregateTypesFlag))
		for i, value := range x.aggregateTypesFlag {
			x.ListAggregateTypesResponse.AggregateTypes[i] = value.AggregateType
		}
	}

}

func (x *ListAggregateTypesResponseFlag) Changed() bool {
	return x.changed
}

type ListEventTypesRequestFlag struct {
	*ListEventTypesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListEventTypesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListEventTypesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListEventTypesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListEventTypesRequestFlag) Changed() bool {
	return x.changed
}

type ListEventTypesResponseFlag struct {
	*ListEventTypesResponse

	changed bool
	set     *pflag.FlagSet

	eventTypesFlag []*event.EventTypeFlag
}

func (x *ListEventTypesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListEventTypesResponse", pflag.ContinueOnError)

	x.eventTypesFlag = []*event.EventTypeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListEventTypesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "event-types")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("event-types") {
		x.eventTypesFlag = append(x.eventTypesFlag, &event.EventTypeFlag{EventType: new(event.EventType)})
		x.eventTypesFlag[len(x.eventTypesFlag)-1].AddFlags(x.set)
		x.eventTypesFlag[len(x.eventTypesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.eventTypesFlag) > 0 {
		x.changed = true
		x.EventTypes = make([]*event.EventType, len(x.eventTypesFlag))
		for i, value := range x.eventTypesFlag {
			x.ListEventTypesResponse.EventTypes[i] = value.EventType
		}
	}

}

func (x *ListEventTypesResponseFlag) Changed() bool {
	return x.changed
}

type ListEventsRequestFlag struct {
	*ListEventsRequest

	changed bool
	set     *pflag.FlagSet

	sequenceFlag       *cli_client.Uint64Parser
	limitFlag          *cli_client.Uint32Parser
	ascFlag            *cli_client.BoolParser
	editorUserIdFlag   *cli_client.StringParser
	eventTypesFlag     *cli_client.StringSliceParser
	aggregateIdFlag    *cli_client.StringParser
	aggregateTypesFlag *cli_client.StringSliceParser
	resourceOwnerFlag  *cli_client.StringParser
	creationDateFlag   *cli_client.TimestampParser
	rangeFlag          *ListEventsRequestCreationDateRangeFlag
	fromFlag           *cli_client.TimestampParser
}

func (x *ListEventsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListEventsRequest", pflag.ContinueOnError)

	x.sequenceFlag = cli_client.NewUint64Parser(x.set, "sequence", "")
	x.limitFlag = cli_client.NewUint32Parser(x.set, "limit", "")
	x.ascFlag = cli_client.NewBoolParser(x.set, "asc", "")
	x.editorUserIdFlag = cli_client.NewStringParser(x.set, "editor-user-id", "")
	x.eventTypesFlag = cli_client.NewStringSliceParser(x.set, "event-types", "")
	x.aggregateIdFlag = cli_client.NewStringParser(x.set, "aggregate-id", "")
	x.aggregateTypesFlag = cli_client.NewStringSliceParser(x.set, "aggregate-types", "")
	x.resourceOwnerFlag = cli_client.NewStringParser(x.set, "resource-owner", "")
	x.creationDateFlag = cli_client.NewTimestampParser(x.set, "creation-date", "")
	x.fromFlag = cli_client.NewTimestampParser(x.set, "from", "")
	x.rangeFlag = &ListEventsRequestCreationDateRangeFlag{ListEventsRequestCreationDateRange: new(ListEventsRequestCreationDateRange)}
	x.rangeFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListEventsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "range")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("range"); flagIdx != nil {
		x.rangeFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.sequenceFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.Sequence = *x.sequenceFlag.Value
	}
	if x.limitFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.Limit = *x.limitFlag.Value
	}
	if x.ascFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.Asc = *x.ascFlag.Value
	}
	if x.editorUserIdFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.EditorUserId = *x.editorUserIdFlag.Value
	}
	if x.eventTypesFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.EventTypes = *x.eventTypesFlag.Value
	}
	if x.aggregateIdFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.AggregateId = *x.aggregateIdFlag.Value
	}
	if x.aggregateTypesFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.AggregateTypes = *x.aggregateTypesFlag.Value
	}
	if x.resourceOwnerFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.ResourceOwner = *x.resourceOwnerFlag.Value
	}
	if x.creationDateFlag.Changed() {
		x.changed = true
		x.ListEventsRequest.CreationDate = x.creationDateFlag.Value
	}

	switch cli_client.FieldIndexes(args, "range", "from").Last().Flag {
	case "range":
		if x.rangeFlag.Changed() {
			x.changed = true
			x.ListEventsRequest.CreationDateFilter = &ListEventsRequest_Range{Range: x.rangeFlag.ListEventsRequestCreationDateRange}
		}
	case "from":
		if x.fromFlag.Changed() {
			x.changed = true
			x.ListEventsRequest.CreationDateFilter = &ListEventsRequest_From{From: x.fromFlag.Value}
		}
	}
}

func (x *ListEventsRequestFlag) Changed() bool {
	return x.changed
}

type ListEventsRequestCreationDateRangeFlag struct {
	*ListEventsRequestCreationDateRange

	changed bool
	set     *pflag.FlagSet

	sinceFlag *cli_client.TimestampParser
	untilFlag *cli_client.TimestampParser
}

func (x *ListEventsRequestCreationDateRangeFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListEventsRequestCreationDateRange", pflag.ContinueOnError)

	x.sinceFlag = cli_client.NewTimestampParser(x.set, "since", "")
	x.untilFlag = cli_client.NewTimestampParser(x.set, "until", "")
	parent.AddFlagSet(x.set)
}

func (x *ListEventsRequestCreationDateRangeFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.sinceFlag.Changed() {
		x.changed = true
		x.ListEventsRequestCreationDateRange.Since = x.sinceFlag.Value
	}
	if x.untilFlag.Changed() {
		x.changed = true
		x.ListEventsRequestCreationDateRange.Until = x.untilFlag.Value
	}
}

func (x *ListEventsRequestCreationDateRangeFlag) Changed() bool {
	return x.changed
}

type ListEventsResponseFlag struct {
	*ListEventsResponse

	changed bool
	set     *pflag.FlagSet

	eventsFlag []*event.EventFlag
}

func (x *ListEventsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListEventsResponse", pflag.ContinueOnError)

	x.eventsFlag = []*event.EventFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListEventsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "events")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("events") {
		x.eventsFlag = append(x.eventsFlag, &event.EventFlag{Event: new(event.Event)})
		x.eventsFlag[len(x.eventsFlag)-1].AddFlags(x.set)
		x.eventsFlag[len(x.eventsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.eventsFlag) > 0 {
		x.changed = true
		x.Events = make([]*event.Event, len(x.eventsFlag))
		for i, value := range x.eventsFlag {
			x.ListEventsResponse.Events[i] = value.Event
		}
	}

}

func (x *ListEventsResponseFlag) Changed() bool {
	return x.changed
}

type ListFailedEventsRequestFlag struct {
	*ListFailedEventsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListFailedEventsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFailedEventsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListFailedEventsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListFailedEventsRequestFlag) Changed() bool {
	return x.changed
}

type ListFailedEventsResponseFlag struct {
	*ListFailedEventsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*FailedEventFlag
}

func (x *ListFailedEventsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFailedEventsResponse", pflag.ContinueOnError)

	x.resultFlag = []*FailedEventFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListFailedEventsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &FailedEventFlag{FailedEvent: new(FailedEvent)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*FailedEvent, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListFailedEventsResponse.Result[i] = value.FailedEvent
		}
	}

}

func (x *ListFailedEventsResponseFlag) Changed() bool {
	return x.changed
}

type ListIAMMemberRolesRequestFlag struct {
	*ListIAMMemberRolesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListIAMMemberRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIAMMemberRolesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListIAMMemberRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListIAMMemberRolesRequestFlag) Changed() bool {
	return x.changed
}

type ListIAMMemberRolesResponseFlag struct {
	*ListIAMMemberRolesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	rolesFlag   *cli_client.StringSliceParser
}

func (x *ListIAMMemberRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIAMMemberRolesResponse", pflag.ContinueOnError)

	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIAMMemberRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListIAMMemberRolesResponse.Details = x.detailsFlag.ListDetails
	}

	if x.rolesFlag.Changed() {
		x.changed = true
		x.ListIAMMemberRolesResponse.Roles = *x.rolesFlag.Value
	}
}

func (x *ListIAMMemberRolesResponseFlag) Changed() bool {
	return x.changed
}

type ListIAMMembersRequestFlag struct {
	*ListIAMMembersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*member.SearchQueryFlag
}

func (x *ListIAMMembersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIAMMembersRequest", pflag.ContinueOnError)

	x.queriesFlag = []*member.SearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIAMMembersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &member.SearchQueryFlag{SearchQuery: new(member.SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListIAMMembersRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*member.SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListIAMMembersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListIAMMembersRequestFlag) Changed() bool {
	return x.changed
}

type ListIAMMembersResponseFlag struct {
	*ListIAMMembersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*member.MemberFlag
}

func (x *ListIAMMembersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIAMMembersResponse", pflag.ContinueOnError)

	x.resultFlag = []*member.MemberFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIAMMembersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &member.MemberFlag{Member: new(member.Member)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListIAMMembersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*member.Member, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListIAMMembersResponse.Result[i] = value.Member
		}
	}

}

func (x *ListIAMMembersResponseFlag) Changed() bool {
	return x.changed
}

type ListIDPsRequestFlag struct {
	*ListIDPsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[idp.IDPFieldName]
	queriesFlag       []*IDPQueryFlag
}

func (x *ListIDPsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIDPsRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[idp.IDPFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*IDPQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIDPsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &IDPQueryFlag{IDPQuery: new(IDPQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListIDPsRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListIDPsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*IDPQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListIDPsRequest.Queries[i] = value.IDPQuery
		}
	}

}

func (x *ListIDPsRequestFlag) Changed() bool {
	return x.changed
}

type ListIDPsResponseFlag struct {
	*ListIDPsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[idp.IDPFieldName]
	resultFlag        []*idp.IDPFlag
}

func (x *ListIDPsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListIDPsResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[idp.IDPFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*idp.IDPFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListIDPsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.IDPFlag{IDP: new(idp.IDP)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListIDPsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListIDPsResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.IDP, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListIDPsResponse.Result[i] = value.IDP
		}
	}

}

func (x *ListIDPsResponseFlag) Changed() bool {
	return x.changed
}

type ListInstanceDomainsRequestFlag struct {
	*ListInstanceDomainsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[instance.DomainFieldName]
	queriesFlag       []*instance.DomainSearchQueryFlag
}

func (x *ListInstanceDomainsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListInstanceDomainsRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[instance.DomainFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*instance.DomainSearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListInstanceDomainsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &instance.DomainSearchQueryFlag{DomainSearchQuery: new(instance.DomainSearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListInstanceDomainsRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListInstanceDomainsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*instance.DomainSearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListInstanceDomainsRequest.Queries[i] = value.DomainSearchQuery
		}
	}

}

func (x *ListInstanceDomainsRequestFlag) Changed() bool {
	return x.changed
}

type ListInstanceDomainsResponseFlag struct {
	*ListInstanceDomainsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[instance.DomainFieldName]
	resultFlag        []*instance.DomainFlag
}

func (x *ListInstanceDomainsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListInstanceDomainsResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[instance.DomainFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*instance.DomainFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListInstanceDomainsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &instance.DomainFlag{Domain: new(instance.Domain)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListInstanceDomainsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListInstanceDomainsResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*instance.Domain, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListInstanceDomainsResponse.Result[i] = value.Domain
		}
	}

}

func (x *ListInstanceDomainsResponseFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyIDPsRequestFlag struct {
	*ListLoginPolicyIDPsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *object.ListQueryFlag
}

func (x *ListLoginPolicyIDPsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyIDPsRequest", pflag.ContinueOnError)

	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyIDPsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyIDPsRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListLoginPolicyIDPsRequestFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyIDPsResponseFlag struct {
	*ListLoginPolicyIDPsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*idp.IDPLoginPolicyLinkFlag
}

func (x *ListLoginPolicyIDPsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyIDPsResponse", pflag.ContinueOnError)

	x.resultFlag = []*idp.IDPLoginPolicyLinkFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyIDPsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.IDPLoginPolicyLinkFlag{IDPLoginPolicyLink: new(idp.IDPLoginPolicyLink)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyIDPsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.IDPLoginPolicyLink, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListLoginPolicyIDPsResponse.Result[i] = value.IDPLoginPolicyLink
		}
	}

}

func (x *ListLoginPolicyIDPsResponseFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyMultiFactorsRequestFlag struct {
	*ListLoginPolicyMultiFactorsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListLoginPolicyMultiFactorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyMultiFactorsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyMultiFactorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListLoginPolicyMultiFactorsRequestFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyMultiFactorsResponseFlag struct {
	*ListLoginPolicyMultiFactorsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  *cli_client.EnumSliceParser[policy.MultiFactorType]
}

func (x *ListLoginPolicyMultiFactorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyMultiFactorsResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewEnumSliceParser[policy.MultiFactorType](x.set, "result", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyMultiFactorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyMultiFactorsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyMultiFactorsResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListLoginPolicyMultiFactorsResponseFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicySecondFactorsRequestFlag struct {
	*ListLoginPolicySecondFactorsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListLoginPolicySecondFactorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicySecondFactorsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicySecondFactorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListLoginPolicySecondFactorsRequestFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicySecondFactorsResponseFlag struct {
	*ListLoginPolicySecondFactorsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  *cli_client.EnumSliceParser[policy.SecondFactorType]
}

func (x *ListLoginPolicySecondFactorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicySecondFactorsResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewEnumSliceParser[policy.SecondFactorType](x.set, "result", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicySecondFactorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListLoginPolicySecondFactorsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListLoginPolicySecondFactorsResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListLoginPolicySecondFactorsResponseFlag) Changed() bool {
	return x.changed
}

type ListMilestonesRequestFlag struct {
	*ListMilestonesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[milestone.MilestoneFieldName]
	queriesFlag       []*milestone.MilestoneQueryFlag
}

func (x *ListMilestonesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMilestonesRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[milestone.MilestoneFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*milestone.MilestoneQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMilestonesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &milestone.MilestoneQueryFlag{MilestoneQuery: new(milestone.MilestoneQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMilestonesRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListMilestonesRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*milestone.MilestoneQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListMilestonesRequest.Queries[i] = value.MilestoneQuery
		}
	}

}

func (x *ListMilestonesRequestFlag) Changed() bool {
	return x.changed
}

type ListMilestonesResponseFlag struct {
	*ListMilestonesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*milestone.MilestoneFlag
}

func (x *ListMilestonesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMilestonesResponse", pflag.ContinueOnError)

	x.resultFlag = []*milestone.MilestoneFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMilestonesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &milestone.MilestoneFlag{Milestone: new(milestone.Milestone)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMilestonesResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*milestone.Milestone, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMilestonesResponse.Result[i] = value.Milestone
		}
	}

}

func (x *ListMilestonesResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgsRequestFlag struct {
	*ListOrgsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[org.OrgFieldName]
	queriesFlag       []*org.OrgQueryFlag
}

func (x *ListOrgsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgsRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[org.OrgFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*org.OrgQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &org.OrgQueryFlag{OrgQuery: new(org.OrgQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListOrgsRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListOrgsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*org.OrgQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListOrgsRequest.Queries[i] = value.OrgQuery
		}
	}

}

func (x *ListOrgsRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgsResponseFlag struct {
	*ListOrgsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[org.OrgFieldName]
	resultFlag        []*org.OrgFlag
}

func (x *ListOrgsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgsResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[org.OrgFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*org.OrgFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &org.OrgFlag{Org: new(org.Org)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListOrgsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListOrgsResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*org.Org, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListOrgsResponse.Result[i] = value.Org
		}
	}

}

func (x *ListOrgsResponseFlag) Changed() bool {
	return x.changed
}

type ListProvidersRequestFlag struct {
	*ListProvidersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*ProviderQueryFlag
}

func (x *ListProvidersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProvidersRequest", pflag.ContinueOnError)

	x.queriesFlag = []*ProviderQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProvidersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &ProviderQueryFlag{ProviderQuery: new(ProviderQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProvidersRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*ProviderQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProvidersRequest.Queries[i] = value.ProviderQuery
		}
	}

}

func (x *ListProvidersRequestFlag) Changed() bool {
	return x.changed
}

type ListProvidersResponseFlag struct {
	*ListProvidersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*idp.ProviderFlag
}

func (x *ListProvidersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProvidersResponse", pflag.ContinueOnError)

	x.resultFlag = []*idp.ProviderFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProvidersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.ProviderFlag{Provider: new(idp.Provider)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProvidersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.Provider, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProvidersResponse.Result[i] = value.Provider
		}
	}

}

func (x *ListProvidersResponseFlag) Changed() bool {
	return x.changed
}

type ListSMSProvidersRequestFlag struct {
	*ListSMSProvidersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *object.ListQueryFlag
}

func (x *ListSMSProvidersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListSMSProvidersRequest", pflag.ContinueOnError)

	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListSMSProvidersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListSMSProvidersRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListSMSProvidersRequestFlag) Changed() bool {
	return x.changed
}

type ListSMSProvidersResponseFlag struct {
	*ListSMSProvidersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*settings.SMSProviderFlag
}

func (x *ListSMSProvidersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListSMSProvidersResponse", pflag.ContinueOnError)

	x.resultFlag = []*settings.SMSProviderFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListSMSProvidersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &settings.SMSProviderFlag{SMSProvider: new(settings.SMSProvider)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListSMSProvidersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*settings.SMSProvider, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListSMSProvidersResponse.Result[i] = value.SMSProvider
		}
	}

}

func (x *ListSMSProvidersResponseFlag) Changed() bool {
	return x.changed
}

type ListSecretGeneratorsRequestFlag struct {
	*ListSecretGeneratorsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*settings.SecretGeneratorQueryFlag
}

func (x *ListSecretGeneratorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListSecretGeneratorsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*settings.SecretGeneratorQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListSecretGeneratorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &settings.SecretGeneratorQueryFlag{SecretGeneratorQuery: new(settings.SecretGeneratorQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListSecretGeneratorsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*settings.SecretGeneratorQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListSecretGeneratorsRequest.Queries[i] = value.SecretGeneratorQuery
		}
	}

}

func (x *ListSecretGeneratorsRequestFlag) Changed() bool {
	return x.changed
}

type ListSecretGeneratorsResponseFlag struct {
	*ListSecretGeneratorsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*settings.SecretGeneratorFlag
}

func (x *ListSecretGeneratorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListSecretGeneratorsResponse", pflag.ContinueOnError)

	x.resultFlag = []*settings.SecretGeneratorFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListSecretGeneratorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &settings.SecretGeneratorFlag{SecretGenerator: new(settings.SecretGenerator)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListSecretGeneratorsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*settings.SecretGenerator, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListSecretGeneratorsResponse.Result[i] = value.SecretGenerator
		}
	}

}

func (x *ListSecretGeneratorsResponseFlag) Changed() bool {
	return x.changed
}

type ListViewsRequestFlag struct {
	*ListViewsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListViewsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListViewsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListViewsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListViewsRequestFlag) Changed() bool {
	return x.changed
}

type ListViewsResponseFlag struct {
	*ListViewsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*ViewFlag
}

func (x *ListViewsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListViewsResponse", pflag.ContinueOnError)

	x.resultFlag = []*ViewFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListViewsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &ViewFlag{View: new(View)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*View, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListViewsResponse.Result[i] = value.View
		}
	}

}

func (x *ListViewsResponseFlag) Changed() bool {
	return x.changed
}

type MigrateGenericOIDCProviderRequestFlag struct {
	*MigrateGenericOIDCProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag     *cli_client.StringParser
	azureFlag  *AddAzureADProviderRequestFlag
	googleFlag *AddGoogleProviderRequestFlag
}

func (x *MigrateGenericOIDCProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MigrateGenericOIDCProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.azureFlag = &AddAzureADProviderRequestFlag{AddAzureADProviderRequest: new(AddAzureADProviderRequest)}
	x.azureFlag.AddFlags(x.set)
	x.googleFlag = &AddGoogleProviderRequestFlag{AddGoogleProviderRequest: new(AddGoogleProviderRequest)}
	x.googleFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MigrateGenericOIDCProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "azure", "google")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("azure"); flagIdx != nil {
		x.azureFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("google"); flagIdx != nil {
		x.googleFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.MigrateGenericOIDCProviderRequest.Id = *x.idFlag.Value
	}

	switch cli_client.FieldIndexes(args, "azure", "google").Last().Flag {
	case "azure":
		if x.azureFlag.Changed() {
			x.changed = true
			x.MigrateGenericOIDCProviderRequest.Template = &MigrateGenericOIDCProviderRequest_Azure{Azure: x.azureFlag.AddAzureADProviderRequest}
		}
	case "google":
		if x.googleFlag.Changed() {
			x.changed = true
			x.MigrateGenericOIDCProviderRequest.Template = &MigrateGenericOIDCProviderRequest_Google{Google: x.googleFlag.AddGoogleProviderRequest}
		}
	}
}

func (x *MigrateGenericOIDCProviderRequestFlag) Changed() bool {
	return x.changed
}

type MigrateGenericOIDCProviderResponseFlag struct {
	*MigrateGenericOIDCProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *MigrateGenericOIDCProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MigrateGenericOIDCProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MigrateGenericOIDCProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.MigrateGenericOIDCProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *MigrateGenericOIDCProviderResponseFlag) Changed() bool {
	return x.changed
}

type ProviderQueryFlag struct {
	*ProviderQuery

	changed bool
	set     *pflag.FlagSet

	idpIdQueryFlag   *idp.IDPIDQueryFlag
	idpNameQueryFlag *idp.IDPNameQueryFlag
}

func (x *ProviderQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProviderQuery", pflag.ContinueOnError)

	x.idpIdQueryFlag = &idp.IDPIDQueryFlag{IDPIDQuery: new(idp.IDPIDQuery)}
	x.idpIdQueryFlag.AddFlags(x.set)
	x.idpNameQueryFlag = &idp.IDPNameQueryFlag{IDPNameQuery: new(idp.IDPNameQuery)}
	x.idpNameQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProviderQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp-id-query"); flagIdx != nil {
		x.idpIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-name-query"); flagIdx != nil {
		x.idpNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query").Last().Flag {
	case "idp-id-query":
		if x.idpIdQueryFlag.Changed() {
			x.changed = true
			x.ProviderQuery.Query = &ProviderQuery_IdpIdQuery{IdpIdQuery: x.idpIdQueryFlag.IDPIDQuery}
		}
	case "idp-name-query":
		if x.idpNameQueryFlag.Changed() {
			x.changed = true
			x.ProviderQuery.Query = &ProviderQuery_IdpNameQuery{IdpNameQuery: x.idpNameQueryFlag.IDPNameQuery}
		}
	}
}

func (x *ProviderQueryFlag) Changed() bool {
	return x.changed
}

type ReactivateIDPRequestFlag struct {
	*ReactivateIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *ReactivateIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.ReactivateIDPRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *ReactivateIDPRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateIDPResponseFlag struct {
	*ReactivateIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateIDPResponseFlag) Changed() bool {
	return x.changed
}

type RegenerateSAMLProviderCertificateRequestFlag struct {
	*RegenerateSAMLProviderCertificateRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *RegenerateSAMLProviderCertificateRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateSAMLProviderCertificateRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *RegenerateSAMLProviderCertificateRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RegenerateSAMLProviderCertificateRequest.Id = *x.idFlag.Value
	}
}

func (x *RegenerateSAMLProviderCertificateRequestFlag) Changed() bool {
	return x.changed
}

type RegenerateSAMLProviderCertificateResponseFlag struct {
	*RegenerateSAMLProviderCertificateResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RegenerateSAMLProviderCertificateResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateSAMLProviderCertificateResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegenerateSAMLProviderCertificateResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegenerateSAMLProviderCertificateResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RegenerateSAMLProviderCertificateResponseFlag) Changed() bool {
	return x.changed
}

type RemoveFailedEventRequestFlag struct {
	*RemoveFailedEventRequest

	changed bool
	set     *pflag.FlagSet

	databaseFlag       *cli_client.StringParser
	viewNameFlag       *cli_client.StringParser
	failedSequenceFlag *cli_client.Uint64Parser
}

func (x *RemoveFailedEventRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveFailedEventRequest", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	x.failedSequenceFlag = cli_client.NewUint64Parser(x.set, "failed-sequence", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveFailedEventRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.ViewName = *x.viewNameFlag.Value
	}
	if x.failedSequenceFlag.Changed() {
		x.changed = true
		x.RemoveFailedEventRequest.FailedSequence = *x.failedSequenceFlag.Value
	}
}

func (x *RemoveFailedEventRequestFlag) Changed() bool {
	return x.changed
}

type RemoveFailedEventResponseFlag struct {
	*RemoveFailedEventResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveFailedEventResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveFailedEventResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveFailedEventResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveFailedEventResponseFlag) Changed() bool {
	return x.changed
}

type RemoveIAMMemberRequestFlag struct {
	*RemoveIAMMemberRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveIAMMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIAMMemberRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveIAMMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveIAMMemberRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveIAMMemberRequestFlag) Changed() bool {
	return x.changed
}

type RemoveIAMMemberResponseFlag struct {
	*RemoveIAMMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveIAMMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIAMMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveIAMMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveIAMMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveIAMMemberResponseFlag) Changed() bool {
	return x.changed
}

type RemoveIDPFromLoginPolicyRequestFlag struct {
	*RemoveIDPFromLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *RemoveIDPFromLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIDPFromLoginPolicyRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveIDPFromLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.RemoveIDPFromLoginPolicyRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *RemoveIDPFromLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveIDPFromLoginPolicyResponseFlag struct {
	*RemoveIDPFromLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveIDPFromLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIDPFromLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveIDPFromLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveIDPFromLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveIDPFromLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveIDPRequestFlag struct {
	*RemoveIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *RemoveIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.RemoveIDPRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *RemoveIDPRequestFlag) Changed() bool {
	return x.changed
}

type RemoveIDPResponseFlag struct {
	*RemoveIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveIDPResponseFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyFontRequestFlag struct {
	*RemoveLabelPolicyFontRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveLabelPolicyFontRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyFontRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyFontRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveLabelPolicyFontRequestFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyFontResponseFlag struct {
	*RemoveLabelPolicyFontResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveLabelPolicyFontResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyFontResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyFontResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveLabelPolicyFontResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveLabelPolicyFontResponseFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyIconDarkRequestFlag struct {
	*RemoveLabelPolicyIconDarkRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveLabelPolicyIconDarkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyIconDarkRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyIconDarkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveLabelPolicyIconDarkRequestFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyIconDarkResponseFlag struct {
	*RemoveLabelPolicyIconDarkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveLabelPolicyIconDarkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyIconDarkResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyIconDarkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveLabelPolicyIconDarkResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveLabelPolicyIconDarkResponseFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyIconRequestFlag struct {
	*RemoveLabelPolicyIconRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveLabelPolicyIconRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyIconRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyIconRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveLabelPolicyIconRequestFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyIconResponseFlag struct {
	*RemoveLabelPolicyIconResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveLabelPolicyIconResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyIconResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyIconResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveLabelPolicyIconResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveLabelPolicyIconResponseFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyLogoDarkRequestFlag struct {
	*RemoveLabelPolicyLogoDarkRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveLabelPolicyLogoDarkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyLogoDarkRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyLogoDarkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveLabelPolicyLogoDarkRequestFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyLogoDarkResponseFlag struct {
	*RemoveLabelPolicyLogoDarkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveLabelPolicyLogoDarkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyLogoDarkResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyLogoDarkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveLabelPolicyLogoDarkResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveLabelPolicyLogoDarkResponseFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyLogoRequestFlag struct {
	*RemoveLabelPolicyLogoRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveLabelPolicyLogoRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyLogoRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyLogoRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveLabelPolicyLogoRequestFlag) Changed() bool {
	return x.changed
}

type RemoveLabelPolicyLogoResponseFlag struct {
	*RemoveLabelPolicyLogoResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveLabelPolicyLogoResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveLabelPolicyLogoResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveLabelPolicyLogoResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveLabelPolicyLogoResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveLabelPolicyLogoResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMultiFactorFromLoginPolicyRequestFlag struct {
	*RemoveMultiFactorFromLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.MultiFactorType]
}

func (x *RemoveMultiFactorFromLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMultiFactorFromLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.MultiFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMultiFactorFromLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.RemoveMultiFactorFromLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *RemoveMultiFactorFromLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMultiFactorFromLoginPolicyResponseFlag struct {
	*RemoveMultiFactorFromLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMultiFactorFromLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMultiFactorFromLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMultiFactorFromLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMultiFactorFromLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMultiFactorFromLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOrgRequestFlag struct {
	*RemoveOrgRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *RemoveOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.RemoveOrgRequest.OrgId = *x.orgIdFlag.Value
	}
}

func (x *RemoveOrgRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOrgResponseFlag struct {
	*RemoveOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveOrgResponseFlag) Changed() bool {
	return x.changed
}

type RemoveSMSProviderRequestFlag struct {
	*RemoveSMSProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *RemoveSMSProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSMSProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveSMSProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RemoveSMSProviderRequest.Id = *x.idFlag.Value
	}
}

func (x *RemoveSMSProviderRequestFlag) Changed() bool {
	return x.changed
}

type RemoveSMSProviderResponseFlag struct {
	*RemoveSMSProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveSMSProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSMSProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveSMSProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveSMSProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveSMSProviderResponseFlag) Changed() bool {
	return x.changed
}

type RemoveSMTPConfigRequestFlag struct {
	*RemoveSMTPConfigRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveSMTPConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSMTPConfigRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveSMTPConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveSMTPConfigRequestFlag) Changed() bool {
	return x.changed
}

type RemoveSMTPConfigResponseFlag struct {
	*RemoveSMTPConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveSMTPConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSMTPConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveSMTPConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveSMTPConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveSMTPConfigResponseFlag) Changed() bool {
	return x.changed
}

type RemoveSecondFactorFromLoginPolicyRequestFlag struct {
	*RemoveSecondFactorFromLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.SecondFactorType]
}

func (x *RemoveSecondFactorFromLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSecondFactorFromLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.SecondFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveSecondFactorFromLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.RemoveSecondFactorFromLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *RemoveSecondFactorFromLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveSecondFactorFromLoginPolicyResponseFlag struct {
	*RemoveSecondFactorFromLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveSecondFactorFromLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSecondFactorFromLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveSecondFactorFromLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveSecondFactorFromLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveSecondFactorFromLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomDomainClaimedMessageTextToDefaultRequestFlag struct {
	*ResetCustomDomainClaimedMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomDomainClaimedMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomDomainClaimedMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomDomainClaimedMessageTextToDefaultResponseFlag struct {
	*ResetCustomDomainClaimedMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomDomainClaimedMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomDomainClaimedMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomDomainPolicyToDefaultRequestFlag struct {
	*ResetCustomDomainPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *ResetCustomDomainPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomDomainPolicyToDefaultRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomDomainPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.ResetCustomDomainPolicyToDefaultRequest.OrgId = *x.orgIdFlag.Value
	}
}

func (x *ResetCustomDomainPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomDomainPolicyToDefaultResponseFlag struct {
	*ResetCustomDomainPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomDomainPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomDomainPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomDomainPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomDomainPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomDomainPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomInitMessageTextToDefaultRequestFlag struct {
	*ResetCustomInitMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomInitMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomInitMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomInitMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomInitMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomInitMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomInitMessageTextToDefaultResponseFlag struct {
	*ResetCustomInitMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomInitMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomInitMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomInitMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomInitMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomInitMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomLoginTextsToDefaultRequestFlag struct {
	*ResetCustomLoginTextsToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomLoginTextsToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomLoginTextsToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomLoginTextsToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomLoginTextsToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomLoginTextsToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomLoginTextsToDefaultResponseFlag struct {
	*ResetCustomLoginTextsToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomLoginTextsToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomLoginTextsToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomLoginTextsToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomLoginTextsToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomLoginTextsToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomOrgIAMPolicyToDefaultRequestFlag struct {
	*ResetCustomOrgIAMPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomOrgIAMPolicyToDefaultRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.ResetCustomOrgIAMPolicyToDefaultRequest.OrgId = *x.orgIdFlag.Value
	}
}

func (x *ResetCustomOrgIAMPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomOrgIAMPolicyToDefaultResponseFlag struct {
	*ResetCustomOrgIAMPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomOrgIAMPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomOrgIAMPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomOrgIAMPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomOrgIAMPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordChangeMessageTextToDefaultRequestFlag struct {
	*ResetCustomPasswordChangeMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordChangeMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordChangeMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordChangeMessageTextToDefaultResponseFlag struct {
	*ResetCustomPasswordChangeMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordChangeMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordChangeMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomPasswordChangeMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordResetMessageTextToDefaultRequestFlag struct {
	*ResetCustomPasswordResetMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordResetMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordResetMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordResetMessageTextToDefaultResponseFlag struct {
	*ResetCustomPasswordResetMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordResetMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordResetMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag struct {
	*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag struct {
	*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifyEmailMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifyEmailMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifyEmailOTPMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailOTPMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailOTPMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifyPhoneMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyPhoneMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyPhoneMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifyPhoneMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyPhoneMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyPhoneMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifySMSOTPMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifySMSOTPMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifySMSOTPMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifySMSOTPMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifySMSOTPMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifySMSOTPMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type SelectLanguagesFlag struct {
	*SelectLanguages

	changed bool
	set     *pflag.FlagSet

	listFlag *cli_client.StringSliceParser
}

func (x *SelectLanguagesFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SelectLanguages", pflag.ContinueOnError)

	x.listFlag = cli_client.NewStringSliceParser(x.set, "list", "")
	parent.AddFlagSet(x.set)
}

func (x *SelectLanguagesFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.listFlag.Changed() {
		x.changed = true
		x.SelectLanguages.List = *x.listFlag.Value
	}
}

func (x *SelectLanguagesFlag) Changed() bool {
	return x.changed
}

type SetCustomLoginTextsRequestFlag struct {
	*SetCustomLoginTextsRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag                             *cli_client.StringParser
	selectAccountTextFlag                    *text.SelectAccountScreenTextFlag
	loginTextFlag                            *text.LoginScreenTextFlag
	passwordTextFlag                         *text.PasswordScreenTextFlag
	usernameChangeTextFlag                   *text.UsernameChangeScreenTextFlag
	usernameChangeDoneTextFlag               *text.UsernameChangeDoneScreenTextFlag
	initPasswordTextFlag                     *text.InitPasswordScreenTextFlag
	initPasswordDoneTextFlag                 *text.InitPasswordDoneScreenTextFlag
	emailVerificationTextFlag                *text.EmailVerificationScreenTextFlag
	emailVerificationDoneTextFlag            *text.EmailVerificationDoneScreenTextFlag
	initializeUserTextFlag                   *text.InitializeUserScreenTextFlag
	initializeDoneTextFlag                   *text.InitializeUserDoneScreenTextFlag
	initMfaPromptTextFlag                    *text.InitMFAPromptScreenTextFlag
	initMfaOtpTextFlag                       *text.InitMFAOTPScreenTextFlag
	initMfaU2fTextFlag                       *text.InitMFAU2FScreenTextFlag
	initMfaDoneTextFlag                      *text.InitMFADoneScreenTextFlag
	mfaProvidersTextFlag                     *text.MFAProvidersTextFlag
	verifyMfaOtpTextFlag                     *text.VerifyMFAOTPScreenTextFlag
	verifyMfaU2fTextFlag                     *text.VerifyMFAU2FScreenTextFlag
	passwordlessTextFlag                     *text.PasswordlessScreenTextFlag
	passwordChangeTextFlag                   *text.PasswordChangeScreenTextFlag
	passwordChangeDoneTextFlag               *text.PasswordChangeDoneScreenTextFlag
	passwordResetDoneTextFlag                *text.PasswordResetDoneScreenTextFlag
	registrationOptionTextFlag               *text.RegistrationOptionScreenTextFlag
	registrationUserTextFlag                 *text.RegistrationUserScreenTextFlag
	registrationOrgTextFlag                  *text.RegistrationOrgScreenTextFlag
	linkingUserDoneTextFlag                  *text.LinkingUserDoneScreenTextFlag
	externalUserNotFoundTextFlag             *text.ExternalUserNotFoundScreenTextFlag
	successLoginTextFlag                     *text.SuccessLoginScreenTextFlag
	logoutTextFlag                           *text.LogoutDoneScreenTextFlag
	footerTextFlag                           *text.FooterTextFlag
	passwordlessPromptTextFlag               *text.PasswordlessPromptScreenTextFlag
	passwordlessRegistrationTextFlag         *text.PasswordlessRegistrationScreenTextFlag
	passwordlessRegistrationDoneTextFlag     *text.PasswordlessRegistrationDoneScreenTextFlag
	externalRegistrationUserOverviewTextFlag *text.ExternalRegistrationUserOverviewScreenTextFlag
}

func (x *SetCustomLoginTextsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomLoginTextsRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.selectAccountTextFlag = &text.SelectAccountScreenTextFlag{SelectAccountScreenText: new(text.SelectAccountScreenText)}
	x.selectAccountTextFlag.AddFlags(x.set)
	x.loginTextFlag = &text.LoginScreenTextFlag{LoginScreenText: new(text.LoginScreenText)}
	x.loginTextFlag.AddFlags(x.set)
	x.passwordTextFlag = &text.PasswordScreenTextFlag{PasswordScreenText: new(text.PasswordScreenText)}
	x.passwordTextFlag.AddFlags(x.set)
	x.usernameChangeTextFlag = &text.UsernameChangeScreenTextFlag{UsernameChangeScreenText: new(text.UsernameChangeScreenText)}
	x.usernameChangeTextFlag.AddFlags(x.set)
	x.usernameChangeDoneTextFlag = &text.UsernameChangeDoneScreenTextFlag{UsernameChangeDoneScreenText: new(text.UsernameChangeDoneScreenText)}
	x.usernameChangeDoneTextFlag.AddFlags(x.set)
	x.initPasswordTextFlag = &text.InitPasswordScreenTextFlag{InitPasswordScreenText: new(text.InitPasswordScreenText)}
	x.initPasswordTextFlag.AddFlags(x.set)
	x.initPasswordDoneTextFlag = &text.InitPasswordDoneScreenTextFlag{InitPasswordDoneScreenText: new(text.InitPasswordDoneScreenText)}
	x.initPasswordDoneTextFlag.AddFlags(x.set)
	x.emailVerificationTextFlag = &text.EmailVerificationScreenTextFlag{EmailVerificationScreenText: new(text.EmailVerificationScreenText)}
	x.emailVerificationTextFlag.AddFlags(x.set)
	x.emailVerificationDoneTextFlag = &text.EmailVerificationDoneScreenTextFlag{EmailVerificationDoneScreenText: new(text.EmailVerificationDoneScreenText)}
	x.emailVerificationDoneTextFlag.AddFlags(x.set)
	x.initializeUserTextFlag = &text.InitializeUserScreenTextFlag{InitializeUserScreenText: new(text.InitializeUserScreenText)}
	x.initializeUserTextFlag.AddFlags(x.set)
	x.initializeDoneTextFlag = &text.InitializeUserDoneScreenTextFlag{InitializeUserDoneScreenText: new(text.InitializeUserDoneScreenText)}
	x.initializeDoneTextFlag.AddFlags(x.set)
	x.initMfaPromptTextFlag = &text.InitMFAPromptScreenTextFlag{InitMFAPromptScreenText: new(text.InitMFAPromptScreenText)}
	x.initMfaPromptTextFlag.AddFlags(x.set)
	x.initMfaOtpTextFlag = &text.InitMFAOTPScreenTextFlag{InitMFAOTPScreenText: new(text.InitMFAOTPScreenText)}
	x.initMfaOtpTextFlag.AddFlags(x.set)
	x.initMfaU2fTextFlag = &text.InitMFAU2FScreenTextFlag{InitMFAU2FScreenText: new(text.InitMFAU2FScreenText)}
	x.initMfaU2fTextFlag.AddFlags(x.set)
	x.initMfaDoneTextFlag = &text.InitMFADoneScreenTextFlag{InitMFADoneScreenText: new(text.InitMFADoneScreenText)}
	x.initMfaDoneTextFlag.AddFlags(x.set)
	x.mfaProvidersTextFlag = &text.MFAProvidersTextFlag{MFAProvidersText: new(text.MFAProvidersText)}
	x.mfaProvidersTextFlag.AddFlags(x.set)
	x.verifyMfaOtpTextFlag = &text.VerifyMFAOTPScreenTextFlag{VerifyMFAOTPScreenText: new(text.VerifyMFAOTPScreenText)}
	x.verifyMfaOtpTextFlag.AddFlags(x.set)
	x.verifyMfaU2fTextFlag = &text.VerifyMFAU2FScreenTextFlag{VerifyMFAU2FScreenText: new(text.VerifyMFAU2FScreenText)}
	x.verifyMfaU2fTextFlag.AddFlags(x.set)
	x.passwordlessTextFlag = &text.PasswordlessScreenTextFlag{PasswordlessScreenText: new(text.PasswordlessScreenText)}
	x.passwordlessTextFlag.AddFlags(x.set)
	x.passwordChangeTextFlag = &text.PasswordChangeScreenTextFlag{PasswordChangeScreenText: new(text.PasswordChangeScreenText)}
	x.passwordChangeTextFlag.AddFlags(x.set)
	x.passwordChangeDoneTextFlag = &text.PasswordChangeDoneScreenTextFlag{PasswordChangeDoneScreenText: new(text.PasswordChangeDoneScreenText)}
	x.passwordChangeDoneTextFlag.AddFlags(x.set)
	x.passwordResetDoneTextFlag = &text.PasswordResetDoneScreenTextFlag{PasswordResetDoneScreenText: new(text.PasswordResetDoneScreenText)}
	x.passwordResetDoneTextFlag.AddFlags(x.set)
	x.registrationOptionTextFlag = &text.RegistrationOptionScreenTextFlag{RegistrationOptionScreenText: new(text.RegistrationOptionScreenText)}
	x.registrationOptionTextFlag.AddFlags(x.set)
	x.registrationUserTextFlag = &text.RegistrationUserScreenTextFlag{RegistrationUserScreenText: new(text.RegistrationUserScreenText)}
	x.registrationUserTextFlag.AddFlags(x.set)
	x.registrationOrgTextFlag = &text.RegistrationOrgScreenTextFlag{RegistrationOrgScreenText: new(text.RegistrationOrgScreenText)}
	x.registrationOrgTextFlag.AddFlags(x.set)
	x.linkingUserDoneTextFlag = &text.LinkingUserDoneScreenTextFlag{LinkingUserDoneScreenText: new(text.LinkingUserDoneScreenText)}
	x.linkingUserDoneTextFlag.AddFlags(x.set)
	x.externalUserNotFoundTextFlag = &text.ExternalUserNotFoundScreenTextFlag{ExternalUserNotFoundScreenText: new(text.ExternalUserNotFoundScreenText)}
	x.externalUserNotFoundTextFlag.AddFlags(x.set)
	x.successLoginTextFlag = &text.SuccessLoginScreenTextFlag{SuccessLoginScreenText: new(text.SuccessLoginScreenText)}
	x.successLoginTextFlag.AddFlags(x.set)
	x.logoutTextFlag = &text.LogoutDoneScreenTextFlag{LogoutDoneScreenText: new(text.LogoutDoneScreenText)}
	x.logoutTextFlag.AddFlags(x.set)
	x.footerTextFlag = &text.FooterTextFlag{FooterText: new(text.FooterText)}
	x.footerTextFlag.AddFlags(x.set)
	x.passwordlessPromptTextFlag = &text.PasswordlessPromptScreenTextFlag{PasswordlessPromptScreenText: new(text.PasswordlessPromptScreenText)}
	x.passwordlessPromptTextFlag.AddFlags(x.set)
	x.passwordlessRegistrationTextFlag = &text.PasswordlessRegistrationScreenTextFlag{PasswordlessRegistrationScreenText: new(text.PasswordlessRegistrationScreenText)}
	x.passwordlessRegistrationTextFlag.AddFlags(x.set)
	x.passwordlessRegistrationDoneTextFlag = &text.PasswordlessRegistrationDoneScreenTextFlag{PasswordlessRegistrationDoneScreenText: new(text.PasswordlessRegistrationDoneScreenText)}
	x.passwordlessRegistrationDoneTextFlag.AddFlags(x.set)
	x.externalRegistrationUserOverviewTextFlag = &text.ExternalRegistrationUserOverviewScreenTextFlag{ExternalRegistrationUserOverviewScreenText: new(text.ExternalRegistrationUserOverviewScreenText)}
	x.externalRegistrationUserOverviewTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomLoginTextsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "select-account-text", "login-text", "password-text", "username-change-text", "username-change-done-text", "init-password-text", "init-password-done-text", "email-verification-text", "email-verification-done-text", "initialize-user-text", "initialize-done-text", "init-mfa-prompt-text", "init-mfa-otp-text", "init-mfa-u2f-text", "init-mfa-done-text", "mfa-providers-text", "verify-mfa-otp-text", "verify-mfa-u2f-text", "passwordless-text", "password-change-text", "password-change-done-text", "password-reset-done-text", "registration-option-text", "registration-user-text", "registration-org-text", "linking-user-done-text", "external-user-not-found-text", "success-login-text", "logout-text", "footer-text", "passwordless-prompt-text", "passwordless-registration-text", "passwordless-registration-done-text", "external-registration-user-overview-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("select-account-text"); flagIdx != nil {
		x.selectAccountTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-text"); flagIdx != nil {
		x.loginTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-text"); flagIdx != nil {
		x.passwordTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("username-change-text"); flagIdx != nil {
		x.usernameChangeTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("username-change-done-text"); flagIdx != nil {
		x.usernameChangeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-password-text"); flagIdx != nil {
		x.initPasswordTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-password-done-text"); flagIdx != nil {
		x.initPasswordDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-verification-text"); flagIdx != nil {
		x.emailVerificationTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-verification-done-text"); flagIdx != nil {
		x.emailVerificationDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("initialize-user-text"); flagIdx != nil {
		x.initializeUserTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("initialize-done-text"); flagIdx != nil {
		x.initializeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-prompt-text"); flagIdx != nil {
		x.initMfaPromptTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-otp-text"); flagIdx != nil {
		x.initMfaOtpTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-u2f-text"); flagIdx != nil {
		x.initMfaU2fTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-done-text"); flagIdx != nil {
		x.initMfaDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("mfa-providers-text"); flagIdx != nil {
		x.mfaProvidersTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("verify-mfa-otp-text"); flagIdx != nil {
		x.verifyMfaOtpTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("verify-mfa-u2f-text"); flagIdx != nil {
		x.verifyMfaU2fTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-text"); flagIdx != nil {
		x.passwordlessTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-change-text"); flagIdx != nil {
		x.passwordChangeTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-change-done-text"); flagIdx != nil {
		x.passwordChangeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-reset-done-text"); flagIdx != nil {
		x.passwordResetDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-option-text"); flagIdx != nil {
		x.registrationOptionTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-user-text"); flagIdx != nil {
		x.registrationUserTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-org-text"); flagIdx != nil {
		x.registrationOrgTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("linking-user-done-text"); flagIdx != nil {
		x.linkingUserDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("external-user-not-found-text"); flagIdx != nil {
		x.externalUserNotFoundTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("success-login-text"); flagIdx != nil {
		x.successLoginTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("logout-text"); flagIdx != nil {
		x.logoutTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("footer-text"); flagIdx != nil {
		x.footerTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-prompt-text"); flagIdx != nil {
		x.passwordlessPromptTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration-text"); flagIdx != nil {
		x.passwordlessRegistrationTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration-done-text"); flagIdx != nil {
		x.passwordlessRegistrationDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("external-registration-user-overview-text"); flagIdx != nil {
		x.externalRegistrationUserOverviewTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.Language = *x.languageFlag.Value
	}

	if x.selectAccountTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.SelectAccountText = x.selectAccountTextFlag.SelectAccountScreenText
	}

	if x.loginTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.LoginText = x.loginTextFlag.LoginScreenText
	}

	if x.passwordTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordText = x.passwordTextFlag.PasswordScreenText
	}

	if x.usernameChangeTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.UsernameChangeText = x.usernameChangeTextFlag.UsernameChangeScreenText
	}

	if x.usernameChangeDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.UsernameChangeDoneText = x.usernameChangeDoneTextFlag.UsernameChangeDoneScreenText
	}

	if x.initPasswordTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitPasswordText = x.initPasswordTextFlag.InitPasswordScreenText
	}

	if x.initPasswordDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitPasswordDoneText = x.initPasswordDoneTextFlag.InitPasswordDoneScreenText
	}

	if x.emailVerificationTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.EmailVerificationText = x.emailVerificationTextFlag.EmailVerificationScreenText
	}

	if x.emailVerificationDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.EmailVerificationDoneText = x.emailVerificationDoneTextFlag.EmailVerificationDoneScreenText
	}

	if x.initializeUserTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitializeUserText = x.initializeUserTextFlag.InitializeUserScreenText
	}

	if x.initializeDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitializeDoneText = x.initializeDoneTextFlag.InitializeUserDoneScreenText
	}

	if x.initMfaPromptTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaPromptText = x.initMfaPromptTextFlag.InitMFAPromptScreenText
	}

	if x.initMfaOtpTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaOtpText = x.initMfaOtpTextFlag.InitMFAOTPScreenText
	}

	if x.initMfaU2fTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaU2FText = x.initMfaU2fTextFlag.InitMFAU2FScreenText
	}

	if x.initMfaDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaDoneText = x.initMfaDoneTextFlag.InitMFADoneScreenText
	}

	if x.mfaProvidersTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.MfaProvidersText = x.mfaProvidersTextFlag.MFAProvidersText
	}

	if x.verifyMfaOtpTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.VerifyMfaOtpText = x.verifyMfaOtpTextFlag.VerifyMFAOTPScreenText
	}

	if x.verifyMfaU2fTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.VerifyMfaU2FText = x.verifyMfaU2fTextFlag.VerifyMFAU2FScreenText
	}

	if x.passwordlessTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessText = x.passwordlessTextFlag.PasswordlessScreenText
	}

	if x.passwordChangeTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordChangeText = x.passwordChangeTextFlag.PasswordChangeScreenText
	}

	if x.passwordChangeDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordChangeDoneText = x.passwordChangeDoneTextFlag.PasswordChangeDoneScreenText
	}

	if x.passwordResetDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordResetDoneText = x.passwordResetDoneTextFlag.PasswordResetDoneScreenText
	}

	if x.registrationOptionTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.RegistrationOptionText = x.registrationOptionTextFlag.RegistrationOptionScreenText
	}

	if x.registrationUserTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.RegistrationUserText = x.registrationUserTextFlag.RegistrationUserScreenText
	}

	if x.registrationOrgTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.RegistrationOrgText = x.registrationOrgTextFlag.RegistrationOrgScreenText
	}

	if x.linkingUserDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.LinkingUserDoneText = x.linkingUserDoneTextFlag.LinkingUserDoneScreenText
	}

	if x.externalUserNotFoundTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.ExternalUserNotFoundText = x.externalUserNotFoundTextFlag.ExternalUserNotFoundScreenText
	}

	if x.successLoginTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.SuccessLoginText = x.successLoginTextFlag.SuccessLoginScreenText
	}

	if x.logoutTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.LogoutText = x.logoutTextFlag.LogoutDoneScreenText
	}

	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.FooterText = x.footerTextFlag.FooterText
	}

	if x.passwordlessPromptTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessPromptText = x.passwordlessPromptTextFlag.PasswordlessPromptScreenText
	}

	if x.passwordlessRegistrationTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessRegistrationText = x.passwordlessRegistrationTextFlag.PasswordlessRegistrationScreenText
	}

	if x.passwordlessRegistrationDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessRegistrationDoneText = x.passwordlessRegistrationDoneTextFlag.PasswordlessRegistrationDoneScreenText
	}

	if x.externalRegistrationUserOverviewTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.ExternalRegistrationUserOverviewText = x.externalRegistrationUserOverviewTextFlag.ExternalRegistrationUserOverviewScreenText
	}

}

func (x *SetCustomLoginTextsRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomLoginTextsResponseFlag struct {
	*SetCustomLoginTextsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomLoginTextsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomLoginTextsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomLoginTextsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomLoginTextsResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultDomainClaimedMessageTextRequestFlag struct {
	*SetDefaultDomainClaimedMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultDomainClaimedMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultDomainClaimedMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultDomainClaimedMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultDomainClaimedMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultDomainClaimedMessageTextResponseFlag struct {
	*SetDefaultDomainClaimedMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultDomainClaimedMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultDomainClaimedMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultDomainClaimedMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultDomainClaimedMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultDomainClaimedMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultInitMessageTextRequestFlag struct {
	*SetDefaultInitMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultInitMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultInitMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultInitMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultInitMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultInitMessageTextResponseFlag struct {
	*SetDefaultInitMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultInitMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultInitMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultInitMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultInitMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultInitMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultLanguageRequestFlag struct {
	*SetDefaultLanguageRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *SetDefaultLanguageRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultLanguageRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultLanguageRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultLanguageRequest.Language = *x.languageFlag.Value
	}
}

func (x *SetDefaultLanguageRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultLanguageResponseFlag struct {
	*SetDefaultLanguageResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultLanguageResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultLanguageResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultLanguageResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultLanguageResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultLanguageResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultOrgRequestFlag struct {
	*SetDefaultOrgRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag *cli_client.StringParser
}

func (x *SetDefaultOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultOrgRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.SetDefaultOrgRequest.OrgId = *x.orgIdFlag.Value
	}
}

func (x *SetDefaultOrgRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultOrgResponseFlag struct {
	*SetDefaultOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultOrgResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultPasswordChangeMessageTextRequestFlag struct {
	*SetDefaultPasswordChangeMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultPasswordChangeMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultPasswordChangeMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultPasswordChangeMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultPasswordChangeMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultPasswordChangeMessageTextResponseFlag struct {
	*SetDefaultPasswordChangeMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultPasswordChangeMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultPasswordChangeMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultPasswordChangeMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordChangeMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultPasswordChangeMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultPasswordResetMessageTextRequestFlag struct {
	*SetDefaultPasswordResetMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultPasswordResetMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultPasswordResetMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultPasswordResetMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultPasswordResetMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultPasswordResetMessageTextResponseFlag struct {
	*SetDefaultPasswordResetMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultPasswordResetMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultPasswordResetMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultPasswordResetMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordResetMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultPasswordResetMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultPasswordlessRegistrationMessageTextRequestFlag struct {
	*SetDefaultPasswordlessRegistrationMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultPasswordlessRegistrationMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultPasswordlessRegistrationMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultPasswordlessRegistrationMessageTextResponseFlag struct {
	*SetDefaultPasswordlessRegistrationMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultPasswordlessRegistrationMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultPasswordlessRegistrationMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultPasswordlessRegistrationMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifyEmailMessageTextRequestFlag struct {
	*SetDefaultVerifyEmailMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultVerifyEmailMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifyEmailMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifyEmailMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultVerifyEmailMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifyEmailMessageTextResponseFlag struct {
	*SetDefaultVerifyEmailMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultVerifyEmailMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifyEmailMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifyEmailMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultVerifyEmailMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifyEmailOTPMessageTextRequestFlag struct {
	*SetDefaultVerifyEmailOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultVerifyEmailOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifyEmailOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifyEmailOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultVerifyEmailOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifyEmailOTPMessageTextResponseFlag struct {
	*SetDefaultVerifyEmailOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultVerifyEmailOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifyEmailOTPMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifyEmailOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyEmailOTPMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultVerifyEmailOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifyPhoneMessageTextRequestFlag struct {
	*SetDefaultVerifyPhoneMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetDefaultVerifyPhoneMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifyPhoneMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifyPhoneMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetDefaultVerifyPhoneMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifyPhoneMessageTextResponseFlag struct {
	*SetDefaultVerifyPhoneMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultVerifyPhoneMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifyPhoneMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifyPhoneMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifyPhoneMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultVerifyPhoneMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifySMSOTPMessageTextRequestFlag struct {
	*SetDefaultVerifySMSOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
	textFlag     *cli_client.StringParser
}

func (x *SetDefaultVerifySMSOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifySMSOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifySMSOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifySMSOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifySMSOTPMessageTextRequest.Text = *x.textFlag.Value
	}
}

func (x *SetDefaultVerifySMSOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetDefaultVerifySMSOTPMessageTextResponseFlag struct {
	*SetDefaultVerifySMSOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetDefaultVerifySMSOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetDefaultVerifySMSOTPMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetDefaultVerifySMSOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetDefaultVerifySMSOTPMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetDefaultVerifySMSOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetRestrictionsRequestFlag struct {
	*SetRestrictionsRequest

	changed bool
	set     *pflag.FlagSet

	disallowPublicOrgRegistrationFlag *cli_client.BoolParser
	allowedLanguagesFlag              *SelectLanguagesFlag
}

func (x *SetRestrictionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetRestrictionsRequest", pflag.ContinueOnError)

	x.disallowPublicOrgRegistrationFlag = cli_client.NewBoolParser(x.set, "disallow-public-org-registration", "")
	x.allowedLanguagesFlag = &SelectLanguagesFlag{SelectLanguages: new(SelectLanguages)}
	x.allowedLanguagesFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetRestrictionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "allowed-languages")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("allowed-languages"); flagIdx != nil {
		x.allowedLanguagesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.disallowPublicOrgRegistrationFlag.Changed() {
		x.changed = true
		x.SetRestrictionsRequest.DisallowPublicOrgRegistration = x.disallowPublicOrgRegistrationFlag.Value
	}

	if x.allowedLanguagesFlag.Changed() {
		x.changed = true
		x.SetRestrictionsRequest.AllowedLanguages = x.allowedLanguagesFlag.SelectLanguages
	}

}

func (x *SetRestrictionsRequestFlag) Changed() bool {
	return x.changed
}

type SetRestrictionsResponseFlag struct {
	*SetRestrictionsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetRestrictionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetRestrictionsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetRestrictionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetRestrictionsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetRestrictionsResponseFlag) Changed() bool {
	return x.changed
}

type SetSecurityPolicyRequestFlag struct {
	*SetSecurityPolicyRequest

	changed bool
	set     *pflag.FlagSet

	enableIframeEmbeddingFlag *cli_client.BoolParser
	allowedOriginsFlag        *cli_client.StringSliceParser
}

func (x *SetSecurityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetSecurityPolicyRequest", pflag.ContinueOnError)

	x.enableIframeEmbeddingFlag = cli_client.NewBoolParser(x.set, "enable-iframe-embedding", "")
	x.allowedOriginsFlag = cli_client.NewStringSliceParser(x.set, "allowed-origins", "")
	parent.AddFlagSet(x.set)
}

func (x *SetSecurityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.enableIframeEmbeddingFlag.Changed() {
		x.changed = true
		x.SetSecurityPolicyRequest.EnableIframeEmbedding = *x.enableIframeEmbeddingFlag.Value
	}
	if x.allowedOriginsFlag.Changed() {
		x.changed = true
		x.SetSecurityPolicyRequest.AllowedOrigins = *x.allowedOriginsFlag.Value
	}
}

func (x *SetSecurityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type SetSecurityPolicyResponseFlag struct {
	*SetSecurityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetSecurityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetSecurityPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetSecurityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetSecurityPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetSecurityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type SetUpOrgRequestFlag struct {
	*SetUpOrgRequest

	changed bool
	set     *pflag.FlagSet

	orgFlag   *SetUpOrgRequest_OrgFlag
	humanFlag *SetUpOrgRequest_HumanFlag
	rolesFlag *cli_client.StringSliceParser
}

func (x *SetUpOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgRequest", pflag.ContinueOnError)

	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	x.orgFlag = &SetUpOrgRequest_OrgFlag{SetUpOrgRequest_Org: new(SetUpOrgRequest_Org)}
	x.orgFlag.AddFlags(x.set)
	x.humanFlag = &SetUpOrgRequest_HumanFlag{SetUpOrgRequest_Human: new(SetUpOrgRequest_Human)}
	x.humanFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org", "human")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("human"); flagIdx != nil {
		x.humanFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest.Org = x.orgFlag.SetUpOrgRequest_Org
	}

	if x.rolesFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest.Roles = *x.rolesFlag.Value
	}

	switch cli_client.FieldIndexes(args, "human").Last().Flag {
	case "human":
		if x.humanFlag.Changed() {
			x.changed = true
			x.SetUpOrgRequest.User = &SetUpOrgRequest_Human_{Human: x.humanFlag.SetUpOrgRequest_Human}
		}
	}
}

func (x *SetUpOrgRequestFlag) Changed() bool {
	return x.changed
}

type SetUpOrgRequest_HumanFlag struct {
	*SetUpOrgRequest_Human

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
	profileFlag  *SetUpOrgRequest_Human_ProfileFlag
	emailFlag    *SetUpOrgRequest_Human_EmailFlag
	phoneFlag    *SetUpOrgRequest_Human_PhoneFlag
	passwordFlag *cli_client.StringParser
}

func (x *SetUpOrgRequest_HumanFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgRequest_Human", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.profileFlag = &SetUpOrgRequest_Human_ProfileFlag{SetUpOrgRequest_Human_Profile: new(SetUpOrgRequest_Human_Profile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &SetUpOrgRequest_Human_EmailFlag{SetUpOrgRequest_Human_Email: new(SetUpOrgRequest_Human_Email)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &SetUpOrgRequest_Human_PhoneFlag{SetUpOrgRequest_Human_Phone: new(SetUpOrgRequest_Human_Phone)}
	x.phoneFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgRequest_HumanFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human.UserName = *x.userNameFlag.Value
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human.Profile = x.profileFlag.SetUpOrgRequest_Human_Profile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human.Email = x.emailFlag.SetUpOrgRequest_Human_Email
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human.Phone = x.phoneFlag.SetUpOrgRequest_Human_Phone
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human.Password = *x.passwordFlag.Value
	}
}

func (x *SetUpOrgRequest_HumanFlag) Changed() bool {
	return x.changed
}

type SetUpOrgRequest_Human_EmailFlag struct {
	*SetUpOrgRequest_Human_Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *SetUpOrgRequest_Human_EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgRequest_Human_Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgRequest_Human_EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *SetUpOrgRequest_Human_EmailFlag) Changed() bool {
	return x.changed
}

type SetUpOrgRequest_Human_PhoneFlag struct {
	*SetUpOrgRequest_Human_Phone

	changed bool
	set     *pflag.FlagSet

	phoneFlag           *cli_client.StringParser
	isPhoneVerifiedFlag *cli_client.BoolParser
}

func (x *SetUpOrgRequest_Human_PhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgRequest_Human_Phone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isPhoneVerifiedFlag = cli_client.NewBoolParser(x.set, "is-phone-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgRequest_Human_PhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Phone.Phone = *x.phoneFlag.Value
	}
	if x.isPhoneVerifiedFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Phone.IsPhoneVerified = *x.isPhoneVerifiedFlag.Value
	}
}

func (x *SetUpOrgRequest_Human_PhoneFlag) Changed() bool {
	return x.changed
}

type SetUpOrgRequest_Human_ProfileFlag struct {
	*SetUpOrgRequest_Human_Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[user.Gender]
}

func (x *SetUpOrgRequest_Human_ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgRequest_Human_Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[user.Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgRequest_Human_ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Profile.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Profile.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Profile.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Human_Profile.Gender = *x.genderFlag.Value
	}
}

func (x *SetUpOrgRequest_Human_ProfileFlag) Changed() bool {
	return x.changed
}

type SetUpOrgRequest_OrgFlag struct {
	*SetUpOrgRequest_Org

	changed bool
	set     *pflag.FlagSet

	nameFlag   *cli_client.StringParser
	domainFlag *cli_client.StringParser
}

func (x *SetUpOrgRequest_OrgFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgRequest_Org", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgRequest_OrgFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Org.Name = *x.nameFlag.Value
	}
	if x.domainFlag.Changed() {
		x.changed = true
		x.SetUpOrgRequest_Org.Domain = *x.domainFlag.Value
	}
}

func (x *SetUpOrgRequest_OrgFlag) Changed() bool {
	return x.changed
}

type SetUpOrgResponseFlag struct {
	*SetUpOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	orgIdFlag   *cli_client.StringParser
	userIdFlag  *cli_client.StringParser
}

func (x *SetUpOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUpOrgResponse", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetUpOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetUpOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.SetUpOrgResponse.OrgId = *x.orgIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.SetUpOrgResponse.UserId = *x.userIdFlag.Value
	}
}

func (x *SetUpOrgResponseFlag) Changed() bool {
	return x.changed
}

type UpdateAppleProviderRequestFlag struct {
	*UpdateAppleProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	teamIdFlag          *cli_client.StringParser
	keyIdFlag           *cli_client.StringParser
	privateKeyFlag      *cli_client.BytesParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateAppleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAppleProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.teamIdFlag = cli_client.NewStringParser(x.set, "team-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.privateKeyFlag = cli_client.NewBytesParser(x.set, "private-key", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAppleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.teamIdFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.TeamId = *x.teamIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.KeyId = *x.keyIdFlag.Value
	}
	if x.privateKeyFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.PrivateKey = *x.privateKeyFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateAppleProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateAppleProviderResponseFlag struct {
	*UpdateAppleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateAppleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAppleProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAppleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateAppleProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateAzureADProviderRequestFlag struct {
	*UpdateAzureADProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	tenantFlag          *idp.AzureADTenantFlag
	emailVerifiedFlag   *cli_client.BoolParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateAzureADProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAzureADProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.emailVerifiedFlag = cli_client.NewBoolParser(x.set, "email-verified", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.tenantFlag = &idp.AzureADTenantFlag{AzureADTenant: new(idp.AzureADTenant)}
	x.tenantFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAzureADProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "tenant", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("tenant"); flagIdx != nil {
		x.tenantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.tenantFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Tenant = x.tenantFlag.AzureADTenant
	}

	if x.emailVerifiedFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.EmailVerified = *x.emailVerifiedFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateAzureADProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateAzureADProviderResponseFlag struct {
	*UpdateAzureADProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateAzureADProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAzureADProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAzureADProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateAzureADProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomDomainPolicyRequestFlag struct {
	*UpdateCustomDomainPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                                  *cli_client.StringParser
	userLoginMustBeDomainFlag                  *cli_client.BoolParser
	validateOrgDomainsFlag                     *cli_client.BoolParser
	smtpSenderAddressMatchesInstanceDomainFlag *cli_client.BoolParser
}

func (x *UpdateCustomDomainPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomDomainPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	x.validateOrgDomainsFlag = cli_client.NewBoolParser(x.set, "validate-org-domains", "")
	x.smtpSenderAddressMatchesInstanceDomainFlag = cli_client.NewBoolParser(x.set, "smtp-sender-address-matches-instance-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomDomainPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.UpdateCustomDomainPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.UpdateCustomDomainPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
	if x.validateOrgDomainsFlag.Changed() {
		x.changed = true
		x.UpdateCustomDomainPolicyRequest.ValidateOrgDomains = *x.validateOrgDomainsFlag.Value
	}
	if x.smtpSenderAddressMatchesInstanceDomainFlag.Changed() {
		x.changed = true
		x.UpdateCustomDomainPolicyRequest.SmtpSenderAddressMatchesInstanceDomain = *x.smtpSenderAddressMatchesInstanceDomainFlag.Value
	}
}

func (x *UpdateCustomDomainPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomDomainPolicyResponseFlag struct {
	*UpdateCustomDomainPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomDomainPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomDomainPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomDomainPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomDomainPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomDomainPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomOrgIAMPolicyRequestFlag struct {
	*UpdateCustomOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet

	orgIdFlag                 *cli_client.StringParser
	userLoginMustBeDomainFlag *cli_client.BoolParser
}

func (x *UpdateCustomOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomOrgIAMPolicyRequest", pflag.ContinueOnError)

	x.orgIdFlag = cli_client.NewStringParser(x.set, "org-id", "")
	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.orgIdFlag.Changed() {
		x.changed = true
		x.UpdateCustomOrgIAMPolicyRequest.OrgId = *x.orgIdFlag.Value
	}
	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.UpdateCustomOrgIAMPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
}

func (x *UpdateCustomOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomOrgIAMPolicyResponseFlag struct {
	*UpdateCustomOrgIAMPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomOrgIAMPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomOrgIAMPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomOrgIAMPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomOrgIAMPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomOrgIAMPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateDomainPolicyRequestFlag struct {
	*UpdateDomainPolicyRequest

	changed bool
	set     *pflag.FlagSet

	userLoginMustBeDomainFlag                  *cli_client.BoolParser
	validateOrgDomainsFlag                     *cli_client.BoolParser
	smtpSenderAddressMatchesInstanceDomainFlag *cli_client.BoolParser
}

func (x *UpdateDomainPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateDomainPolicyRequest", pflag.ContinueOnError)

	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	x.validateOrgDomainsFlag = cli_client.NewBoolParser(x.set, "validate-org-domains", "")
	x.smtpSenderAddressMatchesInstanceDomainFlag = cli_client.NewBoolParser(x.set, "smtp-sender-address-matches-instance-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateDomainPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.UpdateDomainPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
	if x.validateOrgDomainsFlag.Changed() {
		x.changed = true
		x.UpdateDomainPolicyRequest.ValidateOrgDomains = *x.validateOrgDomainsFlag.Value
	}
	if x.smtpSenderAddressMatchesInstanceDomainFlag.Changed() {
		x.changed = true
		x.UpdateDomainPolicyRequest.SmtpSenderAddressMatchesInstanceDomain = *x.smtpSenderAddressMatchesInstanceDomainFlag.Value
	}
}

func (x *UpdateDomainPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateDomainPolicyResponseFlag struct {
	*UpdateDomainPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateDomainPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateDomainPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateDomainPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateDomainPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateDomainPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOAuthProviderRequestFlag struct {
	*UpdateGenericOAuthProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                    *cli_client.StringParser
	nameFlag                  *cli_client.StringParser
	clientIdFlag              *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	idAttributeFlag           *cli_client.StringParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *UpdateGenericOAuthProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOAuthProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.idAttributeFlag = cli_client.NewStringParser(x.set, "id-attribute", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOAuthProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.Scopes = *x.scopesFlag.Value
	}
	if x.idAttributeFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.IdAttribute = *x.idAttributeFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGenericOAuthProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOAuthProviderResponseFlag struct {
	*UpdateGenericOAuthProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGenericOAuthProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOAuthProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOAuthProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGenericOAuthProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOIDCProviderRequestFlag struct {
	*UpdateGenericOIDCProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag               *cli_client.StringParser
	nameFlag             *cli_client.StringParser
	issuerFlag           *cli_client.StringParser
	clientIdFlag         *cli_client.StringParser
	clientSecretFlag     *cli_client.StringParser
	scopesFlag           *cli_client.StringSliceParser
	providerOptionsFlag  *idp.OptionsFlag
	isIdTokenMappingFlag *cli_client.BoolParser
}

func (x *UpdateGenericOIDCProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOIDCProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.isIdTokenMappingFlag = cli_client.NewBoolParser(x.set, "is-id-token-mapping", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOIDCProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	if x.isIdTokenMappingFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.IsIdTokenMapping = *x.isIdTokenMappingFlag.Value
	}
}

func (x *UpdateGenericOIDCProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOIDCProviderResponseFlag struct {
	*UpdateGenericOIDCProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGenericOIDCProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOIDCProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOIDCProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGenericOIDCProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubEnterpriseServerProviderRequestFlag struct {
	*UpdateGitHubEnterpriseServerProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                    *cli_client.StringParser
	nameFlag                  *cli_client.StringParser
	clientIdFlag              *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *UpdateGitHubEnterpriseServerProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubEnterpriseServerProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubEnterpriseServerProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitHubEnterpriseServerProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubEnterpriseServerProviderResponseFlag struct {
	*UpdateGitHubEnterpriseServerProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitHubEnterpriseServerProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubEnterpriseServerProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubEnterpriseServerProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitHubEnterpriseServerProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubProviderRequestFlag struct {
	*UpdateGitHubProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGitHubProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitHubProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubProviderResponseFlag struct {
	*UpdateGitHubProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitHubProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitHubProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabProviderRequestFlag struct {
	*UpdateGitLabProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGitLabProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitLabProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabProviderResponseFlag struct {
	*UpdateGitLabProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitLabProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitLabProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabSelfHostedProviderRequestFlag struct {
	*UpdateGitLabSelfHostedProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	issuerFlag          *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGitLabSelfHostedProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabSelfHostedProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabSelfHostedProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Id = *x.idFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitLabSelfHostedProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabSelfHostedProviderResponseFlag struct {
	*UpdateGitLabSelfHostedProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitLabSelfHostedProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabSelfHostedProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabSelfHostedProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitLabSelfHostedProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGoogleProviderRequestFlag struct {
	*UpdateGoogleProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGoogleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGoogleProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGoogleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGoogleProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGoogleProviderResponseFlag struct {
	*UpdateGoogleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGoogleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGoogleProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGoogleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGoogleProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateIAMMemberRequestFlag struct {
	*UpdateIAMMemberRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	rolesFlag  *cli_client.StringSliceParser
}

func (x *UpdateIAMMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIAMMemberRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateIAMMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateIAMMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.UpdateIAMMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *UpdateIAMMemberRequestFlag) Changed() bool {
	return x.changed
}

type UpdateIAMMemberResponseFlag struct {
	*UpdateIAMMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateIAMMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIAMMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateIAMMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateIAMMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateIAMMemberResponseFlag) Changed() bool {
	return x.changed
}

type UpdateIDPJWTConfigRequestFlag struct {
	*UpdateIDPJWTConfigRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag        *cli_client.StringParser
	jwtEndpointFlag  *cli_client.StringParser
	issuerFlag       *cli_client.StringParser
	keysEndpointFlag *cli_client.StringParser
	headerNameFlag   *cli_client.StringParser
}

func (x *UpdateIDPJWTConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIDPJWTConfigRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateIDPJWTConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.UpdateIDPJWTConfigRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.UpdateIDPJWTConfigRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateIDPJWTConfigRequest.Issuer = *x.issuerFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.UpdateIDPJWTConfigRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.UpdateIDPJWTConfigRequest.HeaderName = *x.headerNameFlag.Value
	}
}

func (x *UpdateIDPJWTConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateIDPJWTConfigResponseFlag struct {
	*UpdateIDPJWTConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateIDPJWTConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIDPJWTConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateIDPJWTConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateIDPJWTConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateIDPJWTConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateIDPOIDCConfigRequestFlag struct {
	*UpdateIDPOIDCConfigRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag              *cli_client.StringParser
	issuerFlag             *cli_client.StringParser
	clientIdFlag           *cli_client.StringParser
	clientSecretFlag       *cli_client.StringParser
	scopesFlag             *cli_client.StringSliceParser
	displayNameMappingFlag *cli_client.EnumParser[idp.OIDCMappingField]
	usernameMappingFlag    *cli_client.EnumParser[idp.OIDCMappingField]
}

func (x *UpdateIDPOIDCConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIDPOIDCConfigRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.displayNameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "display-name-mapping", "")
	x.usernameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "username-mapping", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateIDPOIDCConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.Scopes = *x.scopesFlag.Value
	}
	if x.displayNameMappingFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.DisplayNameMapping = *x.displayNameMappingFlag.Value
	}
	if x.usernameMappingFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigRequest.UsernameMapping = *x.usernameMappingFlag.Value
	}
}

func (x *UpdateIDPOIDCConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateIDPOIDCConfigResponseFlag struct {
	*UpdateIDPOIDCConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateIDPOIDCConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIDPOIDCConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateIDPOIDCConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateIDPOIDCConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateIDPOIDCConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateIDPRequestFlag struct {
	*UpdateIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag        *cli_client.StringParser
	nameFlag         *cli_client.StringParser
	stylingTypeFlag  *cli_client.EnumParser[idp.IDPStylingType]
	autoRegisterFlag *cli_client.BoolParser
}

func (x *UpdateIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[idp.IDPStylingType](x.set, "styling-type", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.UpdateIDPRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateIDPRequest.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.UpdateIDPRequest.StylingType = *x.stylingTypeFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.UpdateIDPRequest.AutoRegister = *x.autoRegisterFlag.Value
	}
}

func (x *UpdateIDPRequestFlag) Changed() bool {
	return x.changed
}

type UpdateIDPResponseFlag struct {
	*UpdateIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateIDPResponseFlag) Changed() bool {
	return x.changed
}

type UpdateJWTProviderRequestFlag struct {
	*UpdateJWTProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	issuerFlag          *cli_client.StringParser
	jwtEndpointFlag     *cli_client.StringParser
	keysEndpointFlag    *cli_client.StringParser
	headerNameFlag      *cli_client.StringParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateJWTProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateJWTProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateJWTProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.HeaderName = *x.headerNameFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateJWTProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateJWTProviderResponseFlag struct {
	*UpdateJWTProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateJWTProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateJWTProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateJWTProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateJWTProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateLDAPProviderRequestFlag struct {
	*UpdateLDAPProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                *cli_client.StringParser
	nameFlag              *cli_client.StringParser
	serversFlag           *cli_client.StringSliceParser
	startTlsFlag          *cli_client.BoolParser
	baseDnFlag            *cli_client.StringParser
	bindDnFlag            *cli_client.StringParser
	bindPasswordFlag      *cli_client.StringParser
	userBaseFlag          *cli_client.StringParser
	userObjectClassesFlag *cli_client.StringSliceParser
	userFiltersFlag       *cli_client.StringSliceParser
	timeoutFlag           *cli_client.DurationParser
	attributesFlag        *idp.LDAPAttributesFlag
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *UpdateLDAPProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLDAPProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.serversFlag = cli_client.NewStringSliceParser(x.set, "servers", "")
	x.startTlsFlag = cli_client.NewBoolParser(x.set, "start-tls", "")
	x.baseDnFlag = cli_client.NewStringParser(x.set, "base-dn", "")
	x.bindDnFlag = cli_client.NewStringParser(x.set, "bind-dn", "")
	x.bindPasswordFlag = cli_client.NewStringParser(x.set, "bind-password", "")
	x.userBaseFlag = cli_client.NewStringParser(x.set, "user-base", "")
	x.userObjectClassesFlag = cli_client.NewStringSliceParser(x.set, "user-object-classes", "")
	x.userFiltersFlag = cli_client.NewStringSliceParser(x.set, "user-filters", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.attributesFlag = &idp.LDAPAttributesFlag{LDAPAttributes: new(idp.LDAPAttributes)}
	x.attributesFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLDAPProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "attributes", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("attributes"); flagIdx != nil {
		x.attributesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Name = *x.nameFlag.Value
	}
	if x.serversFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Servers = *x.serversFlag.Value
	}
	if x.startTlsFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.StartTls = *x.startTlsFlag.Value
	}
	if x.baseDnFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.BaseDn = *x.baseDnFlag.Value
	}
	if x.bindDnFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.BindDn = *x.bindDnFlag.Value
	}
	if x.bindPasswordFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.BindPassword = *x.bindPasswordFlag.Value
	}
	if x.userBaseFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.UserBase = *x.userBaseFlag.Value
	}
	if x.userObjectClassesFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.UserObjectClasses = *x.userObjectClassesFlag.Value
	}
	if x.userFiltersFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.UserFilters = *x.userFiltersFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Timeout = x.timeoutFlag.Value
	}

	if x.attributesFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Attributes = x.attributesFlag.LDAPAttributes
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateLDAPProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateLDAPProviderResponseFlag struct {
	*UpdateLDAPProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateLDAPProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLDAPProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLDAPProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateLDAPProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateLabelPolicyRequestFlag struct {
	*UpdateLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet

	primaryColorFlag        *cli_client.StringParser
	hideLoginNameSuffixFlag *cli_client.BoolParser
	warnColorFlag           *cli_client.StringParser
	backgroundColorFlag     *cli_client.StringParser
	fontColorFlag           *cli_client.StringParser
	primaryColorDarkFlag    *cli_client.StringParser
	backgroundColorDarkFlag *cli_client.StringParser
	warnColorDarkFlag       *cli_client.StringParser
	fontColorDarkFlag       *cli_client.StringParser
	disableWatermarkFlag    *cli_client.BoolParser
	themeModeFlag           *cli_client.EnumParser[policy.ThemeMode]
}

func (x *UpdateLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLabelPolicyRequest", pflag.ContinueOnError)

	x.primaryColorFlag = cli_client.NewStringParser(x.set, "primary-color", "")
	x.hideLoginNameSuffixFlag = cli_client.NewBoolParser(x.set, "hide-login-name-suffix", "")
	x.warnColorFlag = cli_client.NewStringParser(x.set, "warn-color", "")
	x.backgroundColorFlag = cli_client.NewStringParser(x.set, "background-color", "")
	x.fontColorFlag = cli_client.NewStringParser(x.set, "font-color", "")
	x.primaryColorDarkFlag = cli_client.NewStringParser(x.set, "primary-color-dark", "")
	x.backgroundColorDarkFlag = cli_client.NewStringParser(x.set, "background-color-dark", "")
	x.warnColorDarkFlag = cli_client.NewStringParser(x.set, "warn-color-dark", "")
	x.fontColorDarkFlag = cli_client.NewStringParser(x.set, "font-color-dark", "")
	x.disableWatermarkFlag = cli_client.NewBoolParser(x.set, "disable-watermark", "")
	x.themeModeFlag = cli_client.NewEnumParser[policy.ThemeMode](x.set, "theme-mode", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.primaryColorFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.PrimaryColor = *x.primaryColorFlag.Value
	}
	if x.hideLoginNameSuffixFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.HideLoginNameSuffix = *x.hideLoginNameSuffixFlag.Value
	}
	if x.warnColorFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.WarnColor = *x.warnColorFlag.Value
	}
	if x.backgroundColorFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.BackgroundColor = *x.backgroundColorFlag.Value
	}
	if x.fontColorFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.FontColor = *x.fontColorFlag.Value
	}
	if x.primaryColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.PrimaryColorDark = *x.primaryColorDarkFlag.Value
	}
	if x.backgroundColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.BackgroundColorDark = *x.backgroundColorDarkFlag.Value
	}
	if x.warnColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.WarnColorDark = *x.warnColorDarkFlag.Value
	}
	if x.fontColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.FontColorDark = *x.fontColorDarkFlag.Value
	}
	if x.disableWatermarkFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.DisableWatermark = *x.disableWatermarkFlag.Value
	}
	if x.themeModeFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyRequest.ThemeMode = *x.themeModeFlag.Value
	}
}

func (x *UpdateLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateLabelPolicyResponseFlag struct {
	*UpdateLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLabelPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateLabelPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateLockoutPolicyRequestFlag struct {
	*UpdateLockoutPolicyRequest

	changed bool
	set     *pflag.FlagSet

	maxPasswordAttemptsFlag *cli_client.Uint32Parser
}

func (x *UpdateLockoutPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLockoutPolicyRequest", pflag.ContinueOnError)

	x.maxPasswordAttemptsFlag = cli_client.NewUint32Parser(x.set, "max-password-attempts", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateLockoutPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.maxPasswordAttemptsFlag.Changed() {
		x.changed = true
		x.UpdateLockoutPolicyRequest.MaxPasswordAttempts = *x.maxPasswordAttemptsFlag.Value
	}
}

func (x *UpdateLockoutPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateLockoutPolicyResponseFlag struct {
	*UpdateLockoutPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateLockoutPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLockoutPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLockoutPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateLockoutPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateLockoutPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateLoginPolicyRequestFlag struct {
	*UpdateLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	allowUsernamePasswordFlag      *cli_client.BoolParser
	allowRegisterFlag              *cli_client.BoolParser
	allowExternalIdpFlag           *cli_client.BoolParser
	forceMfaFlag                   *cli_client.BoolParser
	passwordlessTypeFlag           *cli_client.EnumParser[policy.PasswordlessType]
	hidePasswordResetFlag          *cli_client.BoolParser
	ignoreUnknownUsernamesFlag     *cli_client.BoolParser
	defaultRedirectUriFlag         *cli_client.StringParser
	passwordCheckLifetimeFlag      *cli_client.DurationParser
	externalLoginCheckLifetimeFlag *cli_client.DurationParser
	mfaInitSkipLifetimeFlag        *cli_client.DurationParser
	secondFactorCheckLifetimeFlag  *cli_client.DurationParser
	multiFactorCheckLifetimeFlag   *cli_client.DurationParser
	allowDomainDiscoveryFlag       *cli_client.BoolParser
	disableLoginWithEmailFlag      *cli_client.BoolParser
	disableLoginWithPhoneFlag      *cli_client.BoolParser
	forceMfaLocalOnlyFlag          *cli_client.BoolParser
}

func (x *UpdateLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLoginPolicyRequest", pflag.ContinueOnError)

	x.allowUsernamePasswordFlag = cli_client.NewBoolParser(x.set, "allow-username-password", "")
	x.allowRegisterFlag = cli_client.NewBoolParser(x.set, "allow-register", "")
	x.allowExternalIdpFlag = cli_client.NewBoolParser(x.set, "allow-external-idp", "")
	x.forceMfaFlag = cli_client.NewBoolParser(x.set, "force-mfa", "")
	x.passwordlessTypeFlag = cli_client.NewEnumParser[policy.PasswordlessType](x.set, "passwordless-type", "")
	x.hidePasswordResetFlag = cli_client.NewBoolParser(x.set, "hide-password-reset", "")
	x.ignoreUnknownUsernamesFlag = cli_client.NewBoolParser(x.set, "ignore-unknown-usernames", "")
	x.defaultRedirectUriFlag = cli_client.NewStringParser(x.set, "default-redirect-uri", "")
	x.passwordCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "password-check-lifetime", "")
	x.externalLoginCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "external-login-check-lifetime", "")
	x.mfaInitSkipLifetimeFlag = cli_client.NewDurationParser(x.set, "mfa-init-skip-lifetime", "")
	x.secondFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "second-factor-check-lifetime", "")
	x.multiFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "multi-factor-check-lifetime", "")
	x.allowDomainDiscoveryFlag = cli_client.NewBoolParser(x.set, "allow-domain-discovery", "")
	x.disableLoginWithEmailFlag = cli_client.NewBoolParser(x.set, "disable-login-with-email", "")
	x.disableLoginWithPhoneFlag = cli_client.NewBoolParser(x.set, "disable-login-with-phone", "")
	x.forceMfaLocalOnlyFlag = cli_client.NewBoolParser(x.set, "force-mfa-local-only", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.allowUsernamePasswordFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.AllowUsernamePassword = *x.allowUsernamePasswordFlag.Value
	}
	if x.allowRegisterFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.AllowRegister = *x.allowRegisterFlag.Value
	}
	if x.allowExternalIdpFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.AllowExternalIdp = *x.allowExternalIdpFlag.Value
	}
	if x.forceMfaFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.ForceMfa = *x.forceMfaFlag.Value
	}
	if x.passwordlessTypeFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.PasswordlessType = *x.passwordlessTypeFlag.Value
	}
	if x.hidePasswordResetFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.HidePasswordReset = *x.hidePasswordResetFlag.Value
	}
	if x.ignoreUnknownUsernamesFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.IgnoreUnknownUsernames = *x.ignoreUnknownUsernamesFlag.Value
	}
	if x.defaultRedirectUriFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.DefaultRedirectUri = *x.defaultRedirectUriFlag.Value
	}
	if x.passwordCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.PasswordCheckLifetime = x.passwordCheckLifetimeFlag.Value
	}
	if x.externalLoginCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.ExternalLoginCheckLifetime = x.externalLoginCheckLifetimeFlag.Value
	}
	if x.mfaInitSkipLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.MfaInitSkipLifetime = x.mfaInitSkipLifetimeFlag.Value
	}
	if x.secondFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.SecondFactorCheckLifetime = x.secondFactorCheckLifetimeFlag.Value
	}
	if x.multiFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.MultiFactorCheckLifetime = x.multiFactorCheckLifetimeFlag.Value
	}
	if x.allowDomainDiscoveryFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.AllowDomainDiscovery = *x.allowDomainDiscoveryFlag.Value
	}
	if x.disableLoginWithEmailFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.DisableLoginWithEmail = *x.disableLoginWithEmailFlag.Value
	}
	if x.disableLoginWithPhoneFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.DisableLoginWithPhone = *x.disableLoginWithPhoneFlag.Value
	}
	if x.forceMfaLocalOnlyFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyRequest.ForceMfaLocalOnly = *x.forceMfaLocalOnlyFlag.Value
	}
}

func (x *UpdateLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateLoginPolicyResponseFlag struct {
	*UpdateLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateNotificationPolicyRequestFlag struct {
	*UpdateNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet

	passwordChangeFlag *cli_client.BoolParser
}

func (x *UpdateNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateNotificationPolicyRequest", pflag.ContinueOnError)

	x.passwordChangeFlag = cli_client.NewBoolParser(x.set, "password-change", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordChangeFlag.Changed() {
		x.changed = true
		x.UpdateNotificationPolicyRequest.PasswordChange = *x.passwordChangeFlag.Value
	}
}

func (x *UpdateNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateNotificationPolicyResponseFlag struct {
	*UpdateNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateNotificationPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateNotificationPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOIDCSettingsRequestFlag struct {
	*UpdateOIDCSettingsRequest

	changed bool
	set     *pflag.FlagSet

	accessTokenLifetimeFlag        *cli_client.DurationParser
	idTokenLifetimeFlag            *cli_client.DurationParser
	refreshTokenIdleExpirationFlag *cli_client.DurationParser
	refreshTokenExpirationFlag     *cli_client.DurationParser
}

func (x *UpdateOIDCSettingsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOIDCSettingsRequest", pflag.ContinueOnError)

	x.accessTokenLifetimeFlag = cli_client.NewDurationParser(x.set, "access-token-lifetime", "")
	x.idTokenLifetimeFlag = cli_client.NewDurationParser(x.set, "id-token-lifetime", "")
	x.refreshTokenIdleExpirationFlag = cli_client.NewDurationParser(x.set, "refresh-token-idle-expiration", "")
	x.refreshTokenExpirationFlag = cli_client.NewDurationParser(x.set, "refresh-token-expiration", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOIDCSettingsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.accessTokenLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateOIDCSettingsRequest.AccessTokenLifetime = x.accessTokenLifetimeFlag.Value
	}
	if x.idTokenLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateOIDCSettingsRequest.IdTokenLifetime = x.idTokenLifetimeFlag.Value
	}
	if x.refreshTokenIdleExpirationFlag.Changed() {
		x.changed = true
		x.UpdateOIDCSettingsRequest.RefreshTokenIdleExpiration = x.refreshTokenIdleExpirationFlag.Value
	}
	if x.refreshTokenExpirationFlag.Changed() {
		x.changed = true
		x.UpdateOIDCSettingsRequest.RefreshTokenExpiration = x.refreshTokenExpirationFlag.Value
	}
}

func (x *UpdateOIDCSettingsRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOIDCSettingsResponseFlag struct {
	*UpdateOIDCSettingsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOIDCSettingsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOIDCSettingsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOIDCSettingsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOIDCSettingsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOIDCSettingsResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIAMPolicyRequestFlag struct {
	*UpdateOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet

	userLoginMustBeDomainFlag *cli_client.BoolParser
}

func (x *UpdateOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIAMPolicyRequest", pflag.ContinueOnError)

	x.userLoginMustBeDomainFlag = cli_client.NewBoolParser(x.set, "user-login-must-be-domain", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userLoginMustBeDomainFlag.Changed() {
		x.changed = true
		x.UpdateOrgIAMPolicyRequest.UserLoginMustBeDomain = *x.userLoginMustBeDomainFlag.Value
	}
}

func (x *UpdateOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIAMPolicyResponseFlag struct {
	*UpdateOrgIAMPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOrgIAMPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIAMPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIAMPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOrgIAMPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOrgIAMPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdatePasswordAgePolicyRequestFlag struct {
	*UpdatePasswordAgePolicyRequest

	changed bool
	set     *pflag.FlagSet

	maxAgeDaysFlag     *cli_client.Uint32Parser
	expireWarnDaysFlag *cli_client.Uint32Parser
}

func (x *UpdatePasswordAgePolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdatePasswordAgePolicyRequest", pflag.ContinueOnError)

	x.maxAgeDaysFlag = cli_client.NewUint32Parser(x.set, "max-age-days", "")
	x.expireWarnDaysFlag = cli_client.NewUint32Parser(x.set, "expire-warn-days", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdatePasswordAgePolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.maxAgeDaysFlag.Changed() {
		x.changed = true
		x.UpdatePasswordAgePolicyRequest.MaxAgeDays = *x.maxAgeDaysFlag.Value
	}
	if x.expireWarnDaysFlag.Changed() {
		x.changed = true
		x.UpdatePasswordAgePolicyRequest.ExpireWarnDays = *x.expireWarnDaysFlag.Value
	}
}

func (x *UpdatePasswordAgePolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdatePasswordAgePolicyResponseFlag struct {
	*UpdatePasswordAgePolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdatePasswordAgePolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdatePasswordAgePolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdatePasswordAgePolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdatePasswordAgePolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdatePasswordAgePolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdatePasswordComplexityPolicyRequestFlag struct {
	*UpdatePasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet

	minLengthFlag    *cli_client.Uint32Parser
	hasUppercaseFlag *cli_client.BoolParser
	hasLowercaseFlag *cli_client.BoolParser
	hasNumberFlag    *cli_client.BoolParser
	hasSymbolFlag    *cli_client.BoolParser
}

func (x *UpdatePasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdatePasswordComplexityPolicyRequest", pflag.ContinueOnError)

	x.minLengthFlag = cli_client.NewUint32Parser(x.set, "min-length", "")
	x.hasUppercaseFlag = cli_client.NewBoolParser(x.set, "has-uppercase", "")
	x.hasLowercaseFlag = cli_client.NewBoolParser(x.set, "has-lowercase", "")
	x.hasNumberFlag = cli_client.NewBoolParser(x.set, "has-number", "")
	x.hasSymbolFlag = cli_client.NewBoolParser(x.set, "has-symbol", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdatePasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.minLengthFlag.Changed() {
		x.changed = true
		x.UpdatePasswordComplexityPolicyRequest.MinLength = *x.minLengthFlag.Value
	}
	if x.hasUppercaseFlag.Changed() {
		x.changed = true
		x.UpdatePasswordComplexityPolicyRequest.HasUppercase = *x.hasUppercaseFlag.Value
	}
	if x.hasLowercaseFlag.Changed() {
		x.changed = true
		x.UpdatePasswordComplexityPolicyRequest.HasLowercase = *x.hasLowercaseFlag.Value
	}
	if x.hasNumberFlag.Changed() {
		x.changed = true
		x.UpdatePasswordComplexityPolicyRequest.HasNumber = *x.hasNumberFlag.Value
	}
	if x.hasSymbolFlag.Changed() {
		x.changed = true
		x.UpdatePasswordComplexityPolicyRequest.HasSymbol = *x.hasSymbolFlag.Value
	}
}

func (x *UpdatePasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdatePasswordComplexityPolicyResponseFlag struct {
	*UpdatePasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdatePasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdatePasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdatePasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdatePasswordComplexityPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdatePasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdatePrivacyPolicyRequestFlag struct {
	*UpdatePrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet

	tosLinkFlag      *cli_client.StringParser
	privacyLinkFlag  *cli_client.StringParser
	helpLinkFlag     *cli_client.StringParser
	supportEmailFlag *cli_client.StringParser
}

func (x *UpdatePrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdatePrivacyPolicyRequest", pflag.ContinueOnError)

	x.tosLinkFlag = cli_client.NewStringParser(x.set, "tos-link", "")
	x.privacyLinkFlag = cli_client.NewStringParser(x.set, "privacy-link", "")
	x.helpLinkFlag = cli_client.NewStringParser(x.set, "help-link", "")
	x.supportEmailFlag = cli_client.NewStringParser(x.set, "support-email", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdatePrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tosLinkFlag.Changed() {
		x.changed = true
		x.UpdatePrivacyPolicyRequest.TosLink = *x.tosLinkFlag.Value
	}
	if x.privacyLinkFlag.Changed() {
		x.changed = true
		x.UpdatePrivacyPolicyRequest.PrivacyLink = *x.privacyLinkFlag.Value
	}
	if x.helpLinkFlag.Changed() {
		x.changed = true
		x.UpdatePrivacyPolicyRequest.HelpLink = *x.helpLinkFlag.Value
	}
	if x.supportEmailFlag.Changed() {
		x.changed = true
		x.UpdatePrivacyPolicyRequest.SupportEmail = *x.supportEmailFlag.Value
	}
}

func (x *UpdatePrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdatePrivacyPolicyResponseFlag struct {
	*UpdatePrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdatePrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdatePrivacyPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdatePrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdatePrivacyPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdatePrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSAMLProviderRequestFlag struct {
	*UpdateSAMLProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                *cli_client.StringParser
	nameFlag              *cli_client.StringParser
	metadataXmlFlag       *cli_client.BytesParser
	metadataUrlFlag       *cli_client.StringParser
	bindingFlag           *cli_client.EnumParser[idp.SAMLBinding]
	withSignedRequestFlag *cli_client.BoolParser
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *UpdateSAMLProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSAMLProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.metadataUrlFlag = cli_client.NewStringParser(x.set, "metadata-url", "")
	x.bindingFlag = cli_client.NewEnumParser[idp.SAMLBinding](x.set, "binding", "")
	x.withSignedRequestFlag = cli_client.NewBoolParser(x.set, "with-signed-request", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSAMLProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.Name = *x.nameFlag.Value
	}
	if x.bindingFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.Binding = *x.bindingFlag.Value
	}
	if x.withSignedRequestFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.WithSignedRequest = *x.withSignedRequestFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	switch cli_client.FieldIndexes(args, "metadata-xml", "metadata-url").Last().Flag {
	case "metadata-xml":
		if x.metadataXmlFlag.Changed() {
			x.changed = true
			x.UpdateSAMLProviderRequest.Metadata = &UpdateSAMLProviderRequest_MetadataXml{MetadataXml: *x.metadataXmlFlag.Value}
		}
	case "metadata-url":
		if x.metadataUrlFlag.Changed() {
			x.changed = true
			x.UpdateSAMLProviderRequest.Metadata = &UpdateSAMLProviderRequest_MetadataUrl{MetadataUrl: *x.metadataUrlFlag.Value}
		}
	}
}

func (x *UpdateSAMLProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSAMLProviderResponseFlag struct {
	*UpdateSAMLProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSAMLProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSAMLProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSAMLProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSAMLProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSMSProviderTwilioRequestFlag struct {
	*UpdateSMSProviderTwilioRequest

	changed bool
	set     *pflag.FlagSet

	idFlag           *cli_client.StringParser
	sidFlag          *cli_client.StringParser
	senderNumberFlag *cli_client.StringParser
}

func (x *UpdateSMSProviderTwilioRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMSProviderTwilioRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.sidFlag = cli_client.NewStringParser(x.set, "sid", "")
	x.senderNumberFlag = cli_client.NewStringParser(x.set, "sender-number", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMSProviderTwilioRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioRequest.Id = *x.idFlag.Value
	}
	if x.sidFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioRequest.Sid = *x.sidFlag.Value
	}
	if x.senderNumberFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioRequest.SenderNumber = *x.senderNumberFlag.Value
	}
}

func (x *UpdateSMSProviderTwilioRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSMSProviderTwilioResponseFlag struct {
	*UpdateSMSProviderTwilioResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSMSProviderTwilioResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMSProviderTwilioResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMSProviderTwilioResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSMSProviderTwilioResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSMSProviderTwilioTokenRequestFlag struct {
	*UpdateSMSProviderTwilioTokenRequest

	changed bool
	set     *pflag.FlagSet

	idFlag    *cli_client.StringParser
	tokenFlag *cli_client.StringParser
}

func (x *UpdateSMSProviderTwilioTokenRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMSProviderTwilioTokenRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.tokenFlag = cli_client.NewStringParser(x.set, "token", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMSProviderTwilioTokenRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioTokenRequest.Id = *x.idFlag.Value
	}
	if x.tokenFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioTokenRequest.Token = *x.tokenFlag.Value
	}
}

func (x *UpdateSMSProviderTwilioTokenRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSMSProviderTwilioTokenResponseFlag struct {
	*UpdateSMSProviderTwilioTokenResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSMSProviderTwilioTokenResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMSProviderTwilioTokenResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMSProviderTwilioTokenResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSMSProviderTwilioTokenResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSMSProviderTwilioTokenResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSMTPConfigPasswordRequestFlag struct {
	*UpdateSMTPConfigPasswordRequest

	changed bool
	set     *pflag.FlagSet

	passwordFlag *cli_client.StringParser
}

func (x *UpdateSMTPConfigPasswordRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMTPConfigPasswordRequest", pflag.ContinueOnError)

	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMTPConfigPasswordRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigPasswordRequest.Password = *x.passwordFlag.Value
	}
}

func (x *UpdateSMTPConfigPasswordRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSMTPConfigPasswordResponseFlag struct {
	*UpdateSMTPConfigPasswordResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSMTPConfigPasswordResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMTPConfigPasswordResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMTPConfigPasswordResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigPasswordResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSMTPConfigPasswordResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSMTPConfigRequestFlag struct {
	*UpdateSMTPConfigRequest

	changed bool
	set     *pflag.FlagSet

	senderAddressFlag  *cli_client.StringParser
	senderNameFlag     *cli_client.StringParser
	tlsFlag            *cli_client.BoolParser
	hostFlag           *cli_client.StringParser
	userFlag           *cli_client.StringParser
	replyToAddressFlag *cli_client.StringParser
}

func (x *UpdateSMTPConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMTPConfigRequest", pflag.ContinueOnError)

	x.senderAddressFlag = cli_client.NewStringParser(x.set, "sender-address", "")
	x.senderNameFlag = cli_client.NewStringParser(x.set, "sender-name", "")
	x.tlsFlag = cli_client.NewBoolParser(x.set, "tls", "")
	x.hostFlag = cli_client.NewStringParser(x.set, "host", "")
	x.userFlag = cli_client.NewStringParser(x.set, "user", "")
	x.replyToAddressFlag = cli_client.NewStringParser(x.set, "reply-to-address", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMTPConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.senderAddressFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigRequest.SenderAddress = *x.senderAddressFlag.Value
	}
	if x.senderNameFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigRequest.SenderName = *x.senderNameFlag.Value
	}
	if x.tlsFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigRequest.Tls = *x.tlsFlag.Value
	}
	if x.hostFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigRequest.Host = *x.hostFlag.Value
	}
	if x.userFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigRequest.User = *x.userFlag.Value
	}
	if x.replyToAddressFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigRequest.ReplyToAddress = *x.replyToAddressFlag.Value
	}
}

func (x *UpdateSMTPConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSMTPConfigResponseFlag struct {
	*UpdateSMTPConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSMTPConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSMTPConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSMTPConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSMTPConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSMTPConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSecretGeneratorRequestFlag struct {
	*UpdateSecretGeneratorRequest

	changed bool
	set     *pflag.FlagSet

	generatorTypeFlag       *cli_client.EnumParser[settings.SecretGeneratorType]
	lengthFlag              *cli_client.Uint32Parser
	expiryFlag              *cli_client.DurationParser
	includeLowerLettersFlag *cli_client.BoolParser
	includeUpperLettersFlag *cli_client.BoolParser
	includeDigitsFlag       *cli_client.BoolParser
	includeSymbolsFlag      *cli_client.BoolParser
}

func (x *UpdateSecretGeneratorRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSecretGeneratorRequest", pflag.ContinueOnError)

	x.generatorTypeFlag = cli_client.NewEnumParser[settings.SecretGeneratorType](x.set, "generator-type", "")
	x.lengthFlag = cli_client.NewUint32Parser(x.set, "length", "")
	x.expiryFlag = cli_client.NewDurationParser(x.set, "expiry", "")
	x.includeLowerLettersFlag = cli_client.NewBoolParser(x.set, "include-lower-letters", "")
	x.includeUpperLettersFlag = cli_client.NewBoolParser(x.set, "include-upper-letters", "")
	x.includeDigitsFlag = cli_client.NewBoolParser(x.set, "include-digits", "")
	x.includeSymbolsFlag = cli_client.NewBoolParser(x.set, "include-symbols", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateSecretGeneratorRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.generatorTypeFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.GeneratorType = *x.generatorTypeFlag.Value
	}
	if x.lengthFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.Length = *x.lengthFlag.Value
	}
	if x.expiryFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.Expiry = x.expiryFlag.Value
	}
	if x.includeLowerLettersFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.IncludeLowerLetters = *x.includeLowerLettersFlag.Value
	}
	if x.includeUpperLettersFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.IncludeUpperLetters = *x.includeUpperLettersFlag.Value
	}
	if x.includeDigitsFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.IncludeDigits = *x.includeDigitsFlag.Value
	}
	if x.includeSymbolsFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorRequest.IncludeSymbols = *x.includeSymbolsFlag.Value
	}
}

func (x *UpdateSecretGeneratorRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSecretGeneratorResponseFlag struct {
	*UpdateSecretGeneratorResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSecretGeneratorResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSecretGeneratorResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSecretGeneratorResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSecretGeneratorResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSecretGeneratorResponseFlag) Changed() bool {
	return x.changed
}

type ViewFlag struct {
	*View

	changed bool
	set     *pflag.FlagSet

	databaseFlag                 *cli_client.StringParser
	viewNameFlag                 *cli_client.StringParser
	processedSequenceFlag        *cli_client.Uint64Parser
	eventTimestampFlag           *cli_client.TimestampParser
	lastSuccessfulSpoolerRunFlag *cli_client.TimestampParser
}

func (x *ViewFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("View", pflag.ContinueOnError)

	x.databaseFlag = cli_client.NewStringParser(x.set, "database", "")
	x.viewNameFlag = cli_client.NewStringParser(x.set, "view-name", "")
	x.processedSequenceFlag = cli_client.NewUint64Parser(x.set, "processed-sequence", "")
	x.eventTimestampFlag = cli_client.NewTimestampParser(x.set, "event-timestamp", "")
	x.lastSuccessfulSpoolerRunFlag = cli_client.NewTimestampParser(x.set, "last-successful-spooler-run", "")
	parent.AddFlagSet(x.set)
}

func (x *ViewFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.databaseFlag.Changed() {
		x.changed = true
		x.View.Database = *x.databaseFlag.Value
	}
	if x.viewNameFlag.Changed() {
		x.changed = true
		x.View.ViewName = *x.viewNameFlag.Value
	}
	if x.processedSequenceFlag.Changed() {
		x.changed = true
		x.View.ProcessedSequence = *x.processedSequenceFlag.Value
	}
	if x.eventTimestampFlag.Changed() {
		x.changed = true
		x.View.EventTimestamp = x.eventTimestampFlag.Value
	}
	if x.lastSuccessfulSpoolerRunFlag.Changed() {
		x.changed = true
		x.View.LastSuccessfulSpoolerRun = x.lastSuccessfulSpoolerRunFlag.Value
	}
}

func (x *ViewFlag) Changed() bool {
	return x.changed
}
