// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: zitadel/management.proto

package management

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	action "github.com/zitadel/zitadel/pkg/grpc/action"

	app "github.com/zitadel/zitadel/pkg/grpc/app"

	authn "github.com/zitadel/zitadel/pkg/grpc/authn"

	idp "github.com/zitadel/zitadel/pkg/grpc/idp"

	org "github.com/zitadel/zitadel/pkg/grpc/org"

	policy "github.com/zitadel/zitadel/pkg/grpc/policy"

	project "github.com/zitadel/zitadel/pkg/grpc/project"

	user "github.com/zitadel/zitadel/pkg/grpc/user"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}

	_ = user.UserFieldName(0)

	_ = user.UserFieldName(0)

	_ = user.AccessTokenType(0)

	_ = user.Gender(0)

	_ = user.AccessTokenType(0)

	_ = authn.KeyType(0)

	_ = org.DomainValidationType(0)

	_ = project.PrivateLabelingSetting(0)

	_ = project.PrivateLabelingSetting(0)

	_ = app.OIDCAppType(0)

	_ = app.OIDCAuthMethodType(0)

	_ = app.OIDCVersion(0)

	_ = app.OIDCTokenType(0)

	_ = app.APIAuthMethodType(0)

	_ = app.OIDCAppType(0)

	_ = app.OIDCAuthMethodType(0)

	_ = app.OIDCTokenType(0)

	_ = app.APIAuthMethodType(0)

	_ = authn.KeyType(0)

	_ = policy.PasswordlessType(0)

	_ = policy.PasswordlessType(0)

	_ = idp.IDPOwnerType(0)

	_ = policy.SecondFactorType(0)

	_ = policy.SecondFactorType(0)

	_ = policy.MultiFactorType(0)

	_ = policy.MultiFactorType(0)

	_ = idp.IDPFieldName(0)

	_ = idp.IDPFieldName(0)

	_ = idp.IDPStylingType(0)

	_ = idp.OIDCMappingField(0)

	_ = idp.OIDCMappingField(0)

	_ = idp.IDPStylingType(0)

	_ = idp.IDPStylingType(0)

	_ = idp.OIDCMappingField(0)

	_ = idp.OIDCMappingField(0)

	_ = action.ActionFieldName(0)

	_ = action.ActionFieldName(0)

	_ = user.Gender(0)

	_ = user.Gender(0)

	_ = idp.IDPOwnerType(0)
)

// Validate checks the field values on HealthzRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *HealthzRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzRequestValidationError is the validation error returned by
// HealthzRequest.Validate if the designated constraints aren't met.
type HealthzRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzRequestValidationError) ErrorName() string { return "HealthzRequestValidationError" }

// Error satisfies the builtin error interface
func (e HealthzRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzRequestValidationError{}

// Validate checks the field values on HealthzResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *HealthzResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// HealthzResponseValidationError is the validation error returned by
// HealthzResponse.Validate if the designated constraints aren't met.
type HealthzResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthzResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthzResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthzResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthzResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthzResponseValidationError) ErrorName() string { return "HealthzResponseValidationError" }

// Error satisfies the builtin error interface
func (e HealthzResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthzResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthzResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthzResponseValidationError{}

// Validate checks the field values on GetOIDCInformationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOIDCInformationRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOIDCInformationRequestValidationError is the validation error returned by
// GetOIDCInformationRequest.Validate if the designated constraints aren't met.
type GetOIDCInformationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOIDCInformationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOIDCInformationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOIDCInformationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOIDCInformationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOIDCInformationRequestValidationError) ErrorName() string {
	return "GetOIDCInformationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOIDCInformationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOIDCInformationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOIDCInformationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOIDCInformationRequestValidationError{}

// Validate checks the field values on GetOIDCInformationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOIDCInformationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Issuer

	// no validation rules for DiscoveryEndpoint

	return nil
}

// GetOIDCInformationResponseValidationError is the validation error returned
// by GetOIDCInformationResponse.Validate if the designated constraints aren't met.
type GetOIDCInformationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOIDCInformationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOIDCInformationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOIDCInformationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOIDCInformationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOIDCInformationResponseValidationError) ErrorName() string {
	return "GetOIDCInformationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOIDCInformationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOIDCInformationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOIDCInformationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOIDCInformationResponseValidationError{}

// Validate checks the field values on GetIAMRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetIAMRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetIAMRequestValidationError is the validation error returned by
// GetIAMRequest.Validate if the designated constraints aren't met.
type GetIAMRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIAMRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIAMRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIAMRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIAMRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIAMRequestValidationError) ErrorName() string { return "GetIAMRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetIAMRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIAMRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIAMRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIAMRequestValidationError{}

// Validate checks the field values on GetIAMResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetIAMResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GlobalOrgId

	// no validation rules for IamProjectId

	// no validation rules for DefaultOrgId

	return nil
}

// GetIAMResponseValidationError is the validation error returned by
// GetIAMResponse.Validate if the designated constraints aren't met.
type GetIAMResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetIAMResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetIAMResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetIAMResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetIAMResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetIAMResponseValidationError) ErrorName() string { return "GetIAMResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetIAMResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetIAMResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetIAMResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetIAMResponseValidationError{}

// Validate checks the field values on GetSupportedLanguagesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSupportedLanguagesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSupportedLanguagesRequestValidationError is the validation error returned
// by GetSupportedLanguagesRequest.Validate if the designated constraints
// aren't met.
type GetSupportedLanguagesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesRequestValidationError) ErrorName() string {
	return "GetSupportedLanguagesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesRequestValidationError{}

// Validate checks the field values on GetSupportedLanguagesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetSupportedLanguagesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetSupportedLanguagesResponseValidationError is the validation error
// returned by GetSupportedLanguagesResponse.Validate if the designated
// constraints aren't met.
type GetSupportedLanguagesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSupportedLanguagesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSupportedLanguagesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSupportedLanguagesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSupportedLanguagesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSupportedLanguagesResponseValidationError) ErrorName() string {
	return "GetSupportedLanguagesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSupportedLanguagesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSupportedLanguagesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSupportedLanguagesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSupportedLanguagesResponseValidationError{}

// Validate checks the field values on GetUserByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetUserByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetUserByIDRequestValidationError is the validation error returned by
// GetUserByIDRequest.Validate if the designated constraints aren't met.
type GetUserByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIDRequestValidationError) ErrorName() string {
	return "GetUserByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIDRequestValidationError{}

// Validate checks the field values on GetUserByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByIDResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserByIDResponseValidationError is the validation error returned by
// GetUserByIDResponse.Validate if the designated constraints aren't met.
type GetUserByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByIDResponseValidationError) ErrorName() string {
	return "GetUserByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByIDResponseValidationError{}

// Validate checks the field values on GetUserByLoginNameGlobalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserByLoginNameGlobalRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLoginName()); l < 1 || l > 200 {
		return GetUserByLoginNameGlobalRequestValidationError{
			field:  "LoginName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetUserByLoginNameGlobalRequestValidationError is the validation error
// returned by GetUserByLoginNameGlobalRequest.Validate if the designated
// constraints aren't met.
type GetUserByLoginNameGlobalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByLoginNameGlobalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByLoginNameGlobalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByLoginNameGlobalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByLoginNameGlobalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByLoginNameGlobalRequestValidationError) ErrorName() string {
	return "GetUserByLoginNameGlobalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByLoginNameGlobalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByLoginNameGlobalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByLoginNameGlobalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByLoginNameGlobalRequestValidationError{}

// Validate checks the field values on GetUserByLoginNameGlobalResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetUserByLoginNameGlobalResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserByLoginNameGlobalResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserByLoginNameGlobalResponseValidationError is the validation error
// returned by GetUserByLoginNameGlobalResponse.Validate if the designated
// constraints aren't met.
type GetUserByLoginNameGlobalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserByLoginNameGlobalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserByLoginNameGlobalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserByLoginNameGlobalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserByLoginNameGlobalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserByLoginNameGlobalResponseValidationError) ErrorName() string {
	return "GetUserByLoginNameGlobalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserByLoginNameGlobalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserByLoginNameGlobalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserByLoginNameGlobalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserByLoginNameGlobalResponseValidationError{}

// Validate checks the field values on ListUsersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUsersRequestValidationError is the validation error returned by
// ListUsersRequest.Validate if the designated constraints aren't met.
type ListUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersRequestValidationError) ErrorName() string { return "ListUsersRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersRequestValidationError{}

// Validate checks the field values on ListUsersResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListUsersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUsersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUsersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUsersResponseValidationError is the validation error returned by
// ListUsersResponse.Validate if the designated constraints aren't met.
type ListUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUsersResponseValidationError) ErrorName() string {
	return "ListUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUsersResponseValidationError{}

// Validate checks the field values on ListUserChangesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserChangesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListUserChangesRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListUserChangesRequestValidationError is the validation error returned by
// ListUserChangesRequest.Validate if the designated constraints aren't met.
type ListUserChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserChangesRequestValidationError) ErrorName() string {
	return "ListUserChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserChangesRequestValidationError{}

// Validate checks the field values on ListUserChangesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserChangesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserChangesResponseValidationError is the validation error returned by
// ListUserChangesResponse.Validate if the designated constraints aren't met.
type ListUserChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserChangesResponseValidationError) ErrorName() string {
	return "ListUserChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserChangesResponseValidationError{}

// Validate checks the field values on IsUserUniqueRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsUserUniqueRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserName()) > 200 {
		return IsUserUniqueRequestValidationError{
			field:  "UserName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetEmail()) > 200 {
		return IsUserUniqueRequestValidationError{
			field:  "Email",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// IsUserUniqueRequestValidationError is the validation error returned by
// IsUserUniqueRequest.Validate if the designated constraints aren't met.
type IsUserUniqueRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserUniqueRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserUniqueRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserUniqueRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserUniqueRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserUniqueRequestValidationError) ErrorName() string {
	return "IsUserUniqueRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserUniqueRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserUniqueRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserUniqueRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserUniqueRequestValidationError{}

// Validate checks the field values on IsUserUniqueResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *IsUserUniqueResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for IsUnique

	return nil
}

// IsUserUniqueResponseValidationError is the validation error returned by
// IsUserUniqueResponse.Validate if the designated constraints aren't met.
type IsUserUniqueResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IsUserUniqueResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IsUserUniqueResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IsUserUniqueResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IsUserUniqueResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IsUserUniqueResponseValidationError) ErrorName() string {
	return "IsUserUniqueResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IsUserUniqueResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIsUserUniqueResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IsUserUniqueResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IsUserUniqueResponseValidationError{}

// Validate checks the field values on AddHumanUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddHumanUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 1 || l > 200 {
		return AddHumanUserRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if m.GetProfile() == nil {
		return AddHumanUserRequestValidationError{
			field:  "Profile",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddHumanUserRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEmail() == nil {
		return AddHumanUserRequestValidationError{
			field:  "Email",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddHumanUserRequestValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddHumanUserRequestValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for InitialPassword

	return nil
}

// AddHumanUserRequestValidationError is the validation error returned by
// AddHumanUserRequest.Validate if the designated constraints aren't met.
type AddHumanUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHumanUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHumanUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHumanUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHumanUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHumanUserRequestValidationError) ErrorName() string {
	return "AddHumanUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddHumanUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHumanUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHumanUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHumanUserRequestValidationError{}

// Validate checks the field values on AddHumanUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddHumanUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddHumanUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddHumanUserResponseValidationError is the validation error returned by
// AddHumanUserResponse.Validate if the designated constraints aren't met.
type AddHumanUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHumanUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHumanUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHumanUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHumanUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHumanUserResponseValidationError) ErrorName() string {
	return "AddHumanUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddHumanUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHumanUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHumanUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHumanUserResponseValidationError{}

// Validate checks the field values on ImportHumanUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportHumanUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 1 || l > 200 {
		return ImportHumanUserRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if m.GetProfile() == nil {
		return ImportHumanUserRequestValidationError{
			field:  "Profile",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserRequestValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetEmail() == nil {
		return ImportHumanUserRequestValidationError{
			field:  "Email",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserRequestValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserRequestValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Password

	if v, ok := interface{}(m.GetHashedPassword()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserRequestValidationError{
				field:  "HashedPassword",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PasswordChangeRequired

	// no validation rules for RequestPasswordlessRegistration

	// no validation rules for OtpCode

	for idx, item := range m.GetIdps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ImportHumanUserRequestValidationError{
					field:  fmt.Sprintf("Idps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ImportHumanUserRequestValidationError is the validation error returned by
// ImportHumanUserRequest.Validate if the designated constraints aren't met.
type ImportHumanUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserRequestValidationError) ErrorName() string {
	return "ImportHumanUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserRequestValidationError{}

// Validate checks the field values on ImportHumanUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportHumanUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessRegistration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserResponseValidationError{
				field:  "PasswordlessRegistration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ImportHumanUserResponseValidationError is the validation error returned by
// ImportHumanUserResponse.Validate if the designated constraints aren't met.
type ImportHumanUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserResponseValidationError) ErrorName() string {
	return "ImportHumanUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserResponseValidationError{}

// Validate checks the field values on AddMachineUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMachineUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 1 || l > 200 {
		return AddMachineUserRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddMachineUserRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		return AddMachineUserRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
	}

	if _, ok := user.AccessTokenType_name[int32(m.GetAccessTokenType())]; !ok {
		return AddMachineUserRequestValidationError{
			field:  "AccessTokenType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddMachineUserRequestValidationError is the validation error returned by
// AddMachineUserRequest.Validate if the designated constraints aren't met.
type AddMachineUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMachineUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMachineUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMachineUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMachineUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMachineUserRequestValidationError) ErrorName() string {
	return "AddMachineUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMachineUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMachineUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMachineUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMachineUserRequestValidationError{}

// Validate checks the field values on AddMachineUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMachineUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMachineUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMachineUserResponseValidationError is the validation error returned by
// AddMachineUserResponse.Validate if the designated constraints aren't met.
type AddMachineUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMachineUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMachineUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMachineUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMachineUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMachineUserResponseValidationError) ErrorName() string {
	return "AddMachineUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMachineUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMachineUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMachineUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMachineUserResponseValidationError{}

// Validate checks the field values on DeactivateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return DeactivateUserRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateUserRequestValidationError is the validation error returned by
// DeactivateUserRequest.Validate if the designated constraints aren't met.
type DeactivateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateUserRequestValidationError) ErrorName() string {
	return "DeactivateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateUserRequestValidationError{}

// Validate checks the field values on DeactivateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateUserResponseValidationError is the validation error returned by
// DeactivateUserResponse.Validate if the designated constraints aren't met.
type DeactivateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateUserResponseValidationError) ErrorName() string {
	return "DeactivateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateUserResponseValidationError{}

// Validate checks the field values on ReactivateUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return ReactivateUserRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateUserRequestValidationError is the validation error returned by
// ReactivateUserRequest.Validate if the designated constraints aren't met.
type ReactivateUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateUserRequestValidationError) ErrorName() string {
	return "ReactivateUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateUserRequestValidationError{}

// Validate checks the field values on ReactivateUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateUserResponseValidationError is the validation error returned by
// ReactivateUserResponse.Validate if the designated constraints aren't met.
type ReactivateUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateUserResponseValidationError) ErrorName() string {
	return "ReactivateUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateUserResponseValidationError{}

// Validate checks the field values on LockUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LockUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return LockUserRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// LockUserRequestValidationError is the validation error returned by
// LockUserRequest.Validate if the designated constraints aren't met.
type LockUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockUserRequestValidationError) ErrorName() string { return "LockUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e LockUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockUserRequestValidationError{}

// Validate checks the field values on LockUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *LockUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LockUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// LockUserResponseValidationError is the validation error returned by
// LockUserResponse.Validate if the designated constraints aren't met.
type LockUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LockUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LockUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LockUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LockUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LockUserResponseValidationError) ErrorName() string { return "LockUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e LockUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLockUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LockUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LockUserResponseValidationError{}

// Validate checks the field values on UnlockUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UnlockUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UnlockUserRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UnlockUserRequestValidationError is the validation error returned by
// UnlockUserRequest.Validate if the designated constraints aren't met.
type UnlockUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockUserRequestValidationError) ErrorName() string {
	return "UnlockUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockUserRequestValidationError{}

// Validate checks the field values on UnlockUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UnlockUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UnlockUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UnlockUserResponseValidationError is the validation error returned by
// UnlockUserResponse.Validate if the designated constraints aren't met.
type UnlockUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UnlockUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UnlockUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UnlockUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UnlockUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UnlockUserResponseValidationError) ErrorName() string {
	return "UnlockUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UnlockUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUnlockUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UnlockUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UnlockUserResponseValidationError{}

// Validate checks the field values on RemoveUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveUserRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return RemoveUserRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveUserRequestValidationError is the validation error returned by
// RemoveUserRequest.Validate if the designated constraints aren't met.
type RemoveUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserRequestValidationError) ErrorName() string {
	return "RemoveUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserRequestValidationError{}

// Validate checks the field values on RemoveUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveUserResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveUserResponseValidationError is the validation error returned by
// RemoveUserResponse.Validate if the designated constraints aren't met.
type RemoveUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserResponseValidationError) ErrorName() string {
	return "RemoveUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserResponseValidationError{}

// Validate checks the field values on UpdateUserNameRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserNameRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateUserNameRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserName()); l < 1 || l > 200 {
		return UpdateUserNameRequestValidationError{
			field:  "UserName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateUserNameRequestValidationError is the validation error returned by
// UpdateUserNameRequest.Validate if the designated constraints aren't met.
type UpdateUserNameRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserNameRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserNameRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserNameRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserNameRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserNameRequestValidationError) ErrorName() string {
	return "UpdateUserNameRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserNameRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserNameRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserNameRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserNameRequestValidationError{}

// Validate checks the field values on UpdateUserNameResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserNameResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserNameResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserNameResponseValidationError is the validation error returned by
// UpdateUserNameResponse.Validate if the designated constraints aren't met.
type UpdateUserNameResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserNameResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserNameResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserNameResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserNameResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserNameResponseValidationError) ErrorName() string {
	return "UpdateUserNameResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserNameResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserNameResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserNameResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserNameResponseValidationError{}

// Validate checks the field values on ListUserMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return ListUserMetadataRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserMetadataRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserMetadataRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserMetadataRequestValidationError is the validation error returned by
// ListUserMetadataRequest.Validate if the designated constraints aren't met.
type ListUserMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserMetadataRequestValidationError) ErrorName() string {
	return "ListUserMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserMetadataRequestValidationError{}

// Validate checks the field values on ListUserMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserMetadataResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserMetadataResponseValidationError is the validation error returned by
// ListUserMetadataResponse.Validate if the designated constraints aren't met.
type ListUserMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserMetadataResponseValidationError) ErrorName() string {
	return "ListUserMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserMetadataResponseValidationError{}

// Validate checks the field values on GetUserMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetUserMetadataRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return GetUserMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetUserMetadataRequestValidationError is the validation error returned by
// GetUserMetadataRequest.Validate if the designated constraints aren't met.
type GetUserMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMetadataRequestValidationError) ErrorName() string {
	return "GetUserMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMetadataRequestValidationError{}

// Validate checks the field values on GetUserMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserMetadataResponseValidationError is the validation error returned by
// GetUserMetadataResponse.Validate if the designated constraints aren't met.
type GetUserMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserMetadataResponseValidationError) ErrorName() string {
	return "GetUserMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserMetadataResponseValidationError{}

// Validate checks the field values on SetUserMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUserMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return SetUserMetadataRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return SetUserMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := len(m.GetValue()); l < 1 || l > 500000 {
		return SetUserMetadataRequestValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 500000 bytes, inclusive",
		}
	}

	return nil
}

// SetUserMetadataRequestValidationError is the validation error returned by
// SetUserMetadataRequest.Validate if the designated constraints aren't met.
type SetUserMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserMetadataRequestValidationError) ErrorName() string {
	return "SetUserMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserMetadataRequestValidationError{}

// Validate checks the field values on SetUserMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetUserMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetUserMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetUserMetadataResponseValidationError is the validation error returned by
// SetUserMetadataResponse.Validate if the designated constraints aren't met.
type SetUserMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetUserMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetUserMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetUserMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetUserMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetUserMetadataResponseValidationError) ErrorName() string {
	return "SetUserMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetUserMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetUserMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetUserMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetUserMetadataResponseValidationError{}

// Validate checks the field values on BulkSetUserMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkSetUserMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return BulkSetUserMetadataRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkSetUserMetadataRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BulkSetUserMetadataRequestValidationError is the validation error returned
// by BulkSetUserMetadataRequest.Validate if the designated constraints aren't met.
type BulkSetUserMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetUserMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetUserMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetUserMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetUserMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetUserMetadataRequestValidationError) ErrorName() string {
	return "BulkSetUserMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetUserMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetUserMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetUserMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetUserMetadataRequestValidationError{}

// Validate checks the field values on BulkSetUserMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkSetUserMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkSetUserMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkSetUserMetadataResponseValidationError is the validation error returned
// by BulkSetUserMetadataResponse.Validate if the designated constraints
// aren't met.
type BulkSetUserMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetUserMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetUserMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetUserMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetUserMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetUserMetadataResponseValidationError) ErrorName() string {
	return "BulkSetUserMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetUserMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetUserMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetUserMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetUserMetadataResponseValidationError{}

// Validate checks the field values on RemoveUserMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return RemoveUserMetadataRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return RemoveUserMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveUserMetadataRequestValidationError is the validation error returned by
// RemoveUserMetadataRequest.Validate if the designated constraints aren't met.
type RemoveUserMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserMetadataRequestValidationError) ErrorName() string {
	return "RemoveUserMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserMetadataRequestValidationError{}

// Validate checks the field values on RemoveUserMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveUserMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveUserMetadataResponseValidationError is the validation error returned
// by RemoveUserMetadataResponse.Validate if the designated constraints aren't met.
type RemoveUserMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserMetadataResponseValidationError) ErrorName() string {
	return "RemoveUserMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserMetadataResponseValidationError{}

// Validate checks the field values on BulkRemoveUserMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveUserMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return BulkRemoveUserMetadataRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 200 {
			return BulkRemoveUserMetadataRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 200 runes, inclusive",
			}
		}

	}

	return nil
}

// BulkRemoveUserMetadataRequestValidationError is the validation error
// returned by BulkRemoveUserMetadataRequest.Validate if the designated
// constraints aren't met.
type BulkRemoveUserMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveUserMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveUserMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveUserMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveUserMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveUserMetadataRequestValidationError) ErrorName() string {
	return "BulkRemoveUserMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveUserMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveUserMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveUserMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveUserMetadataRequestValidationError{}

// Validate checks the field values on BulkRemoveUserMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveUserMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkRemoveUserMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkRemoveUserMetadataResponseValidationError is the validation error
// returned by BulkRemoveUserMetadataResponse.Validate if the designated
// constraints aren't met.
type BulkRemoveUserMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveUserMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveUserMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveUserMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveUserMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveUserMetadataResponseValidationError) ErrorName() string {
	return "BulkRemoveUserMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveUserMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveUserMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveUserMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveUserMetadataResponseValidationError{}

// Validate checks the field values on GetHumanProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHumanProfileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return GetHumanProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetHumanProfileRequestValidationError is the validation error returned by
// GetHumanProfileRequest.Validate if the designated constraints aren't met.
type GetHumanProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHumanProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHumanProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHumanProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHumanProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHumanProfileRequestValidationError) ErrorName() string {
	return "GetHumanProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHumanProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHumanProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHumanProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHumanProfileRequestValidationError{}

// Validate checks the field values on GetHumanProfileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHumanProfileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHumanProfileResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProfile()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHumanProfileResponseValidationError{
				field:  "Profile",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetHumanProfileResponseValidationError is the validation error returned by
// GetHumanProfileResponse.Validate if the designated constraints aren't met.
type GetHumanProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHumanProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHumanProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHumanProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHumanProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHumanProfileResponseValidationError) ErrorName() string {
	return "GetHumanProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHumanProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHumanProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHumanProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHumanProfileResponseValidationError{}

// Validate checks the field values on UpdateHumanProfileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHumanProfileRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateHumanProfileRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 200 {
		return UpdateHumanProfileRequestValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 200 {
		return UpdateHumanProfileRequestValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetNickName()) > 200 {
		return UpdateHumanProfileRequestValidationError{
			field:  "NickName",
			reason: "value length must be at most 200 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 200 {
		return UpdateHumanProfileRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return UpdateHumanProfileRequestValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	// no validation rules for Gender

	return nil
}

// UpdateHumanProfileRequestValidationError is the validation error returned by
// UpdateHumanProfileRequest.Validate if the designated constraints aren't met.
type UpdateHumanProfileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHumanProfileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHumanProfileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHumanProfileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHumanProfileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHumanProfileRequestValidationError) ErrorName() string {
	return "UpdateHumanProfileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHumanProfileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHumanProfileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHumanProfileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHumanProfileRequestValidationError{}

// Validate checks the field values on UpdateHumanProfileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHumanProfileResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHumanProfileResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHumanProfileResponseValidationError is the validation error returned
// by UpdateHumanProfileResponse.Validate if the designated constraints aren't met.
type UpdateHumanProfileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHumanProfileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHumanProfileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHumanProfileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHumanProfileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHumanProfileResponseValidationError) ErrorName() string {
	return "UpdateHumanProfileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHumanProfileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHumanProfileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHumanProfileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHumanProfileResponseValidationError{}

// Validate checks the field values on GetHumanEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHumanEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return GetHumanEmailRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetHumanEmailRequestValidationError is the validation error returned by
// GetHumanEmailRequest.Validate if the designated constraints aren't met.
type GetHumanEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHumanEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHumanEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHumanEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHumanEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHumanEmailRequestValidationError) ErrorName() string {
	return "GetHumanEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHumanEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHumanEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHumanEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHumanEmailRequestValidationError{}

// Validate checks the field values on GetHumanEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHumanEmailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHumanEmailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEmail()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHumanEmailResponseValidationError{
				field:  "Email",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetHumanEmailResponseValidationError is the validation error returned by
// GetHumanEmailResponse.Validate if the designated constraints aren't met.
type GetHumanEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHumanEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHumanEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHumanEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHumanEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHumanEmailResponseValidationError) ErrorName() string {
	return "GetHumanEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHumanEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHumanEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHumanEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHumanEmailResponseValidationError{}

// Validate checks the field values on UpdateHumanEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHumanEmailRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateHumanEmailRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return UpdateHumanEmailRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	// no validation rules for IsEmailVerified

	return nil
}

func (m *UpdateHumanEmailRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateHumanEmailRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateHumanEmailRequestValidationError is the validation error returned by
// UpdateHumanEmailRequest.Validate if the designated constraints aren't met.
type UpdateHumanEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHumanEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHumanEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHumanEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHumanEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHumanEmailRequestValidationError) ErrorName() string {
	return "UpdateHumanEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHumanEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHumanEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHumanEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHumanEmailRequestValidationError{}

// Validate checks the field values on UpdateHumanEmailResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHumanEmailResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHumanEmailResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHumanEmailResponseValidationError is the validation error returned by
// UpdateHumanEmailResponse.Validate if the designated constraints aren't met.
type UpdateHumanEmailResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHumanEmailResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHumanEmailResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHumanEmailResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHumanEmailResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHumanEmailResponseValidationError) ErrorName() string {
	return "UpdateHumanEmailResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHumanEmailResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHumanEmailResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHumanEmailResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHumanEmailResponseValidationError{}

// Validate checks the field values on ResendHumanInitializationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendHumanInitializationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ResendHumanInitializationRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if m.GetEmail() != "" {

		if err := m._validateEmail(m.GetEmail()); err != nil {
			return ResendHumanInitializationRequestValidationError{
				field:  "Email",
				reason: "value must be a valid email address",
				cause:  err,
			}
		}

	}

	return nil
}

func (m *ResendHumanInitializationRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ResendHumanInitializationRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ResendHumanInitializationRequestValidationError is the validation error
// returned by ResendHumanInitializationRequest.Validate if the designated
// constraints aren't met.
type ResendHumanInitializationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendHumanInitializationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendHumanInitializationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendHumanInitializationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendHumanInitializationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendHumanInitializationRequestValidationError) ErrorName() string {
	return "ResendHumanInitializationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendHumanInitializationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendHumanInitializationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendHumanInitializationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendHumanInitializationRequestValidationError{}

// Validate checks the field values on ResendHumanInitializationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendHumanInitializationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendHumanInitializationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResendHumanInitializationResponseValidationError is the validation error
// returned by ResendHumanInitializationResponse.Validate if the designated
// constraints aren't met.
type ResendHumanInitializationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendHumanInitializationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendHumanInitializationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendHumanInitializationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendHumanInitializationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendHumanInitializationResponseValidationError) ErrorName() string {
	return "ResendHumanInitializationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendHumanInitializationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendHumanInitializationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendHumanInitializationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendHumanInitializationResponseValidationError{}

// Validate checks the field values on ResendHumanEmailVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendHumanEmailVerificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ResendHumanEmailVerificationRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResendHumanEmailVerificationRequestValidationError is the validation error
// returned by ResendHumanEmailVerificationRequest.Validate if the designated
// constraints aren't met.
type ResendHumanEmailVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendHumanEmailVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendHumanEmailVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendHumanEmailVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendHumanEmailVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendHumanEmailVerificationRequestValidationError) ErrorName() string {
	return "ResendHumanEmailVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendHumanEmailVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendHumanEmailVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendHumanEmailVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendHumanEmailVerificationRequestValidationError{}

// Validate checks the field values on ResendHumanEmailVerificationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResendHumanEmailVerificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendHumanEmailVerificationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResendHumanEmailVerificationResponseValidationError is the validation error
// returned by ResendHumanEmailVerificationResponse.Validate if the designated
// constraints aren't met.
type ResendHumanEmailVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendHumanEmailVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendHumanEmailVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendHumanEmailVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendHumanEmailVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendHumanEmailVerificationResponseValidationError) ErrorName() string {
	return "ResendHumanEmailVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendHumanEmailVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendHumanEmailVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendHumanEmailVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendHumanEmailVerificationResponseValidationError{}

// Validate checks the field values on GetHumanPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHumanPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return GetHumanPhoneRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetHumanPhoneRequestValidationError is the validation error returned by
// GetHumanPhoneRequest.Validate if the designated constraints aren't met.
type GetHumanPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHumanPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHumanPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHumanPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHumanPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHumanPhoneRequestValidationError) ErrorName() string {
	return "GetHumanPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetHumanPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHumanPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHumanPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHumanPhoneRequestValidationError{}

// Validate checks the field values on GetHumanPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetHumanPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHumanPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPhone()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetHumanPhoneResponseValidationError{
				field:  "Phone",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetHumanPhoneResponseValidationError is the validation error returned by
// GetHumanPhoneResponse.Validate if the designated constraints aren't met.
type GetHumanPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetHumanPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetHumanPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetHumanPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetHumanPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetHumanPhoneResponseValidationError) ErrorName() string {
	return "GetHumanPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetHumanPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetHumanPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetHumanPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetHumanPhoneResponseValidationError{}

// Validate checks the field values on UpdateHumanPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHumanPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateHumanPhoneRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 50 {
		return UpdateHumanPhoneRequestValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetPhone(), "+") {
		return UpdateHumanPhoneRequestValidationError{
			field:  "Phone",
			reason: "value does not have prefix \"+\"",
		}
	}

	// no validation rules for IsPhoneVerified

	return nil
}

// UpdateHumanPhoneRequestValidationError is the validation error returned by
// UpdateHumanPhoneRequest.Validate if the designated constraints aren't met.
type UpdateHumanPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHumanPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHumanPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHumanPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHumanPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHumanPhoneRequestValidationError) ErrorName() string {
	return "UpdateHumanPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHumanPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHumanPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHumanPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHumanPhoneRequestValidationError{}

// Validate checks the field values on UpdateHumanPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateHumanPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateHumanPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateHumanPhoneResponseValidationError is the validation error returned by
// UpdateHumanPhoneResponse.Validate if the designated constraints aren't met.
type UpdateHumanPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateHumanPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateHumanPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateHumanPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateHumanPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateHumanPhoneResponseValidationError) ErrorName() string {
	return "UpdateHumanPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateHumanPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateHumanPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateHumanPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateHumanPhoneResponseValidationError{}

// Validate checks the field values on RemoveHumanPhoneRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanPhoneRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveHumanPhoneRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveHumanPhoneRequestValidationError is the validation error returned by
// RemoveHumanPhoneRequest.Validate if the designated constraints aren't met.
type RemoveHumanPhoneRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanPhoneRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanPhoneRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanPhoneRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanPhoneRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanPhoneRequestValidationError) ErrorName() string {
	return "RemoveHumanPhoneRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanPhoneRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanPhoneRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanPhoneRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanPhoneRequestValidationError{}

// Validate checks the field values on RemoveHumanPhoneResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanPhoneResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveHumanPhoneResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveHumanPhoneResponseValidationError is the validation error returned by
// RemoveHumanPhoneResponse.Validate if the designated constraints aren't met.
type RemoveHumanPhoneResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanPhoneResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanPhoneResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanPhoneResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanPhoneResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanPhoneResponseValidationError) ErrorName() string {
	return "RemoveHumanPhoneResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanPhoneResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanPhoneResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanPhoneResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanPhoneResponseValidationError{}

// Validate checks the field values on ResendHumanPhoneVerificationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResendHumanPhoneVerificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ResendHumanPhoneVerificationRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResendHumanPhoneVerificationRequestValidationError is the validation error
// returned by ResendHumanPhoneVerificationRequest.Validate if the designated
// constraints aren't met.
type ResendHumanPhoneVerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendHumanPhoneVerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendHumanPhoneVerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendHumanPhoneVerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendHumanPhoneVerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendHumanPhoneVerificationRequestValidationError) ErrorName() string {
	return "ResendHumanPhoneVerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResendHumanPhoneVerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendHumanPhoneVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendHumanPhoneVerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendHumanPhoneVerificationRequestValidationError{}

// Validate checks the field values on ResendHumanPhoneVerificationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResendHumanPhoneVerificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResendHumanPhoneVerificationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResendHumanPhoneVerificationResponseValidationError is the validation error
// returned by ResendHumanPhoneVerificationResponse.Validate if the designated
// constraints aren't met.
type ResendHumanPhoneVerificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResendHumanPhoneVerificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResendHumanPhoneVerificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResendHumanPhoneVerificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResendHumanPhoneVerificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResendHumanPhoneVerificationResponseValidationError) ErrorName() string {
	return "ResendHumanPhoneVerificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResendHumanPhoneVerificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResendHumanPhoneVerificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResendHumanPhoneVerificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResendHumanPhoneVerificationResponseValidationError{}

// Validate checks the field values on RemoveHumanAvatarRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanAvatarRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveHumanAvatarRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveHumanAvatarRequestValidationError is the validation error returned by
// RemoveHumanAvatarRequest.Validate if the designated constraints aren't met.
type RemoveHumanAvatarRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanAvatarRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanAvatarRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanAvatarRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanAvatarRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanAvatarRequestValidationError) ErrorName() string {
	return "RemoveHumanAvatarRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanAvatarRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanAvatarRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanAvatarRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanAvatarRequestValidationError{}

// Validate checks the field values on RemoveHumanAvatarResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanAvatarResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveHumanAvatarResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveHumanAvatarResponseValidationError is the validation error returned by
// RemoveHumanAvatarResponse.Validate if the designated constraints aren't met.
type RemoveHumanAvatarResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanAvatarResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanAvatarResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanAvatarResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanAvatarResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanAvatarResponseValidationError) ErrorName() string {
	return "RemoveHumanAvatarResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanAvatarResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanAvatarResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanAvatarResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanAvatarResponseValidationError{}

// Validate checks the field values on SetHumanInitialPasswordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetHumanInitialPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return SetHumanInitialPasswordRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 72 {
		return SetHumanInitialPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 72 runes, inclusive",
		}
	}

	return nil
}

// SetHumanInitialPasswordRequestValidationError is the validation error
// returned by SetHumanInitialPasswordRequest.Validate if the designated
// constraints aren't met.
type SetHumanInitialPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetHumanInitialPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetHumanInitialPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetHumanInitialPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetHumanInitialPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetHumanInitialPasswordRequestValidationError) ErrorName() string {
	return "SetHumanInitialPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetHumanInitialPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetHumanInitialPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetHumanInitialPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetHumanInitialPasswordRequestValidationError{}

// Validate checks the field values on SetHumanInitialPasswordResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetHumanInitialPasswordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetHumanInitialPasswordResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetHumanInitialPasswordResponseValidationError is the validation error
// returned by SetHumanInitialPasswordResponse.Validate if the designated
// constraints aren't met.
type SetHumanInitialPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetHumanInitialPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetHumanInitialPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetHumanInitialPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetHumanInitialPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetHumanInitialPasswordResponseValidationError) ErrorName() string {
	return "SetHumanInitialPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetHumanInitialPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetHumanInitialPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetHumanInitialPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetHumanInitialPasswordResponseValidationError{}

// Validate checks the field values on SetHumanPasswordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetHumanPasswordRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return SetHumanPasswordRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 72 {
		return SetHumanPasswordRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 72 runes, inclusive",
		}
	}

	// no validation rules for NoChangeRequired

	return nil
}

// SetHumanPasswordRequestValidationError is the validation error returned by
// SetHumanPasswordRequest.Validate if the designated constraints aren't met.
type SetHumanPasswordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetHumanPasswordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetHumanPasswordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetHumanPasswordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetHumanPasswordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetHumanPasswordRequestValidationError) ErrorName() string {
	return "SetHumanPasswordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetHumanPasswordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetHumanPasswordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetHumanPasswordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetHumanPasswordRequestValidationError{}

// Validate checks the field values on SetHumanPasswordResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetHumanPasswordResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetHumanPasswordResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetHumanPasswordResponseValidationError is the validation error returned by
// SetHumanPasswordResponse.Validate if the designated constraints aren't met.
type SetHumanPasswordResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetHumanPasswordResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetHumanPasswordResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetHumanPasswordResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetHumanPasswordResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetHumanPasswordResponseValidationError) ErrorName() string {
	return "SetHumanPasswordResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetHumanPasswordResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetHumanPasswordResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetHumanPasswordResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetHumanPasswordResponseValidationError{}

// Validate checks the field values on
// SendHumanResetPasswordNotificationRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendHumanResetPasswordNotificationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return SendHumanResetPasswordNotificationRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := SendHumanResetPasswordNotificationRequest_Type_name[int32(m.GetType())]; !ok {
		return SendHumanResetPasswordNotificationRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// SendHumanResetPasswordNotificationRequestValidationError is the validation
// error returned by SendHumanResetPasswordNotificationRequest.Validate if the
// designated constraints aren't met.
type SendHumanResetPasswordNotificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendHumanResetPasswordNotificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendHumanResetPasswordNotificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendHumanResetPasswordNotificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendHumanResetPasswordNotificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendHumanResetPasswordNotificationRequestValidationError) ErrorName() string {
	return "SendHumanResetPasswordNotificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendHumanResetPasswordNotificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendHumanResetPasswordNotificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendHumanResetPasswordNotificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendHumanResetPasswordNotificationRequestValidationError{}

// Validate checks the field values on
// SendHumanResetPasswordNotificationResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SendHumanResetPasswordNotificationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendHumanResetPasswordNotificationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendHumanResetPasswordNotificationResponseValidationError is the validation
// error returned by SendHumanResetPasswordNotificationResponse.Validate if
// the designated constraints aren't met.
type SendHumanResetPasswordNotificationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendHumanResetPasswordNotificationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendHumanResetPasswordNotificationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendHumanResetPasswordNotificationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendHumanResetPasswordNotificationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendHumanResetPasswordNotificationResponseValidationError) ErrorName() string {
	return "SendHumanResetPasswordNotificationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendHumanResetPasswordNotificationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendHumanResetPasswordNotificationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendHumanResetPasswordNotificationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendHumanResetPasswordNotificationResponseValidationError{}

// Validate checks the field values on ListHumanAuthFactorsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHumanAuthFactorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListHumanAuthFactorsRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListHumanAuthFactorsRequestValidationError is the validation error returned
// by ListHumanAuthFactorsRequest.Validate if the designated constraints
// aren't met.
type ListHumanAuthFactorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHumanAuthFactorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHumanAuthFactorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHumanAuthFactorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHumanAuthFactorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHumanAuthFactorsRequestValidationError) ErrorName() string {
	return "ListHumanAuthFactorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHumanAuthFactorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHumanAuthFactorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHumanAuthFactorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHumanAuthFactorsRequestValidationError{}

// Validate checks the field values on ListHumanAuthFactorsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHumanAuthFactorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHumanAuthFactorsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListHumanAuthFactorsResponseValidationError is the validation error returned
// by ListHumanAuthFactorsResponse.Validate if the designated constraints
// aren't met.
type ListHumanAuthFactorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHumanAuthFactorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHumanAuthFactorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHumanAuthFactorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHumanAuthFactorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHumanAuthFactorsResponseValidationError) ErrorName() string {
	return "ListHumanAuthFactorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHumanAuthFactorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHumanAuthFactorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHumanAuthFactorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHumanAuthFactorsResponseValidationError{}

// Validate checks the field values on RemoveHumanAuthFactorOTPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanAuthFactorOTPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveHumanAuthFactorOTPRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveHumanAuthFactorOTPRequestValidationError is the validation error
// returned by RemoveHumanAuthFactorOTPRequest.Validate if the designated
// constraints aren't met.
type RemoveHumanAuthFactorOTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanAuthFactorOTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanAuthFactorOTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanAuthFactorOTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanAuthFactorOTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanAuthFactorOTPRequestValidationError) ErrorName() string {
	return "RemoveHumanAuthFactorOTPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanAuthFactorOTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanAuthFactorOTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanAuthFactorOTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanAuthFactorOTPRequestValidationError{}

// Validate checks the field values on RemoveHumanAuthFactorOTPResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveHumanAuthFactorOTPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveHumanAuthFactorOTPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveHumanAuthFactorOTPResponseValidationError is the validation error
// returned by RemoveHumanAuthFactorOTPResponse.Validate if the designated
// constraints aren't met.
type RemoveHumanAuthFactorOTPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanAuthFactorOTPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanAuthFactorOTPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanAuthFactorOTPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanAuthFactorOTPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanAuthFactorOTPResponseValidationError) ErrorName() string {
	return "RemoveHumanAuthFactorOTPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanAuthFactorOTPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanAuthFactorOTPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanAuthFactorOTPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanAuthFactorOTPResponseValidationError{}

// Validate checks the field values on RemoveHumanAuthFactorU2FRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanAuthFactorU2FRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveHumanAuthFactorU2FRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetTokenId()); l < 1 || l > 200 {
		return RemoveHumanAuthFactorU2FRequestValidationError{
			field:  "TokenId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveHumanAuthFactorU2FRequestValidationError is the validation error
// returned by RemoveHumanAuthFactorU2FRequest.Validate if the designated
// constraints aren't met.
type RemoveHumanAuthFactorU2FRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanAuthFactorU2FRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanAuthFactorU2FRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanAuthFactorU2FRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanAuthFactorU2FRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanAuthFactorU2FRequestValidationError) ErrorName() string {
	return "RemoveHumanAuthFactorU2FRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanAuthFactorU2FRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanAuthFactorU2FRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanAuthFactorU2FRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanAuthFactorU2FRequestValidationError{}

// Validate checks the field values on RemoveHumanAuthFactorU2FResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveHumanAuthFactorU2FResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveHumanAuthFactorU2FResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveHumanAuthFactorU2FResponseValidationError is the validation error
// returned by RemoveHumanAuthFactorU2FResponse.Validate if the designated
// constraints aren't met.
type RemoveHumanAuthFactorU2FResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanAuthFactorU2FResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanAuthFactorU2FResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanAuthFactorU2FResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanAuthFactorU2FResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanAuthFactorU2FResponseValidationError) ErrorName() string {
	return "RemoveHumanAuthFactorU2FResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanAuthFactorU2FResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanAuthFactorU2FResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanAuthFactorU2FResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanAuthFactorU2FResponseValidationError{}

// Validate checks the field values on ListHumanPasswordlessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHumanPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListHumanPasswordlessRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListHumanPasswordlessRequestValidationError is the validation error returned
// by ListHumanPasswordlessRequest.Validate if the designated constraints
// aren't met.
type ListHumanPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHumanPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHumanPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHumanPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHumanPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHumanPasswordlessRequestValidationError) ErrorName() string {
	return "ListHumanPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHumanPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHumanPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHumanPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHumanPasswordlessRequestValidationError{}

// Validate checks the field values on ListHumanPasswordlessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHumanPasswordlessResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHumanPasswordlessResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListHumanPasswordlessResponseValidationError is the validation error
// returned by ListHumanPasswordlessResponse.Validate if the designated
// constraints aren't met.
type ListHumanPasswordlessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHumanPasswordlessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHumanPasswordlessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHumanPasswordlessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHumanPasswordlessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHumanPasswordlessResponseValidationError) ErrorName() string {
	return "ListHumanPasswordlessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHumanPasswordlessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHumanPasswordlessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHumanPasswordlessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHumanPasswordlessResponseValidationError{}

// Validate checks the field values on AddPasswordlessRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddPasswordlessRegistrationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return AddPasswordlessRegistrationRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddPasswordlessRegistrationRequestValidationError is the validation error
// returned by AddPasswordlessRegistrationRequest.Validate if the designated
// constraints aren't met.
type AddPasswordlessRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPasswordlessRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPasswordlessRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPasswordlessRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPasswordlessRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPasswordlessRegistrationRequestValidationError) ErrorName() string {
	return "AddPasswordlessRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPasswordlessRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPasswordlessRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPasswordlessRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPasswordlessRegistrationRequestValidationError{}

// Validate checks the field values on AddPasswordlessRegistrationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddPasswordlessRegistrationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPasswordlessRegistrationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Link

	if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPasswordlessRegistrationResponseValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddPasswordlessRegistrationResponseValidationError is the validation error
// returned by AddPasswordlessRegistrationResponse.Validate if the designated
// constraints aren't met.
type AddPasswordlessRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPasswordlessRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPasswordlessRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPasswordlessRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPasswordlessRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPasswordlessRegistrationResponseValidationError) ErrorName() string {
	return "AddPasswordlessRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPasswordlessRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPasswordlessRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPasswordlessRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPasswordlessRegistrationResponseValidationError{}

// Validate checks the field values on SendPasswordlessRegistrationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SendPasswordlessRegistrationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return SendPasswordlessRegistrationRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// SendPasswordlessRegistrationRequestValidationError is the validation error
// returned by SendPasswordlessRegistrationRequest.Validate if the designated
// constraints aren't met.
type SendPasswordlessRegistrationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordlessRegistrationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordlessRegistrationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordlessRegistrationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordlessRegistrationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordlessRegistrationRequestValidationError) ErrorName() string {
	return "SendPasswordlessRegistrationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordlessRegistrationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordlessRegistrationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordlessRegistrationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordlessRegistrationRequestValidationError{}

// Validate checks the field values on SendPasswordlessRegistrationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SendPasswordlessRegistrationResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendPasswordlessRegistrationResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SendPasswordlessRegistrationResponseValidationError is the validation error
// returned by SendPasswordlessRegistrationResponse.Validate if the designated
// constraints aren't met.
type SendPasswordlessRegistrationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendPasswordlessRegistrationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendPasswordlessRegistrationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendPasswordlessRegistrationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendPasswordlessRegistrationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendPasswordlessRegistrationResponseValidationError) ErrorName() string {
	return "SendPasswordlessRegistrationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SendPasswordlessRegistrationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendPasswordlessRegistrationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendPasswordlessRegistrationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendPasswordlessRegistrationResponseValidationError{}

// Validate checks the field values on RemoveHumanPasswordlessRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanPasswordlessRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveHumanPasswordlessRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetTokenId()); l < 1 || l > 200 {
		return RemoveHumanPasswordlessRequestValidationError{
			field:  "TokenId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveHumanPasswordlessRequestValidationError is the validation error
// returned by RemoveHumanPasswordlessRequest.Validate if the designated
// constraints aren't met.
type RemoveHumanPasswordlessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanPasswordlessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanPasswordlessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanPasswordlessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanPasswordlessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanPasswordlessRequestValidationError) ErrorName() string {
	return "RemoveHumanPasswordlessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanPasswordlessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanPasswordlessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanPasswordlessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanPasswordlessRequestValidationError{}

// Validate checks the field values on RemoveHumanPasswordlessResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanPasswordlessResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveHumanPasswordlessResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveHumanPasswordlessResponseValidationError is the validation error
// returned by RemoveHumanPasswordlessResponse.Validate if the designated
// constraints aren't met.
type RemoveHumanPasswordlessResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanPasswordlessResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanPasswordlessResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanPasswordlessResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanPasswordlessResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanPasswordlessResponseValidationError) ErrorName() string {
	return "RemoveHumanPasswordlessResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanPasswordlessResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanPasswordlessResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanPasswordlessResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanPasswordlessResponseValidationError{}

// Validate checks the field values on UpdateMachineRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMachineRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateMachineRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		return UpdateMachineRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateMachineRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := user.AccessTokenType_name[int32(m.GetAccessTokenType())]; !ok {
		return UpdateMachineRequestValidationError{
			field:  "AccessTokenType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// UpdateMachineRequestValidationError is the validation error returned by
// UpdateMachineRequest.Validate if the designated constraints aren't met.
type UpdateMachineRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMachineRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMachineRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMachineRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMachineRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMachineRequestValidationError) ErrorName() string {
	return "UpdateMachineRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMachineRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMachineRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMachineRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMachineRequestValidationError{}

// Validate checks the field values on UpdateMachineResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMachineResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMachineResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMachineResponseValidationError is the validation error returned by
// UpdateMachineResponse.Validate if the designated constraints aren't met.
type UpdateMachineResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMachineResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMachineResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMachineResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMachineResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMachineResponseValidationError) ErrorName() string {
	return "UpdateMachineResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMachineResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMachineResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMachineResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMachineResponseValidationError{}

// Validate checks the field values on GenerateMachineSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateMachineSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return GenerateMachineSecretRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	return nil
}

// GenerateMachineSecretRequestValidationError is the validation error returned
// by GenerateMachineSecretRequest.Validate if the designated constraints
// aren't met.
type GenerateMachineSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMachineSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMachineSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMachineSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMachineSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMachineSecretRequestValidationError) ErrorName() string {
	return "GenerateMachineSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateMachineSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMachineSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMachineSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMachineSecretRequestValidationError{}

// Validate checks the field values on GenerateMachineSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GenerateMachineSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateMachineSecretResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GenerateMachineSecretResponseValidationError is the validation error
// returned by GenerateMachineSecretResponse.Validate if the designated
// constraints aren't met.
type GenerateMachineSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateMachineSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateMachineSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateMachineSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateMachineSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateMachineSecretResponseValidationError) ErrorName() string {
	return "GenerateMachineSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateMachineSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateMachineSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateMachineSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateMachineSecretResponseValidationError{}

// Validate checks the field values on RemoveMachineSecretRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMachineSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveMachineSecretRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveMachineSecretRequestValidationError is the validation error returned
// by RemoveMachineSecretRequest.Validate if the designated constraints aren't met.
type RemoveMachineSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMachineSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMachineSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMachineSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMachineSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMachineSecretRequestValidationError) ErrorName() string {
	return "RemoveMachineSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMachineSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMachineSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMachineSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMachineSecretRequestValidationError{}

// Validate checks the field values on RemoveMachineSecretResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMachineSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMachineSecretResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMachineSecretResponseValidationError is the validation error returned
// by RemoveMachineSecretResponse.Validate if the designated constraints
// aren't met.
type RemoveMachineSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMachineSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMachineSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMachineSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMachineSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMachineSecretResponseValidationError) ErrorName() string {
	return "RemoveMachineSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMachineSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMachineSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMachineSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMachineSecretResponseValidationError{}

// Validate checks the field values on GetMachineKeyByIDsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMachineKeyByIDsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return GetMachineKeyByIDsRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeyId()); l < 1 || l > 200 {
		return GetMachineKeyByIDsRequestValidationError{
			field:  "KeyId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetMachineKeyByIDsRequestValidationError is the validation error returned by
// GetMachineKeyByIDsRequest.Validate if the designated constraints aren't met.
type GetMachineKeyByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMachineKeyByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMachineKeyByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMachineKeyByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMachineKeyByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMachineKeyByIDsRequestValidationError) ErrorName() string {
	return "GetMachineKeyByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMachineKeyByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMachineKeyByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMachineKeyByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMachineKeyByIDsRequestValidationError{}

// Validate checks the field values on GetMachineKeyByIDsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetMachineKeyByIDsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMachineKeyByIDsResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMachineKeyByIDsResponseValidationError is the validation error returned
// by GetMachineKeyByIDsResponse.Validate if the designated constraints aren't met.
type GetMachineKeyByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMachineKeyByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMachineKeyByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMachineKeyByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMachineKeyByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMachineKeyByIDsResponseValidationError) ErrorName() string {
	return "GetMachineKeyByIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMachineKeyByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMachineKeyByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMachineKeyByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMachineKeyByIDsResponseValidationError{}

// Validate checks the field values on ListMachineKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMachineKeysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListMachineKeysRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMachineKeysRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListMachineKeysRequestValidationError is the validation error returned by
// ListMachineKeysRequest.Validate if the designated constraints aren't met.
type ListMachineKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMachineKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMachineKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMachineKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMachineKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMachineKeysRequestValidationError) ErrorName() string {
	return "ListMachineKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMachineKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMachineKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMachineKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMachineKeysRequestValidationError{}

// Validate checks the field values on ListMachineKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMachineKeysResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListMachineKeysResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMachineKeysResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMachineKeysResponseValidationError is the validation error returned by
// ListMachineKeysResponse.Validate if the designated constraints aren't met.
type ListMachineKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMachineKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMachineKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMachineKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMachineKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMachineKeysResponseValidationError) ErrorName() string {
	return "ListMachineKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMachineKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMachineKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMachineKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMachineKeysResponseValidationError{}

// Validate checks the field values on AddMachineKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMachineKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return AddMachineKeyRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if _, ok := _AddMachineKeyRequest_Type_NotInLookup[m.GetType()]; ok {
		return AddMachineKeyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := authn.KeyType_name[int32(m.GetType())]; !ok {
		return AddMachineKeyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMachineKeyRequestValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMachineKeyRequestValidationError is the validation error returned by
// AddMachineKeyRequest.Validate if the designated constraints aren't met.
type AddMachineKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMachineKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMachineKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMachineKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMachineKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMachineKeyRequestValidationError) ErrorName() string {
	return "AddMachineKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMachineKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMachineKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMachineKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMachineKeyRequestValidationError{}

var _AddMachineKeyRequest_Type_NotInLookup = map[authn.KeyType]struct{}{
	0: {},
}

// Validate checks the field values on AddMachineKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddMachineKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for KeyId

	// no validation rules for KeyDetails

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMachineKeyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMachineKeyResponseValidationError is the validation error returned by
// AddMachineKeyResponse.Validate if the designated constraints aren't met.
type AddMachineKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMachineKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMachineKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMachineKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMachineKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMachineKeyResponseValidationError) ErrorName() string {
	return "AddMachineKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMachineKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMachineKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMachineKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMachineKeyResponseValidationError{}

// Validate checks the field values on RemoveMachineKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMachineKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveMachineKeyRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeyId()); l < 1 || l > 200 {
		return RemoveMachineKeyRequestValidationError{
			field:  "KeyId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveMachineKeyRequestValidationError is the validation error returned by
// RemoveMachineKeyRequest.Validate if the designated constraints aren't met.
type RemoveMachineKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMachineKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMachineKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMachineKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMachineKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMachineKeyRequestValidationError) ErrorName() string {
	return "RemoveMachineKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMachineKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMachineKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMachineKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMachineKeyRequestValidationError{}

// Validate checks the field values on RemoveMachineKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMachineKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMachineKeyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMachineKeyResponseValidationError is the validation error returned by
// RemoveMachineKeyResponse.Validate if the designated constraints aren't met.
type RemoveMachineKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMachineKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMachineKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMachineKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMachineKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMachineKeyResponseValidationError) ErrorName() string {
	return "RemoveMachineKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMachineKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMachineKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMachineKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMachineKeyResponseValidationError{}

// Validate checks the field values on GetPersonalAccessTokenByIDsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPersonalAccessTokenByIDsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return GetPersonalAccessTokenByIDsRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetTokenId()); l < 1 || l > 200 {
		return GetPersonalAccessTokenByIDsRequestValidationError{
			field:  "TokenId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetPersonalAccessTokenByIDsRequestValidationError is the validation error
// returned by GetPersonalAccessTokenByIDsRequest.Validate if the designated
// constraints aren't met.
type GetPersonalAccessTokenByIDsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalAccessTokenByIDsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalAccessTokenByIDsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalAccessTokenByIDsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalAccessTokenByIDsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalAccessTokenByIDsRequestValidationError) ErrorName() string {
	return "GetPersonalAccessTokenByIDsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalAccessTokenByIDsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalAccessTokenByIDsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalAccessTokenByIDsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalAccessTokenByIDsRequestValidationError{}

// Validate checks the field values on GetPersonalAccessTokenByIDsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPersonalAccessTokenByIDsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPersonalAccessTokenByIDsResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPersonalAccessTokenByIDsResponseValidationError is the validation error
// returned by GetPersonalAccessTokenByIDsResponse.Validate if the designated
// constraints aren't met.
type GetPersonalAccessTokenByIDsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPersonalAccessTokenByIDsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPersonalAccessTokenByIDsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPersonalAccessTokenByIDsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPersonalAccessTokenByIDsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPersonalAccessTokenByIDsResponseValidationError) ErrorName() string {
	return "GetPersonalAccessTokenByIDsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPersonalAccessTokenByIDsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPersonalAccessTokenByIDsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPersonalAccessTokenByIDsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPersonalAccessTokenByIDsResponseValidationError{}

// Validate checks the field values on ListPersonalAccessTokensRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListPersonalAccessTokensRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListPersonalAccessTokensRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPersonalAccessTokensRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListPersonalAccessTokensRequestValidationError is the validation error
// returned by ListPersonalAccessTokensRequest.Validate if the designated
// constraints aren't met.
type ListPersonalAccessTokensRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonalAccessTokensRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonalAccessTokensRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonalAccessTokensRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonalAccessTokensRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonalAccessTokensRequestValidationError) ErrorName() string {
	return "ListPersonalAccessTokensRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonalAccessTokensRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonalAccessTokensRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonalAccessTokensRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonalAccessTokensRequestValidationError{}

// Validate checks the field values on ListPersonalAccessTokensResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListPersonalAccessTokensResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPersonalAccessTokensResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPersonalAccessTokensResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListPersonalAccessTokensResponseValidationError is the validation error
// returned by ListPersonalAccessTokensResponse.Validate if the designated
// constraints aren't met.
type ListPersonalAccessTokensResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPersonalAccessTokensResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPersonalAccessTokensResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPersonalAccessTokensResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPersonalAccessTokensResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPersonalAccessTokensResponseValidationError) ErrorName() string {
	return "ListPersonalAccessTokensResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPersonalAccessTokensResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPersonalAccessTokensResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPersonalAccessTokensResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPersonalAccessTokensResponseValidationError{}

// Validate checks the field values on AddPersonalAccessTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddPersonalAccessTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetUserId()) < 1 {
		return AddPersonalAccessTokenRequestValidationError{
			field:  "UserId",
			reason: "value length must be at least 1 runes",
		}
	}

	if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPersonalAccessTokenRequestValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddPersonalAccessTokenRequestValidationError is the validation error
// returned by AddPersonalAccessTokenRequest.Validate if the designated
// constraints aren't met.
type AddPersonalAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPersonalAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPersonalAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPersonalAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPersonalAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPersonalAccessTokenRequestValidationError) ErrorName() string {
	return "AddPersonalAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddPersonalAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPersonalAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPersonalAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPersonalAccessTokenRequestValidationError{}

// Validate checks the field values on AddPersonalAccessTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddPersonalAccessTokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TokenId

	// no validation rules for Token

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddPersonalAccessTokenResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddPersonalAccessTokenResponseValidationError is the validation error
// returned by AddPersonalAccessTokenResponse.Validate if the designated
// constraints aren't met.
type AddPersonalAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddPersonalAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddPersonalAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddPersonalAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddPersonalAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddPersonalAccessTokenResponseValidationError) ErrorName() string {
	return "AddPersonalAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddPersonalAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddPersonalAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddPersonalAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddPersonalAccessTokenResponseValidationError{}

// Validate checks the field values on RemovePersonalAccessTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemovePersonalAccessTokenRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemovePersonalAccessTokenRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetTokenId()); l < 1 || l > 200 {
		return RemovePersonalAccessTokenRequestValidationError{
			field:  "TokenId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemovePersonalAccessTokenRequestValidationError is the validation error
// returned by RemovePersonalAccessTokenRequest.Validate if the designated
// constraints aren't met.
type RemovePersonalAccessTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePersonalAccessTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePersonalAccessTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePersonalAccessTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePersonalAccessTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePersonalAccessTokenRequestValidationError) ErrorName() string {
	return "RemovePersonalAccessTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePersonalAccessTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePersonalAccessTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePersonalAccessTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePersonalAccessTokenRequestValidationError{}

// Validate checks the field values on RemovePersonalAccessTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemovePersonalAccessTokenResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemovePersonalAccessTokenResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemovePersonalAccessTokenResponseValidationError is the validation error
// returned by RemovePersonalAccessTokenResponse.Validate if the designated
// constraints aren't met.
type RemovePersonalAccessTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemovePersonalAccessTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemovePersonalAccessTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemovePersonalAccessTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemovePersonalAccessTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemovePersonalAccessTokenResponseValidationError) ErrorName() string {
	return "RemovePersonalAccessTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemovePersonalAccessTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemovePersonalAccessTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemovePersonalAccessTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemovePersonalAccessTokenResponseValidationError{}

// Validate checks the field values on ListHumanLinkedIDPsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHumanLinkedIDPsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListHumanLinkedIDPsRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHumanLinkedIDPsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListHumanLinkedIDPsRequestValidationError is the validation error returned
// by ListHumanLinkedIDPsRequest.Validate if the designated constraints aren't met.
type ListHumanLinkedIDPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHumanLinkedIDPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHumanLinkedIDPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHumanLinkedIDPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHumanLinkedIDPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHumanLinkedIDPsRequestValidationError) ErrorName() string {
	return "ListHumanLinkedIDPsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListHumanLinkedIDPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHumanLinkedIDPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHumanLinkedIDPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHumanLinkedIDPsRequestValidationError{}

// Validate checks the field values on ListHumanLinkedIDPsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListHumanLinkedIDPsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListHumanLinkedIDPsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListHumanLinkedIDPsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListHumanLinkedIDPsResponseValidationError is the validation error returned
// by ListHumanLinkedIDPsResponse.Validate if the designated constraints
// aren't met.
type ListHumanLinkedIDPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListHumanLinkedIDPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListHumanLinkedIDPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListHumanLinkedIDPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListHumanLinkedIDPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListHumanLinkedIDPsResponseValidationError) ErrorName() string {
	return "ListHumanLinkedIDPsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListHumanLinkedIDPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListHumanLinkedIDPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListHumanLinkedIDPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListHumanLinkedIDPsResponseValidationError{}

// Validate checks the field values on RemoveHumanLinkedIDPRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanLinkedIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveHumanLinkedIDPRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return RemoveHumanLinkedIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLinkedUserId()); l < 1 || l > 200 {
		return RemoveHumanLinkedIDPRequestValidationError{
			field:  "LinkedUserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveHumanLinkedIDPRequestValidationError is the validation error returned
// by RemoveHumanLinkedIDPRequest.Validate if the designated constraints
// aren't met.
type RemoveHumanLinkedIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanLinkedIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanLinkedIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanLinkedIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanLinkedIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanLinkedIDPRequestValidationError) ErrorName() string {
	return "RemoveHumanLinkedIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanLinkedIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanLinkedIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanLinkedIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanLinkedIDPRequestValidationError{}

// Validate checks the field values on RemoveHumanLinkedIDPResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveHumanLinkedIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveHumanLinkedIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveHumanLinkedIDPResponseValidationError is the validation error returned
// by RemoveHumanLinkedIDPResponse.Validate if the designated constraints
// aren't met.
type RemoveHumanLinkedIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveHumanLinkedIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveHumanLinkedIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveHumanLinkedIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveHumanLinkedIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveHumanLinkedIDPResponseValidationError) ErrorName() string {
	return "RemoveHumanLinkedIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveHumanLinkedIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveHumanLinkedIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveHumanLinkedIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveHumanLinkedIDPResponseValidationError{}

// Validate checks the field values on ListUserMembershipsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserMembershipsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ListUserMembershipsRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserMembershipsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserMembershipsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserMembershipsRequestValidationError is the validation error returned
// by ListUserMembershipsRequest.Validate if the designated constraints aren't met.
type ListUserMembershipsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserMembershipsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserMembershipsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserMembershipsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserMembershipsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserMembershipsRequestValidationError) ErrorName() string {
	return "ListUserMembershipsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserMembershipsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserMembershipsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserMembershipsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserMembershipsRequestValidationError{}

// Validate checks the field values on ListUserMembershipsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserMembershipsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserMembershipsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserMembershipsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserMembershipsResponseValidationError is the validation error returned
// by ListUserMembershipsResponse.Validate if the designated constraints
// aren't met.
type ListUserMembershipsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserMembershipsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserMembershipsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserMembershipsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserMembershipsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserMembershipsResponseValidationError) ErrorName() string {
	return "ListUserMembershipsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserMembershipsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserMembershipsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserMembershipsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserMembershipsResponseValidationError{}

// Validate checks the field values on GetMyOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMyOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetMyOrgRequestValidationError is the validation error returned by
// GetMyOrgRequest.Validate if the designated constraints aren't met.
type GetMyOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyOrgRequestValidationError) ErrorName() string { return "GetMyOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetMyOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyOrgRequestValidationError{}

// Validate checks the field values on GetMyOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetMyOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMyOrgResponseValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetMyOrgResponseValidationError is the validation error returned by
// GetMyOrgResponse.Validate if the designated constraints aren't met.
type GetMyOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMyOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMyOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMyOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMyOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMyOrgResponseValidationError) ErrorName() string { return "GetMyOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetMyOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMyOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMyOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMyOrgResponseValidationError{}

// Validate checks the field values on GetOrgByDomainGlobalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgByDomainGlobalRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return GetOrgByDomainGlobalRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetOrgByDomainGlobalRequestValidationError is the validation error returned
// by GetOrgByDomainGlobalRequest.Validate if the designated constraints
// aren't met.
type GetOrgByDomainGlobalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgByDomainGlobalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgByDomainGlobalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgByDomainGlobalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgByDomainGlobalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgByDomainGlobalRequestValidationError) ErrorName() string {
	return "GetOrgByDomainGlobalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgByDomainGlobalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgByDomainGlobalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgByDomainGlobalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgByDomainGlobalRequestValidationError{}

// Validate checks the field values on ListOrgChangesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgChangesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListOrgChangesRequestValidationError is the validation error returned by
// ListOrgChangesRequest.Validate if the designated constraints aren't met.
type ListOrgChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgChangesRequestValidationError) ErrorName() string {
	return "ListOrgChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgChangesRequestValidationError{}

// Validate checks the field values on ListOrgChangesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgChangesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgChangesResponseValidationError is the validation error returned by
// ListOrgChangesResponse.Validate if the designated constraints aren't met.
type ListOrgChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgChangesResponseValidationError) ErrorName() string {
	return "ListOrgChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgChangesResponseValidationError{}

// Validate checks the field values on GetOrgByDomainGlobalResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgByDomainGlobalResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgByDomainGlobalResponseValidationError{
				field:  "Org",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOrgByDomainGlobalResponseValidationError is the validation error returned
// by GetOrgByDomainGlobalResponse.Validate if the designated constraints
// aren't met.
type GetOrgByDomainGlobalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgByDomainGlobalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgByDomainGlobalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgByDomainGlobalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgByDomainGlobalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgByDomainGlobalResponseValidationError) ErrorName() string {
	return "GetOrgByDomainGlobalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgByDomainGlobalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgByDomainGlobalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgByDomainGlobalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgByDomainGlobalResponseValidationError{}

// Validate checks the field values on AddOrgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddOrgRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddOrgRequestValidationError is the validation error returned by
// AddOrgRequest.Validate if the designated constraints aren't met.
type AddOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgRequestValidationError) ErrorName() string { return "AddOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgRequestValidationError{}

// Validate checks the field values on AddOrgResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *AddOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddOrgResponseValidationError is the validation error returned by
// AddOrgResponse.Validate if the designated constraints aren't met.
type AddOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgResponseValidationError) ErrorName() string { return "AddOrgResponseValidationError" }

// Error satisfies the builtin error interface
func (e AddOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgResponseValidationError{}

// Validate checks the field values on UpdateOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateOrgRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateOrgRequestValidationError is the validation error returned by
// UpdateOrgRequest.Validate if the designated constraints aren't met.
type UpdateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgRequestValidationError) ErrorName() string { return "UpdateOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgRequestValidationError{}

// Validate checks the field values on UpdateOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOrgResponseValidationError is the validation error returned by
// UpdateOrgResponse.Validate if the designated constraints aren't met.
type UpdateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgResponseValidationError) ErrorName() string {
	return "UpdateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgResponseValidationError{}

// Validate checks the field values on DeactivateOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeactivateOrgRequestValidationError is the validation error returned by
// DeactivateOrgRequest.Validate if the designated constraints aren't met.
type DeactivateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateOrgRequestValidationError) ErrorName() string {
	return "DeactivateOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateOrgRequestValidationError{}

// Validate checks the field values on DeactivateOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateOrgResponseValidationError is the validation error returned by
// DeactivateOrgResponse.Validate if the designated constraints aren't met.
type DeactivateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateOrgResponseValidationError) ErrorName() string {
	return "DeactivateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateOrgResponseValidationError{}

// Validate checks the field values on ReactivateOrgRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ReactivateOrgRequestValidationError is the validation error returned by
// ReactivateOrgRequest.Validate if the designated constraints aren't met.
type ReactivateOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateOrgRequestValidationError) ErrorName() string {
	return "ReactivateOrgRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateOrgRequestValidationError{}

// Validate checks the field values on ReactivateOrgResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateOrgResponseValidationError is the validation error returned by
// ReactivateOrgResponse.Validate if the designated constraints aren't met.
type ReactivateOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateOrgResponseValidationError) ErrorName() string {
	return "ReactivateOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateOrgResponseValidationError{}

// Validate checks the field values on RemoveOrgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveOrgRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveOrgRequestValidationError is the validation error returned by
// RemoveOrgRequest.Validate if the designated constraints aren't met.
type RemoveOrgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgRequestValidationError) ErrorName() string { return "RemoveOrgRequestValidationError" }

// Error satisfies the builtin error interface
func (e RemoveOrgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgRequestValidationError{}

// Validate checks the field values on RemoveOrgResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveOrgResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOrgResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveOrgResponseValidationError is the validation error returned by
// RemoveOrgResponse.Validate if the designated constraints aren't met.
type RemoveOrgResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgResponseValidationError) ErrorName() string {
	return "RemoveOrgResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgResponseValidationError{}

// Validate checks the field values on ListOrgDomainsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgDomainsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgDomainsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgDomainsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgDomainsRequestValidationError is the validation error returned by
// ListOrgDomainsRequest.Validate if the designated constraints aren't met.
type ListOrgDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgDomainsRequestValidationError) ErrorName() string {
	return "ListOrgDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgDomainsRequestValidationError{}

// Validate checks the field values on ListOrgDomainsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgDomainsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgDomainsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgDomainsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgDomainsResponseValidationError is the validation error returned by
// ListOrgDomainsResponse.Validate if the designated constraints aren't met.
type ListOrgDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgDomainsResponseValidationError) ErrorName() string {
	return "ListOrgDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgDomainsResponseValidationError{}

// Validate checks the field values on AddOrgDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return AddOrgDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddOrgDomainRequestValidationError is the validation error returned by
// AddOrgDomainRequest.Validate if the designated constraints aren't met.
type AddOrgDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgDomainRequestValidationError) ErrorName() string {
	return "AddOrgDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgDomainRequestValidationError{}

// Validate checks the field values on AddOrgDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrgDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddOrgDomainResponseValidationError is the validation error returned by
// AddOrgDomainResponse.Validate if the designated constraints aren't met.
type AddOrgDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgDomainResponseValidationError) ErrorName() string {
	return "AddOrgDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgDomainResponseValidationError{}

// Validate checks the field values on RemoveOrgDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return RemoveOrgDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveOrgDomainRequestValidationError is the validation error returned by
// RemoveOrgDomainRequest.Validate if the designated constraints aren't met.
type RemoveOrgDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgDomainRequestValidationError) ErrorName() string {
	return "RemoveOrgDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgDomainRequestValidationError{}

// Validate checks the field values on RemoveOrgDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOrgDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveOrgDomainResponseValidationError is the validation error returned by
// RemoveOrgDomainResponse.Validate if the designated constraints aren't met.
type RemoveOrgDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgDomainResponseValidationError) ErrorName() string {
	return "RemoveOrgDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgDomainResponseValidationError{}

// Validate checks the field values on GenerateOrgDomainValidationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GenerateOrgDomainValidationRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return GenerateOrgDomainValidationRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := _GenerateOrgDomainValidationRequest_Type_NotInLookup[m.GetType()]; ok {
		return GenerateOrgDomainValidationRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := org.DomainValidationType_name[int32(m.GetType())]; !ok {
		return GenerateOrgDomainValidationRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// GenerateOrgDomainValidationRequestValidationError is the validation error
// returned by GenerateOrgDomainValidationRequest.Validate if the designated
// constraints aren't met.
type GenerateOrgDomainValidationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOrgDomainValidationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOrgDomainValidationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOrgDomainValidationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOrgDomainValidationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOrgDomainValidationRequestValidationError) ErrorName() string {
	return "GenerateOrgDomainValidationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateOrgDomainValidationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOrgDomainValidationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOrgDomainValidationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOrgDomainValidationRequestValidationError{}

var _GenerateOrgDomainValidationRequest_Type_NotInLookup = map[org.DomainValidationType]struct{}{
	0: {},
}

// Validate checks the field values on GenerateOrgDomainValidationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GenerateOrgDomainValidationResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Token

	// no validation rules for Url

	return nil
}

// GenerateOrgDomainValidationResponseValidationError is the validation error
// returned by GenerateOrgDomainValidationResponse.Validate if the designated
// constraints aren't met.
type GenerateOrgDomainValidationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateOrgDomainValidationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateOrgDomainValidationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateOrgDomainValidationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateOrgDomainValidationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateOrgDomainValidationResponseValidationError) ErrorName() string {
	return "GenerateOrgDomainValidationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateOrgDomainValidationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateOrgDomainValidationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateOrgDomainValidationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateOrgDomainValidationResponseValidationError{}

// Validate checks the field values on ValidateOrgDomainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateOrgDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return ValidateOrgDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ValidateOrgDomainRequestValidationError is the validation error returned by
// ValidateOrgDomainRequest.Validate if the designated constraints aren't met.
type ValidateOrgDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateOrgDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateOrgDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateOrgDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateOrgDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateOrgDomainRequestValidationError) ErrorName() string {
	return "ValidateOrgDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateOrgDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateOrgDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateOrgDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateOrgDomainRequestValidationError{}

// Validate checks the field values on ValidateOrgDomainResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ValidateOrgDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ValidateOrgDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ValidateOrgDomainResponseValidationError is the validation error returned by
// ValidateOrgDomainResponse.Validate if the designated constraints aren't met.
type ValidateOrgDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateOrgDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateOrgDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateOrgDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateOrgDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateOrgDomainResponseValidationError) ErrorName() string {
	return "ValidateOrgDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateOrgDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateOrgDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateOrgDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateOrgDomainResponseValidationError{}

// Validate checks the field values on SetPrimaryOrgDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetPrimaryOrgDomainRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetDomain()); l < 1 || l > 200 {
		return SetPrimaryOrgDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// SetPrimaryOrgDomainRequestValidationError is the validation error returned
// by SetPrimaryOrgDomainRequest.Validate if the designated constraints aren't met.
type SetPrimaryOrgDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPrimaryOrgDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPrimaryOrgDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPrimaryOrgDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPrimaryOrgDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPrimaryOrgDomainRequestValidationError) ErrorName() string {
	return "SetPrimaryOrgDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetPrimaryOrgDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPrimaryOrgDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPrimaryOrgDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPrimaryOrgDomainRequestValidationError{}

// Validate checks the field values on SetPrimaryOrgDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetPrimaryOrgDomainResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetPrimaryOrgDomainResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetPrimaryOrgDomainResponseValidationError is the validation error returned
// by SetPrimaryOrgDomainResponse.Validate if the designated constraints
// aren't met.
type SetPrimaryOrgDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetPrimaryOrgDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetPrimaryOrgDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetPrimaryOrgDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetPrimaryOrgDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetPrimaryOrgDomainResponseValidationError) ErrorName() string {
	return "SetPrimaryOrgDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetPrimaryOrgDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetPrimaryOrgDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetPrimaryOrgDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetPrimaryOrgDomainResponseValidationError{}

// Validate checks the field values on ListOrgMemberRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgMemberRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListOrgMemberRolesRequestValidationError is the validation error returned by
// ListOrgMemberRolesRequest.Validate if the designated constraints aren't met.
type ListOrgMemberRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMemberRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMemberRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMemberRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMemberRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMemberRolesRequestValidationError) ErrorName() string {
	return "ListOrgMemberRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMemberRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMemberRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMemberRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMemberRolesRequestValidationError{}

// Validate checks the field values on ListOrgMemberRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgMemberRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListOrgMemberRolesResponseValidationError is the validation error returned
// by ListOrgMemberRolesResponse.Validate if the designated constraints aren't met.
type ListOrgMemberRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMemberRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMemberRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMemberRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMemberRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMemberRolesResponseValidationError) ErrorName() string {
	return "ListOrgMemberRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMemberRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMemberRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMemberRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMemberRolesResponseValidationError{}

// Validate checks the field values on ListOrgMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgMembersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgMembersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgMembersRequestValidationError is the validation error returned by
// ListOrgMembersRequest.Validate if the designated constraints aren't met.
type ListOrgMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMembersRequestValidationError) ErrorName() string {
	return "ListOrgMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMembersRequestValidationError{}

// Validate checks the field values on ListOrgMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgMembersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgMembersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgMembersResponseValidationError is the validation error returned by
// ListOrgMembersResponse.Validate if the designated constraints aren't met.
type ListOrgMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMembersResponseValidationError) ErrorName() string {
	return "ListOrgMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMembersResponseValidationError{}

// Validate checks the field values on AddOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return AddOrgMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddOrgMemberRequestValidationError is the validation error returned by
// AddOrgMemberRequest.Validate if the designated constraints aren't met.
type AddOrgMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgMemberRequestValidationError) ErrorName() string {
	return "AddOrgMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgMemberRequestValidationError{}

// Validate checks the field values on AddOrgMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrgMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddOrgMemberResponseValidationError is the validation error returned by
// AddOrgMemberResponse.Validate if the designated constraints aren't met.
type AddOrgMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgMemberResponseValidationError) ErrorName() string {
	return "AddOrgMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgMemberResponseValidationError{}

// Validate checks the field values on UpdateOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateOrgMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateOrgMemberRequestValidationError is the validation error returned by
// UpdateOrgMemberRequest.Validate if the designated constraints aren't met.
type UpdateOrgMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgMemberRequestValidationError) ErrorName() string {
	return "UpdateOrgMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgMemberRequestValidationError{}

// Validate checks the field values on UpdateOrgMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOrgMemberResponseValidationError is the validation error returned by
// UpdateOrgMemberResponse.Validate if the designated constraints aren't met.
type UpdateOrgMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgMemberResponseValidationError) ErrorName() string {
	return "UpdateOrgMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgMemberResponseValidationError{}

// Validate checks the field values on RemoveOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveOrgMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveOrgMemberRequestValidationError is the validation error returned by
// RemoveOrgMemberRequest.Validate if the designated constraints aren't met.
type RemoveOrgMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgMemberRequestValidationError) ErrorName() string {
	return "RemoveOrgMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgMemberRequestValidationError{}

// Validate checks the field values on RemoveOrgMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOrgMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveOrgMemberResponseValidationError is the validation error returned by
// RemoveOrgMemberResponse.Validate if the designated constraints aren't met.
type RemoveOrgMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgMemberResponseValidationError) ErrorName() string {
	return "RemoveOrgMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgMemberResponseValidationError{}

// Validate checks the field values on ListOrgMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgMetadataRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgMetadataRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgMetadataRequestValidationError is the validation error returned by
// ListOrgMetadataRequest.Validate if the designated constraints aren't met.
type ListOrgMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMetadataRequestValidationError) ErrorName() string {
	return "ListOrgMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMetadataRequestValidationError{}

// Validate checks the field values on ListOrgMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgMetadataResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgMetadataResponseValidationError is the validation error returned by
// ListOrgMetadataResponse.Validate if the designated constraints aren't met.
type ListOrgMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMetadataResponseValidationError) ErrorName() string {
	return "ListOrgMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMetadataResponseValidationError{}

// Validate checks the field values on GetOrgMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return GetOrgMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetOrgMetadataRequestValidationError is the validation error returned by
// GetOrgMetadataRequest.Validate if the designated constraints aren't met.
type GetOrgMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgMetadataRequestValidationError) ErrorName() string {
	return "GetOrgMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgMetadataRequestValidationError{}

// Validate checks the field values on GetOrgMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMetadata()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgMetadataResponseValidationError{
				field:  "Metadata",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOrgMetadataResponseValidationError is the validation error returned by
// GetOrgMetadataResponse.Validate if the designated constraints aren't met.
type GetOrgMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgMetadataResponseValidationError) ErrorName() string {
	return "GetOrgMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgMetadataResponseValidationError{}

// Validate checks the field values on SetOrgMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetOrgMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return SetOrgMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := len(m.GetValue()); l < 1 || l > 500000 {
		return SetOrgMetadataRequestValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 500000 bytes, inclusive",
		}
	}

	return nil
}

// SetOrgMetadataRequestValidationError is the validation error returned by
// SetOrgMetadataRequest.Validate if the designated constraints aren't met.
type SetOrgMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrgMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrgMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrgMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrgMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrgMetadataRequestValidationError) ErrorName() string {
	return "SetOrgMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrgMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrgMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrgMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrgMetadataRequestValidationError{}

// Validate checks the field values on SetOrgMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetOrgMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetOrgMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetOrgMetadataResponseValidationError is the validation error returned by
// SetOrgMetadataResponse.Validate if the designated constraints aren't met.
type SetOrgMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrgMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrgMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrgMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrgMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrgMetadataResponseValidationError) ErrorName() string {
	return "SetOrgMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrgMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrgMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrgMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrgMetadataResponseValidationError{}

// Validate checks the field values on BulkSetOrgMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkSetOrgMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMetadata() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkSetOrgMetadataRequestValidationError{
					field:  fmt.Sprintf("Metadata[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BulkSetOrgMetadataRequestValidationError is the validation error returned by
// BulkSetOrgMetadataRequest.Validate if the designated constraints aren't met.
type BulkSetOrgMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetOrgMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetOrgMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetOrgMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetOrgMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetOrgMetadataRequestValidationError) ErrorName() string {
	return "BulkSetOrgMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetOrgMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetOrgMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetOrgMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetOrgMetadataRequestValidationError{}

// Validate checks the field values on BulkSetOrgMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkSetOrgMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkSetOrgMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkSetOrgMetadataResponseValidationError is the validation error returned
// by BulkSetOrgMetadataResponse.Validate if the designated constraints aren't met.
type BulkSetOrgMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetOrgMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetOrgMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetOrgMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetOrgMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetOrgMetadataResponseValidationError) ErrorName() string {
	return "BulkSetOrgMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetOrgMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetOrgMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetOrgMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetOrgMetadataResponseValidationError{}

// Validate checks the field values on RemoveOrgMetadataRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return RemoveOrgMetadataRequestValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveOrgMetadataRequestValidationError is the validation error returned by
// RemoveOrgMetadataRequest.Validate if the designated constraints aren't met.
type RemoveOrgMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgMetadataRequestValidationError) ErrorName() string {
	return "RemoveOrgMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgMetadataRequestValidationError{}

// Validate checks the field values on RemoveOrgMetadataResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveOrgMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveOrgMetadataResponseValidationError is the validation error returned by
// RemoveOrgMetadataResponse.Validate if the designated constraints aren't met.
type RemoveOrgMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgMetadataResponseValidationError) ErrorName() string {
	return "RemoveOrgMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgMetadataResponseValidationError{}

// Validate checks the field values on BulkRemoveOrgMetadataRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveOrgMetadataRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetKeys() {
		_, _ = idx, item

		if l := utf8.RuneCountInString(item); l < 1 || l > 200 {
			return BulkRemoveOrgMetadataRequestValidationError{
				field:  fmt.Sprintf("Keys[%v]", idx),
				reason: "value length must be between 1 and 200 runes, inclusive",
			}
		}

	}

	return nil
}

// BulkRemoveOrgMetadataRequestValidationError is the validation error returned
// by BulkRemoveOrgMetadataRequest.Validate if the designated constraints
// aren't met.
type BulkRemoveOrgMetadataRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveOrgMetadataRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveOrgMetadataRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveOrgMetadataRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveOrgMetadataRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveOrgMetadataRequestValidationError) ErrorName() string {
	return "BulkRemoveOrgMetadataRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveOrgMetadataRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveOrgMetadataRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveOrgMetadataRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveOrgMetadataRequestValidationError{}

// Validate checks the field values on BulkRemoveOrgMetadataResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveOrgMetadataResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkRemoveOrgMetadataResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkRemoveOrgMetadataResponseValidationError is the validation error
// returned by BulkRemoveOrgMetadataResponse.Validate if the designated
// constraints aren't met.
type BulkRemoveOrgMetadataResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveOrgMetadataResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveOrgMetadataResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveOrgMetadataResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveOrgMetadataResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveOrgMetadataResponseValidationError) ErrorName() string {
	return "BulkRemoveOrgMetadataResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveOrgMetadataResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveOrgMetadataResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveOrgMetadataResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveOrgMetadataResponseValidationError{}

// Validate checks the field values on GetProjectByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetProjectByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetProjectByIDRequestValidationError is the validation error returned by
// GetProjectByIDRequest.Validate if the designated constraints aren't met.
type GetProjectByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectByIDRequestValidationError) ErrorName() string {
	return "GetProjectByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectByIDRequestValidationError{}

// Validate checks the field values on GetProjectByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectByIDResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectByIDResponseValidationError is the validation error returned by
// GetProjectByIDResponse.Validate if the designated constraints aren't met.
type GetProjectByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectByIDResponseValidationError) ErrorName() string {
	return "GetProjectByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectByIDResponseValidationError{}

// Validate checks the field values on GetGrantedProjectByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGrantedProjectByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return GetGrantedProjectByIDRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return GetGrantedProjectByIDRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetGrantedProjectByIDRequestValidationError is the validation error returned
// by GetGrantedProjectByIDRequest.Validate if the designated constraints
// aren't met.
type GetGrantedProjectByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrantedProjectByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrantedProjectByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrantedProjectByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrantedProjectByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrantedProjectByIDRequestValidationError) ErrorName() string {
	return "GetGrantedProjectByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGrantedProjectByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrantedProjectByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrantedProjectByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrantedProjectByIDRequestValidationError{}

// Validate checks the field values on GetGrantedProjectByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetGrantedProjectByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetGrantedProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetGrantedProjectByIDResponseValidationError{
				field:  "GrantedProject",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetGrantedProjectByIDResponseValidationError is the validation error
// returned by GetGrantedProjectByIDResponse.Validate if the designated
// constraints aren't met.
type GetGrantedProjectByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGrantedProjectByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGrantedProjectByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGrantedProjectByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGrantedProjectByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGrantedProjectByIDResponseValidationError) ErrorName() string {
	return "GetGrantedProjectByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGrantedProjectByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGrantedProjectByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGrantedProjectByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGrantedProjectByIDResponseValidationError{}

// Validate checks the field values on ListProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectsRequestValidationError is the validation error returned by
// ListProjectsRequest.Validate if the designated constraints aren't met.
type ListProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsRequestValidationError) ErrorName() string {
	return "ListProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsRequestValidationError{}

// Validate checks the field values on ListProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectsResponseValidationError is the validation error returned by
// ListProjectsResponse.Validate if the designated constraints aren't met.
type ListProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsResponseValidationError) ErrorName() string {
	return "ListProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsResponseValidationError{}

// Validate checks the field values on ListGrantedProjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGrantedProjectsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantedProjectsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGrantedProjectsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGrantedProjectsRequestValidationError is the validation error returned
// by ListGrantedProjectsRequest.Validate if the designated constraints aren't met.
type ListGrantedProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantedProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantedProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantedProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantedProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantedProjectsRequestValidationError) ErrorName() string {
	return "ListGrantedProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantedProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantedProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantedProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantedProjectsRequestValidationError{}

// Validate checks the field values on ListGrantedProjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGrantedProjectsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantedProjectsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGrantedProjectsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGrantedProjectsResponseValidationError is the validation error returned
// by ListGrantedProjectsResponse.Validate if the designated constraints
// aren't met.
type ListGrantedProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantedProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantedProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantedProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantedProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantedProjectsResponseValidationError) ErrorName() string {
	return "ListGrantedProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantedProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantedProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantedProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantedProjectsResponseValidationError{}

// Validate checks the field values on ListProjectChangesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectChangesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListProjectChangesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListProjectChangesRequestValidationError is the validation error returned by
// ListProjectChangesRequest.Validate if the designated constraints aren't met.
type ListProjectChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectChangesRequestValidationError) ErrorName() string {
	return "ListProjectChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectChangesRequestValidationError{}

// Validate checks the field values on ListProjectChangesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectChangesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectChangesResponseValidationError is the validation error returned
// by ListProjectChangesResponse.Validate if the designated constraints aren't met.
type ListProjectChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectChangesResponseValidationError) ErrorName() string {
	return "ListProjectChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectChangesResponseValidationError{}

// Validate checks the field values on AddProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for ProjectRoleAssertion

	// no validation rules for ProjectRoleCheck

	// no validation rules for HasProjectCheck

	if _, ok := project.PrivateLabelingSetting_name[int32(m.GetPrivateLabelingSetting())]; !ok {
		return AddProjectRequestValidationError{
			field:  "PrivateLabelingSetting",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddProjectRequestValidationError is the validation error returned by
// AddProjectRequest.Validate if the designated constraints aren't met.
type AddProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectRequestValidationError) ErrorName() string {
	return "AddProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectRequestValidationError{}

// Validate checks the field values on AddProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return AddProjectResponseValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProjectResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProjectResponseValidationError is the validation error returned by
// AddProjectResponse.Validate if the designated constraints aren't met.
type AddProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectResponseValidationError) ErrorName() string {
	return "AddProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UpdateProjectRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for ProjectRoleAssertion

	// no validation rules for ProjectRoleCheck

	// no validation rules for HasProjectCheck

	if _, ok := project.PrivateLabelingSetting_name[int32(m.GetPrivateLabelingSetting())]; !ok {
		return UpdateProjectRequestValidationError{
			field:  "PrivateLabelingSetting",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on DeactivateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return DeactivateProjectRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateProjectRequestValidationError is the validation error returned by
// DeactivateProjectRequest.Validate if the designated constraints aren't met.
type DeactivateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateProjectRequestValidationError) ErrorName() string {
	return "DeactivateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateProjectRequestValidationError{}

// Validate checks the field values on DeactivateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateProjectResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateProjectResponseValidationError is the validation error returned by
// DeactivateProjectResponse.Validate if the designated constraints aren't met.
type DeactivateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateProjectResponseValidationError) ErrorName() string {
	return "DeactivateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateProjectResponseValidationError{}

// Validate checks the field values on ReactivateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return ReactivateProjectRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateProjectRequestValidationError is the validation error returned by
// ReactivateProjectRequest.Validate if the designated constraints aren't met.
type ReactivateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateProjectRequestValidationError) ErrorName() string {
	return "ReactivateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateProjectRequestValidationError{}

// Validate checks the field values on ReactivateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateProjectResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateProjectResponseValidationError is the validation error returned by
// ReactivateProjectResponse.Validate if the designated constraints aren't met.
type ReactivateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateProjectResponseValidationError) ErrorName() string {
	return "ReactivateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateProjectResponseValidationError{}

// Validate checks the field values on RemoveProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return RemoveProjectRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveProjectRequestValidationError is the validation error returned by
// RemoveProjectRequest.Validate if the designated constraints aren't met.
type RemoveProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectRequestValidationError) ErrorName() string {
	return "RemoveProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectRequestValidationError{}

// Validate checks the field values on RemoveProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProjectResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveProjectResponseValidationError is the validation error returned by
// RemoveProjectResponse.Validate if the designated constraints aren't met.
type RemoveProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectResponseValidationError) ErrorName() string {
	return "RemoveProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectResponseValidationError{}

// Validate checks the field values on ListProjectMemberRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectMemberRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListProjectMemberRolesRequestValidationError is the validation error
// returned by ListProjectMemberRolesRequest.Validate if the designated
// constraints aren't met.
type ListProjectMemberRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMemberRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMemberRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMemberRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMemberRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMemberRolesRequestValidationError) ErrorName() string {
	return "ListProjectMemberRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMemberRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMemberRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMemberRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMemberRolesRequestValidationError{}

// Validate checks the field values on ListProjectMemberRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectMemberRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectMemberRolesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProjectMemberRolesResponseValidationError is the validation error
// returned by ListProjectMemberRolesResponse.Validate if the designated
// constraints aren't met.
type ListProjectMemberRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMemberRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMemberRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMemberRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMemberRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMemberRolesResponseValidationError) ErrorName() string {
	return "ListProjectMemberRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMemberRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMemberRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMemberRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMemberRolesResponseValidationError{}

// Validate checks the field values on AddProjectRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddProjectRoleRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRoleKey()); l < 1 || l > 200 {
		return AddProjectRoleRequestValidationError{
			field:  "RoleKey",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 200 {
		return AddProjectRoleRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetGroup()) > 200 {
		return AddProjectRoleRequestValidationError{
			field:  "Group",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// AddProjectRoleRequestValidationError is the validation error returned by
// AddProjectRoleRequest.Validate if the designated constraints aren't met.
type AddProjectRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectRoleRequestValidationError) ErrorName() string {
	return "AddProjectRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectRoleRequestValidationError{}

// Validate checks the field values on AddProjectRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProjectRoleResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProjectRoleResponseValidationError is the validation error returned by
// AddProjectRoleResponse.Validate if the designated constraints aren't met.
type AddProjectRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectRoleResponseValidationError) ErrorName() string {
	return "AddProjectRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectRoleResponseValidationError{}

// Validate checks the field values on BulkAddProjectRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkAddProjectRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return BulkAddProjectRolesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	for idx, item := range m.GetRoles() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BulkAddProjectRolesRequestValidationError{
					field:  fmt.Sprintf("Roles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// BulkAddProjectRolesRequestValidationError is the validation error returned
// by BulkAddProjectRolesRequest.Validate if the designated constraints aren't met.
type BulkAddProjectRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkAddProjectRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkAddProjectRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkAddProjectRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkAddProjectRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkAddProjectRolesRequestValidationError) ErrorName() string {
	return "BulkAddProjectRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkAddProjectRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkAddProjectRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkAddProjectRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkAddProjectRolesRequestValidationError{}

// Validate checks the field values on BulkAddProjectRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkAddProjectRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BulkAddProjectRolesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// BulkAddProjectRolesResponseValidationError is the validation error returned
// by BulkAddProjectRolesResponse.Validate if the designated constraints
// aren't met.
type BulkAddProjectRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkAddProjectRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkAddProjectRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkAddProjectRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkAddProjectRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkAddProjectRolesResponseValidationError) ErrorName() string {
	return "BulkAddProjectRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkAddProjectRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkAddProjectRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkAddProjectRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkAddProjectRolesResponseValidationError{}

// Validate checks the field values on UpdateProjectRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateProjectRoleRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRoleKey()); l < 1 || l > 200 {
		return UpdateProjectRoleRequestValidationError{
			field:  "RoleKey",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 200 {
		return UpdateProjectRoleRequestValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetGroup()) > 200 {
		return UpdateProjectRoleRequestValidationError{
			field:  "Group",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// UpdateProjectRoleRequestValidationError is the validation error returned by
// UpdateProjectRoleRequest.Validate if the designated constraints aren't met.
type UpdateProjectRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRoleRequestValidationError) ErrorName() string {
	return "UpdateProjectRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRoleRequestValidationError{}

// Validate checks the field values on UpdateProjectRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectRoleResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProjectRoleResponseValidationError is the validation error returned by
// UpdateProjectRoleResponse.Validate if the designated constraints aren't met.
type UpdateProjectRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRoleResponseValidationError) ErrorName() string {
	return "UpdateProjectRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRoleResponseValidationError{}

// Validate checks the field values on RemoveProjectRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectRoleRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RemoveProjectRoleRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetRoleKey()); l < 1 || l > 200 {
		return RemoveProjectRoleRequestValidationError{
			field:  "RoleKey",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveProjectRoleRequestValidationError is the validation error returned by
// RemoveProjectRoleRequest.Validate if the designated constraints aren't met.
type RemoveProjectRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectRoleRequestValidationError) ErrorName() string {
	return "RemoveProjectRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectRoleRequestValidationError{}

// Validate checks the field values on RemoveProjectRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectRoleResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProjectRoleResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveProjectRoleResponseValidationError is the validation error returned by
// RemoveProjectRoleResponse.Validate if the designated constraints aren't met.
type RemoveProjectRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectRoleResponseValidationError) ErrorName() string {
	return "RemoveProjectRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectRoleResponseValidationError{}

// Validate checks the field values on ListProjectRolesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListProjectRolesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectRolesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectRolesRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectRolesRequestValidationError is the validation error returned by
// ListProjectRolesRequest.Validate if the designated constraints aren't met.
type ListProjectRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectRolesRequestValidationError) ErrorName() string {
	return "ListProjectRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectRolesRequestValidationError{}

// Validate checks the field values on ListProjectRolesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectRolesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectRolesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectRolesResponseValidationError is the validation error returned by
// ListProjectRolesResponse.Validate if the designated constraints aren't met.
type ListProjectRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectRolesResponseValidationError) ErrorName() string {
	return "ListProjectRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectRolesResponseValidationError{}

// Validate checks the field values on ListGrantedProjectRolesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGrantedProjectRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListGrantedProjectRolesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return ListGrantedProjectRolesRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantedProjectRolesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGrantedProjectRolesRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGrantedProjectRolesRequestValidationError is the validation error
// returned by ListGrantedProjectRolesRequest.Validate if the designated
// constraints aren't met.
type ListGrantedProjectRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantedProjectRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantedProjectRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantedProjectRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantedProjectRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantedProjectRolesRequestValidationError) ErrorName() string {
	return "ListGrantedProjectRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantedProjectRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantedProjectRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantedProjectRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantedProjectRolesRequestValidationError{}

// Validate checks the field values on ListGrantedProjectRolesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListGrantedProjectRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListGrantedProjectRolesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGrantedProjectRolesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListGrantedProjectRolesResponseValidationError is the validation error
// returned by ListGrantedProjectRolesResponse.Validate if the designated
// constraints aren't met.
type ListGrantedProjectRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGrantedProjectRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGrantedProjectRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGrantedProjectRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGrantedProjectRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGrantedProjectRolesResponseValidationError) ErrorName() string {
	return "ListGrantedProjectRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGrantedProjectRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGrantedProjectRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGrantedProjectRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGrantedProjectRolesResponseValidationError{}

// Validate checks the field values on ListProjectMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListProjectMembersRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectMembersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMembersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectMembersRequestValidationError is the validation error returned by
// ListProjectMembersRequest.Validate if the designated constraints aren't met.
type ListProjectMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersRequestValidationError) ErrorName() string {
	return "ListProjectMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersRequestValidationError{}

// Validate checks the field values on ListProjectMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectMembersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMembersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectMembersResponseValidationError is the validation error returned
// by ListProjectMembersResponse.Validate if the designated constraints aren't met.
type ListProjectMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersResponseValidationError) ErrorName() string {
	return "ListProjectMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersResponseValidationError{}

// Validate checks the field values on AddProjectMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddProjectMemberRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return AddProjectMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddProjectMemberRequestValidationError is the validation error returned by
// AddProjectMemberRequest.Validate if the designated constraints aren't met.
type AddProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberRequestValidationError) ErrorName() string {
	return "AddProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberRequestValidationError{}

// Validate checks the field values on AddProjectMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProjectMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProjectMemberResponseValidationError is the validation error returned by
// AddProjectMemberResponse.Validate if the designated constraints aren't met.
type AddProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberResponseValidationError) ErrorName() string {
	return "AddProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberResponseValidationError{}

// Validate checks the field values on UpdateProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateProjectMemberRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateProjectMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateProjectMemberRequestValidationError is the validation error returned
// by UpdateProjectMemberRequest.Validate if the designated constraints aren't met.
type UpdateProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMemberRequestValidationError) ErrorName() string {
	return "UpdateProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMemberRequestValidationError{}

// Validate checks the field values on UpdateProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProjectMemberResponseValidationError is the validation error returned
// by UpdateProjectMemberResponse.Validate if the designated constraints
// aren't met.
type UpdateProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectMemberResponseValidationError) ErrorName() string {
	return "UpdateProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectMemberResponseValidationError{}

// Validate checks the field values on RemoveProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RemoveProjectMemberRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveProjectMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveProjectMemberRequestValidationError is the validation error returned
// by RemoveProjectMemberRequest.Validate if the designated constraints aren't met.
type RemoveProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberRequestValidationError) ErrorName() string {
	return "RemoveProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberRequestValidationError{}

// Validate checks the field values on RemoveProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProjectMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveProjectMemberResponseValidationError is the validation error returned
// by RemoveProjectMemberResponse.Validate if the designated constraints
// aren't met.
type RemoveProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberResponseValidationError) ErrorName() string {
	return "RemoveProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberResponseValidationError{}

// Validate checks the field values on GetAppByIDRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAppByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return GetAppByIDRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return GetAppByIDRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetAppByIDRequestValidationError is the validation error returned by
// GetAppByIDRequest.Validate if the designated constraints aren't met.
type GetAppByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppByIDRequestValidationError) ErrorName() string {
	return "GetAppByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppByIDRequestValidationError{}

// Validate checks the field values on GetAppByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetAppByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetApp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppByIDResponseValidationError{
				field:  "App",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAppByIDResponseValidationError is the validation error returned by
// GetAppByIDResponse.Validate if the designated constraints aren't met.
type GetAppByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppByIDResponseValidationError) ErrorName() string {
	return "GetAppByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppByIDResponseValidationError{}

// Validate checks the field values on ListAppsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAppsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListAppsRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAppsRequestValidationError is the validation error returned by
// ListAppsRequest.Validate if the designated constraints aren't met.
type ListAppsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsRequestValidationError) ErrorName() string { return "ListAppsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsRequestValidationError{}

// Validate checks the field values on ListAppsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListAppsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAppsResponseValidationError is the validation error returned by
// ListAppsResponse.Validate if the designated constraints aren't met.
type ListAppsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppsResponseValidationError) ErrorName() string { return "ListAppsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListAppsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppsResponseValidationError{}

// Validate checks the field values on ListAppChangesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppChangesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListAppChangesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return ListAppChangesRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListAppChangesRequestValidationError is the validation error returned by
// ListAppChangesRequest.Validate if the designated constraints aren't met.
type ListAppChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppChangesRequestValidationError) ErrorName() string {
	return "ListAppChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppChangesRequestValidationError{}

// Validate checks the field values on ListAppChangesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppChangesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAppChangesResponseValidationError is the validation error returned by
// ListAppChangesResponse.Validate if the designated constraints aren't met.
type ListAppChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppChangesResponseValidationError) ErrorName() string {
	return "ListAppChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppChangesResponseValidationError{}

// Validate checks the field values on AddOIDCAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddOIDCAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddOIDCAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddOIDCAppRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := app.OIDCAppType_name[int32(m.GetAppType())]; !ok {
		return AddOIDCAppRequestValidationError{
			field:  "AppType",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := app.OIDCAuthMethodType_name[int32(m.GetAuthMethodType())]; !ok {
		return AddOIDCAppRequestValidationError{
			field:  "AuthMethodType",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := app.OIDCVersion_name[int32(m.GetVersion())]; !ok {
		return AddOIDCAppRequestValidationError{
			field:  "Version",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for DevMode

	if _, ok := app.OIDCTokenType_name[int32(m.GetAccessTokenType())]; !ok {
		return AddOIDCAppRequestValidationError{
			field:  "AccessTokenType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for AccessTokenRoleAssertion

	// no validation rules for IdTokenRoleAssertion

	// no validation rules for IdTokenUserinfoAssertion

	if d := m.GetClockSkew(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return AddOIDCAppRequestValidationError{
				field:  "ClockSkew",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(5*time.Second + 0*time.Nanosecond)
		gte := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur < gte || dur > lte {
			return AddOIDCAppRequestValidationError{
				field:  "ClockSkew",
				reason: "value must be inside range [0s, 5s]",
			}
		}

	}

	return nil
}

// AddOIDCAppRequestValidationError is the validation error returned by
// AddOIDCAppRequest.Validate if the designated constraints aren't met.
type AddOIDCAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOIDCAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOIDCAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOIDCAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOIDCAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOIDCAppRequestValidationError) ErrorName() string {
	return "AddOIDCAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOIDCAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOIDCAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOIDCAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOIDCAppRequestValidationError{}

// Validate checks the field values on AddOIDCAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOIDCAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOIDCAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	// no validation rules for NoneCompliant

	for idx, item := range m.GetComplianceProblems() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddOIDCAppResponseValidationError{
					field:  fmt.Sprintf("ComplianceProblems[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// AddOIDCAppResponseValidationError is the validation error returned by
// AddOIDCAppResponse.Validate if the designated constraints aren't met.
type AddOIDCAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOIDCAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOIDCAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOIDCAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOIDCAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOIDCAppResponseValidationError) ErrorName() string {
	return "AddOIDCAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOIDCAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOIDCAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOIDCAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOIDCAppResponseValidationError{}

// Validate checks the field values on AddSAMLAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddSAMLAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddSAMLAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddSAMLAppRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	switch m.Metadata.(type) {

	case *AddSAMLAppRequest_MetadataXml:

		if len(m.GetMetadataXml()) > 500000 {
			return AddSAMLAppRequestValidationError{
				field:  "MetadataXml",
				reason: "value length must be at most 500000 bytes",
			}
		}

	case *AddSAMLAppRequest_MetadataUrl:

		if utf8.RuneCountInString(m.GetMetadataUrl()) > 200 {
			return AddSAMLAppRequestValidationError{
				field:  "MetadataUrl",
				reason: "value length must be at most 200 runes",
			}
		}

	default:
		return AddSAMLAppRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}

	}

	return nil
}

// AddSAMLAppRequestValidationError is the validation error returned by
// AddSAMLAppRequest.Validate if the designated constraints aren't met.
type AddSAMLAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSAMLAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSAMLAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSAMLAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSAMLAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSAMLAppRequestValidationError) ErrorName() string {
	return "AddSAMLAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSAMLAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSAMLAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSAMLAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSAMLAppRequestValidationError{}

// Validate checks the field values on AddSAMLAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddSAMLAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSAMLAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddSAMLAppResponseValidationError is the validation error returned by
// AddSAMLAppResponse.Validate if the designated constraints aren't met.
type AddSAMLAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSAMLAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSAMLAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSAMLAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSAMLAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSAMLAppResponseValidationError) ErrorName() string {
	return "AddSAMLAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSAMLAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSAMLAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSAMLAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSAMLAppResponseValidationError{}

// Validate checks the field values on AddAPIAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddAPIAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddAPIAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddAPIAppRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := app.APIAuthMethodType_name[int32(m.GetAuthMethodType())]; !ok {
		return AddAPIAppRequestValidationError{
			field:  "AuthMethodType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddAPIAppRequestValidationError is the validation error returned by
// AddAPIAppRequest.Validate if the designated constraints aren't met.
type AddAPIAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAPIAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAPIAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAPIAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAPIAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAPIAppRequestValidationError) ErrorName() string { return "AddAPIAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAPIAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAPIAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAPIAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAPIAppRequestValidationError{}

// Validate checks the field values on AddAPIAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddAPIAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AppId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAPIAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for ClientId

	// no validation rules for ClientSecret

	return nil
}

// AddAPIAppResponseValidationError is the validation error returned by
// AddAPIAppResponse.Validate if the designated constraints aren't met.
type AddAPIAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAPIAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAPIAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAPIAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAPIAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAPIAppResponseValidationError) ErrorName() string {
	return "AddAPIAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAPIAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAPIAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAPIAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAPIAppResponseValidationError{}

// Validate checks the field values on UpdateAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return UpdateAppRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateAppRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateAppRequestValidationError is the validation error returned by
// UpdateAppRequest.Validate if the designated constraints aren't met.
type UpdateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppRequestValidationError) ErrorName() string { return "UpdateAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpdateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppRequestValidationError{}

// Validate checks the field values on UpdateAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAppResponseValidationError is the validation error returned by
// UpdateAppResponse.Validate if the designated constraints aren't met.
type UpdateAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAppResponseValidationError) ErrorName() string {
	return "UpdateAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAppResponseValidationError{}

// Validate checks the field values on UpdateOIDCAppConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOIDCAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateOIDCAppConfigRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return UpdateOIDCAppConfigRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := app.OIDCAppType_name[int32(m.GetAppType())]; !ok {
		return UpdateOIDCAppConfigRequestValidationError{
			field:  "AppType",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := app.OIDCAuthMethodType_name[int32(m.GetAuthMethodType())]; !ok {
		return UpdateOIDCAppConfigRequestValidationError{
			field:  "AuthMethodType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for DevMode

	if _, ok := app.OIDCTokenType_name[int32(m.GetAccessTokenType())]; !ok {
		return UpdateOIDCAppConfigRequestValidationError{
			field:  "AccessTokenType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for AccessTokenRoleAssertion

	// no validation rules for IdTokenRoleAssertion

	// no validation rules for IdTokenUserinfoAssertion

	if d := m.GetClockSkew(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return UpdateOIDCAppConfigRequestValidationError{
				field:  "ClockSkew",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(5*time.Second + 0*time.Nanosecond)
		gte := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur < gte || dur > lte {
			return UpdateOIDCAppConfigRequestValidationError{
				field:  "ClockSkew",
				reason: "value must be inside range [0s, 5s]",
			}
		}

	}

	return nil
}

// UpdateOIDCAppConfigRequestValidationError is the validation error returned
// by UpdateOIDCAppConfigRequest.Validate if the designated constraints aren't met.
type UpdateOIDCAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOIDCAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOIDCAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOIDCAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOIDCAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOIDCAppConfigRequestValidationError) ErrorName() string {
	return "UpdateOIDCAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOIDCAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOIDCAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOIDCAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOIDCAppConfigRequestValidationError{}

// Validate checks the field values on UpdateOIDCAppConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOIDCAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOIDCAppConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOIDCAppConfigResponseValidationError is the validation error returned
// by UpdateOIDCAppConfigResponse.Validate if the designated constraints
// aren't met.
type UpdateOIDCAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOIDCAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOIDCAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOIDCAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOIDCAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOIDCAppConfigResponseValidationError) ErrorName() string {
	return "UpdateOIDCAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOIDCAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOIDCAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOIDCAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOIDCAppConfigResponseValidationError{}

// Validate checks the field values on UpdateSAMLAppConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSAMLAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateSAMLAppConfigRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return UpdateSAMLAppConfigRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	switch m.Metadata.(type) {

	case *UpdateSAMLAppConfigRequest_MetadataXml:

		if len(m.GetMetadataXml()) > 500000 {
			return UpdateSAMLAppConfigRequestValidationError{
				field:  "MetadataXml",
				reason: "value length must be at most 500000 bytes",
			}
		}

	case *UpdateSAMLAppConfigRequest_MetadataUrl:

		if utf8.RuneCountInString(m.GetMetadataUrl()) > 200 {
			return UpdateSAMLAppConfigRequestValidationError{
				field:  "MetadataUrl",
				reason: "value length must be at most 200 runes",
			}
		}

	default:
		return UpdateSAMLAppConfigRequestValidationError{
			field:  "Metadata",
			reason: "value is required",
		}

	}

	return nil
}

// UpdateSAMLAppConfigRequestValidationError is the validation error returned
// by UpdateSAMLAppConfigRequest.Validate if the designated constraints aren't met.
type UpdateSAMLAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSAMLAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSAMLAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSAMLAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSAMLAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSAMLAppConfigRequestValidationError) ErrorName() string {
	return "UpdateSAMLAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSAMLAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSAMLAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSAMLAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSAMLAppConfigRequestValidationError{}

// Validate checks the field values on UpdateSAMLAppConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateSAMLAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSAMLAppConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateSAMLAppConfigResponseValidationError is the validation error returned
// by UpdateSAMLAppConfigResponse.Validate if the designated constraints
// aren't met.
type UpdateSAMLAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSAMLAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSAMLAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSAMLAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSAMLAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSAMLAppConfigResponseValidationError) ErrorName() string {
	return "UpdateSAMLAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSAMLAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSAMLAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSAMLAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSAMLAppConfigResponseValidationError{}

// Validate checks the field values on UpdateAPIAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAPIAppConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateAPIAppConfigRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return UpdateAPIAppConfigRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := app.APIAuthMethodType_name[int32(m.GetAuthMethodType())]; !ok {
		return UpdateAPIAppConfigRequestValidationError{
			field:  "AuthMethodType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// UpdateAPIAppConfigRequestValidationError is the validation error returned by
// UpdateAPIAppConfigRequest.Validate if the designated constraints aren't met.
type UpdateAPIAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAPIAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAPIAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAPIAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAPIAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAPIAppConfigRequestValidationError) ErrorName() string {
	return "UpdateAPIAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAPIAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAPIAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAPIAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAPIAppConfigRequestValidationError{}

// Validate checks the field values on UpdateAPIAppConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateAPIAppConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateAPIAppConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateAPIAppConfigResponseValidationError is the validation error returned
// by UpdateAPIAppConfigResponse.Validate if the designated constraints aren't met.
type UpdateAPIAppConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateAPIAppConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateAPIAppConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateAPIAppConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateAPIAppConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateAPIAppConfigResponseValidationError) ErrorName() string {
	return "UpdateAPIAppConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateAPIAppConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateAPIAppConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateAPIAppConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateAPIAppConfigResponseValidationError{}

// Validate checks the field values on DeactivateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return DeactivateAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return DeactivateAppRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateAppRequestValidationError is the validation error returned by
// DeactivateAppRequest.Validate if the designated constraints aren't met.
type DeactivateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAppRequestValidationError) ErrorName() string {
	return "DeactivateAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAppRequestValidationError{}

// Validate checks the field values on DeactivateAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateAppResponseValidationError is the validation error returned by
// DeactivateAppResponse.Validate if the designated constraints aren't met.
type DeactivateAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateAppResponseValidationError) ErrorName() string {
	return "DeactivateAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateAppResponseValidationError{}

// Validate checks the field values on ReactivateAppRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ReactivateAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return ReactivateAppRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateAppRequestValidationError is the validation error returned by
// ReactivateAppRequest.Validate if the designated constraints aren't met.
type ReactivateAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateAppRequestValidationError) ErrorName() string {
	return "ReactivateAppRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateAppRequestValidationError{}

// Validate checks the field values on ReactivateAppResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateAppResponseValidationError is the validation error returned by
// ReactivateAppResponse.Validate if the designated constraints aren't met.
type ReactivateAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateAppResponseValidationError) ErrorName() string {
	return "ReactivateAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateAppResponseValidationError{}

// Validate checks the field values on RemoveAppRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveAppRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RemoveAppRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return RemoveAppRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveAppRequestValidationError is the validation error returned by
// RemoveAppRequest.Validate if the designated constraints aren't met.
type RemoveAppRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAppRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAppRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAppRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAppRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAppRequestValidationError) ErrorName() string { return "RemoveAppRequestValidationError" }

// Error satisfies the builtin error interface
func (e RemoveAppRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAppRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAppRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAppRequestValidationError{}

// Validate checks the field values on RemoveAppResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveAppResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveAppResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveAppResponseValidationError is the validation error returned by
// RemoveAppResponse.Validate if the designated constraints aren't met.
type RemoveAppResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAppResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAppResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAppResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAppResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAppResponseValidationError) ErrorName() string {
	return "RemoveAppResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAppResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAppResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAppResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAppResponseValidationError{}

// Validate checks the field values on RegenerateOIDCClientSecretRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RegenerateOIDCClientSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RegenerateOIDCClientSecretRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return RegenerateOIDCClientSecretRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RegenerateOIDCClientSecretRequestValidationError is the validation error
// returned by RegenerateOIDCClientSecretRequest.Validate if the designated
// constraints aren't met.
type RegenerateOIDCClientSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegenerateOIDCClientSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegenerateOIDCClientSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegenerateOIDCClientSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegenerateOIDCClientSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegenerateOIDCClientSecretRequestValidationError) ErrorName() string {
	return "RegenerateOIDCClientSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegenerateOIDCClientSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegenerateOIDCClientSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegenerateOIDCClientSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegenerateOIDCClientSecretRequestValidationError{}

// Validate checks the field values on RegenerateOIDCClientSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RegenerateOIDCClientSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClientSecret

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegenerateOIDCClientSecretResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegenerateOIDCClientSecretResponseValidationError is the validation error
// returned by RegenerateOIDCClientSecretResponse.Validate if the designated
// constraints aren't met.
type RegenerateOIDCClientSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegenerateOIDCClientSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegenerateOIDCClientSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegenerateOIDCClientSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegenerateOIDCClientSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegenerateOIDCClientSecretResponseValidationError) ErrorName() string {
	return "RegenerateOIDCClientSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegenerateOIDCClientSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegenerateOIDCClientSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegenerateOIDCClientSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegenerateOIDCClientSecretResponseValidationError{}

// Validate checks the field values on RegenerateAPIClientSecretRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RegenerateAPIClientSecretRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RegenerateAPIClientSecretRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return RegenerateAPIClientSecretRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RegenerateAPIClientSecretRequestValidationError is the validation error
// returned by RegenerateAPIClientSecretRequest.Validate if the designated
// constraints aren't met.
type RegenerateAPIClientSecretRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegenerateAPIClientSecretRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegenerateAPIClientSecretRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegenerateAPIClientSecretRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegenerateAPIClientSecretRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegenerateAPIClientSecretRequestValidationError) ErrorName() string {
	return "RegenerateAPIClientSecretRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RegenerateAPIClientSecretRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegenerateAPIClientSecretRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegenerateAPIClientSecretRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegenerateAPIClientSecretRequestValidationError{}

// Validate checks the field values on RegenerateAPIClientSecretResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RegenerateAPIClientSecretResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for ClientSecret

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RegenerateAPIClientSecretResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RegenerateAPIClientSecretResponseValidationError is the validation error
// returned by RegenerateAPIClientSecretResponse.Validate if the designated
// constraints aren't met.
type RegenerateAPIClientSecretResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RegenerateAPIClientSecretResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RegenerateAPIClientSecretResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RegenerateAPIClientSecretResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RegenerateAPIClientSecretResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RegenerateAPIClientSecretResponseValidationError) ErrorName() string {
	return "RegenerateAPIClientSecretResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RegenerateAPIClientSecretResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRegenerateAPIClientSecretResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RegenerateAPIClientSecretResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RegenerateAPIClientSecretResponseValidationError{}

// Validate checks the field values on GetAppKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAppKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return GetAppKeyRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return GetAppKeyRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeyId()); l < 1 || l > 200 {
		return GetAppKeyRequestValidationError{
			field:  "KeyId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetAppKeyRequestValidationError is the validation error returned by
// GetAppKeyRequest.Validate if the designated constraints aren't met.
type GetAppKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppKeyRequestValidationError) ErrorName() string { return "GetAppKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetAppKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppKeyRequestValidationError{}

// Validate checks the field values on GetAppKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetAppKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetKey()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetAppKeyResponseValidationError{
				field:  "Key",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetAppKeyResponseValidationError is the validation error returned by
// GetAppKeyResponse.Validate if the designated constraints aren't met.
type GetAppKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppKeyResponseValidationError) ErrorName() string {
	return "GetAppKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppKeyResponseValidationError{}

// Validate checks the field values on ListAppKeysRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppKeysRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppKeysRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return ListAppKeysRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListAppKeysRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListAppKeysRequestValidationError is the validation error returned by
// ListAppKeysRequest.Validate if the designated constraints aren't met.
type ListAppKeysRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppKeysRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppKeysRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppKeysRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppKeysRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppKeysRequestValidationError) ErrorName() string {
	return "ListAppKeysRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppKeysRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppKeysRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppKeysRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppKeysRequestValidationError{}

// Validate checks the field values on ListAppKeysResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAppKeysResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAppKeysResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAppKeysResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAppKeysResponseValidationError is the validation error returned by
// ListAppKeysResponse.Validate if the designated constraints aren't met.
type ListAppKeysResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAppKeysResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAppKeysResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAppKeysResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAppKeysResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAppKeysResponseValidationError) ErrorName() string {
	return "ListAppKeysResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAppKeysResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAppKeysResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAppKeysResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAppKeysResponseValidationError{}

// Validate checks the field values on AddAppKeyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddAppKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddAppKeyRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return AddAppKeyRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := _AddAppKeyRequest_Type_NotInLookup[m.GetType()]; ok {
		return AddAppKeyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := authn.KeyType_name[int32(m.GetType())]; !ok {
		return AddAppKeyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	if v, ok := interface{}(m.GetExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAppKeyRequestValidationError{
				field:  "ExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddAppKeyRequestValidationError is the validation error returned by
// AddAppKeyRequest.Validate if the designated constraints aren't met.
type AddAppKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppKeyRequestValidationError) ErrorName() string { return "AddAppKeyRequestValidationError" }

// Error satisfies the builtin error interface
func (e AddAppKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppKeyRequestValidationError{}

var _AddAppKeyRequest_Type_NotInLookup = map[authn.KeyType]struct{}{
	0: {},
}

// Validate checks the field values on AddAppKeyResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *AddAppKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddAppKeyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for KeyDetails

	return nil
}

// AddAppKeyResponseValidationError is the validation error returned by
// AddAppKeyResponse.Validate if the designated constraints aren't met.
type AddAppKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddAppKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddAppKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddAppKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddAppKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddAppKeyResponseValidationError) ErrorName() string {
	return "AddAppKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddAppKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddAppKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddAppKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddAppKeyResponseValidationError{}

// Validate checks the field values on RemoveAppKeyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveAppKeyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RemoveAppKeyRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAppId()); l < 1 || l > 200 {
		return RemoveAppKeyRequestValidationError{
			field:  "AppId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeyId()); l < 1 || l > 200 {
		return RemoveAppKeyRequestValidationError{
			field:  "KeyId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveAppKeyRequestValidationError is the validation error returned by
// RemoveAppKeyRequest.Validate if the designated constraints aren't met.
type RemoveAppKeyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAppKeyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAppKeyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAppKeyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAppKeyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAppKeyRequestValidationError) ErrorName() string {
	return "RemoveAppKeyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAppKeyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAppKeyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAppKeyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAppKeyRequestValidationError{}

// Validate checks the field values on RemoveAppKeyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveAppKeyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveAppKeyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveAppKeyResponseValidationError is the validation error returned by
// RemoveAppKeyResponse.Validate if the designated constraints aren't met.
type RemoveAppKeyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveAppKeyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveAppKeyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveAppKeyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveAppKeyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveAppKeyResponseValidationError) ErrorName() string {
	return "RemoveAppKeyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveAppKeyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveAppKeyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveAppKeyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveAppKeyResponseValidationError{}

// Validate checks the field values on ListProjectGrantChangesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectGrantChangesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantChangesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListProjectGrantChangesRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return ListProjectGrantChangesRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ListProjectGrantChangesRequestValidationError is the validation error
// returned by ListProjectGrantChangesRequest.Validate if the designated
// constraints aren't met.
type ListProjectGrantChangesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantChangesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantChangesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantChangesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantChangesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantChangesRequestValidationError) ErrorName() string {
	return "ListProjectGrantChangesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantChangesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantChangesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantChangesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantChangesRequestValidationError{}

// Validate checks the field values on ListProjectGrantChangesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectGrantChangesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGrantChangesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectGrantChangesResponseValidationError is the validation error
// returned by ListProjectGrantChangesResponse.Validate if the designated
// constraints aren't met.
type ListProjectGrantChangesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantChangesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantChangesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantChangesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantChangesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantChangesResponseValidationError) ErrorName() string {
	return "ListProjectGrantChangesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantChangesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantChangesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantChangesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantChangesResponseValidationError{}

// Validate checks the field values on GetProjectGrantByIDRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectGrantByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return GetProjectGrantByIDRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return GetProjectGrantByIDRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetProjectGrantByIDRequestValidationError is the validation error returned
// by GetProjectGrantByIDRequest.Validate if the designated constraints aren't met.
type GetProjectGrantByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectGrantByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectGrantByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectGrantByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectGrantByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectGrantByIDRequestValidationError) ErrorName() string {
	return "GetProjectGrantByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectGrantByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectGrantByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectGrantByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectGrantByIDRequestValidationError{}

// Validate checks the field values on GetProjectGrantByIDResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProjectGrantByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetProjectGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectGrantByIDResponseValidationError{
				field:  "ProjectGrant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProjectGrantByIDResponseValidationError is the validation error returned
// by GetProjectGrantByIDResponse.Validate if the designated constraints
// aren't met.
type GetProjectGrantByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectGrantByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectGrantByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectGrantByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectGrantByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectGrantByIDResponseValidationError) ErrorName() string {
	return "GetProjectGrantByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectGrantByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectGrantByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectGrantByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectGrantByIDResponseValidationError{}

// Validate checks the field values on ListProjectGrantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectGrantsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListProjectGrantsRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGrantsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectGrantsRequestValidationError is the validation error returned by
// ListProjectGrantsRequest.Validate if the designated constraints aren't met.
type ListProjectGrantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantsRequestValidationError) ErrorName() string {
	return "ListProjectGrantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantsRequestValidationError{}

// Validate checks the field values on ListProjectGrantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectGrantsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGrantsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectGrantsResponseValidationError is the validation error returned by
// ListProjectGrantsResponse.Validate if the designated constraints aren't met.
type ListProjectGrantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantsResponseValidationError) ErrorName() string {
	return "ListProjectGrantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantsResponseValidationError{}

// Validate checks the field values on ListAllProjectGrantsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAllProjectGrantsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAllProjectGrantsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllProjectGrantsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAllProjectGrantsRequestValidationError is the validation error returned
// by ListAllProjectGrantsRequest.Validate if the designated constraints
// aren't met.
type ListAllProjectGrantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllProjectGrantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllProjectGrantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllProjectGrantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllProjectGrantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllProjectGrantsRequestValidationError) ErrorName() string {
	return "ListAllProjectGrantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllProjectGrantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllProjectGrantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllProjectGrantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllProjectGrantsRequestValidationError{}

// Validate checks the field values on ListAllProjectGrantsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListAllProjectGrantsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListAllProjectGrantsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListAllProjectGrantsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListAllProjectGrantsResponseValidationError is the validation error returned
// by ListAllProjectGrantsResponse.Validate if the designated constraints
// aren't met.
type ListAllProjectGrantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListAllProjectGrantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListAllProjectGrantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListAllProjectGrantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListAllProjectGrantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListAllProjectGrantsResponseValidationError) ErrorName() string {
	return "ListAllProjectGrantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListAllProjectGrantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListAllProjectGrantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListAllProjectGrantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListAllProjectGrantsResponseValidationError{}

// Validate checks the field values on AddProjectGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddProjectGrantRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantedOrgId()); l < 1 || l > 200 {
		return AddProjectGrantRequestValidationError{
			field:  "GrantedOrgId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddProjectGrantRequestValidationError is the validation error returned by
// AddProjectGrantRequest.Validate if the designated constraints aren't met.
type AddProjectGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectGrantRequestValidationError) ErrorName() string {
	return "AddProjectGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectGrantRequestValidationError{}

// Validate checks the field values on AddProjectGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for GrantId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProjectGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProjectGrantResponseValidationError is the validation error returned by
// AddProjectGrantResponse.Validate if the designated constraints aren't met.
type AddProjectGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectGrantResponseValidationError) ErrorName() string {
	return "AddProjectGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectGrantResponseValidationError{}

// Validate checks the field values on UpdateProjectGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateProjectGrantRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return UpdateProjectGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateProjectGrantRequestValidationError is the validation error returned by
// UpdateProjectGrantRequest.Validate if the designated constraints aren't met.
type UpdateProjectGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectGrantRequestValidationError) ErrorName() string {
	return "UpdateProjectGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectGrantRequestValidationError{}

// Validate checks the field values on UpdateProjectGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProjectGrantResponseValidationError is the validation error returned
// by UpdateProjectGrantResponse.Validate if the designated constraints aren't met.
type UpdateProjectGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectGrantResponseValidationError) ErrorName() string {
	return "UpdateProjectGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectGrantResponseValidationError{}

// Validate checks the field values on DeactivateProjectGrantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateProjectGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return DeactivateProjectGrantRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return DeactivateProjectGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateProjectGrantRequestValidationError is the validation error
// returned by DeactivateProjectGrantRequest.Validate if the designated
// constraints aren't met.
type DeactivateProjectGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateProjectGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateProjectGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateProjectGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateProjectGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateProjectGrantRequestValidationError) ErrorName() string {
	return "DeactivateProjectGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateProjectGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateProjectGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateProjectGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateProjectGrantRequestValidationError{}

// Validate checks the field values on DeactivateProjectGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateProjectGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateProjectGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateProjectGrantResponseValidationError is the validation error
// returned by DeactivateProjectGrantResponse.Validate if the designated
// constraints aren't met.
type DeactivateProjectGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateProjectGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateProjectGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateProjectGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateProjectGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateProjectGrantResponseValidationError) ErrorName() string {
	return "DeactivateProjectGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateProjectGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateProjectGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateProjectGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateProjectGrantResponseValidationError{}

// Validate checks the field values on ReactivateProjectGrantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateProjectGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ReactivateProjectGrantRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return ReactivateProjectGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateProjectGrantRequestValidationError is the validation error
// returned by ReactivateProjectGrantRequest.Validate if the designated
// constraints aren't met.
type ReactivateProjectGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateProjectGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateProjectGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateProjectGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateProjectGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateProjectGrantRequestValidationError) ErrorName() string {
	return "ReactivateProjectGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateProjectGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateProjectGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateProjectGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateProjectGrantRequestValidationError{}

// Validate checks the field values on ReactivateProjectGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateProjectGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateProjectGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateProjectGrantResponseValidationError is the validation error
// returned by ReactivateProjectGrantResponse.Validate if the designated
// constraints aren't met.
type ReactivateProjectGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateProjectGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateProjectGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateProjectGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateProjectGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateProjectGrantResponseValidationError) ErrorName() string {
	return "ReactivateProjectGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateProjectGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateProjectGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateProjectGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateProjectGrantResponseValidationError{}

// Validate checks the field values on RemoveProjectGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RemoveProjectGrantRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return RemoveProjectGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveProjectGrantRequestValidationError is the validation error returned by
// RemoveProjectGrantRequest.Validate if the designated constraints aren't met.
type RemoveProjectGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectGrantRequestValidationError) ErrorName() string {
	return "RemoveProjectGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectGrantRequestValidationError{}

// Validate checks the field values on RemoveProjectGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProjectGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveProjectGrantResponseValidationError is the validation error returned
// by RemoveProjectGrantResponse.Validate if the designated constraints aren't met.
type RemoveProjectGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectGrantResponseValidationError) ErrorName() string {
	return "RemoveProjectGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectGrantResponseValidationError{}

// Validate checks the field values on ListProjectGrantMemberRolesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProjectGrantMemberRolesRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantMemberRolesRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProjectGrantMemberRolesRequestValidationError is the validation error
// returned by ListProjectGrantMemberRolesRequest.Validate if the designated
// constraints aren't met.
type ListProjectGrantMemberRolesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantMemberRolesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantMemberRolesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantMemberRolesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantMemberRolesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantMemberRolesRequestValidationError) ErrorName() string {
	return "ListProjectGrantMemberRolesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantMemberRolesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantMemberRolesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantMemberRolesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantMemberRolesRequestValidationError{}

// Validate checks the field values on ListProjectGrantMemberRolesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListProjectGrantMemberRolesResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantMemberRolesResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListProjectGrantMemberRolesResponseValidationError is the validation error
// returned by ListProjectGrantMemberRolesResponse.Validate if the designated
// constraints aren't met.
type ListProjectGrantMemberRolesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantMemberRolesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantMemberRolesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantMemberRolesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantMemberRolesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantMemberRolesResponseValidationError) ErrorName() string {
	return "ListProjectGrantMemberRolesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantMemberRolesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantMemberRolesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantMemberRolesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantMemberRolesResponseValidationError{}

// Validate checks the field values on ListProjectGrantMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectGrantMembersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return ListProjectGrantMembersRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return ListProjectGrantMembersRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantMembersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGrantMembersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectGrantMembersRequestValidationError is the validation error
// returned by ListProjectGrantMembersRequest.Validate if the designated
// constraints aren't met.
type ListProjectGrantMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantMembersRequestValidationError) ErrorName() string {
	return "ListProjectGrantMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantMembersRequestValidationError{}

// Validate checks the field values on ListProjectGrantMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProjectGrantMembersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProjectGrantMembersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectGrantMembersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProjectGrantMembersResponseValidationError is the validation error
// returned by ListProjectGrantMembersResponse.Validate if the designated
// constraints aren't met.
type ListProjectGrantMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectGrantMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectGrantMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectGrantMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectGrantMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectGrantMembersResponseValidationError) ErrorName() string {
	return "ListProjectGrantMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectGrantMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectGrantMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectGrantMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectGrantMembersResponseValidationError{}

// Validate checks the field values on AddProjectGrantMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectGrantMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddProjectGrantMemberRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return AddProjectGrantMemberRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return AddProjectGrantMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// AddProjectGrantMemberRequestValidationError is the validation error returned
// by AddProjectGrantMemberRequest.Validate if the designated constraints
// aren't met.
type AddProjectGrantMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectGrantMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectGrantMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectGrantMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectGrantMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectGrantMemberRequestValidationError) ErrorName() string {
	return "AddProjectGrantMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectGrantMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectGrantMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectGrantMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectGrantMemberRequestValidationError{}

// Validate checks the field values on AddProjectGrantMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddProjectGrantMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddProjectGrantMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddProjectGrantMemberResponseValidationError is the validation error
// returned by AddProjectGrantMemberResponse.Validate if the designated
// constraints aren't met.
type AddProjectGrantMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectGrantMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectGrantMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectGrantMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectGrantMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectGrantMemberResponseValidationError) ErrorName() string {
	return "AddProjectGrantMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectGrantMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectGrantMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectGrantMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectGrantMemberResponseValidationError{}

// Validate checks the field values on UpdateProjectGrantMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateProjectGrantMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return UpdateProjectGrantMemberRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return UpdateProjectGrantMemberRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateProjectGrantMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateProjectGrantMemberRequestValidationError is the validation error
// returned by UpdateProjectGrantMemberRequest.Validate if the designated
// constraints aren't met.
type UpdateProjectGrantMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectGrantMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectGrantMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectGrantMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectGrantMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectGrantMemberRequestValidationError) ErrorName() string {
	return "UpdateProjectGrantMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectGrantMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectGrantMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectGrantMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectGrantMemberRequestValidationError{}

// Validate checks the field values on UpdateProjectGrantMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateProjectGrantMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectGrantMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateProjectGrantMemberResponseValidationError is the validation error
// returned by UpdateProjectGrantMemberResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectGrantMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectGrantMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectGrantMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectGrantMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectGrantMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectGrantMemberResponseValidationError) ErrorName() string {
	return "UpdateProjectGrantMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectGrantMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectGrantMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectGrantMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectGrantMemberResponseValidationError{}

// Validate checks the field values on RemoveProjectGrantMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveProjectGrantMemberRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return RemoveProjectGrantMemberRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return RemoveProjectGrantMemberRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveProjectGrantMemberRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveProjectGrantMemberRequestValidationError is the validation error
// returned by RemoveProjectGrantMemberRequest.Validate if the designated
// constraints aren't met.
type RemoveProjectGrantMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectGrantMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectGrantMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectGrantMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectGrantMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectGrantMemberRequestValidationError) ErrorName() string {
	return "RemoveProjectGrantMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectGrantMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectGrantMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectGrantMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectGrantMemberRequestValidationError{}

// Validate checks the field values on RemoveProjectGrantMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveProjectGrantMemberResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveProjectGrantMemberResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveProjectGrantMemberResponseValidationError is the validation error
// returned by RemoveProjectGrantMemberResponse.Validate if the designated
// constraints aren't met.
type RemoveProjectGrantMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectGrantMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectGrantMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectGrantMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectGrantMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectGrantMemberResponseValidationError) ErrorName() string {
	return "RemoveProjectGrantMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectGrantMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectGrantMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectGrantMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectGrantMemberResponseValidationError{}

// Validate checks the field values on GetUserGrantByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserGrantByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return GetUserGrantByIDRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return GetUserGrantByIDRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetUserGrantByIDRequestValidationError is the validation error returned by
// GetUserGrantByIDRequest.Validate if the designated constraints aren't met.
type GetUserGrantByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserGrantByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserGrantByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserGrantByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserGrantByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserGrantByIDRequestValidationError) ErrorName() string {
	return "GetUserGrantByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserGrantByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserGrantByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserGrantByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserGrantByIDRequestValidationError{}

// Validate checks the field values on GetUserGrantByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetUserGrantByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetUserGrant()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserGrantByIDResponseValidationError{
				field:  "UserGrant",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetUserGrantByIDResponseValidationError is the validation error returned by
// GetUserGrantByIDResponse.Validate if the designated constraints aren't met.
type GetUserGrantByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserGrantByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserGrantByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserGrantByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserGrantByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserGrantByIDResponseValidationError) ErrorName() string {
	return "GetUserGrantByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserGrantByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserGrantByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserGrantByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserGrantByIDResponseValidationError{}

// Validate checks the field values on ListUserGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserGrantRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGrantRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserGrantRequestValidationError is the validation error returned by
// ListUserGrantRequest.Validate if the designated constraints aren't met.
type ListUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGrantRequestValidationError) ErrorName() string {
	return "ListUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGrantRequestValidationError{}

// Validate checks the field values on ListUserGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListUserGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListUserGrantResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListUserGrantResponseValidationError is the validation error returned by
// ListUserGrantResponse.Validate if the designated constraints aren't met.
type ListUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListUserGrantResponseValidationError) ErrorName() string {
	return "ListUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListUserGrantResponseValidationError{}

// Validate checks the field values on AddUserGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return AddUserGrantRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetProjectId()); l < 1 || l > 200 {
		return AddUserGrantRequestValidationError{
			field:  "ProjectId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetProjectGrantId()) > 200 {
		return AddUserGrantRequestValidationError{
			field:  "ProjectGrantId",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// AddUserGrantRequestValidationError is the validation error returned by
// AddUserGrantRequest.Validate if the designated constraints aren't met.
type AddUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserGrantRequestValidationError) ErrorName() string {
	return "AddUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserGrantRequestValidationError{}

// Validate checks the field values on AddUserGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for UserGrantId

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddUserGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddUserGrantResponseValidationError is the validation error returned by
// AddUserGrantResponse.Validate if the designated constraints aren't met.
type AddUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddUserGrantResponseValidationError) ErrorName() string {
	return "AddUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddUserGrantResponseValidationError{}

// Validate checks the field values on UpdateUserGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return UpdateUserGrantRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return UpdateUserGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateUserGrantRequestValidationError is the validation error returned by
// UpdateUserGrantRequest.Validate if the designated constraints aren't met.
type UpdateUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserGrantRequestValidationError) ErrorName() string {
	return "UpdateUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserGrantRequestValidationError{}

// Validate checks the field values on UpdateUserGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateUserGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateUserGrantResponseValidationError is the validation error returned by
// UpdateUserGrantResponse.Validate if the designated constraints aren't met.
type UpdateUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateUserGrantResponseValidationError) ErrorName() string {
	return "UpdateUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateUserGrantResponseValidationError{}

// Validate checks the field values on DeactivateUserGrantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return DeactivateUserGrantRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return DeactivateUserGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateUserGrantRequestValidationError is the validation error returned
// by DeactivateUserGrantRequest.Validate if the designated constraints aren't met.
type DeactivateUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateUserGrantRequestValidationError) ErrorName() string {
	return "DeactivateUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateUserGrantRequestValidationError{}

// Validate checks the field values on DeactivateUserGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateUserGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateUserGrantResponseValidationError is the validation error returned
// by DeactivateUserGrantResponse.Validate if the designated constraints
// aren't met.
type DeactivateUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateUserGrantResponseValidationError) ErrorName() string {
	return "DeactivateUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateUserGrantResponseValidationError{}

// Validate checks the field values on ReactivateUserGrantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return ReactivateUserGrantRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return ReactivateUserGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateUserGrantRequestValidationError is the validation error returned
// by ReactivateUserGrantRequest.Validate if the designated constraints aren't met.
type ReactivateUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateUserGrantRequestValidationError) ErrorName() string {
	return "ReactivateUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateUserGrantRequestValidationError{}

// Validate checks the field values on ReactivateUserGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateUserGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateUserGrantResponseValidationError is the validation error returned
// by ReactivateUserGrantResponse.Validate if the designated constraints
// aren't met.
type ReactivateUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateUserGrantResponseValidationError) ErrorName() string {
	return "ReactivateUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateUserGrantResponseValidationError{}

// Validate checks the field values on RemoveUserGrantRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetUserId()); l < 1 || l > 200 {
		return RemoveUserGrantRequestValidationError{
			field:  "UserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetGrantId()); l < 1 || l > 200 {
		return RemoveUserGrantRequestValidationError{
			field:  "GrantId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveUserGrantRequestValidationError is the validation error returned by
// RemoveUserGrantRequest.Validate if the designated constraints aren't met.
type RemoveUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserGrantRequestValidationError) ErrorName() string {
	return "RemoveUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserGrantRequestValidationError{}

// Validate checks the field values on RemoveUserGrantResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveUserGrantResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveUserGrantResponseValidationError is the validation error returned by
// RemoveUserGrantResponse.Validate if the designated constraints aren't met.
type RemoveUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveUserGrantResponseValidationError) ErrorName() string {
	return "RemoveUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveUserGrantResponseValidationError{}

// Validate checks the field values on BulkRemoveUserGrantRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveUserGrantRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BulkRemoveUserGrantRequestValidationError is the validation error returned
// by BulkRemoveUserGrantRequest.Validate if the designated constraints aren't met.
type BulkRemoveUserGrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveUserGrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveUserGrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveUserGrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveUserGrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveUserGrantRequestValidationError) ErrorName() string {
	return "BulkRemoveUserGrantRequestValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveUserGrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveUserGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveUserGrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveUserGrantRequestValidationError{}

// Validate checks the field values on BulkRemoveUserGrantResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkRemoveUserGrantResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// BulkRemoveUserGrantResponseValidationError is the validation error returned
// by BulkRemoveUserGrantResponse.Validate if the designated constraints
// aren't met.
type BulkRemoveUserGrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkRemoveUserGrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkRemoveUserGrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkRemoveUserGrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkRemoveUserGrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkRemoveUserGrantResponseValidationError) ErrorName() string {
	return "BulkRemoveUserGrantResponseValidationError"
}

// Error satisfies the builtin error interface
func (e BulkRemoveUserGrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkRemoveUserGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkRemoveUserGrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkRemoveUserGrantResponseValidationError{}

// Validate checks the field values on GetOrgIAMPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgIAMPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetOrgIAMPolicyRequestValidationError is the validation error returned by
// GetOrgIAMPolicyRequest.Validate if the designated constraints aren't met.
type GetOrgIAMPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgIAMPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgIAMPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgIAMPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgIAMPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgIAMPolicyRequestValidationError) ErrorName() string {
	return "GetOrgIAMPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgIAMPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgIAMPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgIAMPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgIAMPolicyRequestValidationError{}

// Validate checks the field values on GetOrgIAMPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgIAMPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgIAMPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOrgIAMPolicyResponseValidationError is the validation error returned by
// GetOrgIAMPolicyResponse.Validate if the designated constraints aren't met.
type GetOrgIAMPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgIAMPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgIAMPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgIAMPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgIAMPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgIAMPolicyResponseValidationError) ErrorName() string {
	return "GetOrgIAMPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgIAMPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgIAMPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgIAMPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgIAMPolicyResponseValidationError{}

// Validate checks the field values on GetDomainPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDomainPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDomainPolicyRequestValidationError is the validation error returned by
// GetDomainPolicyRequest.Validate if the designated constraints aren't met.
type GetDomainPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainPolicyRequestValidationError) ErrorName() string {
	return "GetDomainPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainPolicyRequestValidationError{}

// Validate checks the field values on GetDomainPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDomainPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDomainPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDomainPolicyResponseValidationError is the validation error returned by
// GetDomainPolicyResponse.Validate if the designated constraints aren't met.
type GetDomainPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDomainPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDomainPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDomainPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDomainPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDomainPolicyResponseValidationError) ErrorName() string {
	return "GetDomainPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDomainPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDomainPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDomainPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDomainPolicyResponseValidationError{}

// Validate checks the field values on GetLoginPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLoginPolicyRequestValidationError is the validation error returned by
// GetLoginPolicyRequest.Validate if the designated constraints aren't met.
type GetLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginPolicyRequestValidationError) ErrorName() string {
	return "GetLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginPolicyRequestValidationError{}

// Validate checks the field values on GetLoginPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLoginPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetLoginPolicyResponseValidationError is the validation error returned by
// GetLoginPolicyResponse.Validate if the designated constraints aren't met.
type GetLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLoginPolicyResponseValidationError) ErrorName() string {
	return "GetLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLoginPolicyResponseValidationError{}

// Validate checks the field values on GetDefaultLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultLoginPolicyRequestValidationError is the validation error returned
// by GetDefaultLoginPolicyRequest.Validate if the designated constraints
// aren't met.
type GetDefaultLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLoginPolicyRequestValidationError) ErrorName() string {
	return "GetDefaultLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLoginPolicyRequestValidationError{}

// Validate checks the field values on GetDefaultLoginPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultLoginPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultLoginPolicyResponseValidationError is the validation error
// returned by GetDefaultLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type GetDefaultLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLoginPolicyResponseValidationError) ErrorName() string {
	return "GetDefaultLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLoginPolicyResponseValidationError{}

// Validate checks the field values on AddCustomLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllowUsernamePassword

	// no validation rules for AllowRegister

	// no validation rules for AllowExternalIdp

	// no validation rules for ForceMfa

	if _, ok := policy.PasswordlessType_name[int32(m.GetPasswordlessType())]; !ok {
		return AddCustomLoginPolicyRequestValidationError{
			field:  "PasswordlessType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for HidePasswordReset

	// no validation rules for IgnoreUnknownUsernames

	// no validation rules for DefaultRedirectUri

	if v, ok := interface{}(m.GetPasswordCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLoginPolicyRequestValidationError{
				field:  "PasswordCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalLoginCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLoginPolicyRequestValidationError{
				field:  "ExternalLoginCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMfaInitSkipLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLoginPolicyRequestValidationError{
				field:  "MfaInitSkipLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecondFactorCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLoginPolicyRequestValidationError{
				field:  "SecondFactorCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMultiFactorCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLoginPolicyRequestValidationError{
				field:  "MultiFactorCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetIdps() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AddCustomLoginPolicyRequestValidationError{
					field:  fmt.Sprintf("Idps[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for AllowDomainDiscovery

	// no validation rules for DisableLoginWithEmail

	// no validation rules for DisableLoginWithPhone

	return nil
}

// AddCustomLoginPolicyRequestValidationError is the validation error returned
// by AddCustomLoginPolicyRequest.Validate if the designated constraints
// aren't met.
type AddCustomLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLoginPolicyRequestValidationError) ErrorName() string {
	return "AddCustomLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLoginPolicyRequestValidationError{}

// Validate checks the field values on AddCustomLoginPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomLoginPolicyResponseValidationError is the validation error returned
// by AddCustomLoginPolicyResponse.Validate if the designated constraints
// aren't met.
type AddCustomLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLoginPolicyResponseValidationError) ErrorName() string {
	return "AddCustomLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLoginPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for AllowUsernamePassword

	// no validation rules for AllowRegister

	// no validation rules for AllowExternalIdp

	// no validation rules for ForceMfa

	if _, ok := policy.PasswordlessType_name[int32(m.GetPasswordlessType())]; !ok {
		return UpdateCustomLoginPolicyRequestValidationError{
			field:  "PasswordlessType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for HidePasswordReset

	// no validation rules for IgnoreUnknownUsernames

	// no validation rules for DefaultRedirectUri

	if v, ok := interface{}(m.GetPasswordCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLoginPolicyRequestValidationError{
				field:  "PasswordCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalLoginCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLoginPolicyRequestValidationError{
				field:  "ExternalLoginCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMfaInitSkipLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLoginPolicyRequestValidationError{
				field:  "MfaInitSkipLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSecondFactorCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLoginPolicyRequestValidationError{
				field:  "SecondFactorCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMultiFactorCheckLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLoginPolicyRequestValidationError{
				field:  "MultiFactorCheckLifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AllowDomainDiscovery

	// no validation rules for DisableLoginWithEmail

	// no validation rules for DisableLoginWithPhone

	return nil
}

// UpdateCustomLoginPolicyRequestValidationError is the validation error
// returned by UpdateCustomLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomLoginPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomLoginPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomLoginPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomLoginPolicyResponseValidationError is the validation error
// returned by UpdateCustomLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomLoginPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomLoginPolicyResponseValidationError{}

// Validate checks the field values on ResetLoginPolicyToDefaultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetLoginPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetLoginPolicyToDefaultRequestValidationError is the validation error
// returned by ResetLoginPolicyToDefaultRequest.Validate if the designated
// constraints aren't met.
type ResetLoginPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetLoginPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetLoginPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetLoginPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetLoginPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetLoginPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetLoginPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetLoginPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetLoginPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetLoginPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetLoginPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetLoginPolicyToDefaultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetLoginPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetLoginPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetLoginPolicyToDefaultResponseValidationError is the validation error
// returned by ResetLoginPolicyToDefaultResponse.Validate if the designated
// constraints aren't met.
type ResetLoginPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetLoginPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetLoginPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetLoginPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetLoginPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetLoginPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetLoginPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetLoginPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetLoginPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetLoginPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetLoginPolicyToDefaultResponseValidationError{}

// Validate checks the field values on ListLoginPolicyIDPsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoginPolicyIDPsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicyIDPsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLoginPolicyIDPsRequestValidationError is the validation error returned
// by ListLoginPolicyIDPsRequest.Validate if the designated constraints aren't met.
type ListLoginPolicyIDPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyIDPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyIDPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyIDPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyIDPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyIDPsRequestValidationError) ErrorName() string {
	return "ListLoginPolicyIDPsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyIDPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyIDPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyIDPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyIDPsRequestValidationError{}

// Validate checks the field values on ListLoginPolicyIDPsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListLoginPolicyIDPsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicyIDPsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLoginPolicyIDPsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListLoginPolicyIDPsResponseValidationError is the validation error returned
// by ListLoginPolicyIDPsResponse.Validate if the designated constraints
// aren't met.
type ListLoginPolicyIDPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyIDPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyIDPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyIDPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyIDPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyIDPsResponseValidationError) ErrorName() string {
	return "ListLoginPolicyIDPsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyIDPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyIDPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyIDPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyIDPsResponseValidationError{}

// Validate checks the field values on AddIDPToLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddIDPToLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return AddIDPToLoginPolicyRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := _AddIDPToLoginPolicyRequest_OwnerType_NotInLookup[m.GetOwnerType()]; ok {
		return AddIDPToLoginPolicyRequestValidationError{
			field:  "OwnerType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := idp.IDPOwnerType_name[int32(m.GetOwnerType())]; !ok {
		return AddIDPToLoginPolicyRequestValidationError{
			field:  "OwnerType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddIDPToLoginPolicyRequestValidationError is the validation error returned
// by AddIDPToLoginPolicyRequest.Validate if the designated constraints aren't met.
type AddIDPToLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIDPToLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIDPToLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIDPToLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIDPToLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIDPToLoginPolicyRequestValidationError) ErrorName() string {
	return "AddIDPToLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddIDPToLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIDPToLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIDPToLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIDPToLoginPolicyRequestValidationError{}

var _AddIDPToLoginPolicyRequest_OwnerType_NotInLookup = map[idp.IDPOwnerType]struct{}{
	0: {},
}

// Validate checks the field values on AddIDPToLoginPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddIDPToLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddIDPToLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddIDPToLoginPolicyResponseValidationError is the validation error returned
// by AddIDPToLoginPolicyResponse.Validate if the designated constraints
// aren't met.
type AddIDPToLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddIDPToLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddIDPToLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddIDPToLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddIDPToLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddIDPToLoginPolicyResponseValidationError) ErrorName() string {
	return "AddIDPToLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddIDPToLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddIDPToLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddIDPToLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddIDPToLoginPolicyResponseValidationError{}

// Validate checks the field values on RemoveIDPFromLoginPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveIDPFromLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return RemoveIDPFromLoginPolicyRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveIDPFromLoginPolicyRequestValidationError is the validation error
// returned by RemoveIDPFromLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type RemoveIDPFromLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIDPFromLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIDPFromLoginPolicyRequestValidationError) ErrorName() string {
	return "RemoveIDPFromLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIDPFromLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIDPFromLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIDPFromLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIDPFromLoginPolicyRequestValidationError{}

// Validate checks the field values on RemoveIDPFromLoginPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveIDPFromLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveIDPFromLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveIDPFromLoginPolicyResponseValidationError is the validation error
// returned by RemoveIDPFromLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type RemoveIDPFromLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveIDPFromLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveIDPFromLoginPolicyResponseValidationError) ErrorName() string {
	return "RemoveIDPFromLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveIDPFromLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveIDPFromLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveIDPFromLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveIDPFromLoginPolicyResponseValidationError{}

// Validate checks the field values on ListLoginPolicySecondFactorsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListLoginPolicySecondFactorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLoginPolicySecondFactorsRequestValidationError is the validation error
// returned by ListLoginPolicySecondFactorsRequest.Validate if the designated
// constraints aren't met.
type ListLoginPolicySecondFactorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicySecondFactorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicySecondFactorsRequestValidationError) ErrorName() string {
	return "ListLoginPolicySecondFactorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicySecondFactorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicySecondFactorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicySecondFactorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicySecondFactorsRequestValidationError{}

// Validate checks the field values on ListLoginPolicySecondFactorsResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ListLoginPolicySecondFactorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicySecondFactorsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLoginPolicySecondFactorsResponseValidationError is the validation error
// returned by ListLoginPolicySecondFactorsResponse.Validate if the designated
// constraints aren't met.
type ListLoginPolicySecondFactorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicySecondFactorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicySecondFactorsResponseValidationError) ErrorName() string {
	return "ListLoginPolicySecondFactorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicySecondFactorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicySecondFactorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicySecondFactorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicySecondFactorsResponseValidationError{}

// Validate checks the field values on AddSecondFactorToLoginPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddSecondFactorToLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AddSecondFactorToLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return AddSecondFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.SecondFactorType_name[int32(m.GetType())]; !ok {
		return AddSecondFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddSecondFactorToLoginPolicyRequestValidationError is the validation error
// returned by AddSecondFactorToLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type AddSecondFactorToLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSecondFactorToLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSecondFactorToLoginPolicyRequestValidationError) ErrorName() string {
	return "AddSecondFactorToLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddSecondFactorToLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSecondFactorToLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSecondFactorToLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSecondFactorToLoginPolicyRequestValidationError{}

var _AddSecondFactorToLoginPolicyRequest_Type_NotInLookup = map[policy.SecondFactorType]struct{}{
	0: {},
}

// Validate checks the field values on AddSecondFactorToLoginPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *AddSecondFactorToLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddSecondFactorToLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddSecondFactorToLoginPolicyResponseValidationError is the validation error
// returned by AddSecondFactorToLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type AddSecondFactorToLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddSecondFactorToLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddSecondFactorToLoginPolicyResponseValidationError) ErrorName() string {
	return "AddSecondFactorToLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddSecondFactorToLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddSecondFactorToLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddSecondFactorToLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddSecondFactorToLoginPolicyResponseValidationError{}

// Validate checks the field values on RemoveSecondFactorFromLoginPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveSecondFactorFromLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RemoveSecondFactorFromLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return RemoveSecondFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.SecondFactorType_name[int32(m.GetType())]; !ok {
		return RemoveSecondFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// RemoveSecondFactorFromLoginPolicyRequestValidationError is the validation
// error returned by RemoveSecondFactorFromLoginPolicyRequest.Validate if the
// designated constraints aren't met.
type RemoveSecondFactorFromLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) ErrorName() string {
	return "RemoveSecondFactorFromLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSecondFactorFromLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSecondFactorFromLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSecondFactorFromLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSecondFactorFromLoginPolicyRequestValidationError{}

var _RemoveSecondFactorFromLoginPolicyRequest_Type_NotInLookup = map[policy.SecondFactorType]struct{}{
	0: {},
}

// Validate checks the field values on
// RemoveSecondFactorFromLoginPolicyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *RemoveSecondFactorFromLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveSecondFactorFromLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveSecondFactorFromLoginPolicyResponseValidationError is the validation
// error returned by RemoveSecondFactorFromLoginPolicyResponse.Validate if the
// designated constraints aren't met.
type RemoveSecondFactorFromLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) ErrorName() string {
	return "RemoveSecondFactorFromLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveSecondFactorFromLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveSecondFactorFromLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveSecondFactorFromLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveSecondFactorFromLoginPolicyResponseValidationError{}

// Validate checks the field values on ListLoginPolicyMultiFactorsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListLoginPolicyMultiFactorsRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListLoginPolicyMultiFactorsRequestValidationError is the validation error
// returned by ListLoginPolicyMultiFactorsRequest.Validate if the designated
// constraints aren't met.
type ListLoginPolicyMultiFactorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyMultiFactorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyMultiFactorsRequestValidationError) ErrorName() string {
	return "ListLoginPolicyMultiFactorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyMultiFactorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyMultiFactorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyMultiFactorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyMultiFactorsRequestValidationError{}

// Validate checks the field values on ListLoginPolicyMultiFactorsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ListLoginPolicyMultiFactorsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListLoginPolicyMultiFactorsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ListLoginPolicyMultiFactorsResponseValidationError is the validation error
// returned by ListLoginPolicyMultiFactorsResponse.Validate if the designated
// constraints aren't met.
type ListLoginPolicyMultiFactorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLoginPolicyMultiFactorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLoginPolicyMultiFactorsResponseValidationError) ErrorName() string {
	return "ListLoginPolicyMultiFactorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListLoginPolicyMultiFactorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLoginPolicyMultiFactorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLoginPolicyMultiFactorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLoginPolicyMultiFactorsResponseValidationError{}

// Validate checks the field values on AddMultiFactorToLoginPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddMultiFactorToLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _AddMultiFactorToLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return AddMultiFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.MultiFactorType_name[int32(m.GetType())]; !ok {
		return AddMultiFactorToLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddMultiFactorToLoginPolicyRequestValidationError is the validation error
// returned by AddMultiFactorToLoginPolicyRequest.Validate if the designated
// constraints aren't met.
type AddMultiFactorToLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMultiFactorToLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMultiFactorToLoginPolicyRequestValidationError) ErrorName() string {
	return "AddMultiFactorToLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddMultiFactorToLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMultiFactorToLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMultiFactorToLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMultiFactorToLoginPolicyRequestValidationError{}

var _AddMultiFactorToLoginPolicyRequest_Type_NotInLookup = map[policy.MultiFactorType]struct{}{
	0: {},
}

// Validate checks the field values on AddMultiFactorToLoginPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddMultiFactorToLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddMultiFactorToLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddMultiFactorToLoginPolicyResponseValidationError is the validation error
// returned by AddMultiFactorToLoginPolicyResponse.Validate if the designated
// constraints aren't met.
type AddMultiFactorToLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddMultiFactorToLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddMultiFactorToLoginPolicyResponseValidationError) ErrorName() string {
	return "AddMultiFactorToLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddMultiFactorToLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddMultiFactorToLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddMultiFactorToLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddMultiFactorToLoginPolicyResponseValidationError{}

// Validate checks the field values on RemoveMultiFactorFromLoginPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveMultiFactorFromLoginPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if _, ok := _RemoveMultiFactorFromLoginPolicyRequest_Type_NotInLookup[m.GetType()]; ok {
		return RemoveMultiFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := policy.MultiFactorType_name[int32(m.GetType())]; !ok {
		return RemoveMultiFactorFromLoginPolicyRequestValidationError{
			field:  "Type",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// RemoveMultiFactorFromLoginPolicyRequestValidationError is the validation
// error returned by RemoveMultiFactorFromLoginPolicyRequest.Validate if the
// designated constraints aren't met.
type RemoveMultiFactorFromLoginPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) ErrorName() string {
	return "RemoveMultiFactorFromLoginPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMultiFactorFromLoginPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMultiFactorFromLoginPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMultiFactorFromLoginPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMultiFactorFromLoginPolicyRequestValidationError{}

var _RemoveMultiFactorFromLoginPolicyRequest_Type_NotInLookup = map[policy.MultiFactorType]struct{}{
	0: {},
}

// Validate checks the field values on RemoveMultiFactorFromLoginPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveMultiFactorFromLoginPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveMultiFactorFromLoginPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveMultiFactorFromLoginPolicyResponseValidationError is the validation
// error returned by RemoveMultiFactorFromLoginPolicyResponse.Validate if the
// designated constraints aren't met.
type RemoveMultiFactorFromLoginPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) ErrorName() string {
	return "RemoveMultiFactorFromLoginPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMultiFactorFromLoginPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMultiFactorFromLoginPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMultiFactorFromLoginPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMultiFactorFromLoginPolicyResponseValidationError{}

// Validate checks the field values on GetPasswordComplexityPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPasswordComplexityPolicyRequestValidationError is the validation error
// returned by GetPasswordComplexityPolicyRequest.Validate if the designated
// constraints aren't met.
type GetPasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "GetPasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on GetPasswordComplexityPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetPasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPasswordComplexityPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetPasswordComplexityPolicyResponseValidationError is the validation error
// returned by GetPasswordComplexityPolicyResponse.Validate if the designated
// constraints aren't met.
type GetPasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "GetPasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordComplexityPolicyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultPasswordComplexityPolicyRequestValidationError is the validation
// error returned by GetDefaultPasswordComplexityPolicyRequest.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordComplexityPolicyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordComplexityPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordComplexityPolicyResponseValidationError is the validation
// error returned by GetDefaultPasswordComplexityPolicyResponse.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on AddCustomPasswordComplexityPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *AddCustomPasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinLength

	// no validation rules for HasUppercase

	// no validation rules for HasLowercase

	// no validation rules for HasNumber

	// no validation rules for HasSymbol

	return nil
}

// AddCustomPasswordComplexityPolicyRequestValidationError is the validation
// error returned by AddCustomPasswordComplexityPolicyRequest.Validate if the
// designated constraints aren't met.
type AddCustomPasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomPasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomPasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomPasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomPasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomPasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "AddCustomPasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomPasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomPasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomPasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomPasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on
// AddCustomPasswordComplexityPolicyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *AddCustomPasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomPasswordComplexityPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomPasswordComplexityPolicyResponseValidationError is the validation
// error returned by AddCustomPasswordComplexityPolicyResponse.Validate if the
// designated constraints aren't met.
type AddCustomPasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomPasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomPasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomPasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomPasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomPasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "AddCustomPasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomPasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomPasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomPasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomPasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on
// UpdateCustomPasswordComplexityPolicyRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateCustomPasswordComplexityPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MinLength

	// no validation rules for HasUppercase

	// no validation rules for HasLowercase

	// no validation rules for HasNumber

	// no validation rules for HasSymbol

	return nil
}

// UpdateCustomPasswordComplexityPolicyRequestValidationError is the validation
// error returned by UpdateCustomPasswordComplexityPolicyRequest.Validate if
// the designated constraints aren't met.
type UpdateCustomPasswordComplexityPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomPasswordComplexityPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomPasswordComplexityPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomPasswordComplexityPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomPasswordComplexityPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomPasswordComplexityPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomPasswordComplexityPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomPasswordComplexityPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomPasswordComplexityPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomPasswordComplexityPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomPasswordComplexityPolicyRequestValidationError{}

// Validate checks the field values on
// UpdateCustomPasswordComplexityPolicyResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *UpdateCustomPasswordComplexityPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomPasswordComplexityPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomPasswordComplexityPolicyResponseValidationError is the
// validation error returned by
// UpdateCustomPasswordComplexityPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomPasswordComplexityPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomPasswordComplexityPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomPasswordComplexityPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomPasswordComplexityPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomPasswordComplexityPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomPasswordComplexityPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomPasswordComplexityPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomPasswordComplexityPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomPasswordComplexityPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomPasswordComplexityPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomPasswordComplexityPolicyResponseValidationError{}

// Validate checks the field values on
// ResetPasswordComplexityPolicyToDefaultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ResetPasswordComplexityPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetPasswordComplexityPolicyToDefaultRequestValidationError is the
// validation error returned by
// ResetPasswordComplexityPolicyToDefaultRequest.Validate if the designated
// constraints aren't met.
type ResetPasswordComplexityPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordComplexityPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordComplexityPolicyToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetPasswordComplexityPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordComplexityPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordComplexityPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetPasswordComplexityPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordComplexityPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordComplexityPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordComplexityPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordComplexityPolicyToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetPasswordComplexityPolicyToDefaultResponse with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetPasswordComplexityPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordComplexityPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetPasswordComplexityPolicyToDefaultResponseValidationError is the
// validation error returned by
// ResetPasswordComplexityPolicyToDefaultResponse.Validate if the designated
// constraints aren't met.
type ResetPasswordComplexityPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordComplexityPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordComplexityPolicyToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetPasswordComplexityPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordComplexityPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordComplexityPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetPasswordComplexityPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordComplexityPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordComplexityPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordComplexityPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordComplexityPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetPasswordAgePolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPasswordAgePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPasswordAgePolicyRequestValidationError is the validation error returned
// by GetPasswordAgePolicyRequest.Validate if the designated constraints
// aren't met.
type GetPasswordAgePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordAgePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordAgePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordAgePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordAgePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordAgePolicyRequestValidationError) ErrorName() string {
	return "GetPasswordAgePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordAgePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordAgePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordAgePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordAgePolicyRequestValidationError{}

// Validate checks the field values on GetPasswordAgePolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPasswordAgePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPasswordAgePolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetPasswordAgePolicyResponseValidationError is the validation error returned
// by GetPasswordAgePolicyResponse.Validate if the designated constraints
// aren't met.
type GetPasswordAgePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPasswordAgePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPasswordAgePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPasswordAgePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPasswordAgePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPasswordAgePolicyResponseValidationError) ErrorName() string {
	return "GetPasswordAgePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPasswordAgePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPasswordAgePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPasswordAgePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPasswordAgePolicyResponseValidationError{}

// Validate checks the field values on GetDefaultPasswordAgePolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultPasswordAgePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultPasswordAgePolicyRequestValidationError is the validation error
// returned by GetDefaultPasswordAgePolicyRequest.Validate if the designated
// constraints aren't met.
type GetDefaultPasswordAgePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordAgePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordAgePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordAgePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordAgePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordAgePolicyRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordAgePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordAgePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordAgePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordAgePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordAgePolicyRequestValidationError{}

// Validate checks the field values on GetDefaultPasswordAgePolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultPasswordAgePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordAgePolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordAgePolicyResponseValidationError is the validation error
// returned by GetDefaultPasswordAgePolicyResponse.Validate if the designated
// constraints aren't met.
type GetDefaultPasswordAgePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordAgePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordAgePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordAgePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordAgePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordAgePolicyResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordAgePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordAgePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordAgePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordAgePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordAgePolicyResponseValidationError{}

// Validate checks the field values on AddCustomPasswordAgePolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddCustomPasswordAgePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxAgeDays

	// no validation rules for ExpireWarnDays

	return nil
}

// AddCustomPasswordAgePolicyRequestValidationError is the validation error
// returned by AddCustomPasswordAgePolicyRequest.Validate if the designated
// constraints aren't met.
type AddCustomPasswordAgePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomPasswordAgePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomPasswordAgePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomPasswordAgePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomPasswordAgePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomPasswordAgePolicyRequestValidationError) ErrorName() string {
	return "AddCustomPasswordAgePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomPasswordAgePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomPasswordAgePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomPasswordAgePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomPasswordAgePolicyRequestValidationError{}

// Validate checks the field values on AddCustomPasswordAgePolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddCustomPasswordAgePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomPasswordAgePolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomPasswordAgePolicyResponseValidationError is the validation error
// returned by AddCustomPasswordAgePolicyResponse.Validate if the designated
// constraints aren't met.
type AddCustomPasswordAgePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomPasswordAgePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomPasswordAgePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomPasswordAgePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomPasswordAgePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomPasswordAgePolicyResponseValidationError) ErrorName() string {
	return "AddCustomPasswordAgePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomPasswordAgePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomPasswordAgePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomPasswordAgePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomPasswordAgePolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomPasswordAgePolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateCustomPasswordAgePolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxAgeDays

	// no validation rules for ExpireWarnDays

	return nil
}

// UpdateCustomPasswordAgePolicyRequestValidationError is the validation error
// returned by UpdateCustomPasswordAgePolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomPasswordAgePolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomPasswordAgePolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomPasswordAgePolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomPasswordAgePolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomPasswordAgePolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomPasswordAgePolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomPasswordAgePolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomPasswordAgePolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomPasswordAgePolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomPasswordAgePolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomPasswordAgePolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomPasswordAgePolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateCustomPasswordAgePolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomPasswordAgePolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomPasswordAgePolicyResponseValidationError is the validation error
// returned by UpdateCustomPasswordAgePolicyResponse.Validate if the
// designated constraints aren't met.
type UpdateCustomPasswordAgePolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomPasswordAgePolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomPasswordAgePolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomPasswordAgePolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomPasswordAgePolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomPasswordAgePolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomPasswordAgePolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomPasswordAgePolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomPasswordAgePolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomPasswordAgePolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomPasswordAgePolicyResponseValidationError{}

// Validate checks the field values on ResetPasswordAgePolicyToDefaultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetPasswordAgePolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetPasswordAgePolicyToDefaultRequestValidationError is the validation
// error returned by ResetPasswordAgePolicyToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetPasswordAgePolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordAgePolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordAgePolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordAgePolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordAgePolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordAgePolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetPasswordAgePolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordAgePolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordAgePolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordAgePolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordAgePolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetPasswordAgePolicyToDefaultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetPasswordAgePolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPasswordAgePolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetPasswordAgePolicyToDefaultResponseValidationError is the validation
// error returned by ResetPasswordAgePolicyToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetPasswordAgePolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPasswordAgePolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPasswordAgePolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPasswordAgePolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPasswordAgePolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPasswordAgePolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetPasswordAgePolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPasswordAgePolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPasswordAgePolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPasswordAgePolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPasswordAgePolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetLockoutPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLockoutPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLockoutPolicyRequestValidationError is the validation error returned by
// GetLockoutPolicyRequest.Validate if the designated constraints aren't met.
type GetLockoutPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockoutPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockoutPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockoutPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockoutPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockoutPolicyRequestValidationError) ErrorName() string {
	return "GetLockoutPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLockoutPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockoutPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockoutPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockoutPolicyRequestValidationError{}

// Validate checks the field values on GetLockoutPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLockoutPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLockoutPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetLockoutPolicyResponseValidationError is the validation error returned by
// GetLockoutPolicyResponse.Validate if the designated constraints aren't met.
type GetLockoutPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLockoutPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLockoutPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLockoutPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLockoutPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLockoutPolicyResponseValidationError) ErrorName() string {
	return "GetLockoutPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLockoutPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLockoutPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLockoutPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLockoutPolicyResponseValidationError{}

// Validate checks the field values on GetDefaultLockoutPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLockoutPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultLockoutPolicyRequestValidationError is the validation error
// returned by GetDefaultLockoutPolicyRequest.Validate if the designated
// constraints aren't met.
type GetDefaultLockoutPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLockoutPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLockoutPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLockoutPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLockoutPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLockoutPolicyRequestValidationError) ErrorName() string {
	return "GetDefaultLockoutPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLockoutPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLockoutPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLockoutPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLockoutPolicyRequestValidationError{}

// Validate checks the field values on GetDefaultLockoutPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLockoutPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultLockoutPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultLockoutPolicyResponseValidationError is the validation error
// returned by GetDefaultLockoutPolicyResponse.Validate if the designated
// constraints aren't met.
type GetDefaultLockoutPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLockoutPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLockoutPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLockoutPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLockoutPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLockoutPolicyResponseValidationError) ErrorName() string {
	return "GetDefaultLockoutPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLockoutPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLockoutPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLockoutPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLockoutPolicyResponseValidationError{}

// Validate checks the field values on AddCustomLockoutPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLockoutPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxPasswordAttempts

	return nil
}

// AddCustomLockoutPolicyRequestValidationError is the validation error
// returned by AddCustomLockoutPolicyRequest.Validate if the designated
// constraints aren't met.
type AddCustomLockoutPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLockoutPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLockoutPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLockoutPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLockoutPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLockoutPolicyRequestValidationError) ErrorName() string {
	return "AddCustomLockoutPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLockoutPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLockoutPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLockoutPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLockoutPolicyRequestValidationError{}

// Validate checks the field values on AddCustomLockoutPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLockoutPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLockoutPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomLockoutPolicyResponseValidationError is the validation error
// returned by AddCustomLockoutPolicyResponse.Validate if the designated
// constraints aren't met.
type AddCustomLockoutPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLockoutPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLockoutPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLockoutPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLockoutPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLockoutPolicyResponseValidationError) ErrorName() string {
	return "AddCustomLockoutPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLockoutPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLockoutPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLockoutPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLockoutPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomLockoutPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateCustomLockoutPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MaxPasswordAttempts

	return nil
}

// UpdateCustomLockoutPolicyRequestValidationError is the validation error
// returned by UpdateCustomLockoutPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomLockoutPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomLockoutPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomLockoutPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomLockoutPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomLockoutPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomLockoutPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomLockoutPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomLockoutPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomLockoutPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomLockoutPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomLockoutPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomLockoutPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateCustomLockoutPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLockoutPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomLockoutPolicyResponseValidationError is the validation error
// returned by UpdateCustomLockoutPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomLockoutPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomLockoutPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomLockoutPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomLockoutPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomLockoutPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomLockoutPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomLockoutPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomLockoutPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomLockoutPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomLockoutPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomLockoutPolicyResponseValidationError{}

// Validate checks the field values on ResetLockoutPolicyToDefaultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetLockoutPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetLockoutPolicyToDefaultRequestValidationError is the validation error
// returned by ResetLockoutPolicyToDefaultRequest.Validate if the designated
// constraints aren't met.
type ResetLockoutPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetLockoutPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetLockoutPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetLockoutPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetLockoutPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetLockoutPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetLockoutPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetLockoutPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetLockoutPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetLockoutPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetLockoutPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetLockoutPolicyToDefaultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetLockoutPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetLockoutPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetLockoutPolicyToDefaultResponseValidationError is the validation error
// returned by ResetLockoutPolicyToDefaultResponse.Validate if the designated
// constraints aren't met.
type ResetLockoutPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetLockoutPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetLockoutPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetLockoutPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetLockoutPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetLockoutPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetLockoutPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetLockoutPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetLockoutPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetLockoutPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetLockoutPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetPrivacyPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPrivacyPolicyRequestValidationError is the validation error returned by
// GetPrivacyPolicyRequest.Validate if the designated constraints aren't met.
type GetPrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivacyPolicyRequestValidationError) ErrorName() string {
	return "GetPrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivacyPolicyRequestValidationError{}

// Validate checks the field values on GetPrivacyPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPrivacyPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetPrivacyPolicyResponseValidationError is the validation error returned by
// GetPrivacyPolicyResponse.Validate if the designated constraints aren't met.
type GetPrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPrivacyPolicyResponseValidationError) ErrorName() string {
	return "GetPrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPrivacyPolicyResponseValidationError{}

// Validate checks the field values on GetDefaultPrivacyPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultPrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultPrivacyPolicyRequestValidationError is the validation error
// returned by GetDefaultPrivacyPolicyRequest.Validate if the designated
// constraints aren't met.
type GetDefaultPrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPrivacyPolicyRequestValidationError) ErrorName() string {
	return "GetDefaultPrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPrivacyPolicyRequestValidationError{}

// Validate checks the field values on GetDefaultPrivacyPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultPrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPrivacyPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPrivacyPolicyResponseValidationError is the validation error
// returned by GetDefaultPrivacyPolicyResponse.Validate if the designated
// constraints aren't met.
type GetDefaultPrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPrivacyPolicyResponseValidationError) ErrorName() string {
	return "GetDefaultPrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPrivacyPolicyResponseValidationError{}

// Validate checks the field values on AddCustomPrivacyPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomPrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TosLink

	// no validation rules for PrivacyLink

	// no validation rules for HelpLink

	return nil
}

// AddCustomPrivacyPolicyRequestValidationError is the validation error
// returned by AddCustomPrivacyPolicyRequest.Validate if the designated
// constraints aren't met.
type AddCustomPrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomPrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomPrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomPrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomPrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomPrivacyPolicyRequestValidationError) ErrorName() string {
	return "AddCustomPrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomPrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomPrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomPrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomPrivacyPolicyRequestValidationError{}

// Validate checks the field values on AddCustomPrivacyPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomPrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomPrivacyPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomPrivacyPolicyResponseValidationError is the validation error
// returned by AddCustomPrivacyPolicyResponse.Validate if the designated
// constraints aren't met.
type AddCustomPrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomPrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomPrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomPrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomPrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomPrivacyPolicyResponseValidationError) ErrorName() string {
	return "AddCustomPrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomPrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomPrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomPrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomPrivacyPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomPrivacyPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateCustomPrivacyPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for TosLink

	// no validation rules for PrivacyLink

	// no validation rules for HelpLink

	return nil
}

// UpdateCustomPrivacyPolicyRequestValidationError is the validation error
// returned by UpdateCustomPrivacyPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomPrivacyPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomPrivacyPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomPrivacyPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomPrivacyPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomPrivacyPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomPrivacyPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomPrivacyPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomPrivacyPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomPrivacyPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomPrivacyPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomPrivacyPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomPrivacyPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *UpdateCustomPrivacyPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomPrivacyPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomPrivacyPolicyResponseValidationError is the validation error
// returned by UpdateCustomPrivacyPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomPrivacyPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomPrivacyPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomPrivacyPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomPrivacyPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomPrivacyPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomPrivacyPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomPrivacyPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomPrivacyPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomPrivacyPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomPrivacyPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomPrivacyPolicyResponseValidationError{}

// Validate checks the field values on ResetPrivacyPolicyToDefaultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetPrivacyPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetPrivacyPolicyToDefaultRequestValidationError is the validation error
// returned by ResetPrivacyPolicyToDefaultRequest.Validate if the designated
// constraints aren't met.
type ResetPrivacyPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPrivacyPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPrivacyPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPrivacyPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPrivacyPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPrivacyPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetPrivacyPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPrivacyPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPrivacyPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPrivacyPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPrivacyPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetPrivacyPolicyToDefaultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetPrivacyPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetPrivacyPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetPrivacyPolicyToDefaultResponseValidationError is the validation error
// returned by ResetPrivacyPolicyToDefaultResponse.Validate if the designated
// constraints aren't met.
type ResetPrivacyPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetPrivacyPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetPrivacyPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetPrivacyPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetPrivacyPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetPrivacyPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetPrivacyPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetPrivacyPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetPrivacyPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetPrivacyPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetPrivacyPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetNotificationPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetNotificationPolicyRequestValidationError is the validation error returned
// by GetNotificationPolicyRequest.Validate if the designated constraints
// aren't met.
type GetNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationPolicyRequestValidationError) ErrorName() string {
	return "GetNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationPolicyRequestValidationError{}

// Validate checks the field values on GetNotificationPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNotificationPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetNotificationPolicyResponseValidationError is the validation error
// returned by GetNotificationPolicyResponse.Validate if the designated
// constraints aren't met.
type GetNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNotificationPolicyResponseValidationError) ErrorName() string {
	return "GetNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNotificationPolicyResponseValidationError{}

// Validate checks the field values on GetDefaultNotificationPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultNotificationPolicyRequestValidationError is the validation error
// returned by GetDefaultNotificationPolicyRequest.Validate if the designated
// constraints aren't met.
type GetDefaultNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultNotificationPolicyRequestValidationError) ErrorName() string {
	return "GetDefaultNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultNotificationPolicyRequestValidationError{}

// Validate checks the field values on GetDefaultNotificationPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultNotificationPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultNotificationPolicyResponseValidationError is the validation error
// returned by GetDefaultNotificationPolicyResponse.Validate if the designated
// constraints aren't met.
type GetDefaultNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultNotificationPolicyResponseValidationError) ErrorName() string {
	return "GetDefaultNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultNotificationPolicyResponseValidationError{}

// Validate checks the field values on AddCustomNotificationPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddCustomNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PasswordChange

	return nil
}

// AddCustomNotificationPolicyRequestValidationError is the validation error
// returned by AddCustomNotificationPolicyRequest.Validate if the designated
// constraints aren't met.
type AddCustomNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomNotificationPolicyRequestValidationError) ErrorName() string {
	return "AddCustomNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomNotificationPolicyRequestValidationError{}

// Validate checks the field values on AddCustomNotificationPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *AddCustomNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomNotificationPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomNotificationPolicyResponseValidationError is the validation error
// returned by AddCustomNotificationPolicyResponse.Validate if the designated
// constraints aren't met.
type AddCustomNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomNotificationPolicyResponseValidationError) ErrorName() string {
	return "AddCustomNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomNotificationPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomNotificationPolicyRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateCustomNotificationPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for PasswordChange

	return nil
}

// UpdateCustomNotificationPolicyRequestValidationError is the validation error
// returned by UpdateCustomNotificationPolicyRequest.Validate if the
// designated constraints aren't met.
type UpdateCustomNotificationPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomNotificationPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomNotificationPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomNotificationPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomNotificationPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomNotificationPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomNotificationPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomNotificationPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomNotificationPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomNotificationPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomNotificationPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomNotificationPolicyResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *UpdateCustomNotificationPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomNotificationPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomNotificationPolicyResponseValidationError is the validation
// error returned by UpdateCustomNotificationPolicyResponse.Validate if the
// designated constraints aren't met.
type UpdateCustomNotificationPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomNotificationPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomNotificationPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomNotificationPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomNotificationPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomNotificationPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomNotificationPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomNotificationPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomNotificationPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomNotificationPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomNotificationPolicyResponseValidationError{}

// Validate checks the field values on ResetNotificationPolicyToDefaultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetNotificationPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetNotificationPolicyToDefaultRequestValidationError is the validation
// error returned by ResetNotificationPolicyToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetNotificationPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetNotificationPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetNotificationPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetNotificationPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetNotificationPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetNotificationPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetNotificationPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetNotificationPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetNotificationPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetNotificationPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetNotificationPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetNotificationPolicyToDefaultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetNotificationPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetNotificationPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetNotificationPolicyToDefaultResponseValidationError is the validation
// error returned by ResetNotificationPolicyToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetNotificationPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetNotificationPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetNotificationPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetNotificationPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetNotificationPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetNotificationPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetNotificationPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetNotificationPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetNotificationPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetNotificationPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetNotificationPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetLabelPolicyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetLabelPolicyRequestValidationError is the validation error returned by
// GetLabelPolicyRequest.Validate if the designated constraints aren't met.
type GetLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelPolicyRequestValidationError) ErrorName() string {
	return "GetLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelPolicyRequestValidationError{}

// Validate checks the field values on GetLabelPolicyResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetLabelPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetLabelPolicyResponseValidationError is the validation error returned by
// GetLabelPolicyResponse.Validate if the designated constraints aren't met.
type GetLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetLabelPolicyResponseValidationError) ErrorName() string {
	return "GetLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetLabelPolicyResponseValidationError{}

// Validate checks the field values on GetPreviewLabelPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPreviewLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetPreviewLabelPolicyRequestValidationError is the validation error returned
// by GetPreviewLabelPolicyRequest.Validate if the designated constraints
// aren't met.
type GetPreviewLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPreviewLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPreviewLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPreviewLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPreviewLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPreviewLabelPolicyRequestValidationError) ErrorName() string {
	return "GetPreviewLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPreviewLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPreviewLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPreviewLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPreviewLabelPolicyRequestValidationError{}

// Validate checks the field values on GetPreviewLabelPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetPreviewLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetPreviewLabelPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IsDefault

	return nil
}

// GetPreviewLabelPolicyResponseValidationError is the validation error
// returned by GetPreviewLabelPolicyResponse.Validate if the designated
// constraints aren't met.
type GetPreviewLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPreviewLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPreviewLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPreviewLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPreviewLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPreviewLabelPolicyResponseValidationError) ErrorName() string {
	return "GetPreviewLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetPreviewLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPreviewLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPreviewLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPreviewLabelPolicyResponseValidationError{}

// Validate checks the field values on GetDefaultLabelPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// GetDefaultLabelPolicyRequestValidationError is the validation error returned
// by GetDefaultLabelPolicyRequest.Validate if the designated constraints
// aren't met.
type GetDefaultLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLabelPolicyRequestValidationError) ErrorName() string {
	return "GetDefaultLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLabelPolicyRequestValidationError{}

// Validate checks the field values on GetDefaultLabelPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultLabelPolicyResponseValidationError{
				field:  "Policy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultLabelPolicyResponseValidationError is the validation error
// returned by GetDefaultLabelPolicyResponse.Validate if the designated
// constraints aren't met.
type GetDefaultLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLabelPolicyResponseValidationError) ErrorName() string {
	return "GetDefaultLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLabelPolicyResponseValidationError{}

// Validate checks the field values on AddCustomLabelPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPrimaryColor()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "PrimaryColor",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for HideLoginNameSuffix

	if utf8.RuneCountInString(m.GetWarnColor()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "WarnColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBackgroundColor()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "BackgroundColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFontColor()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "FontColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPrimaryColorDark()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "PrimaryColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBackgroundColorDark()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "BackgroundColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetWarnColorDark()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "WarnColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFontColorDark()) > 50 {
		return AddCustomLabelPolicyRequestValidationError{
			field:  "FontColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for DisableWatermark

	return nil
}

// AddCustomLabelPolicyRequestValidationError is the validation error returned
// by AddCustomLabelPolicyRequest.Validate if the designated constraints
// aren't met.
type AddCustomLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLabelPolicyRequestValidationError) ErrorName() string {
	return "AddCustomLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLabelPolicyRequestValidationError{}

// Validate checks the field values on AddCustomLabelPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddCustomLabelPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddCustomLabelPolicyResponseValidationError is the validation error returned
// by AddCustomLabelPolicyResponse.Validate if the designated constraints
// aren't met.
type AddCustomLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLabelPolicyResponseValidationError) ErrorName() string {
	return "AddCustomLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLabelPolicyResponseValidationError{}

// Validate checks the field values on UpdateCustomLabelPolicyRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	if utf8.RuneCountInString(m.GetPrimaryColor()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "PrimaryColor",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for HideLoginNameSuffix

	if utf8.RuneCountInString(m.GetWarnColor()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "WarnColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBackgroundColor()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "BackgroundColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFontColor()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "FontColor",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPrimaryColorDark()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "PrimaryColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetBackgroundColorDark()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "BackgroundColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetWarnColorDark()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "WarnColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFontColorDark()) > 50 {
		return UpdateCustomLabelPolicyRequestValidationError{
			field:  "FontColorDark",
			reason: "value length must be at most 50 runes",
		}
	}

	// no validation rules for DisableWatermark

	return nil
}

// UpdateCustomLabelPolicyRequestValidationError is the validation error
// returned by UpdateCustomLabelPolicyRequest.Validate if the designated
// constraints aren't met.
type UpdateCustomLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomLabelPolicyRequestValidationError) ErrorName() string {
	return "UpdateCustomLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomLabelPolicyRequestValidationError{}

// Validate checks the field values on UpdateCustomLabelPolicyResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateCustomLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCustomLabelPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateCustomLabelPolicyResponseValidationError is the validation error
// returned by UpdateCustomLabelPolicyResponse.Validate if the designated
// constraints aren't met.
type UpdateCustomLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCustomLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCustomLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCustomLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCustomLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCustomLabelPolicyResponseValidationError) ErrorName() string {
	return "UpdateCustomLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCustomLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCustomLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCustomLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCustomLabelPolicyResponseValidationError{}

// Validate checks the field values on ActivateCustomLabelPolicyRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ActivateCustomLabelPolicyRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ActivateCustomLabelPolicyRequestValidationError is the validation error
// returned by ActivateCustomLabelPolicyRequest.Validate if the designated
// constraints aren't met.
type ActivateCustomLabelPolicyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateCustomLabelPolicyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateCustomLabelPolicyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateCustomLabelPolicyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateCustomLabelPolicyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateCustomLabelPolicyRequestValidationError) ErrorName() string {
	return "ActivateCustomLabelPolicyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateCustomLabelPolicyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateCustomLabelPolicyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateCustomLabelPolicyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateCustomLabelPolicyRequestValidationError{}

// Validate checks the field values on ActivateCustomLabelPolicyResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ActivateCustomLabelPolicyResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivateCustomLabelPolicyResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ActivateCustomLabelPolicyResponseValidationError is the validation error
// returned by ActivateCustomLabelPolicyResponse.Validate if the designated
// constraints aren't met.
type ActivateCustomLabelPolicyResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivateCustomLabelPolicyResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivateCustomLabelPolicyResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivateCustomLabelPolicyResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivateCustomLabelPolicyResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivateCustomLabelPolicyResponseValidationError) ErrorName() string {
	return "ActivateCustomLabelPolicyResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ActivateCustomLabelPolicyResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivateCustomLabelPolicyResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivateCustomLabelPolicyResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivateCustomLabelPolicyResponseValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyLogoRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveCustomLabelPolicyLogoRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveCustomLabelPolicyLogoRequestValidationError is the validation error
// returned by RemoveCustomLabelPolicyLogoRequest.Validate if the designated
// constraints aren't met.
type RemoveCustomLabelPolicyLogoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyLogoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyLogoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyLogoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyLogoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyLogoRequestValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyLogoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyLogoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyLogoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyLogoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyLogoRequestValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyLogoResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveCustomLabelPolicyLogoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveCustomLabelPolicyLogoResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveCustomLabelPolicyLogoResponseValidationError is the validation error
// returned by RemoveCustomLabelPolicyLogoResponse.Validate if the designated
// constraints aren't met.
type RemoveCustomLabelPolicyLogoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyLogoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyLogoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyLogoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyLogoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyLogoResponseValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyLogoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyLogoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyLogoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyLogoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyLogoResponseValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyLogoDarkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveCustomLabelPolicyLogoDarkRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveCustomLabelPolicyLogoDarkRequestValidationError is the validation
// error returned by RemoveCustomLabelPolicyLogoDarkRequest.Validate if the
// designated constraints aren't met.
type RemoveCustomLabelPolicyLogoDarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyLogoDarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyLogoDarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyLogoDarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyLogoDarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyLogoDarkRequestValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyLogoDarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyLogoDarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyLogoDarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyLogoDarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyLogoDarkRequestValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyLogoDarkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveCustomLabelPolicyLogoDarkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveCustomLabelPolicyLogoDarkResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveCustomLabelPolicyLogoDarkResponseValidationError is the validation
// error returned by RemoveCustomLabelPolicyLogoDarkResponse.Validate if the
// designated constraints aren't met.
type RemoveCustomLabelPolicyLogoDarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyLogoDarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyLogoDarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyLogoDarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyLogoDarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyLogoDarkResponseValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyLogoDarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyLogoDarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyLogoDarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyLogoDarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyLogoDarkResponseValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyIconRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveCustomLabelPolicyIconRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveCustomLabelPolicyIconRequestValidationError is the validation error
// returned by RemoveCustomLabelPolicyIconRequest.Validate if the designated
// constraints aren't met.
type RemoveCustomLabelPolicyIconRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyIconRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyIconRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyIconRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyIconRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyIconRequestValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyIconRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyIconRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyIconRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyIconRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyIconRequestValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyIconResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveCustomLabelPolicyIconResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveCustomLabelPolicyIconResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveCustomLabelPolicyIconResponseValidationError is the validation error
// returned by RemoveCustomLabelPolicyIconResponse.Validate if the designated
// constraints aren't met.
type RemoveCustomLabelPolicyIconResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyIconResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyIconResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyIconResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyIconResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyIconResponseValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyIconResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyIconResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyIconResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyIconResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyIconResponseValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyIconDarkRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveCustomLabelPolicyIconDarkRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveCustomLabelPolicyIconDarkRequestValidationError is the validation
// error returned by RemoveCustomLabelPolicyIconDarkRequest.Validate if the
// designated constraints aren't met.
type RemoveCustomLabelPolicyIconDarkRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyIconDarkRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyIconDarkRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyIconDarkRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyIconDarkRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyIconDarkRequestValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyIconDarkRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyIconDarkRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyIconDarkRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyIconDarkRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyIconDarkRequestValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyIconDarkResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *RemoveCustomLabelPolicyIconDarkResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveCustomLabelPolicyIconDarkResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveCustomLabelPolicyIconDarkResponseValidationError is the validation
// error returned by RemoveCustomLabelPolicyIconDarkResponse.Validate if the
// designated constraints aren't met.
type RemoveCustomLabelPolicyIconDarkResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyIconDarkResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyIconDarkResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyIconDarkResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyIconDarkResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyIconDarkResponseValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyIconDarkResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyIconDarkResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyIconDarkResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyIconDarkResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyIconDarkResponseValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyFontRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveCustomLabelPolicyFontRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveCustomLabelPolicyFontRequestValidationError is the validation error
// returned by RemoveCustomLabelPolicyFontRequest.Validate if the designated
// constraints aren't met.
type RemoveCustomLabelPolicyFontRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyFontRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyFontRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyFontRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyFontRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyFontRequestValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyFontRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyFontRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyFontRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyFontRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyFontRequestValidationError{}

// Validate checks the field values on RemoveCustomLabelPolicyFontResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *RemoveCustomLabelPolicyFontResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RemoveCustomLabelPolicyFontResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// RemoveCustomLabelPolicyFontResponseValidationError is the validation error
// returned by RemoveCustomLabelPolicyFontResponse.Validate if the designated
// constraints aren't met.
type RemoveCustomLabelPolicyFontResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveCustomLabelPolicyFontResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveCustomLabelPolicyFontResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveCustomLabelPolicyFontResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveCustomLabelPolicyFontResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveCustomLabelPolicyFontResponseValidationError) ErrorName() string {
	return "RemoveCustomLabelPolicyFontResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveCustomLabelPolicyFontResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveCustomLabelPolicyFontResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveCustomLabelPolicyFontResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveCustomLabelPolicyFontResponseValidationError{}

// Validate checks the field values on ResetLabelPolicyToDefaultRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetLabelPolicyToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ResetLabelPolicyToDefaultRequestValidationError is the validation error
// returned by ResetLabelPolicyToDefaultRequest.Validate if the designated
// constraints aren't met.
type ResetLabelPolicyToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetLabelPolicyToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetLabelPolicyToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetLabelPolicyToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetLabelPolicyToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetLabelPolicyToDefaultRequestValidationError) ErrorName() string {
	return "ResetLabelPolicyToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetLabelPolicyToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetLabelPolicyToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetLabelPolicyToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetLabelPolicyToDefaultRequestValidationError{}

// Validate checks the field values on ResetLabelPolicyToDefaultResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *ResetLabelPolicyToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetLabelPolicyToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetLabelPolicyToDefaultResponseValidationError is the validation error
// returned by ResetLabelPolicyToDefaultResponse.Validate if the designated
// constraints aren't met.
type ResetLabelPolicyToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetLabelPolicyToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetLabelPolicyToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetLabelPolicyToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetLabelPolicyToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetLabelPolicyToDefaultResponseValidationError) ErrorName() string {
	return "ResetLabelPolicyToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetLabelPolicyToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetLabelPolicyToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetLabelPolicyToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetLabelPolicyToDefaultResponseValidationError{}

// Validate checks the field values on GetCustomInitMessageTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomInitMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomInitMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomInitMessageTextRequestValidationError is the validation error
// returned by GetCustomInitMessageTextRequest.Validate if the designated
// constraints aren't met.
type GetCustomInitMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomInitMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomInitMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomInitMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomInitMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomInitMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomInitMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomInitMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomInitMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomInitMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomInitMessageTextRequestValidationError{}

// Validate checks the field values on GetCustomInitMessageTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetCustomInitMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomInitMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomInitMessageTextResponseValidationError is the validation error
// returned by GetCustomInitMessageTextResponse.Validate if the designated
// constraints aren't met.
type GetCustomInitMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomInitMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomInitMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomInitMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomInitMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomInitMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomInitMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomInitMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomInitMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomInitMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomInitMessageTextResponseValidationError{}

// Validate checks the field values on GetDefaultInitMessageTextRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultInitMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultInitMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultInitMessageTextRequestValidationError is the validation error
// returned by GetDefaultInitMessageTextRequest.Validate if the designated
// constraints aren't met.
type GetDefaultInitMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultInitMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultInitMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultInitMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultInitMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultInitMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultInitMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultInitMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultInitMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultInitMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultInitMessageTextRequestValidationError{}

// Validate checks the field values on GetDefaultInitMessageTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *GetDefaultInitMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultInitMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultInitMessageTextResponseValidationError is the validation error
// returned by GetDefaultInitMessageTextResponse.Validate if the designated
// constraints aren't met.
type GetDefaultInitMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultInitMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultInitMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultInitMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultInitMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultInitMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultInitMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultInitMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultInitMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultInitMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultInitMessageTextResponseValidationError{}

// Validate checks the field values on SetCustomInitMessageTextRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetCustomInitMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomInitMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomInitMessageTextRequestValidationError is the validation error
// returned by SetCustomInitMessageTextRequest.Validate if the designated
// constraints aren't met.
type SetCustomInitMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomInitMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomInitMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomInitMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomInitMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomInitMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomInitMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomInitMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomInitMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomInitMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomInitMessageTextRequestValidationError{}

// Validate checks the field values on SetCustomInitMessageTextResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *SetCustomInitMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomInitMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomInitMessageTextResponseValidationError is the validation error
// returned by SetCustomInitMessageTextResponse.Validate if the designated
// constraints aren't met.
type SetCustomInitMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomInitMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomInitMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomInitMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomInitMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomInitMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomInitMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomInitMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomInitMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomInitMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomInitMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomInitMessageTextToDefaultRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ResetCustomInitMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomInitMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomInitMessageTextToDefaultRequestValidationError is the validation
// error returned by ResetCustomInitMessageTextToDefaultRequest.Validate if
// the designated constraints aren't met.
type ResetCustomInitMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomInitMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomInitMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomInitMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomInitMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomInitMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomInitMessageTextToDefaultResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *ResetCustomInitMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomInitMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomInitMessageTextToDefaultResponseValidationError is the validation
// error returned by ResetCustomInitMessageTextToDefaultResponse.Validate if
// the designated constraints aren't met.
type ResetCustomInitMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomInitMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomInitMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomInitMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomInitMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomInitMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetDefaultLoginTextsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLoginTextsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultLoginTextsRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultLoginTextsRequestValidationError is the validation error returned
// by GetDefaultLoginTextsRequest.Validate if the designated constraints
// aren't met.
type GetDefaultLoginTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLoginTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLoginTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLoginTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLoginTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLoginTextsRequestValidationError) ErrorName() string {
	return "GetDefaultLoginTextsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLoginTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLoginTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLoginTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLoginTextsRequestValidationError{}

// Validate checks the field values on GetDefaultLoginTextsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultLoginTextsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultLoginTextsResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultLoginTextsResponseValidationError is the validation error returned
// by GetDefaultLoginTextsResponse.Validate if the designated constraints
// aren't met.
type GetDefaultLoginTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultLoginTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultLoginTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultLoginTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultLoginTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultLoginTextsResponseValidationError) ErrorName() string {
	return "GetDefaultLoginTextsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultLoginTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultLoginTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultLoginTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultLoginTextsResponseValidationError{}

// Validate checks the field values on GetCustomLoginTextsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomLoginTextsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomLoginTextsRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomLoginTextsRequestValidationError is the validation error returned
// by GetCustomLoginTextsRequest.Validate if the designated constraints aren't met.
type GetCustomLoginTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomLoginTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomLoginTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomLoginTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomLoginTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomLoginTextsRequestValidationError) ErrorName() string {
	return "GetCustomLoginTextsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomLoginTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomLoginTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomLoginTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomLoginTextsRequestValidationError{}

// Validate checks the field values on GetCustomLoginTextsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetCustomLoginTextsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomLoginTextsResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomLoginTextsResponseValidationError is the validation error returned
// by GetCustomLoginTextsResponse.Validate if the designated constraints
// aren't met.
type GetCustomLoginTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomLoginTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomLoginTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomLoginTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomLoginTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomLoginTextsResponseValidationError) ErrorName() string {
	return "GetCustomLoginTextsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomLoginTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomLoginTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomLoginTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomLoginTextsResponseValidationError{}

// Validate checks the field values on SetCustomLoginTextsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetCustomLoginTextsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomLoginTextsRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetSelectAccountText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "SelectAccountText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLoginText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "LoginText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUsernameChangeText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "UsernameChangeText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetUsernameChangeDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "UsernameChangeDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitPasswordText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitPasswordText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitPasswordDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitPasswordDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEmailVerificationText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "EmailVerificationText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEmailVerificationDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "EmailVerificationDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitializeUserText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitializeUserText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitializeDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitializeDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaPromptText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaPromptText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaOtpText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaOtpText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaU2FText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaU2FText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetInitMfaDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "InitMfaDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetMfaProvidersText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "MfaProvidersText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVerifyMfaOtpText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "VerifyMfaOtpText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetVerifyMfaU2FText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "VerifyMfaU2FText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordChangeText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordChangeText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordChangeDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordChangeDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordResetDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordResetDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistrationOptionText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "RegistrationOptionText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistrationUserText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "RegistrationUserText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetRegistrationOrgText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "RegistrationOrgText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLinkingUserDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "LinkingUserDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalUserNotFoundText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "ExternalUserNotFoundText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetSuccessLoginText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "SuccessLoginText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetLogoutText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "LogoutText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetFooterText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "FooterText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessPromptText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessPromptText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessRegistrationText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessRegistrationText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetPasswordlessRegistrationDoneText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "PasswordlessRegistrationDoneText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExternalRegistrationUserOverviewText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsRequestValidationError{
				field:  "ExternalRegistrationUserOverviewText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomLoginTextsRequestValidationError is the validation error returned
// by SetCustomLoginTextsRequest.Validate if the designated constraints aren't met.
type SetCustomLoginTextsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomLoginTextsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomLoginTextsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomLoginTextsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomLoginTextsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomLoginTextsRequestValidationError) ErrorName() string {
	return "SetCustomLoginTextsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomLoginTextsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomLoginTextsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomLoginTextsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomLoginTextsRequestValidationError{}

// Validate checks the field values on SetCustomLoginTextsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetCustomLoginTextsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomLoginTextsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomLoginTextsResponseValidationError is the validation error returned
// by SetCustomLoginTextsResponse.Validate if the designated constraints
// aren't met.
type SetCustomLoginTextsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomLoginTextsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomLoginTextsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomLoginTextsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomLoginTextsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomLoginTextsResponseValidationError) ErrorName() string {
	return "SetCustomLoginTextsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomLoginTextsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomLoginTextsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomLoginTextsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomLoginTextsResponseValidationError{}

// Validate checks the field values on ResetCustomLoginTextsToDefaultRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomLoginTextsToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomLoginTextsToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomLoginTextsToDefaultRequestValidationError is the validation error
// returned by ResetCustomLoginTextsToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomLoginTextsToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomLoginTextsToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomLoginTextsToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomLoginTextsToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomLoginTextsToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomLoginTextsToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomLoginTextsToDefaultRequestValidationError{}

// Validate checks the field values on ResetCustomLoginTextsToDefaultResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ResetCustomLoginTextsToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomLoginTextsToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomLoginTextsToDefaultResponseValidationError is the validation
// error returned by ResetCustomLoginTextsToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomLoginTextsToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomLoginTextsToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomLoginTextsToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomLoginTextsToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomLoginTextsToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomLoginTextsToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomLoginTextsToDefaultResponseValidationError{}

// Validate checks the field values on GetCustomPasswordResetMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomPasswordResetMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomPasswordResetMessageTextRequestValidationError is the validation
// error returned by GetCustomPasswordResetMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomPasswordResetMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordResetMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordResetMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomPasswordResetMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordResetMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordResetMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordResetMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordResetMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomPasswordResetMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomPasswordResetMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomPasswordResetMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomPasswordResetMessageTextResponseValidationError is the validation
// error returned by GetCustomPasswordResetMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomPasswordResetMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordResetMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordResetMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomPasswordResetMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordResetMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordResetMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordResetMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordResetMessageTextResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordResetMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordResetMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultPasswordResetMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultPasswordResetMessageTextRequestValidationError is the validation
// error returned by GetDefaultPasswordResetMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordResetMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordResetMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordResetMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordResetMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordResetMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordResetMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordResetMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordResetMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordResetMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordResetMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordResetMessageTextResponseValidationError is the validation
// error returned by GetDefaultPasswordResetMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordResetMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordResetMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordResetMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordResetMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordResetMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordResetMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordResetMessageTextResponseValidationError{}

// Validate checks the field values on SetCustomPasswordResetMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetCustomPasswordResetMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomPasswordResetMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomPasswordResetMessageTextRequestValidationError is the validation
// error returned by SetCustomPasswordResetMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetCustomPasswordResetMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomPasswordResetMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomPasswordResetMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomPasswordResetMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomPasswordResetMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomPasswordResetMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomPasswordResetMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomPasswordResetMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomPasswordResetMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomPasswordResetMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomPasswordResetMessageTextRequestValidationError{}

// Validate checks the field values on
// SetCustomPasswordResetMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetCustomPasswordResetMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomPasswordResetMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomPasswordResetMessageTextResponseValidationError is the validation
// error returned by SetCustomPasswordResetMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetCustomPasswordResetMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomPasswordResetMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomPasswordResetMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomPasswordResetMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomPasswordResetMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomPasswordResetMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomPasswordResetMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomPasswordResetMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomPasswordResetMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomPasswordResetMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomPasswordResetMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomPasswordResetMessageTextToDefaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomPasswordResetMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomPasswordResetMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomPasswordResetMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomPasswordResetMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordResetMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomPasswordResetMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordResetMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordResetMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordResetMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordResetMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomPasswordResetMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomPasswordResetMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomPasswordResetMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomPasswordResetMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomPasswordResetMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordResetMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomPasswordResetMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordResetMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordResetMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordResetMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordResetMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetCustomVerifyEmailMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyEmailMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomVerifyEmailMessageTextRequestValidationError is the validation
// error returned by GetCustomVerifyEmailMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomVerifyEmailMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyEmailMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomVerifyEmailMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyEmailMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyEmailMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyEmailMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyEmailMessageTextRequestValidationError{}

// Validate checks the field values on GetCustomVerifyEmailMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyEmailMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomVerifyEmailMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomVerifyEmailMessageTextResponseValidationError is the validation
// error returned by GetCustomVerifyEmailMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomVerifyEmailMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyEmailMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomVerifyEmailMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyEmailMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyEmailMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyEmailMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyEmailMessageTextResponseValidationError{}

// Validate checks the field values on GetDefaultVerifyEmailMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyEmailMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultVerifyEmailMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultVerifyEmailMessageTextRequestValidationError is the validation
// error returned by GetDefaultVerifyEmailMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyEmailMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultVerifyEmailMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyEmailMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyEmailMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyEmailMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyEmailMessageTextRequestValidationError{}

// Validate checks the field values on GetDefaultVerifyEmailMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyEmailMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultVerifyEmailMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultVerifyEmailMessageTextResponseValidationError is the validation
// error returned by GetDefaultVerifyEmailMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyEmailMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultVerifyEmailMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyEmailMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyEmailMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyEmailMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyEmailMessageTextResponseValidationError{}

// Validate checks the field values on SetCustomVerifyEmailMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetCustomVerifyEmailMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomVerifyEmailMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomVerifyEmailMessageTextRequestValidationError is the validation
// error returned by SetCustomVerifyEmailMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetCustomVerifyEmailMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomVerifyEmailMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomVerifyEmailMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomVerifyEmailMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomVerifyEmailMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomVerifyEmailMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomVerifyEmailMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomVerifyEmailMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomVerifyEmailMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomVerifyEmailMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomVerifyEmailMessageTextRequestValidationError{}

// Validate checks the field values on SetCustomVerifyEmailMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetCustomVerifyEmailMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomVerifyEmailMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomVerifyEmailMessageTextResponseValidationError is the validation
// error returned by SetCustomVerifyEmailMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetCustomVerifyEmailMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomVerifyEmailMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomVerifyEmailMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomVerifyEmailMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomVerifyEmailMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomVerifyEmailMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomVerifyEmailMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomVerifyEmailMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomVerifyEmailMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomVerifyEmailMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomVerifyEmailMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomVerifyEmailMessageTextToDefaultRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetCustomVerifyEmailMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomVerifyEmailMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyEmailMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyEmailMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomVerifyEmailMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomVerifyEmailMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomVerifyEmailMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyEmailMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyEmailMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetCustomVerifyPhoneMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyPhoneMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomVerifyPhoneMessageTextRequestValidationError is the validation
// error returned by GetCustomVerifyPhoneMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomVerifyPhoneMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomVerifyPhoneMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyPhoneMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyPhoneMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyPhoneMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyPhoneMessageTextRequestValidationError{}

// Validate checks the field values on GetCustomVerifyPhoneMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomVerifyPhoneMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomVerifyPhoneMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomVerifyPhoneMessageTextResponseValidationError is the validation
// error returned by GetCustomVerifyPhoneMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomVerifyPhoneMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomVerifyPhoneMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomVerifyPhoneMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomVerifyPhoneMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomVerifyPhoneMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomVerifyPhoneMessageTextResponseValidationError{}

// Validate checks the field values on GetDefaultVerifyPhoneMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyPhoneMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultVerifyPhoneMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultVerifyPhoneMessageTextRequestValidationError is the validation
// error returned by GetDefaultVerifyPhoneMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyPhoneMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultVerifyPhoneMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyPhoneMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyPhoneMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyPhoneMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyPhoneMessageTextRequestValidationError{}

// Validate checks the field values on GetDefaultVerifyPhoneMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetDefaultVerifyPhoneMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultVerifyPhoneMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultVerifyPhoneMessageTextResponseValidationError is the validation
// error returned by GetDefaultVerifyPhoneMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetDefaultVerifyPhoneMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultVerifyPhoneMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultVerifyPhoneMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultVerifyPhoneMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultVerifyPhoneMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultVerifyPhoneMessageTextResponseValidationError{}

// Validate checks the field values on SetCustomVerifyPhoneMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetCustomVerifyPhoneMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomVerifyPhoneMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomVerifyPhoneMessageTextRequestValidationError is the validation
// error returned by SetCustomVerifyPhoneMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetCustomVerifyPhoneMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomVerifyPhoneMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomVerifyPhoneMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomVerifyPhoneMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomVerifyPhoneMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomVerifyPhoneMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomVerifyPhoneMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomVerifyPhoneMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomVerifyPhoneMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomVerifyPhoneMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomVerifyPhoneMessageTextRequestValidationError{}

// Validate checks the field values on SetCustomVerifyPhoneMessageTextResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetCustomVerifyPhoneMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomVerifyPhoneMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomVerifyPhoneMessageTextResponseValidationError is the validation
// error returned by SetCustomVerifyPhoneMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetCustomVerifyPhoneMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomVerifyPhoneMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomVerifyPhoneMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomVerifyPhoneMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomVerifyPhoneMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomVerifyPhoneMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomVerifyPhoneMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomVerifyPhoneMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomVerifyPhoneMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomVerifyPhoneMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomVerifyPhoneMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomVerifyPhoneMessageTextToDefaultRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ResetCustomVerifyPhoneMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomVerifyPhoneMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyPhoneMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyPhoneMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomVerifyPhoneMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomVerifyPhoneMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomVerifyPhoneMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomVerifyPhoneMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomVerifyPhoneMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetCustomDomainClaimedMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *GetCustomDomainClaimedMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomDomainClaimedMessageTextRequestValidationError is the validation
// error returned by GetCustomDomainClaimedMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomDomainClaimedMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomDomainClaimedMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomDomainClaimedMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomDomainClaimedMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomDomainClaimedMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomDomainClaimedMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomDomainClaimedMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomDomainClaimedMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomDomainClaimedMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomDomainClaimedMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomDomainClaimedMessageTextResponseValidationError is the validation
// error returned by GetCustomDomainClaimedMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomDomainClaimedMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomDomainClaimedMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomDomainClaimedMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomDomainClaimedMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomDomainClaimedMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomDomainClaimedMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomDomainClaimedMessageTextResponseValidationError{}

// Validate checks the field values on
// GetDefaultDomainClaimedMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultDomainClaimedMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultDomainClaimedMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultDomainClaimedMessageTextRequestValidationError is the validation
// error returned by GetDefaultDomainClaimedMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultDomainClaimedMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultDomainClaimedMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultDomainClaimedMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultDomainClaimedMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultDomainClaimedMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultDomainClaimedMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultDomainClaimedMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultDomainClaimedMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultDomainClaimedMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultDomainClaimedMessageTextResponseValidationError is the validation
// error returned by GetDefaultDomainClaimedMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetDefaultDomainClaimedMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultDomainClaimedMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultDomainClaimedMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultDomainClaimedMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultDomainClaimedMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultDomainClaimedMessageTextResponseValidationError{}

// Validate checks the field values on SetCustomDomainClaimedMessageTextRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *SetCustomDomainClaimedMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomDomainClaimedMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomDomainClaimedMessageTextRequestValidationError is the validation
// error returned by SetCustomDomainClaimedMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetCustomDomainClaimedMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomDomainClaimedMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomDomainClaimedMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomDomainClaimedMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomDomainClaimedMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomDomainClaimedMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomDomainClaimedMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomDomainClaimedMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomDomainClaimedMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomDomainClaimedMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomDomainClaimedMessageTextRequestValidationError{}

// Validate checks the field values on
// SetCustomDomainClaimedMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetCustomDomainClaimedMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomDomainClaimedMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomDomainClaimedMessageTextResponseValidationError is the validation
// error returned by SetCustomDomainClaimedMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetCustomDomainClaimedMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomDomainClaimedMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomDomainClaimedMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomDomainClaimedMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomDomainClaimedMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomDomainClaimedMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomDomainClaimedMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomDomainClaimedMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomDomainClaimedMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomDomainClaimedMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomDomainClaimedMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomDomainClaimedMessageTextToDefaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomDomainClaimedMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomDomainClaimedMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomDomainClaimedMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomDomainClaimedMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomDomainClaimedMessageTextToDefaultResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomDomainClaimedMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomDomainClaimedMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomDomainClaimedMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomDomainClaimedMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on
// GetCustomPasswordlessRegistrationMessageTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCustomPasswordlessRegistrationMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomPasswordlessRegistrationMessageTextRequestValidationError is the
// validation error returned by
// GetCustomPasswordlessRegistrationMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomPasswordlessRegistrationMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomPasswordlessRegistrationMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordlessRegistrationMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordlessRegistrationMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordlessRegistrationMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordlessRegistrationMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomPasswordlessRegistrationMessageTextResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetCustomPasswordlessRegistrationMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomPasswordlessRegistrationMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomPasswordlessRegistrationMessageTextResponseValidationError is the
// validation error returned by
// GetCustomPasswordlessRegistrationMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetCustomPasswordlessRegistrationMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomPasswordlessRegistrationMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordlessRegistrationMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordlessRegistrationMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordlessRegistrationMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordlessRegistrationMessageTextResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordlessRegistrationMessageTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetDefaultPasswordlessRegistrationMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultPasswordlessRegistrationMessageTextRequestValidationError is the
// validation error returned by
// GetDefaultPasswordlessRegistrationMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordlessRegistrationMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordlessRegistrationMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordlessRegistrationMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordlessRegistrationMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordlessRegistrationMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordlessRegistrationMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordlessRegistrationMessageTextResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetDefaultPasswordlessRegistrationMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordlessRegistrationMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordlessRegistrationMessageTextResponseValidationError is the
// validation error returned by
// GetDefaultPasswordlessRegistrationMessageTextResponse.Validate if the
// designated constraints aren't met.
type GetDefaultPasswordlessRegistrationMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordlessRegistrationMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordlessRegistrationMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordlessRegistrationMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordlessRegistrationMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordlessRegistrationMessageTextResponseValidationError{}

// Validate checks the field values on
// SetCustomPasswordlessRegistrationMessageTextRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetCustomPasswordlessRegistrationMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomPasswordlessRegistrationMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomPasswordlessRegistrationMessageTextRequestValidationError is the
// validation error returned by
// SetCustomPasswordlessRegistrationMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetCustomPasswordlessRegistrationMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomPasswordlessRegistrationMessageTextRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SetCustomPasswordlessRegistrationMessageTextRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SetCustomPasswordlessRegistrationMessageTextRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SetCustomPasswordlessRegistrationMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomPasswordlessRegistrationMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomPasswordlessRegistrationMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomPasswordlessRegistrationMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomPasswordlessRegistrationMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomPasswordlessRegistrationMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomPasswordlessRegistrationMessageTextRequestValidationError{}

// Validate checks the field values on
// SetCustomPasswordlessRegistrationMessageTextResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *SetCustomPasswordlessRegistrationMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomPasswordlessRegistrationMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomPasswordlessRegistrationMessageTextResponseValidationError is the
// validation error returned by
// SetCustomPasswordlessRegistrationMessageTextResponse.Validate if the
// designated constraints aren't met.
type SetCustomPasswordlessRegistrationMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomPasswordlessRegistrationMessageTextResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e SetCustomPasswordlessRegistrationMessageTextResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e SetCustomPasswordlessRegistrationMessageTextResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e SetCustomPasswordlessRegistrationMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomPasswordlessRegistrationMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomPasswordlessRegistrationMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomPasswordlessRegistrationMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomPasswordlessRegistrationMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomPasswordlessRegistrationMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomPasswordlessRegistrationMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError
// is the validation error returned by
// ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.Validate if
// the designated constraints aren't met.
type ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError
// is the validation error returned by
// ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.Validate if
// the designated constraints aren't met.
type ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on
// GetCustomPasswordChangeMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomPasswordChangeMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetCustomPasswordChangeMessageTextRequestValidationError is the validation
// error returned by GetCustomPasswordChangeMessageTextRequest.Validate if the
// designated constraints aren't met.
type GetCustomPasswordChangeMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordChangeMessageTextRequestValidationError) ErrorName() string {
	return "GetCustomPasswordChangeMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordChangeMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordChangeMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordChangeMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordChangeMessageTextRequestValidationError{}

// Validate checks the field values on
// GetCustomPasswordChangeMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetCustomPasswordChangeMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCustomPasswordChangeMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetCustomPasswordChangeMessageTextResponseValidationError is the validation
// error returned by GetCustomPasswordChangeMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetCustomPasswordChangeMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCustomPasswordChangeMessageTextResponseValidationError) ErrorName() string {
	return "GetCustomPasswordChangeMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCustomPasswordChangeMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCustomPasswordChangeMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCustomPasswordChangeMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCustomPasswordChangeMessageTextResponseValidationError{}

// Validate checks the field values on
// GetDefaultPasswordChangeMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordChangeMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return GetDefaultPasswordChangeMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetDefaultPasswordChangeMessageTextRequestValidationError is the validation
// error returned by GetDefaultPasswordChangeMessageTextRequest.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordChangeMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) ErrorName() string {
	return "GetDefaultPasswordChangeMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordChangeMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordChangeMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordChangeMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordChangeMessageTextRequestValidationError{}

// Validate checks the field values on
// GetDefaultPasswordChangeMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *GetDefaultPasswordChangeMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetCustomText()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDefaultPasswordChangeMessageTextResponseValidationError{
				field:  "CustomText",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetDefaultPasswordChangeMessageTextResponseValidationError is the validation
// error returned by GetDefaultPasswordChangeMessageTextResponse.Validate if
// the designated constraints aren't met.
type GetDefaultPasswordChangeMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) ErrorName() string {
	return "GetDefaultPasswordChangeMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDefaultPasswordChangeMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDefaultPasswordChangeMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDefaultPasswordChangeMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDefaultPasswordChangeMessageTextResponseValidationError{}

// Validate checks the field values on
// SetCustomPasswordChangeMessageTextRequest with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetCustomPasswordChangeMessageTextRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetTitle()) > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Title",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreHeader()) > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "PreHeader",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetSubject()) > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Subject",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetGreeting()) > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Greeting",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetText()) > 800 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "Text",
			reason: "value length must be at most 800 runes",
		}
	}

	if utf8.RuneCountInString(m.GetButtonText()) > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "ButtonText",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetFooterText()) > 200 {
		return SetCustomPasswordChangeMessageTextRequestValidationError{
			field:  "FooterText",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// SetCustomPasswordChangeMessageTextRequestValidationError is the validation
// error returned by SetCustomPasswordChangeMessageTextRequest.Validate if the
// designated constraints aren't met.
type SetCustomPasswordChangeMessageTextRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomPasswordChangeMessageTextRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomPasswordChangeMessageTextRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomPasswordChangeMessageTextRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomPasswordChangeMessageTextRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomPasswordChangeMessageTextRequestValidationError) ErrorName() string {
	return "SetCustomPasswordChangeMessageTextRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomPasswordChangeMessageTextRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomPasswordChangeMessageTextRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomPasswordChangeMessageTextRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomPasswordChangeMessageTextRequestValidationError{}

// Validate checks the field values on
// SetCustomPasswordChangeMessageTextResponse with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *SetCustomPasswordChangeMessageTextResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetCustomPasswordChangeMessageTextResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetCustomPasswordChangeMessageTextResponseValidationError is the validation
// error returned by SetCustomPasswordChangeMessageTextResponse.Validate if
// the designated constraints aren't met.
type SetCustomPasswordChangeMessageTextResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetCustomPasswordChangeMessageTextResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetCustomPasswordChangeMessageTextResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetCustomPasswordChangeMessageTextResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetCustomPasswordChangeMessageTextResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetCustomPasswordChangeMessageTextResponseValidationError) ErrorName() string {
	return "SetCustomPasswordChangeMessageTextResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetCustomPasswordChangeMessageTextResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetCustomPasswordChangeMessageTextResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetCustomPasswordChangeMessageTextResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetCustomPasswordChangeMessageTextResponseValidationError{}

// Validate checks the field values on
// ResetCustomPasswordChangeMessageTextToDefaultRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ResetCustomPasswordChangeMessageTextToDefaultRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetLanguage()); l < 1 || l > 200 {
		return ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError{
			field:  "Language",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError is the
// validation error returned by
// ResetCustomPasswordChangeMessageTextToDefaultRequest.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) ErrorName() string {
	return "ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordChangeMessageTextToDefaultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordChangeMessageTextToDefaultRequestValidationError{}

// Validate checks the field values on
// ResetCustomPasswordChangeMessageTextToDefaultResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ResetCustomPasswordChangeMessageTextToDefaultResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError is the
// validation error returned by
// ResetCustomPasswordChangeMessageTextToDefaultResponse.Validate if the
// designated constraints aren't met.
type ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) ErrorName() string {
	return "ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResetCustomPasswordChangeMessageTextToDefaultResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResetCustomPasswordChangeMessageTextToDefaultResponseValidationError{}

// Validate checks the field values on GetOrgIDPByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgIDPByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetOrgIDPByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetOrgIDPByIDRequestValidationError is the validation error returned by
// GetOrgIDPByIDRequest.Validate if the designated constraints aren't met.
type GetOrgIDPByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgIDPByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgIDPByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgIDPByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgIDPByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgIDPByIDRequestValidationError) ErrorName() string {
	return "GetOrgIDPByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgIDPByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgIDPByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgIDPByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgIDPByIDRequestValidationError{}

// Validate checks the field values on GetOrgIDPByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetOrgIDPByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrgIDPByIDResponseValidationError{
				field:  "Idp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetOrgIDPByIDResponseValidationError is the validation error returned by
// GetOrgIDPByIDResponse.Validate if the designated constraints aren't met.
type GetOrgIDPByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrgIDPByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrgIDPByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrgIDPByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrgIDPByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrgIDPByIDResponseValidationError) ErrorName() string {
	return "GetOrgIDPByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrgIDPByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrgIDPByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrgIDPByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrgIDPByIDResponseValidationError{}

// Validate checks the field values on ListOrgIDPsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgIDPsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgIDPsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgIDPsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgIDPsRequestValidationError is the validation error returned by
// ListOrgIDPsRequest.Validate if the designated constraints aren't met.
type ListOrgIDPsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgIDPsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgIDPsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgIDPsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgIDPsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgIDPsRequestValidationError) ErrorName() string {
	return "ListOrgIDPsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgIDPsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgIDPsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgIDPsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgIDPsRequestValidationError{}

// Validate checks the field values on IDPQuery with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *IDPQuery) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Query.(type) {

	case *IDPQuery_IdpIdQuery:

		if v, ok := interface{}(m.GetIdpIdQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDPQueryValidationError{
					field:  "IdpIdQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *IDPQuery_IdpNameQuery:

		if v, ok := interface{}(m.GetIdpNameQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDPQueryValidationError{
					field:  "IdpNameQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *IDPQuery_OwnerTypeQuery:

		if v, ok := interface{}(m.GetOwnerTypeQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return IDPQueryValidationError{
					field:  "OwnerTypeQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return IDPQueryValidationError{
			field:  "Query",
			reason: "value is required",
		}

	}

	return nil
}

// IDPQueryValidationError is the validation error returned by
// IDPQuery.Validate if the designated constraints aren't met.
type IDPQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IDPQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IDPQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IDPQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IDPQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IDPQueryValidationError) ErrorName() string { return "IDPQueryValidationError" }

// Error satisfies the builtin error interface
func (e IDPQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIDPQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IDPQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IDPQueryValidationError{}

// Validate checks the field values on ListOrgIDPsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListOrgIDPsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListOrgIDPsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgIDPsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListOrgIDPsResponseValidationError is the validation error returned by
// ListOrgIDPsResponse.Validate if the designated constraints aren't met.
type ListOrgIDPsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgIDPsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgIDPsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgIDPsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgIDPsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgIDPsResponseValidationError) ErrorName() string {
	return "ListOrgIDPsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgIDPsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgIDPsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgIDPsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgIDPsResponseValidationError{}

// Validate checks the field values on AddOrgOIDCIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgOIDCIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.IDPStylingType_name[int32(m.GetStylingType())]; !ok {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "StylingType",
			reason: "value must be one of the defined enum values",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 1 || l > 200 {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "ClientId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientSecret()); l < 1 || l > 200 {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "ClientSecret",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetDisplayNameMapping())]; !ok {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "DisplayNameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetUsernameMapping())]; !ok {
		return AddOrgOIDCIDPRequestValidationError{
			field:  "UsernameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for AutoRegister

	return nil
}

// AddOrgOIDCIDPRequestValidationError is the validation error returned by
// AddOrgOIDCIDPRequest.Validate if the designated constraints aren't met.
type AddOrgOIDCIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgOIDCIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgOIDCIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgOIDCIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgOIDCIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgOIDCIDPRequestValidationError) ErrorName() string {
	return "AddOrgOIDCIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgOIDCIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgOIDCIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgOIDCIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgOIDCIDPRequestValidationError{}

// Validate checks the field values on AddOrgOIDCIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgOIDCIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrgOIDCIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdpId

	return nil
}

// AddOrgOIDCIDPResponseValidationError is the validation error returned by
// AddOrgOIDCIDPResponse.Validate if the designated constraints aren't met.
type AddOrgOIDCIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgOIDCIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgOIDCIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgOIDCIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgOIDCIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgOIDCIDPResponseValidationError) ErrorName() string {
	return "AddOrgOIDCIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgOIDCIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgOIDCIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgOIDCIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgOIDCIDPResponseValidationError{}

// Validate checks the field values on AddOrgJWTIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgJWTIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddOrgJWTIDPRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.IDPStylingType_name[int32(m.GetStylingType())]; !ok {
		return AddOrgJWTIDPRequestValidationError{
			field:  "StylingType",
			reason: "value must be one of the defined enum values",
		}
	}

	if l := utf8.RuneCountInString(m.GetJwtEndpoint()); l < 1 || l > 200 {
		return AddOrgJWTIDPRequestValidationError{
			field:  "JwtEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return AddOrgJWTIDPRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeysEndpoint()); l < 1 || l > 200 {
		return AddOrgJWTIDPRequestValidationError{
			field:  "KeysEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHeaderName()); l < 1 || l > 200 {
		return AddOrgJWTIDPRequestValidationError{
			field:  "HeaderName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	// no validation rules for AutoRegister

	return nil
}

// AddOrgJWTIDPRequestValidationError is the validation error returned by
// AddOrgJWTIDPRequest.Validate if the designated constraints aren't met.
type AddOrgJWTIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgJWTIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgJWTIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgJWTIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgJWTIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgJWTIDPRequestValidationError) ErrorName() string {
	return "AddOrgJWTIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgJWTIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgJWTIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgJWTIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgJWTIDPRequestValidationError{}

// Validate checks the field values on AddOrgJWTIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddOrgJWTIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddOrgJWTIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for IdpId

	return nil
}

// AddOrgJWTIDPResponseValidationError is the validation error returned by
// AddOrgJWTIDPResponse.Validate if the designated constraints aren't met.
type AddOrgJWTIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgJWTIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgJWTIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgJWTIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgJWTIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgJWTIDPResponseValidationError) ErrorName() string {
	return "AddOrgJWTIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgJWTIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgJWTIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgJWTIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgJWTIDPResponseValidationError{}

// Validate checks the field values on DeactivateOrgIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateOrgIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return DeactivateOrgIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeactivateOrgIDPRequestValidationError is the validation error returned by
// DeactivateOrgIDPRequest.Validate if the designated constraints aren't met.
type DeactivateOrgIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateOrgIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateOrgIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateOrgIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateOrgIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateOrgIDPRequestValidationError) ErrorName() string {
	return "DeactivateOrgIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateOrgIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateOrgIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateOrgIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateOrgIDPRequestValidationError{}

// Validate checks the field values on DeactivateOrgIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateOrgIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateOrgIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateOrgIDPResponseValidationError is the validation error returned by
// DeactivateOrgIDPResponse.Validate if the designated constraints aren't met.
type DeactivateOrgIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateOrgIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateOrgIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateOrgIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateOrgIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateOrgIDPResponseValidationError) ErrorName() string {
	return "DeactivateOrgIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateOrgIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateOrgIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateOrgIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateOrgIDPResponseValidationError{}

// Validate checks the field values on ReactivateOrgIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateOrgIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return ReactivateOrgIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// ReactivateOrgIDPRequestValidationError is the validation error returned by
// ReactivateOrgIDPRequest.Validate if the designated constraints aren't met.
type ReactivateOrgIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateOrgIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateOrgIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateOrgIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateOrgIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateOrgIDPRequestValidationError) ErrorName() string {
	return "ReactivateOrgIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateOrgIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateOrgIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateOrgIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateOrgIDPRequestValidationError{}

// Validate checks the field values on ReactivateOrgIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateOrgIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateOrgIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateOrgIDPResponseValidationError is the validation error returned by
// ReactivateOrgIDPResponse.Validate if the designated constraints aren't met.
type ReactivateOrgIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateOrgIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateOrgIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateOrgIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateOrgIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateOrgIDPResponseValidationError) ErrorName() string {
	return "ReactivateOrgIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateOrgIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateOrgIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateOrgIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateOrgIDPResponseValidationError{}

// Validate checks the field values on RemoveOrgIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return RemoveOrgIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// RemoveOrgIDPRequestValidationError is the validation error returned by
// RemoveOrgIDPRequest.Validate if the designated constraints aren't met.
type RemoveOrgIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgIDPRequestValidationError) ErrorName() string {
	return "RemoveOrgIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgIDPRequestValidationError{}

// Validate checks the field values on RemoveOrgIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveOrgIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveOrgIDPResponseValidationError is the validation error returned by
// RemoveOrgIDPResponse.Validate if the designated constraints aren't met.
type RemoveOrgIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgIDPResponseValidationError) ErrorName() string {
	return "RemoveOrgIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgIDPResponseValidationError{}

// Validate checks the field values on UpdateOrgIDPRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIDPRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return UpdateOrgIDPRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateOrgIDPRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.IDPStylingType_name[int32(m.GetStylingType())]; !ok {
		return UpdateOrgIDPRequestValidationError{
			field:  "StylingType",
			reason: "value must be one of the defined enum values",
		}
	}

	// no validation rules for AutoRegister

	return nil
}

// UpdateOrgIDPRequestValidationError is the validation error returned by
// UpdateOrgIDPRequest.Validate if the designated constraints aren't met.
type UpdateOrgIDPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIDPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIDPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIDPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIDPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIDPRequestValidationError) ErrorName() string {
	return "UpdateOrgIDPRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIDPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIDPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIDPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIDPRequestValidationError{}

// Validate checks the field values on UpdateOrgIDPResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIDPResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgIDPResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOrgIDPResponseValidationError is the validation error returned by
// UpdateOrgIDPResponse.Validate if the designated constraints aren't met.
type UpdateOrgIDPResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIDPResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIDPResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIDPResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIDPResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIDPResponseValidationError) ErrorName() string {
	return "UpdateOrgIDPResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIDPResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIDPResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIDPResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIDPResponseValidationError{}

// Validate checks the field values on UpdateOrgIDPOIDCConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIDPOIDCConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return UpdateOrgIDPOIDCConfigRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetClientId()); l < 1 || l > 200 {
		return UpdateOrgIDPOIDCConfigRequestValidationError{
			field:  "ClientId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetClientSecret()) > 200 {
		return UpdateOrgIDPOIDCConfigRequestValidationError{
			field:  "ClientSecret",
			reason: "value length must be at most 200 runes",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return UpdateOrgIDPOIDCConfigRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetDisplayNameMapping())]; !ok {
		return UpdateOrgIDPOIDCConfigRequestValidationError{
			field:  "DisplayNameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	if _, ok := idp.OIDCMappingField_name[int32(m.GetUsernameMapping())]; !ok {
		return UpdateOrgIDPOIDCConfigRequestValidationError{
			field:  "UsernameMapping",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// UpdateOrgIDPOIDCConfigRequestValidationError is the validation error
// returned by UpdateOrgIDPOIDCConfigRequest.Validate if the designated
// constraints aren't met.
type UpdateOrgIDPOIDCConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIDPOIDCConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIDPOIDCConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIDPOIDCConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIDPOIDCConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIDPOIDCConfigRequestValidationError) ErrorName() string {
	return "UpdateOrgIDPOIDCConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIDPOIDCConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIDPOIDCConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIDPOIDCConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIDPOIDCConfigRequestValidationError{}

// Validate checks the field values on UpdateOrgIDPOIDCConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIDPOIDCConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgIDPOIDCConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOrgIDPOIDCConfigResponseValidationError is the validation error
// returned by UpdateOrgIDPOIDCConfigResponse.Validate if the designated
// constraints aren't met.
type UpdateOrgIDPOIDCConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIDPOIDCConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIDPOIDCConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIDPOIDCConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIDPOIDCConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIDPOIDCConfigResponseValidationError) ErrorName() string {
	return "UpdateOrgIDPOIDCConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIDPOIDCConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIDPOIDCConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIDPOIDCConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIDPOIDCConfigResponseValidationError{}

// Validate checks the field values on UpdateOrgIDPJWTConfigRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIDPJWTConfigRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return UpdateOrgIDPJWTConfigRequestValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetJwtEndpoint()); l < 1 || l > 200 {
		return UpdateOrgIDPJWTConfigRequestValidationError{
			field:  "JwtEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetIssuer()); l < 1 || l > 200 {
		return UpdateOrgIDPJWTConfigRequestValidationError{
			field:  "Issuer",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetKeysEndpoint()); l < 1 || l > 200 {
		return UpdateOrgIDPJWTConfigRequestValidationError{
			field:  "KeysEndpoint",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHeaderName()); l < 1 || l > 200 {
		return UpdateOrgIDPJWTConfigRequestValidationError{
			field:  "HeaderName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// UpdateOrgIDPJWTConfigRequestValidationError is the validation error returned
// by UpdateOrgIDPJWTConfigRequest.Validate if the designated constraints
// aren't met.
type UpdateOrgIDPJWTConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIDPJWTConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIDPJWTConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIDPJWTConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIDPJWTConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIDPJWTConfigRequestValidationError) ErrorName() string {
	return "UpdateOrgIDPJWTConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIDPJWTConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIDPJWTConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIDPJWTConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIDPJWTConfigRequestValidationError{}

// Validate checks the field values on UpdateOrgIDPJWTConfigResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateOrgIDPJWTConfigResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrgIDPJWTConfigResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateOrgIDPJWTConfigResponseValidationError is the validation error
// returned by UpdateOrgIDPJWTConfigResponse.Validate if the designated
// constraints aren't met.
type UpdateOrgIDPJWTConfigResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrgIDPJWTConfigResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrgIDPJWTConfigResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrgIDPJWTConfigResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrgIDPJWTConfigResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrgIDPJWTConfigResponseValidationError) ErrorName() string {
	return "UpdateOrgIDPJWTConfigResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrgIDPJWTConfigResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrgIDPJWTConfigResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrgIDPJWTConfigResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrgIDPJWTConfigResponseValidationError{}

// Validate checks the field values on ListProvidersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProvidersRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProvidersRequestValidationError is the validation error returned by
// ListProvidersRequest.Validate if the designated constraints aren't met.
type ListProvidersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersRequestValidationError) ErrorName() string {
	return "ListProvidersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersRequestValidationError{}

// Validate checks the field values on ProviderQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ProviderQuery) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Query.(type) {

	case *ProviderQuery_IdpIdQuery:

		if v, ok := interface{}(m.GetIdpIdQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderQueryValidationError{
					field:  "IdpIdQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProviderQuery_IdpNameQuery:

		if v, ok := interface{}(m.GetIdpNameQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderQueryValidationError{
					field:  "IdpNameQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProviderQuery_OwnerTypeQuery:

		if v, ok := interface{}(m.GetOwnerTypeQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProviderQueryValidationError{
					field:  "OwnerTypeQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ProviderQueryValidationError is the validation error returned by
// ProviderQuery.Validate if the designated constraints aren't met.
type ProviderQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProviderQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProviderQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProviderQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProviderQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProviderQueryValidationError) ErrorName() string { return "ProviderQueryValidationError" }

// Error satisfies the builtin error interface
func (e ProviderQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProviderQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProviderQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProviderQueryValidationError{}

// Validate checks the field values on ListProvidersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListProvidersResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListProvidersResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProvidersResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListProvidersResponseValidationError is the validation error returned by
// ListProvidersResponse.Validate if the designated constraints aren't met.
type ListProvidersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProvidersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProvidersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProvidersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProvidersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProvidersResponseValidationError) ErrorName() string {
	return "ListProvidersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProvidersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProvidersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProvidersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProvidersResponseValidationError{}

// Validate checks the field values on GetProviderByIDRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProviderByIDRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return GetProviderByIDRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// GetProviderByIDRequestValidationError is the validation error returned by
// GetProviderByIDRequest.Validate if the designated constraints aren't met.
type GetProviderByIDRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderByIDRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderByIDRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderByIDRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderByIDRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderByIDRequestValidationError) ErrorName() string {
	return "GetProviderByIDRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderByIDRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderByIDRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderByIDRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderByIDRequestValidationError{}

// Validate checks the field values on GetProviderByIDResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *GetProviderByIDResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetIdp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProviderByIDResponseValidationError{
				field:  "Idp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetProviderByIDResponseValidationError is the validation error returned by
// GetProviderByIDResponse.Validate if the designated constraints aren't met.
type GetProviderByIDResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProviderByIDResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProviderByIDResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProviderByIDResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProviderByIDResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProviderByIDResponseValidationError) ErrorName() string {
	return "GetProviderByIDResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProviderByIDResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProviderByIDResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProviderByIDResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProviderByIDResponseValidationError{}

// Validate checks the field values on AddLDAPProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddLDAPProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHost()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Host",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPort()) > 5 {
		return AddLDAPProviderRequestValidationError{
			field:  "Port",
			reason: "value length must be at most 5 runes",
		}
	}

	// no validation rules for Tls

	if l := utf8.RuneCountInString(m.GetBaseDn()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "BaseDn",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserObjectClass()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "UserObjectClass",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserUniqueAttribute()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "UserUniqueAttribute",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAdmin()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Admin",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetPassword()); l < 1 || l > 200 {
		return AddLDAPProviderRequestValidationError{
			field:  "Password",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLDAPProviderRequestValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProviderOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLDAPProviderRequestValidationError{
				field:  "ProviderOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// AddLDAPProviderRequestValidationError is the validation error returned by
// AddLDAPProviderRequest.Validate if the designated constraints aren't met.
type AddLDAPProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLDAPProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLDAPProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLDAPProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLDAPProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLDAPProviderRequestValidationError) ErrorName() string {
	return "AddLDAPProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddLDAPProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLDAPProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLDAPProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLDAPProviderRequestValidationError{}

// Validate checks the field values on AddLDAPProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddLDAPProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddLDAPProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	return nil
}

// AddLDAPProviderResponseValidationError is the validation error returned by
// AddLDAPProviderResponse.Validate if the designated constraints aren't met.
type AddLDAPProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddLDAPProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddLDAPProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddLDAPProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddLDAPProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddLDAPProviderResponseValidationError) ErrorName() string {
	return "AddLDAPProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddLDAPProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddLDAPProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddLDAPProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddLDAPProviderResponseValidationError{}

// Validate checks the field values on UpdateLDAPProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLDAPProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetHost()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Host",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPort()) > 5 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Port",
			reason: "value length must be at most 5 runes",
		}
	}

	// no validation rules for Tls

	if l := utf8.RuneCountInString(m.GetBaseDn()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "BaseDn",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserObjectClass()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "UserObjectClass",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetUserUniqueAttribute()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "UserUniqueAttribute",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetAdmin()); l < 1 || l > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Admin",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetPassword()) > 200 {
		return UpdateLDAPProviderRequestValidationError{
			field:  "Password",
			reason: "value length must be at most 200 runes",
		}
	}

	if v, ok := interface{}(m.GetAttributes()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLDAPProviderRequestValidationError{
				field:  "Attributes",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetProviderOptions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLDAPProviderRequestValidationError{
				field:  "ProviderOptions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLDAPProviderRequestValidationError is the validation error returned by
// UpdateLDAPProviderRequest.Validate if the designated constraints aren't met.
type UpdateLDAPProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLDAPProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLDAPProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLDAPProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLDAPProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLDAPProviderRequestValidationError) ErrorName() string {
	return "UpdateLDAPProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLDAPProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLDAPProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLDAPProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLDAPProviderRequestValidationError{}

// Validate checks the field values on UpdateLDAPProviderResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateLDAPProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateLDAPProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateLDAPProviderResponseValidationError is the validation error returned
// by UpdateLDAPProviderResponse.Validate if the designated constraints aren't met.
type UpdateLDAPProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateLDAPProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateLDAPProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateLDAPProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateLDAPProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateLDAPProviderResponseValidationError) ErrorName() string {
	return "UpdateLDAPProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateLDAPProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateLDAPProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateLDAPProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateLDAPProviderResponseValidationError{}

// Validate checks the field values on DeleteProviderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProviderRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return DeleteProviderRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	return nil
}

// DeleteProviderRequestValidationError is the validation error returned by
// DeleteProviderRequest.Validate if the designated constraints aren't met.
type DeleteProviderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderRequestValidationError) ErrorName() string {
	return "DeleteProviderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderRequestValidationError{}

// Validate checks the field values on DeleteProviderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteProviderResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteProviderResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeleteProviderResponseValidationError is the validation error returned by
// DeleteProviderResponse.Validate if the designated constraints aren't met.
type DeleteProviderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProviderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProviderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProviderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProviderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProviderResponseValidationError) ErrorName() string {
	return "DeleteProviderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProviderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProviderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProviderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProviderResponseValidationError{}

// Validate checks the field values on ListActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListActionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetQuery()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListActionsRequestValidationError{
				field:  "Query",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetQueries() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActionsRequestValidationError{
					field:  fmt.Sprintf("Queries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListActionsRequestValidationError is the validation error returned by
// ListActionsRequest.Validate if the designated constraints aren't met.
type ListActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActionsRequestValidationError) ErrorName() string {
	return "ListActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActionsRequestValidationError{}

// Validate checks the field values on ActionQuery with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ActionQuery) Validate() error {
	if m == nil {
		return nil
	}

	switch m.Query.(type) {

	case *ActionQuery_ActionIdQuery:

		if v, ok := interface{}(m.GetActionIdQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionQueryValidationError{
					field:  "ActionIdQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ActionQuery_ActionNameQuery:

		if v, ok := interface{}(m.GetActionNameQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionQueryValidationError{
					field:  "ActionNameQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ActionQuery_ActionStateQuery:

		if v, ok := interface{}(m.GetActionStateQuery()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActionQueryValidationError{
					field:  "ActionStateQuery",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		return ActionQueryValidationError{
			field:  "Query",
			reason: "value is required",
		}

	}

	return nil
}

// ActionQueryValidationError is the validation error returned by
// ActionQuery.Validate if the designated constraints aren't met.
type ActionQueryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActionQueryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActionQueryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActionQueryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActionQueryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActionQueryValidationError) ErrorName() string { return "ActionQueryValidationError" }

// Error satisfies the builtin error interface
func (e ActionQueryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActionQuery.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActionQueryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActionQueryValidationError{}

// Validate checks the field values on ListActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListActionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListActionsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SortingColumn

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListActionsResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListActionsResponseValidationError is the validation error returned by
// ListActionsResponse.Validate if the designated constraints aren't met.
type ListActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListActionsResponseValidationError) ErrorName() string {
	return "ListActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListActionsResponseValidationError{}

// Validate checks the field values on CreateActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return CreateActionRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetScript()); l < 1 || l > 2000 {
		return CreateActionRequestValidationError{
			field:  "Script",
			reason: "value length must be between 1 and 2000 runes, inclusive",
		}
	}

	if d := m.GetTimeout(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return CreateActionRequestValidationError{
				field:  "Timeout",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(20*time.Second + 0*time.Nanosecond)
		gte := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur < gte || dur > lte {
			return CreateActionRequestValidationError{
				field:  "Timeout",
				reason: "value must be inside range [0s, 20s]",
			}
		}

	}

	// no validation rules for AllowedToFail

	return nil
}

// CreateActionRequestValidationError is the validation error returned by
// CreateActionRequest.Validate if the designated constraints aren't met.
type CreateActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateActionRequestValidationError) ErrorName() string {
	return "CreateActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateActionRequestValidationError{}

// Validate checks the field values on CreateActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateActionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateActionResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Id

	return nil
}

// CreateActionResponseValidationError is the validation error returned by
// CreateActionResponse.Validate if the designated constraints aren't met.
type CreateActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateActionResponseValidationError) ErrorName() string {
	return "CreateActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateActionResponseValidationError{}

// Validate checks the field values on GetActionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// GetActionRequestValidationError is the validation error returned by
// GetActionRequest.Validate if the designated constraints aren't met.
type GetActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionRequestValidationError) ErrorName() string { return "GetActionRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionRequestValidationError{}

// Validate checks the field values on GetActionResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetActionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetAction()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetActionResponseValidationError{
				field:  "Action",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetActionResponseValidationError is the validation error returned by
// GetActionResponse.Validate if the designated constraints aren't met.
type GetActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetActionResponseValidationError) ErrorName() string {
	return "GetActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetActionResponseValidationError{}

// Validate checks the field values on UpdateActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetId()); l < 1 || l > 200 {
		return UpdateActionRequestValidationError{
			field:  "Id",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 200 {
		return UpdateActionRequestValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetScript()); l < 1 || l > 2000 {
		return UpdateActionRequestValidationError{
			field:  "Script",
			reason: "value length must be between 1 and 2000 runes, inclusive",
		}
	}

	if d := m.GetTimeout(); d != nil {
		dur, err := d.AsDuration(), d.CheckValid()
		if err != nil {
			return UpdateActionRequestValidationError{
				field:  "Timeout",
				reason: "value is not a valid duration",
				cause:  err,
			}
		}

		lte := time.Duration(20*time.Second + 0*time.Nanosecond)
		gte := time.Duration(0*time.Second + 0*time.Nanosecond)

		if dur < gte || dur > lte {
			return UpdateActionRequestValidationError{
				field:  "Timeout",
				reason: "value must be inside range [0s, 20s]",
			}
		}

	}

	// no validation rules for AllowedToFail

	return nil
}

// UpdateActionRequestValidationError is the validation error returned by
// UpdateActionRequest.Validate if the designated constraints aren't met.
type UpdateActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActionRequestValidationError) ErrorName() string {
	return "UpdateActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActionRequestValidationError{}

// Validate checks the field values on UpdateActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateActionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateActionResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateActionResponseValidationError is the validation error returned by
// UpdateActionResponse.Validate if the designated constraints aren't met.
type UpdateActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateActionResponseValidationError) ErrorName() string {
	return "UpdateActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateActionResponseValidationError{}

// Validate checks the field values on DeleteActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeleteActionRequestValidationError is the validation error returned by
// DeleteActionRequest.Validate if the designated constraints aren't met.
type DeleteActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActionRequestValidationError) ErrorName() string {
	return "DeleteActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActionRequestValidationError{}

// Validate checks the field values on DeleteActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeleteActionResponse) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// DeleteActionResponseValidationError is the validation error returned by
// DeleteActionResponse.Validate if the designated constraints aren't met.
type DeleteActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteActionResponseValidationError) ErrorName() string {
	return "DeleteActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteActionResponseValidationError{}

// Validate checks the field values on ListFlowTypesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFlowTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListFlowTypesRequestValidationError is the validation error returned by
// ListFlowTypesRequest.Validate if the designated constraints aren't met.
type ListFlowTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowTypesRequestValidationError) ErrorName() string {
	return "ListFlowTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowTypesRequestValidationError{}

// Validate checks the field values on ListFlowTypesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFlowTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFlowTypesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListFlowTypesResponseValidationError is the validation error returned by
// ListFlowTypesResponse.Validate if the designated constraints aren't met.
type ListFlowTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowTypesResponseValidationError) ErrorName() string {
	return "ListFlowTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowTypesResponseValidationError{}

// Validate checks the field values on ListFlowTriggerTypesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFlowTriggerTypesRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	return nil
}

// ListFlowTriggerTypesRequestValidationError is the validation error returned
// by ListFlowTriggerTypesRequest.Validate if the designated constraints
// aren't met.
type ListFlowTriggerTypesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowTriggerTypesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowTriggerTypesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowTriggerTypesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowTriggerTypesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowTriggerTypesRequestValidationError) ErrorName() string {
	return "ListFlowTriggerTypesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowTriggerTypesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowTriggerTypesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowTriggerTypesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowTriggerTypesRequestValidationError{}

// Validate checks the field values on ListFlowTriggerTypesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListFlowTriggerTypesResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetResult() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListFlowTriggerTypesResponseValidationError{
					field:  fmt.Sprintf("Result[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListFlowTriggerTypesResponseValidationError is the validation error returned
// by ListFlowTriggerTypesResponse.Validate if the designated constraints
// aren't met.
type ListFlowTriggerTypesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFlowTriggerTypesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFlowTriggerTypesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFlowTriggerTypesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFlowTriggerTypesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFlowTriggerTypesResponseValidationError) ErrorName() string {
	return "ListFlowTriggerTypesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFlowTriggerTypesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFlowTriggerTypesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFlowTriggerTypesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFlowTriggerTypesResponseValidationError{}

// Validate checks the field values on DeactivateActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// DeactivateActionRequestValidationError is the validation error returned by
// DeactivateActionRequest.Validate if the designated constraints aren't met.
type DeactivateActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateActionRequestValidationError) ErrorName() string {
	return "DeactivateActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateActionRequestValidationError{}

// Validate checks the field values on DeactivateActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DeactivateActionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeactivateActionResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DeactivateActionResponseValidationError is the validation error returned by
// DeactivateActionResponse.Validate if the designated constraints aren't met.
type DeactivateActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeactivateActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeactivateActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeactivateActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeactivateActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeactivateActionResponseValidationError) ErrorName() string {
	return "DeactivateActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeactivateActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeactivateActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeactivateActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeactivateActionResponseValidationError{}

// Validate checks the field values on ReactivateActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateActionRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	return nil
}

// ReactivateActionRequestValidationError is the validation error returned by
// ReactivateActionRequest.Validate if the designated constraints aren't met.
type ReactivateActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateActionRequestValidationError) ErrorName() string {
	return "ReactivateActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateActionRequestValidationError{}

// Validate checks the field values on ReactivateActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ReactivateActionResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReactivateActionResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ReactivateActionResponseValidationError is the validation error returned by
// ReactivateActionResponse.Validate if the designated constraints aren't met.
type ReactivateActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReactivateActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReactivateActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReactivateActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReactivateActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReactivateActionResponseValidationError) ErrorName() string {
	return "ReactivateActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReactivateActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReactivateActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReactivateActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReactivateActionResponseValidationError{}

// Validate checks the field values on GetFlowRequest with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *GetFlowRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	return nil
}

// GetFlowRequestValidationError is the validation error returned by
// GetFlowRequest.Validate if the designated constraints aren't met.
type GetFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlowRequestValidationError) ErrorName() string { return "GetFlowRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlowRequestValidationError{}

// Validate checks the field values on GetFlowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *GetFlowResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetFlow()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFlowResponseValidationError{
				field:  "Flow",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// GetFlowResponseValidationError is the validation error returned by
// GetFlowResponse.Validate if the designated constraints aren't met.
type GetFlowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFlowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFlowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFlowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFlowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFlowResponseValidationError) ErrorName() string { return "GetFlowResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFlowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFlowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFlowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFlowResponseValidationError{}

// Validate checks the field values on ClearFlowRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClearFlowRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Type

	return nil
}

// ClearFlowRequestValidationError is the validation error returned by
// ClearFlowRequest.Validate if the designated constraints aren't met.
type ClearFlowRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearFlowRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearFlowRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearFlowRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearFlowRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearFlowRequestValidationError) ErrorName() string { return "ClearFlowRequestValidationError" }

// Error satisfies the builtin error interface
func (e ClearFlowRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearFlowRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearFlowRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearFlowRequestValidationError{}

// Validate checks the field values on ClearFlowResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ClearFlowResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ClearFlowResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ClearFlowResponseValidationError is the validation error returned by
// ClearFlowResponse.Validate if the designated constraints aren't met.
type ClearFlowResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClearFlowResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClearFlowResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClearFlowResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClearFlowResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClearFlowResponseValidationError) ErrorName() string {
	return "ClearFlowResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClearFlowResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClearFlowResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClearFlowResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClearFlowResponseValidationError{}

// Validate checks the field values on SetTriggerActionsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetTriggerActionsRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for FlowType

	// no validation rules for TriggerType

	return nil
}

// SetTriggerActionsRequestValidationError is the validation error returned by
// SetTriggerActionsRequest.Validate if the designated constraints aren't met.
type SetTriggerActionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTriggerActionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTriggerActionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTriggerActionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTriggerActionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTriggerActionsRequestValidationError) ErrorName() string {
	return "SetTriggerActionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetTriggerActionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTriggerActionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTriggerActionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTriggerActionsRequestValidationError{}

// Validate checks the field values on SetTriggerActionsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *SetTriggerActionsResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetDetails()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SetTriggerActionsResponseValidationError{
				field:  "Details",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// SetTriggerActionsResponseValidationError is the validation error returned by
// SetTriggerActionsResponse.Validate if the designated constraints aren't met.
type SetTriggerActionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetTriggerActionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetTriggerActionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetTriggerActionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetTriggerActionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetTriggerActionsResponseValidationError) ErrorName() string {
	return "SetTriggerActionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetTriggerActionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetTriggerActionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetTriggerActionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetTriggerActionsResponseValidationError{}

// Validate checks the field values on AddHumanUserRequest_Profile with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddHumanUserRequest_Profile) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 200 {
		return AddHumanUserRequest_ProfileValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 200 {
		return AddHumanUserRequest_ProfileValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetNickName()) > 200 {
		return AddHumanUserRequest_ProfileValidationError{
			field:  "NickName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 200 {
		return AddHumanUserRequest_ProfileValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return AddHumanUserRequest_ProfileValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	// no validation rules for Gender

	return nil
}

// AddHumanUserRequest_ProfileValidationError is the validation error returned
// by AddHumanUserRequest_Profile.Validate if the designated constraints
// aren't met.
type AddHumanUserRequest_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHumanUserRequest_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHumanUserRequest_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHumanUserRequest_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHumanUserRequest_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHumanUserRequest_ProfileValidationError) ErrorName() string {
	return "AddHumanUserRequest_ProfileValidationError"
}

// Error satisfies the builtin error interface
func (e AddHumanUserRequest_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHumanUserRequest_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHumanUserRequest_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHumanUserRequest_ProfileValidationError{}

// Validate checks the field values on AddHumanUserRequest_Email with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddHumanUserRequest_Email) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return AddHumanUserRequest_EmailValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	// no validation rules for IsEmailVerified

	return nil
}

func (m *AddHumanUserRequest_Email) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddHumanUserRequest_Email) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddHumanUserRequest_EmailValidationError is the validation error returned by
// AddHumanUserRequest_Email.Validate if the designated constraints aren't met.
type AddHumanUserRequest_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHumanUserRequest_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHumanUserRequest_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHumanUserRequest_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHumanUserRequest_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHumanUserRequest_EmailValidationError) ErrorName() string {
	return "AddHumanUserRequest_EmailValidationError"
}

// Error satisfies the builtin error interface
func (e AddHumanUserRequest_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHumanUserRequest_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHumanUserRequest_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHumanUserRequest_EmailValidationError{}

// Validate checks the field values on AddHumanUserRequest_Phone with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddHumanUserRequest_Phone) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 50 {
		return AddHumanUserRequest_PhoneValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetPhone(), "+") {
		return AddHumanUserRequest_PhoneValidationError{
			field:  "Phone",
			reason: "value does not have prefix \"+\"",
		}
	}

	// no validation rules for IsPhoneVerified

	return nil
}

// AddHumanUserRequest_PhoneValidationError is the validation error returned by
// AddHumanUserRequest_Phone.Validate if the designated constraints aren't met.
type AddHumanUserRequest_PhoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddHumanUserRequest_PhoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddHumanUserRequest_PhoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddHumanUserRequest_PhoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddHumanUserRequest_PhoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddHumanUserRequest_PhoneValidationError) ErrorName() string {
	return "AddHumanUserRequest_PhoneValidationError"
}

// Error satisfies the builtin error interface
func (e AddHumanUserRequest_PhoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddHumanUserRequest_Phone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddHumanUserRequest_PhoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddHumanUserRequest_PhoneValidationError{}

// Validate checks the field values on ImportHumanUserRequest_Profile with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportHumanUserRequest_Profile) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetFirstName()); l < 1 || l > 200 {
		return ImportHumanUserRequest_ProfileValidationError{
			field:  "FirstName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetLastName()); l < 1 || l > 200 {
		return ImportHumanUserRequest_ProfileValidationError{
			field:  "LastName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetNickName()) > 200 {
		return ImportHumanUserRequest_ProfileValidationError{
			field:  "NickName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 200 {
		return ImportHumanUserRequest_ProfileValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 200 runes",
		}
	}

	if utf8.RuneCountInString(m.GetPreferredLanguage()) > 10 {
		return ImportHumanUserRequest_ProfileValidationError{
			field:  "PreferredLanguage",
			reason: "value length must be at most 10 runes",
		}
	}

	// no validation rules for Gender

	return nil
}

// ImportHumanUserRequest_ProfileValidationError is the validation error
// returned by ImportHumanUserRequest_Profile.Validate if the designated
// constraints aren't met.
type ImportHumanUserRequest_ProfileValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserRequest_ProfileValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserRequest_ProfileValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserRequest_ProfileValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserRequest_ProfileValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserRequest_ProfileValidationError) ErrorName() string {
	return "ImportHumanUserRequest_ProfileValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserRequest_ProfileValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserRequest_Profile.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserRequest_ProfileValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserRequest_ProfileValidationError{}

// Validate checks the field values on ImportHumanUserRequest_Email with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportHumanUserRequest_Email) Validate() error {
	if m == nil {
		return nil
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		return ImportHumanUserRequest_EmailValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
	}

	// no validation rules for IsEmailVerified

	return nil
}

func (m *ImportHumanUserRequest_Email) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *ImportHumanUserRequest_Email) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// ImportHumanUserRequest_EmailValidationError is the validation error returned
// by ImportHumanUserRequest_Email.Validate if the designated constraints
// aren't met.
type ImportHumanUserRequest_EmailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserRequest_EmailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserRequest_EmailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserRequest_EmailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserRequest_EmailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserRequest_EmailValidationError) ErrorName() string {
	return "ImportHumanUserRequest_EmailValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserRequest_EmailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserRequest_Email.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserRequest_EmailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserRequest_EmailValidationError{}

// Validate checks the field values on ImportHumanUserRequest_Phone with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportHumanUserRequest_Phone) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetPhone()); l < 1 || l > 50 {
		return ImportHumanUserRequest_PhoneValidationError{
			field:  "Phone",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
	}

	if !strings.HasPrefix(m.GetPhone(), "+") {
		return ImportHumanUserRequest_PhoneValidationError{
			field:  "Phone",
			reason: "value does not have prefix \"+\"",
		}
	}

	// no validation rules for IsPhoneVerified

	return nil
}

// ImportHumanUserRequest_PhoneValidationError is the validation error returned
// by ImportHumanUserRequest_Phone.Validate if the designated constraints
// aren't met.
type ImportHumanUserRequest_PhoneValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserRequest_PhoneValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserRequest_PhoneValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserRequest_PhoneValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserRequest_PhoneValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserRequest_PhoneValidationError) ErrorName() string {
	return "ImportHumanUserRequest_PhoneValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserRequest_PhoneValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserRequest_Phone.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserRequest_PhoneValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserRequest_PhoneValidationError{}

// Validate checks the field values on ImportHumanUserRequest_HashedPassword
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *ImportHumanUserRequest_HashedPassword) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Value

	// no validation rules for Algorithm

	return nil
}

// ImportHumanUserRequest_HashedPasswordValidationError is the validation error
// returned by ImportHumanUserRequest_HashedPassword.Validate if the
// designated constraints aren't met.
type ImportHumanUserRequest_HashedPasswordValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserRequest_HashedPasswordValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserRequest_HashedPasswordValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserRequest_HashedPasswordValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserRequest_HashedPasswordValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserRequest_HashedPasswordValidationError) ErrorName() string {
	return "ImportHumanUserRequest_HashedPasswordValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserRequest_HashedPasswordValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserRequest_HashedPassword.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserRequest_HashedPasswordValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserRequest_HashedPasswordValidationError{}

// Validate checks the field values on ImportHumanUserRequest_IDP with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ImportHumanUserRequest_IDP) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetConfigId()); l < 1 || l > 200 {
		return ImportHumanUserRequest_IDPValidationError{
			field:  "ConfigId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetExternalUserId()); l < 1 || l > 200 {
		return ImportHumanUserRequest_IDPValidationError{
			field:  "ExternalUserId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetDisplayName()) > 200 {
		return ImportHumanUserRequest_IDPValidationError{
			field:  "DisplayName",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// ImportHumanUserRequest_IDPValidationError is the validation error returned
// by ImportHumanUserRequest_IDP.Validate if the designated constraints aren't met.
type ImportHumanUserRequest_IDPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserRequest_IDPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImportHumanUserRequest_IDPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImportHumanUserRequest_IDPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImportHumanUserRequest_IDPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserRequest_IDPValidationError) ErrorName() string {
	return "ImportHumanUserRequest_IDPValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserRequest_IDPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserRequest_IDP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserRequest_IDPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserRequest_IDPValidationError{}

// Validate checks the field values on
// ImportHumanUserResponse_PasswordlessRegistration with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *ImportHumanUserResponse_PasswordlessRegistration) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Link

	if v, ok := interface{}(m.GetLifetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserResponse_PasswordlessRegistrationValidationError{
				field:  "Lifetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetExpiration()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ImportHumanUserResponse_PasswordlessRegistrationValidationError{
				field:  "Expiration",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// ImportHumanUserResponse_PasswordlessRegistrationValidationError is the
// validation error returned by
// ImportHumanUserResponse_PasswordlessRegistration.Validate if the designated
// constraints aren't met.
type ImportHumanUserResponse_PasswordlessRegistrationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImportHumanUserResponse_PasswordlessRegistrationValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e ImportHumanUserResponse_PasswordlessRegistrationValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e ImportHumanUserResponse_PasswordlessRegistrationValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e ImportHumanUserResponse_PasswordlessRegistrationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImportHumanUserResponse_PasswordlessRegistrationValidationError) ErrorName() string {
	return "ImportHumanUserResponse_PasswordlessRegistrationValidationError"
}

// Error satisfies the builtin error interface
func (e ImportHumanUserResponse_PasswordlessRegistrationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImportHumanUserResponse_PasswordlessRegistration.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImportHumanUserResponse_PasswordlessRegistrationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImportHumanUserResponse_PasswordlessRegistrationValidationError{}

// Validate checks the field values on BulkSetUserMetadataRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *BulkSetUserMetadataRequest_Metadata) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return BulkSetUserMetadataRequest_MetadataValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := len(m.GetValue()); l < 1 || l > 500000 {
		return BulkSetUserMetadataRequest_MetadataValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 500000 bytes, inclusive",
		}
	}

	return nil
}

// BulkSetUserMetadataRequest_MetadataValidationError is the validation error
// returned by BulkSetUserMetadataRequest_Metadata.Validate if the designated
// constraints aren't met.
type BulkSetUserMetadataRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetUserMetadataRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetUserMetadataRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetUserMetadataRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetUserMetadataRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetUserMetadataRequest_MetadataValidationError) ErrorName() string {
	return "BulkSetUserMetadataRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetUserMetadataRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetUserMetadataRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetUserMetadataRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetUserMetadataRequest_MetadataValidationError{}

// Validate checks the field values on BulkSetOrgMetadataRequest_Metadata with
// the rules defined in the proto definition for this message. If any rules
// are violated, an error is returned.
func (m *BulkSetOrgMetadataRequest_Metadata) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return BulkSetOrgMetadataRequest_MetadataValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := len(m.GetValue()); l < 1 || l > 500000 {
		return BulkSetOrgMetadataRequest_MetadataValidationError{
			field:  "Value",
			reason: "value length must be between 1 and 500000 bytes, inclusive",
		}
	}

	return nil
}

// BulkSetOrgMetadataRequest_MetadataValidationError is the validation error
// returned by BulkSetOrgMetadataRequest_Metadata.Validate if the designated
// constraints aren't met.
type BulkSetOrgMetadataRequest_MetadataValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkSetOrgMetadataRequest_MetadataValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkSetOrgMetadataRequest_MetadataValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkSetOrgMetadataRequest_MetadataValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkSetOrgMetadataRequest_MetadataValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkSetOrgMetadataRequest_MetadataValidationError) ErrorName() string {
	return "BulkSetOrgMetadataRequest_MetadataValidationError"
}

// Error satisfies the builtin error interface
func (e BulkSetOrgMetadataRequest_MetadataValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkSetOrgMetadataRequest_Metadata.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkSetOrgMetadataRequest_MetadataValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkSetOrgMetadataRequest_MetadataValidationError{}

// Validate checks the field values on BulkAddProjectRolesRequest_Role with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *BulkAddProjectRolesRequest_Role) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetKey()); l < 1 || l > 200 {
		return BulkAddProjectRolesRequest_RoleValidationError{
			field:  "Key",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if l := utf8.RuneCountInString(m.GetDisplayName()); l < 1 || l > 200 {
		return BulkAddProjectRolesRequest_RoleValidationError{
			field:  "DisplayName",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if utf8.RuneCountInString(m.GetGroup()) > 200 {
		return BulkAddProjectRolesRequest_RoleValidationError{
			field:  "Group",
			reason: "value length must be at most 200 runes",
		}
	}

	return nil
}

// BulkAddProjectRolesRequest_RoleValidationError is the validation error
// returned by BulkAddProjectRolesRequest_Role.Validate if the designated
// constraints aren't met.
type BulkAddProjectRolesRequest_RoleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BulkAddProjectRolesRequest_RoleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BulkAddProjectRolesRequest_RoleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BulkAddProjectRolesRequest_RoleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BulkAddProjectRolesRequest_RoleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BulkAddProjectRolesRequest_RoleValidationError) ErrorName() string {
	return "BulkAddProjectRolesRequest_RoleValidationError"
}

// Error satisfies the builtin error interface
func (e BulkAddProjectRolesRequest_RoleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBulkAddProjectRolesRequest_Role.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BulkAddProjectRolesRequest_RoleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BulkAddProjectRolesRequest_RoleValidationError{}

// Validate checks the field values on AddCustomLoginPolicyRequest_IDP with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *AddCustomLoginPolicyRequest_IDP) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetIdpId()); l < 1 || l > 200 {
		return AddCustomLoginPolicyRequest_IDPValidationError{
			field:  "IdpId",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
	}

	if _, ok := _AddCustomLoginPolicyRequest_IDP_OwnerType_NotInLookup[m.GetOwnerType()]; ok {
		return AddCustomLoginPolicyRequest_IDPValidationError{
			field:  "OwnerType",
			reason: "value must not be in list [0]",
		}
	}

	if _, ok := idp.IDPOwnerType_name[int32(m.GetOwnerType())]; !ok {
		return AddCustomLoginPolicyRequest_IDPValidationError{
			field:  "OwnerType",
			reason: "value must be one of the defined enum values",
		}
	}

	return nil
}

// AddCustomLoginPolicyRequest_IDPValidationError is the validation error
// returned by AddCustomLoginPolicyRequest_IDP.Validate if the designated
// constraints aren't met.
type AddCustomLoginPolicyRequest_IDPValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddCustomLoginPolicyRequest_IDPValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddCustomLoginPolicyRequest_IDPValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddCustomLoginPolicyRequest_IDPValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddCustomLoginPolicyRequest_IDPValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddCustomLoginPolicyRequest_IDPValidationError) ErrorName() string {
	return "AddCustomLoginPolicyRequest_IDPValidationError"
}

// Error satisfies the builtin error interface
func (e AddCustomLoginPolicyRequest_IDPValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddCustomLoginPolicyRequest_IDP.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddCustomLoginPolicyRequest_IDPValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddCustomLoginPolicyRequest_IDPValidationError{}

var _AddCustomLoginPolicyRequest_IDP_OwnerType_NotInLookup = map[idp.IDPOwnerType]struct{}{
	0: {},
}
