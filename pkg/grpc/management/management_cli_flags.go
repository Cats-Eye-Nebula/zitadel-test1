// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package management

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	action "github.com/zitadel/zitadel/pkg/grpc/action"
	app "github.com/zitadel/zitadel/pkg/grpc/app"
	authn "github.com/zitadel/zitadel/pkg/grpc/authn"
	change "github.com/zitadel/zitadel/pkg/grpc/change"
	idp "github.com/zitadel/zitadel/pkg/grpc/idp"
	member "github.com/zitadel/zitadel/pkg/grpc/member"
	message "github.com/zitadel/zitadel/pkg/grpc/message"
	metadata "github.com/zitadel/zitadel/pkg/grpc/metadata"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	org "github.com/zitadel/zitadel/pkg/grpc/org"
	policy "github.com/zitadel/zitadel/pkg/grpc/policy"
	project "github.com/zitadel/zitadel/pkg/grpc/project"
	text "github.com/zitadel/zitadel/pkg/grpc/text"
	user "github.com/zitadel/zitadel/pkg/grpc/user"
	os "os"
)

type ActionQueryFlag struct {
	*ActionQuery

	changed bool
	set     *pflag.FlagSet

	actionIdQueryFlag    *action.ActionIDQueryFlag
	actionNameQueryFlag  *action.ActionNameQueryFlag
	actionStateQueryFlag *action.ActionStateQueryFlag
}

func (x *ActionQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActionQuery", pflag.ContinueOnError)

	x.actionIdQueryFlag = &action.ActionIDQueryFlag{ActionIDQuery: new(action.ActionIDQuery)}
	x.actionIdQueryFlag.AddFlags(x.set)
	x.actionNameQueryFlag = &action.ActionNameQueryFlag{ActionNameQuery: new(action.ActionNameQuery)}
	x.actionNameQueryFlag.AddFlags(x.set)
	x.actionStateQueryFlag = &action.ActionStateQueryFlag{ActionStateQuery: new(action.ActionStateQuery)}
	x.actionStateQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ActionQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "action-id-query", "action-name-query", "action-state-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("action-id-query"); flagIdx != nil {
		x.actionIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("action-name-query"); flagIdx != nil {
		x.actionNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("action-state-query"); flagIdx != nil {
		x.actionStateQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "action-id-query", "action-name-query", "action-state-query").Last().Flag {
	case "action-id-query":
		if x.actionIdQueryFlag.Changed() {
			x.changed = true
			x.ActionQuery.Query = &ActionQuery_ActionIdQuery{ActionIdQuery: x.actionIdQueryFlag.ActionIDQuery}
		}
	case "action-name-query":
		if x.actionNameQueryFlag.Changed() {
			x.changed = true
			x.ActionQuery.Query = &ActionQuery_ActionNameQuery{ActionNameQuery: x.actionNameQueryFlag.ActionNameQuery}
		}
	case "action-state-query":
		if x.actionStateQueryFlag.Changed() {
			x.changed = true
			x.ActionQuery.Query = &ActionQuery_ActionStateQuery{ActionStateQuery: x.actionStateQueryFlag.ActionStateQuery}
		}
	}
}

func (x *ActionQueryFlag) Changed() bool {
	return x.changed
}

type ActivateCustomLabelPolicyRequestFlag struct {
	*ActivateCustomLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ActivateCustomLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateCustomLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ActivateCustomLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ActivateCustomLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type ActivateCustomLabelPolicyResponseFlag struct {
	*ActivateCustomLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ActivateCustomLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ActivateCustomLabelPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ActivateCustomLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ActivateCustomLabelPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ActivateCustomLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddAPIAppRequestFlag struct {
	*AddAPIAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag      *cli_client.StringParser
	nameFlag           *cli_client.StringParser
	authMethodTypeFlag *cli_client.EnumParser[app.APIAuthMethodType]
}

func (x *AddAPIAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAPIAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.authMethodTypeFlag = cli_client.NewEnumParser[app.APIAuthMethodType](x.set, "auth-method-type", "")
	parent.AddFlagSet(x.set)
}

func (x *AddAPIAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddAPIAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddAPIAppRequest.Name = *x.nameFlag.Value
	}
	if x.authMethodTypeFlag.Changed() {
		x.changed = true
		x.AddAPIAppRequest.AuthMethodType = *x.authMethodTypeFlag.Value
	}
}

func (x *AddAPIAppRequestFlag) Changed() bool {
	return x.changed
}

type AddAPIAppResponseFlag struct {
	*AddAPIAppResponse

	changed bool
	set     *pflag.FlagSet

	appIdFlag        *cli_client.StringParser
	detailsFlag      *object.ObjectDetailsFlag
	clientIdFlag     *cli_client.StringParser
	clientSecretFlag *cli_client.StringParser
}

func (x *AddAPIAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAPIAppResponse", pflag.ContinueOnError)

	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAPIAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.appIdFlag.Changed() {
		x.changed = true
		x.AddAPIAppResponse.AppId = *x.appIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddAPIAppResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddAPIAppResponse.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddAPIAppResponse.ClientSecret = *x.clientSecretFlag.Value
	}
}

func (x *AddAPIAppResponseFlag) Changed() bool {
	return x.changed
}

type AddAppKeyRequestFlag struct {
	*AddAppKeyRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag      *cli_client.StringParser
	appIdFlag          *cli_client.StringParser
	typeFlag           *cli_client.EnumParser[authn.KeyType]
	expirationDateFlag *cli_client.TimestampParser
}

func (x *AddAppKeyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAppKeyRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.typeFlag = cli_client.NewEnumParser[authn.KeyType](x.set, "type", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	parent.AddFlagSet(x.set)
}

func (x *AddAppKeyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddAppKeyRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.AddAppKeyRequest.AppId = *x.appIdFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.AddAppKeyRequest.Type = *x.typeFlag.Value
	}
	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.AddAppKeyRequest.ExpirationDate = x.expirationDateFlag.Value
	}
}

func (x *AddAppKeyRequestFlag) Changed() bool {
	return x.changed
}

type AddAppKeyResponseFlag struct {
	*AddAppKeyResponse

	changed bool
	set     *pflag.FlagSet

	idFlag         *cli_client.StringParser
	detailsFlag    *object.ObjectDetailsFlag
	keyDetailsFlag *cli_client.BytesParser
}

func (x *AddAppKeyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAppKeyResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.keyDetailsFlag = cli_client.NewBytesParser(x.set, "key-details", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAppKeyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddAppKeyResponse.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddAppKeyResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.keyDetailsFlag.Changed() {
		x.changed = true
		x.AddAppKeyResponse.KeyDetails = *x.keyDetailsFlag.Value
	}
}

func (x *AddAppKeyResponseFlag) Changed() bool {
	return x.changed
}

type AddAppleProviderRequestFlag struct {
	*AddAppleProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	teamIdFlag          *cli_client.StringParser
	keyIdFlag           *cli_client.StringParser
	privateKeyFlag      *cli_client.BytesParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddAppleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAppleProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.teamIdFlag = cli_client.NewStringParser(x.set, "team-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.privateKeyFlag = cli_client.NewBytesParser(x.set, "private-key", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAppleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.teamIdFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.TeamId = *x.teamIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.KeyId = *x.keyIdFlag.Value
	}
	if x.privateKeyFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.PrivateKey = *x.privateKeyFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddAppleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddAppleProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddAppleProviderResponseFlag struct {
	*AddAppleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddAppleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAppleProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAppleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddAppleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddAppleProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddAppleProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddAzureADProviderRequestFlag struct {
	*AddAzureADProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	tenantFlag          *idp.AzureADTenantFlag
	emailVerifiedFlag   *cli_client.BoolParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddAzureADProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAzureADProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.emailVerifiedFlag = cli_client.NewBoolParser(x.set, "email-verified", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.tenantFlag = &idp.AzureADTenantFlag{AzureADTenant: new(idp.AzureADTenant)}
	x.tenantFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAzureADProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "tenant", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("tenant"); flagIdx != nil {
		x.tenantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.tenantFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.Tenant = x.tenantFlag.AzureADTenant
	}

	if x.emailVerifiedFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.EmailVerified = *x.emailVerifiedFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddAzureADProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddAzureADProviderResponseFlag struct {
	*AddAzureADProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddAzureADProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddAzureADProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddAzureADProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddAzureADProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddAzureADProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomLabelPolicyRequestFlag struct {
	*AddCustomLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet

	primaryColorFlag        *cli_client.StringParser
	hideLoginNameSuffixFlag *cli_client.BoolParser
	warnColorFlag           *cli_client.StringParser
	backgroundColorFlag     *cli_client.StringParser
	fontColorFlag           *cli_client.StringParser
	primaryColorDarkFlag    *cli_client.StringParser
	backgroundColorDarkFlag *cli_client.StringParser
	warnColorDarkFlag       *cli_client.StringParser
	fontColorDarkFlag       *cli_client.StringParser
	disableWatermarkFlag    *cli_client.BoolParser
	themeModeFlag           *cli_client.EnumParser[policy.ThemeMode]
}

func (x *AddCustomLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLabelPolicyRequest", pflag.ContinueOnError)

	x.primaryColorFlag = cli_client.NewStringParser(x.set, "primary-color", "")
	x.hideLoginNameSuffixFlag = cli_client.NewBoolParser(x.set, "hide-login-name-suffix", "")
	x.warnColorFlag = cli_client.NewStringParser(x.set, "warn-color", "")
	x.backgroundColorFlag = cli_client.NewStringParser(x.set, "background-color", "")
	x.fontColorFlag = cli_client.NewStringParser(x.set, "font-color", "")
	x.primaryColorDarkFlag = cli_client.NewStringParser(x.set, "primary-color-dark", "")
	x.backgroundColorDarkFlag = cli_client.NewStringParser(x.set, "background-color-dark", "")
	x.warnColorDarkFlag = cli_client.NewStringParser(x.set, "warn-color-dark", "")
	x.fontColorDarkFlag = cli_client.NewStringParser(x.set, "font-color-dark", "")
	x.disableWatermarkFlag = cli_client.NewBoolParser(x.set, "disable-watermark", "")
	x.themeModeFlag = cli_client.NewEnumParser[policy.ThemeMode](x.set, "theme-mode", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.primaryColorFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.PrimaryColor = *x.primaryColorFlag.Value
	}
	if x.hideLoginNameSuffixFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.HideLoginNameSuffix = *x.hideLoginNameSuffixFlag.Value
	}
	if x.warnColorFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.WarnColor = *x.warnColorFlag.Value
	}
	if x.backgroundColorFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.BackgroundColor = *x.backgroundColorFlag.Value
	}
	if x.fontColorFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.FontColor = *x.fontColorFlag.Value
	}
	if x.primaryColorDarkFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.PrimaryColorDark = *x.primaryColorDarkFlag.Value
	}
	if x.backgroundColorDarkFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.BackgroundColorDark = *x.backgroundColorDarkFlag.Value
	}
	if x.warnColorDarkFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.WarnColorDark = *x.warnColorDarkFlag.Value
	}
	if x.fontColorDarkFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.FontColorDark = *x.fontColorDarkFlag.Value
	}
	if x.disableWatermarkFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.DisableWatermark = *x.disableWatermarkFlag.Value
	}
	if x.themeModeFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyRequest.ThemeMode = *x.themeModeFlag.Value
	}
}

func (x *AddCustomLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomLabelPolicyResponseFlag struct {
	*AddCustomLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLabelPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomLabelPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomLockoutPolicyRequestFlag struct {
	*AddCustomLockoutPolicyRequest

	changed bool
	set     *pflag.FlagSet

	maxPasswordAttemptsFlag *cli_client.Uint32Parser
}

func (x *AddCustomLockoutPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLockoutPolicyRequest", pflag.ContinueOnError)

	x.maxPasswordAttemptsFlag = cli_client.NewUint32Parser(x.set, "max-password-attempts", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLockoutPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.maxPasswordAttemptsFlag.Changed() {
		x.changed = true
		x.AddCustomLockoutPolicyRequest.MaxPasswordAttempts = *x.maxPasswordAttemptsFlag.Value
	}
}

func (x *AddCustomLockoutPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomLockoutPolicyResponseFlag struct {
	*AddCustomLockoutPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomLockoutPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLockoutPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLockoutPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomLockoutPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomLockoutPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomLoginPolicyRequestFlag struct {
	*AddCustomLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	allowUsernamePasswordFlag      *cli_client.BoolParser
	allowRegisterFlag              *cli_client.BoolParser
	allowExternalIdpFlag           *cli_client.BoolParser
	forceMfaFlag                   *cli_client.BoolParser
	passwordlessTypeFlag           *cli_client.EnumParser[policy.PasswordlessType]
	hidePasswordResetFlag          *cli_client.BoolParser
	ignoreUnknownUsernamesFlag     *cli_client.BoolParser
	defaultRedirectUriFlag         *cli_client.StringParser
	passwordCheckLifetimeFlag      *cli_client.DurationParser
	externalLoginCheckLifetimeFlag *cli_client.DurationParser
	mfaInitSkipLifetimeFlag        *cli_client.DurationParser
	secondFactorCheckLifetimeFlag  *cli_client.DurationParser
	multiFactorCheckLifetimeFlag   *cli_client.DurationParser
	secondFactorsFlag              *cli_client.EnumSliceParser[policy.SecondFactorType]
	multiFactorsFlag               *cli_client.EnumSliceParser[policy.MultiFactorType]
	idpsFlag                       []*AddCustomLoginPolicyRequest_IDPFlag
	allowDomainDiscoveryFlag       *cli_client.BoolParser
	disableLoginWithEmailFlag      *cli_client.BoolParser
	disableLoginWithPhoneFlag      *cli_client.BoolParser
	forceMfaLocalOnlyFlag          *cli_client.BoolParser
}

func (x *AddCustomLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLoginPolicyRequest", pflag.ContinueOnError)

	x.allowUsernamePasswordFlag = cli_client.NewBoolParser(x.set, "allow-username-password", "")
	x.allowRegisterFlag = cli_client.NewBoolParser(x.set, "allow-register", "")
	x.allowExternalIdpFlag = cli_client.NewBoolParser(x.set, "allow-external-idp", "")
	x.forceMfaFlag = cli_client.NewBoolParser(x.set, "force-mfa", "")
	x.passwordlessTypeFlag = cli_client.NewEnumParser[policy.PasswordlessType](x.set, "passwordless-type", "")
	x.hidePasswordResetFlag = cli_client.NewBoolParser(x.set, "hide-password-reset", "")
	x.ignoreUnknownUsernamesFlag = cli_client.NewBoolParser(x.set, "ignore-unknown-usernames", "")
	x.defaultRedirectUriFlag = cli_client.NewStringParser(x.set, "default-redirect-uri", "")
	x.passwordCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "password-check-lifetime", "")
	x.externalLoginCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "external-login-check-lifetime", "")
	x.mfaInitSkipLifetimeFlag = cli_client.NewDurationParser(x.set, "mfa-init-skip-lifetime", "")
	x.secondFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "second-factor-check-lifetime", "")
	x.multiFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "multi-factor-check-lifetime", "")
	x.secondFactorsFlag = cli_client.NewEnumSliceParser[policy.SecondFactorType](x.set, "second-factors", "")
	x.multiFactorsFlag = cli_client.NewEnumSliceParser[policy.MultiFactorType](x.set, "multi-factors", "")
	x.idpsFlag = []*AddCustomLoginPolicyRequest_IDPFlag{}
	x.allowDomainDiscoveryFlag = cli_client.NewBoolParser(x.set, "allow-domain-discovery", "")
	x.disableLoginWithEmailFlag = cli_client.NewBoolParser(x.set, "disable-login-with-email", "")
	x.disableLoginWithPhoneFlag = cli_client.NewBoolParser(x.set, "disable-login-with-phone", "")
	x.forceMfaLocalOnlyFlag = cli_client.NewBoolParser(x.set, "force-mfa-local-only", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idps")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("idps") {
		x.idpsFlag = append(x.idpsFlag, &AddCustomLoginPolicyRequest_IDPFlag{AddCustomLoginPolicyRequest_IDP: new(AddCustomLoginPolicyRequest_IDP)})
		x.idpsFlag[len(x.idpsFlag)-1].AddFlags(x.set)
		x.idpsFlag[len(x.idpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.allowUsernamePasswordFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.AllowUsernamePassword = *x.allowUsernamePasswordFlag.Value
	}
	if x.allowRegisterFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.AllowRegister = *x.allowRegisterFlag.Value
	}
	if x.allowExternalIdpFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.AllowExternalIdp = *x.allowExternalIdpFlag.Value
	}
	if x.forceMfaFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.ForceMfa = *x.forceMfaFlag.Value
	}
	if x.passwordlessTypeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.PasswordlessType = *x.passwordlessTypeFlag.Value
	}
	if x.hidePasswordResetFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.HidePasswordReset = *x.hidePasswordResetFlag.Value
	}
	if x.ignoreUnknownUsernamesFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.IgnoreUnknownUsernames = *x.ignoreUnknownUsernamesFlag.Value
	}
	if x.defaultRedirectUriFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.DefaultRedirectUri = *x.defaultRedirectUriFlag.Value
	}
	if x.passwordCheckLifetimeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.PasswordCheckLifetime = x.passwordCheckLifetimeFlag.Value
	}
	if x.externalLoginCheckLifetimeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.ExternalLoginCheckLifetime = x.externalLoginCheckLifetimeFlag.Value
	}
	if x.mfaInitSkipLifetimeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.MfaInitSkipLifetime = x.mfaInitSkipLifetimeFlag.Value
	}
	if x.secondFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.SecondFactorCheckLifetime = x.secondFactorCheckLifetimeFlag.Value
	}
	if x.multiFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.MultiFactorCheckLifetime = x.multiFactorCheckLifetimeFlag.Value
	}
	if x.secondFactorsFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.SecondFactors = *x.secondFactorsFlag.Value
	}
	if x.multiFactorsFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.MultiFactors = *x.multiFactorsFlag.Value
	}
	if len(x.idpsFlag) > 0 {
		x.changed = true
		x.Idps = make([]*AddCustomLoginPolicyRequest_IDP, len(x.idpsFlag))
		for i, value := range x.idpsFlag {
			x.AddCustomLoginPolicyRequest.Idps[i] = value.AddCustomLoginPolicyRequest_IDP
		}
	}

	if x.allowDomainDiscoveryFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.AllowDomainDiscovery = *x.allowDomainDiscoveryFlag.Value
	}
	if x.disableLoginWithEmailFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.DisableLoginWithEmail = *x.disableLoginWithEmailFlag.Value
	}
	if x.disableLoginWithPhoneFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.DisableLoginWithPhone = *x.disableLoginWithPhoneFlag.Value
	}
	if x.forceMfaLocalOnlyFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest.ForceMfaLocalOnly = *x.forceMfaLocalOnlyFlag.Value
	}
}

func (x *AddCustomLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomLoginPolicyRequest_IDPFlag struct {
	*AddCustomLoginPolicyRequest_IDP

	changed bool
	set     *pflag.FlagSet

	idpIdFlag     *cli_client.StringParser
	ownerTypeFlag *cli_client.EnumParser[idp.IDPOwnerType]
}

func (x *AddCustomLoginPolicyRequest_IDPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLoginPolicyRequest_IDP", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.ownerTypeFlag = cli_client.NewEnumParser[idp.IDPOwnerType](x.set, "ownerType", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLoginPolicyRequest_IDPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest_IDP.IdpId = *x.idpIdFlag.Value
	}
	if x.ownerTypeFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyRequest_IDP.OwnerType = *x.ownerTypeFlag.Value
	}
}

func (x *AddCustomLoginPolicyRequest_IDPFlag) Changed() bool {
	return x.changed
}

type AddCustomLoginPolicyResponseFlag struct {
	*AddCustomLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomNotificationPolicyRequestFlag struct {
	*AddCustomNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet

	passwordChangeFlag *cli_client.BoolParser
}

func (x *AddCustomNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomNotificationPolicyRequest", pflag.ContinueOnError)

	x.passwordChangeFlag = cli_client.NewBoolParser(x.set, "password-change", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordChangeFlag.Changed() {
		x.changed = true
		x.AddCustomNotificationPolicyRequest.PasswordChange = *x.passwordChangeFlag.Value
	}
}

func (x *AddCustomNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomNotificationPolicyResponseFlag struct {
	*AddCustomNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomNotificationPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomNotificationPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomPasswordAgePolicyRequestFlag struct {
	*AddCustomPasswordAgePolicyRequest

	changed bool
	set     *pflag.FlagSet

	maxAgeDaysFlag     *cli_client.Uint32Parser
	expireWarnDaysFlag *cli_client.Uint32Parser
}

func (x *AddCustomPasswordAgePolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomPasswordAgePolicyRequest", pflag.ContinueOnError)

	x.maxAgeDaysFlag = cli_client.NewUint32Parser(x.set, "max-age-days", "")
	x.expireWarnDaysFlag = cli_client.NewUint32Parser(x.set, "expire-warn-days", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomPasswordAgePolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.maxAgeDaysFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordAgePolicyRequest.MaxAgeDays = *x.maxAgeDaysFlag.Value
	}
	if x.expireWarnDaysFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordAgePolicyRequest.ExpireWarnDays = *x.expireWarnDaysFlag.Value
	}
}

func (x *AddCustomPasswordAgePolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomPasswordAgePolicyResponseFlag struct {
	*AddCustomPasswordAgePolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomPasswordAgePolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomPasswordAgePolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomPasswordAgePolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordAgePolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomPasswordAgePolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomPasswordComplexityPolicyRequestFlag struct {
	*AddCustomPasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet

	minLengthFlag    *cli_client.Uint64Parser
	hasUppercaseFlag *cli_client.BoolParser
	hasLowercaseFlag *cli_client.BoolParser
	hasNumberFlag    *cli_client.BoolParser
	hasSymbolFlag    *cli_client.BoolParser
}

func (x *AddCustomPasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomPasswordComplexityPolicyRequest", pflag.ContinueOnError)

	x.minLengthFlag = cli_client.NewUint64Parser(x.set, "min-length", "")
	x.hasUppercaseFlag = cli_client.NewBoolParser(x.set, "has-uppercase", "")
	x.hasLowercaseFlag = cli_client.NewBoolParser(x.set, "has-lowercase", "")
	x.hasNumberFlag = cli_client.NewBoolParser(x.set, "has-number", "")
	x.hasSymbolFlag = cli_client.NewBoolParser(x.set, "has-symbol", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomPasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.minLengthFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordComplexityPolicyRequest.MinLength = *x.minLengthFlag.Value
	}
	if x.hasUppercaseFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordComplexityPolicyRequest.HasUppercase = *x.hasUppercaseFlag.Value
	}
	if x.hasLowercaseFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordComplexityPolicyRequest.HasLowercase = *x.hasLowercaseFlag.Value
	}
	if x.hasNumberFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordComplexityPolicyRequest.HasNumber = *x.hasNumberFlag.Value
	}
	if x.hasSymbolFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordComplexityPolicyRequest.HasSymbol = *x.hasSymbolFlag.Value
	}
}

func (x *AddCustomPasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomPasswordComplexityPolicyResponseFlag struct {
	*AddCustomPasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomPasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomPasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomPasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomPasswordComplexityPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomPasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddCustomPrivacyPolicyRequestFlag struct {
	*AddCustomPrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet

	tosLinkFlag      *cli_client.StringParser
	privacyLinkFlag  *cli_client.StringParser
	helpLinkFlag     *cli_client.StringParser
	supportEmailFlag *cli_client.StringParser
}

func (x *AddCustomPrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomPrivacyPolicyRequest", pflag.ContinueOnError)

	x.tosLinkFlag = cli_client.NewStringParser(x.set, "tos-link", "")
	x.privacyLinkFlag = cli_client.NewStringParser(x.set, "privacy-link", "")
	x.helpLinkFlag = cli_client.NewStringParser(x.set, "help-link", "")
	x.supportEmailFlag = cli_client.NewStringParser(x.set, "support-email", "")
	parent.AddFlagSet(x.set)
}

func (x *AddCustomPrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tosLinkFlag.Changed() {
		x.changed = true
		x.AddCustomPrivacyPolicyRequest.TosLink = *x.tosLinkFlag.Value
	}
	if x.privacyLinkFlag.Changed() {
		x.changed = true
		x.AddCustomPrivacyPolicyRequest.PrivacyLink = *x.privacyLinkFlag.Value
	}
	if x.helpLinkFlag.Changed() {
		x.changed = true
		x.AddCustomPrivacyPolicyRequest.HelpLink = *x.helpLinkFlag.Value
	}
	if x.supportEmailFlag.Changed() {
		x.changed = true
		x.AddCustomPrivacyPolicyRequest.SupportEmail = *x.supportEmailFlag.Value
	}
}

func (x *AddCustomPrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddCustomPrivacyPolicyResponseFlag struct {
	*AddCustomPrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddCustomPrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddCustomPrivacyPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddCustomPrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddCustomPrivacyPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddCustomPrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddGenericOAuthProviderRequestFlag struct {
	*AddGenericOAuthProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag                  *cli_client.StringParser
	clientIdFlag              *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	idAttributeFlag           *cli_client.StringParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *AddGenericOAuthProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOAuthProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.idAttributeFlag = cli_client.NewStringParser(x.set, "id-attribute", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOAuthProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.Scopes = *x.scopesFlag.Value
	}
	if x.idAttributeFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.IdAttribute = *x.idAttributeFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGenericOAuthProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGenericOAuthProviderResponseFlag struct {
	*AddGenericOAuthProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGenericOAuthProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOAuthProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOAuthProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGenericOAuthProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGenericOAuthProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGenericOIDCProviderRequestFlag struct {
	*AddGenericOIDCProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag             *cli_client.StringParser
	issuerFlag           *cli_client.StringParser
	clientIdFlag         *cli_client.StringParser
	clientSecretFlag     *cli_client.StringParser
	scopesFlag           *cli_client.StringSliceParser
	providerOptionsFlag  *idp.OptionsFlag
	isIdTokenMappingFlag *cli_client.BoolParser
}

func (x *AddGenericOIDCProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOIDCProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.isIdTokenMappingFlag = cli_client.NewBoolParser(x.set, "is-id-token-mapping", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOIDCProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	if x.isIdTokenMappingFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderRequest.IsIdTokenMapping = *x.isIdTokenMappingFlag.Value
	}
}

func (x *AddGenericOIDCProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGenericOIDCProviderResponseFlag struct {
	*AddGenericOIDCProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGenericOIDCProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGenericOIDCProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGenericOIDCProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGenericOIDCProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGenericOIDCProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitHubEnterpriseServerProviderRequestFlag struct {
	*AddGitHubEnterpriseServerProviderRequest

	changed bool
	set     *pflag.FlagSet

	clientIdFlag              *cli_client.StringParser
	nameFlag                  *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *AddGitHubEnterpriseServerProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubEnterpriseServerProviderRequest", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubEnterpriseServerProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitHubEnterpriseServerProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitHubEnterpriseServerProviderResponseFlag struct {
	*AddGitHubEnterpriseServerProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitHubEnterpriseServerProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubEnterpriseServerProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubEnterpriseServerProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitHubEnterpriseServerProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitHubEnterpriseServerProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitHubProviderRequestFlag struct {
	*AddGitHubProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGitHubProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitHubProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitHubProviderResponseFlag struct {
	*AddGitHubProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitHubProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitHubProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitHubProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitHubProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitHubProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitLabProviderRequestFlag struct {
	*AddGitLabProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGitLabProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitLabProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitLabProviderResponseFlag struct {
	*AddGitLabProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitLabProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitLabProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitLabProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGitLabSelfHostedProviderRequestFlag struct {
	*AddGitLabSelfHostedProviderRequest

	changed bool
	set     *pflag.FlagSet

	issuerFlag          *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGitLabSelfHostedProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabSelfHostedProviderRequest", pflag.ContinueOnError)

	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabSelfHostedProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGitLabSelfHostedProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGitLabSelfHostedProviderResponseFlag struct {
	*AddGitLabSelfHostedProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGitLabSelfHostedProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGitLabSelfHostedProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGitLabSelfHostedProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGitLabSelfHostedProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGitLabSelfHostedProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddGoogleProviderRequestFlag struct {
	*AddGoogleProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddGoogleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGoogleProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGoogleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddGoogleProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddGoogleProviderResponseFlag struct {
	*AddGoogleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddGoogleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddGoogleProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddGoogleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddGoogleProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddGoogleProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddHumanUserRequestFlag struct {
	*AddHumanUserRequest

	changed bool
	set     *pflag.FlagSet

	userNameFlag        *cli_client.StringParser
	profileFlag         *AddHumanUserRequest_ProfileFlag
	emailFlag           *AddHumanUserRequest_EmailFlag
	phoneFlag           *AddHumanUserRequest_PhoneFlag
	initialPasswordFlag *cli_client.StringParser
}

func (x *AddHumanUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserRequest", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.initialPasswordFlag = cli_client.NewStringParser(x.set, "initial-password", "")
	x.profileFlag = &AddHumanUserRequest_ProfileFlag{AddHumanUserRequest_Profile: new(AddHumanUserRequest_Profile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &AddHumanUserRequest_EmailFlag{AddHumanUserRequest_Email: new(AddHumanUserRequest_Email)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &AddHumanUserRequest_PhoneFlag{AddHumanUserRequest_Phone: new(AddHumanUserRequest_Phone)}
	x.phoneFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.UserName = *x.userNameFlag.Value
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Profile = x.profileFlag.AddHumanUserRequest_Profile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Email = x.emailFlag.AddHumanUserRequest_Email
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.Phone = x.phoneFlag.AddHumanUserRequest_Phone
	}

	if x.initialPasswordFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest.InitialPassword = *x.initialPasswordFlag.Value
	}
}

func (x *AddHumanUserRequestFlag) Changed() bool {
	return x.changed
}

type AddHumanUserRequest_EmailFlag struct {
	*AddHumanUserRequest_Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *AddHumanUserRequest_EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserRequest_Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserRequest_EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *AddHumanUserRequest_EmailFlag) Changed() bool {
	return x.changed
}

type AddHumanUserRequest_PhoneFlag struct {
	*AddHumanUserRequest_Phone

	changed bool
	set     *pflag.FlagSet

	phoneFlag           *cli_client.StringParser
	isPhoneVerifiedFlag *cli_client.BoolParser
}

func (x *AddHumanUserRequest_PhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserRequest_Phone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isPhoneVerifiedFlag = cli_client.NewBoolParser(x.set, "is-phone-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserRequest_PhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Phone.Phone = *x.phoneFlag.Value
	}
	if x.isPhoneVerifiedFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Phone.IsPhoneVerified = *x.isPhoneVerifiedFlag.Value
	}
}

func (x *AddHumanUserRequest_PhoneFlag) Changed() bool {
	return x.changed
}

type AddHumanUserRequest_ProfileFlag struct {
	*AddHumanUserRequest_Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[user.Gender]
}

func (x *AddHumanUserRequest_ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserRequest_Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[user.Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserRequest_ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Profile.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Profile.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Profile.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.AddHumanUserRequest_Profile.Gender = *x.genderFlag.Value
	}
}

func (x *AddHumanUserRequest_ProfileFlag) Changed() bool {
	return x.changed
}

type AddHumanUserResponseFlag struct {
	*AddHumanUserResponse

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddHumanUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddHumanUserResponse", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddHumanUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddHumanUserResponse.UserId = *x.userIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddHumanUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddHumanUserResponseFlag) Changed() bool {
	return x.changed
}

type AddIDPToLoginPolicyRequestFlag struct {
	*AddIDPToLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag     *cli_client.StringParser
	ownerTypeFlag *cli_client.EnumParser[idp.IDPOwnerType]
}

func (x *AddIDPToLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIDPToLoginPolicyRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.ownerTypeFlag = cli_client.NewEnumParser[idp.IDPOwnerType](x.set, "ownerType", "")
	parent.AddFlagSet(x.set)
}

func (x *AddIDPToLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddIDPToLoginPolicyRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.ownerTypeFlag.Changed() {
		x.changed = true
		x.AddIDPToLoginPolicyRequest.OwnerType = *x.ownerTypeFlag.Value
	}
}

func (x *AddIDPToLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddIDPToLoginPolicyResponseFlag struct {
	*AddIDPToLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddIDPToLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddIDPToLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddIDPToLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddIDPToLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddIDPToLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddJWTProviderRequestFlag struct {
	*AddJWTProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag            *cli_client.StringParser
	issuerFlag          *cli_client.StringParser
	jwtEndpointFlag     *cli_client.StringParser
	keysEndpointFlag    *cli_client.StringParser
	headerNameFlag      *cli_client.StringParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *AddJWTProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddJWTProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddJWTProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.HeaderName = *x.headerNameFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddJWTProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddJWTProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddJWTProviderResponseFlag struct {
	*AddJWTProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddJWTProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddJWTProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddJWTProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddJWTProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddJWTProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddJWTProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddLDAPProviderRequestFlag struct {
	*AddLDAPProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag              *cli_client.StringParser
	serversFlag           *cli_client.StringSliceParser
	startTlsFlag          *cli_client.BoolParser
	baseDnFlag            *cli_client.StringParser
	bindDnFlag            *cli_client.StringParser
	bindPasswordFlag      *cli_client.StringParser
	userBaseFlag          *cli_client.StringParser
	userObjectClassesFlag *cli_client.StringSliceParser
	userFiltersFlag       *cli_client.StringSliceParser
	timeoutFlag           *cli_client.DurationParser
	attributesFlag        *idp.LDAPAttributesFlag
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *AddLDAPProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddLDAPProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.serversFlag = cli_client.NewStringSliceParser(x.set, "servers", "")
	x.startTlsFlag = cli_client.NewBoolParser(x.set, "start-tls", "")
	x.baseDnFlag = cli_client.NewStringParser(x.set, "base-dn", "")
	x.bindDnFlag = cli_client.NewStringParser(x.set, "bind-dn", "")
	x.bindPasswordFlag = cli_client.NewStringParser(x.set, "bind-password", "")
	x.userBaseFlag = cli_client.NewStringParser(x.set, "user-base", "")
	x.userObjectClassesFlag = cli_client.NewStringSliceParser(x.set, "user-object-classes", "")
	x.userFiltersFlag = cli_client.NewStringSliceParser(x.set, "user-filters", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.attributesFlag = &idp.LDAPAttributesFlag{LDAPAttributes: new(idp.LDAPAttributes)}
	x.attributesFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddLDAPProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "attributes", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("attributes"); flagIdx != nil {
		x.attributesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Name = *x.nameFlag.Value
	}
	if x.serversFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Servers = *x.serversFlag.Value
	}
	if x.startTlsFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.StartTls = *x.startTlsFlag.Value
	}
	if x.baseDnFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.BaseDn = *x.baseDnFlag.Value
	}
	if x.bindDnFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.BindDn = *x.bindDnFlag.Value
	}
	if x.bindPasswordFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.BindPassword = *x.bindPasswordFlag.Value
	}
	if x.userBaseFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.UserBase = *x.userBaseFlag.Value
	}
	if x.userObjectClassesFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.UserObjectClasses = *x.userObjectClassesFlag.Value
	}
	if x.userFiltersFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.UserFilters = *x.userFiltersFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Timeout = x.timeoutFlag.Value
	}

	if x.attributesFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.Attributes = x.attributesFlag.LDAPAttributes
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *AddLDAPProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddLDAPProviderResponseFlag struct {
	*AddLDAPProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddLDAPProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddLDAPProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddLDAPProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddLDAPProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddLDAPProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddMachineKeyRequestFlag struct {
	*AddMachineKeyRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag         *cli_client.StringParser
	typeFlag           *cli_client.EnumParser[authn.KeyType]
	expirationDateFlag *cli_client.TimestampParser
}

func (x *AddMachineKeyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMachineKeyRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.typeFlag = cli_client.NewEnumParser[authn.KeyType](x.set, "type", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	parent.AddFlagSet(x.set)
}

func (x *AddMachineKeyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddMachineKeyRequest.UserId = *x.userIdFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.AddMachineKeyRequest.Type = *x.typeFlag.Value
	}
	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.AddMachineKeyRequest.ExpirationDate = x.expirationDateFlag.Value
	}
}

func (x *AddMachineKeyRequestFlag) Changed() bool {
	return x.changed
}

type AddMachineKeyResponseFlag struct {
	*AddMachineKeyResponse

	changed bool
	set     *pflag.FlagSet

	keyIdFlag      *cli_client.StringParser
	keyDetailsFlag *cli_client.BytesParser
	detailsFlag    *object.ObjectDetailsFlag
}

func (x *AddMachineKeyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMachineKeyResponse", pflag.ContinueOnError)

	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.keyDetailsFlag = cli_client.NewBytesParser(x.set, "key-details", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMachineKeyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.keyIdFlag.Changed() {
		x.changed = true
		x.AddMachineKeyResponse.KeyId = *x.keyIdFlag.Value
	}
	if x.keyDetailsFlag.Changed() {
		x.changed = true
		x.AddMachineKeyResponse.KeyDetails = *x.keyDetailsFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMachineKeyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMachineKeyResponseFlag) Changed() bool {
	return x.changed
}

type AddMachineUserRequestFlag struct {
	*AddMachineUserRequest

	changed bool
	set     *pflag.FlagSet

	userNameFlag        *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	descriptionFlag     *cli_client.StringParser
	accessTokenTypeFlag *cli_client.EnumParser[user.AccessTokenType]
}

func (x *AddMachineUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMachineUserRequest", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.accessTokenTypeFlag = cli_client.NewEnumParser[user.AccessTokenType](x.set, "access-token-type", "")
	parent.AddFlagSet(x.set)
}

func (x *AddMachineUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.AddMachineUserRequest.UserName = *x.userNameFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddMachineUserRequest.Name = *x.nameFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.AddMachineUserRequest.Description = *x.descriptionFlag.Value
	}
	if x.accessTokenTypeFlag.Changed() {
		x.changed = true
		x.AddMachineUserRequest.AccessTokenType = *x.accessTokenTypeFlag.Value
	}
}

func (x *AddMachineUserRequestFlag) Changed() bool {
	return x.changed
}

type AddMachineUserResponseFlag struct {
	*AddMachineUserResponse

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMachineUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMachineUserResponse", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMachineUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddMachineUserResponse.UserId = *x.userIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMachineUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMachineUserResponseFlag) Changed() bool {
	return x.changed
}

type AddMultiFactorToLoginPolicyRequestFlag struct {
	*AddMultiFactorToLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.MultiFactorType]
}

func (x *AddMultiFactorToLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMultiFactorToLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.MultiFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *AddMultiFactorToLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.AddMultiFactorToLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *AddMultiFactorToLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddMultiFactorToLoginPolicyResponseFlag struct {
	*AddMultiFactorToLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddMultiFactorToLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddMultiFactorToLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddMultiFactorToLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddMultiFactorToLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddMultiFactorToLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddOIDCAppRequestFlag struct {
	*AddOIDCAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag                *cli_client.StringParser
	nameFlag                     *cli_client.StringParser
	redirectUrisFlag             *cli_client.StringSliceParser
	responseTypesFlag            *cli_client.EnumSliceParser[app.OIDCResponseType]
	grantTypesFlag               *cli_client.EnumSliceParser[app.OIDCGrantType]
	appTypeFlag                  *cli_client.EnumParser[app.OIDCAppType]
	authMethodTypeFlag           *cli_client.EnumParser[app.OIDCAuthMethodType]
	postLogoutRedirectUrisFlag   *cli_client.StringSliceParser
	versionFlag                  *cli_client.EnumParser[app.OIDCVersion]
	devModeFlag                  *cli_client.BoolParser
	accessTokenTypeFlag          *cli_client.EnumParser[app.OIDCTokenType]
	accessTokenRoleAssertionFlag *cli_client.BoolParser
	idTokenRoleAssertionFlag     *cli_client.BoolParser
	idTokenUserinfoAssertionFlag *cli_client.BoolParser
	clockSkewFlag                *cli_client.DurationParser
	additionalOriginsFlag        *cli_client.StringSliceParser
	skipNativeAppSuccessPageFlag *cli_client.BoolParser
}

func (x *AddOIDCAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOIDCAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.redirectUrisFlag = cli_client.NewStringSliceParser(x.set, "redirect-uris", "")
	x.responseTypesFlag = cli_client.NewEnumSliceParser[app.OIDCResponseType](x.set, "response-types", "")
	x.grantTypesFlag = cli_client.NewEnumSliceParser[app.OIDCGrantType](x.set, "grant-types", "")
	x.appTypeFlag = cli_client.NewEnumParser[app.OIDCAppType](x.set, "app-type", "")
	x.authMethodTypeFlag = cli_client.NewEnumParser[app.OIDCAuthMethodType](x.set, "auth-method-type", "")
	x.postLogoutRedirectUrisFlag = cli_client.NewStringSliceParser(x.set, "post-logout-redirect-uris", "")
	x.versionFlag = cli_client.NewEnumParser[app.OIDCVersion](x.set, "version", "")
	x.devModeFlag = cli_client.NewBoolParser(x.set, "dev-mode", "")
	x.accessTokenTypeFlag = cli_client.NewEnumParser[app.OIDCTokenType](x.set, "access-token-type", "")
	x.accessTokenRoleAssertionFlag = cli_client.NewBoolParser(x.set, "access-token-role-assertion", "")
	x.idTokenRoleAssertionFlag = cli_client.NewBoolParser(x.set, "id-token-role-assertion", "")
	x.idTokenUserinfoAssertionFlag = cli_client.NewBoolParser(x.set, "id-token-userinfo-assertion", "")
	x.clockSkewFlag = cli_client.NewDurationParser(x.set, "clock-skew", "")
	x.additionalOriginsFlag = cli_client.NewStringSliceParser(x.set, "additional-origins", "")
	x.skipNativeAppSuccessPageFlag = cli_client.NewBoolParser(x.set, "skip-native-app-success-page", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOIDCAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.Name = *x.nameFlag.Value
	}
	if x.redirectUrisFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.RedirectUris = *x.redirectUrisFlag.Value
	}
	if x.responseTypesFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.ResponseTypes = *x.responseTypesFlag.Value
	}
	if x.grantTypesFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.GrantTypes = *x.grantTypesFlag.Value
	}
	if x.appTypeFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.AppType = *x.appTypeFlag.Value
	}
	if x.authMethodTypeFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.AuthMethodType = *x.authMethodTypeFlag.Value
	}
	if x.postLogoutRedirectUrisFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.PostLogoutRedirectUris = *x.postLogoutRedirectUrisFlag.Value
	}
	if x.versionFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.Version = *x.versionFlag.Value
	}
	if x.devModeFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.DevMode = *x.devModeFlag.Value
	}
	if x.accessTokenTypeFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.AccessTokenType = *x.accessTokenTypeFlag.Value
	}
	if x.accessTokenRoleAssertionFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.AccessTokenRoleAssertion = *x.accessTokenRoleAssertionFlag.Value
	}
	if x.idTokenRoleAssertionFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.IdTokenRoleAssertion = *x.idTokenRoleAssertionFlag.Value
	}
	if x.idTokenUserinfoAssertionFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.IdTokenUserinfoAssertion = *x.idTokenUserinfoAssertionFlag.Value
	}
	if x.clockSkewFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.ClockSkew = x.clockSkewFlag.Value
	}
	if x.additionalOriginsFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.AdditionalOrigins = *x.additionalOriginsFlag.Value
	}
	if x.skipNativeAppSuccessPageFlag.Changed() {
		x.changed = true
		x.AddOIDCAppRequest.SkipNativeAppSuccessPage = *x.skipNativeAppSuccessPageFlag.Value
	}
}

func (x *AddOIDCAppRequestFlag) Changed() bool {
	return x.changed
}

type AddOIDCAppResponseFlag struct {
	*AddOIDCAppResponse

	changed bool
	set     *pflag.FlagSet

	appIdFlag              *cli_client.StringParser
	detailsFlag            *object.ObjectDetailsFlag
	clientIdFlag           *cli_client.StringParser
	clientSecretFlag       *cli_client.StringParser
	noneCompliantFlag      *cli_client.BoolParser
	complianceProblemsFlag []*message.LocalizedMessageFlag
}

func (x *AddOIDCAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOIDCAppResponse", pflag.ContinueOnError)

	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.noneCompliantFlag = cli_client.NewBoolParser(x.set, "none-compliant", "")
	x.complianceProblemsFlag = []*message.LocalizedMessageFlag{}
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOIDCAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "compliance-problems")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("compliance-problems") {
		x.complianceProblemsFlag = append(x.complianceProblemsFlag, &message.LocalizedMessageFlag{LocalizedMessage: new(message.LocalizedMessage)})
		x.complianceProblemsFlag[len(x.complianceProblemsFlag)-1].AddFlags(x.set)
		x.complianceProblemsFlag[len(x.complianceProblemsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.AddOIDCAppResponse.AppId = *x.appIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOIDCAppResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddOIDCAppResponse.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddOIDCAppResponse.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.noneCompliantFlag.Changed() {
		x.changed = true
		x.AddOIDCAppResponse.NoneCompliant = *x.noneCompliantFlag.Value
	}
	if len(x.complianceProblemsFlag) > 0 {
		x.changed = true
		x.ComplianceProblems = make([]*message.LocalizedMessage, len(x.complianceProblemsFlag))
		for i, value := range x.complianceProblemsFlag {
			x.AddOIDCAppResponse.ComplianceProblems[i] = value.LocalizedMessage
		}
	}

}

func (x *AddOIDCAppResponseFlag) Changed() bool {
	return x.changed
}

type AddOrgDomainRequestFlag struct {
	*AddOrgDomainRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
}

func (x *AddOrgDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgDomainRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOrgDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.AddOrgDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *AddOrgDomainRequestFlag) Changed() bool {
	return x.changed
}

type AddOrgDomainResponseFlag struct {
	*AddOrgDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddOrgDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOrgDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOrgDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddOrgDomainResponseFlag) Changed() bool {
	return x.changed
}

type AddOrgJWTIDPRequestFlag struct {
	*AddOrgJWTIDPRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag         *cli_client.StringParser
	stylingTypeFlag  *cli_client.EnumParser[idp.IDPStylingType]
	jwtEndpointFlag  *cli_client.StringParser
	issuerFlag       *cli_client.StringParser
	keysEndpointFlag *cli_client.StringParser
	headerNameFlag   *cli_client.StringParser
	autoRegisterFlag *cli_client.BoolParser
}

func (x *AddOrgJWTIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgJWTIDPRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[idp.IDPStylingType](x.set, "styling-type", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOrgJWTIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.StylingType = *x.stylingTypeFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.Issuer = *x.issuerFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.HeaderName = *x.headerNameFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPRequest.AutoRegister = *x.autoRegisterFlag.Value
	}
}

func (x *AddOrgJWTIDPRequestFlag) Changed() bool {
	return x.changed
}

type AddOrgJWTIDPResponseFlag struct {
	*AddOrgJWTIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idpIdFlag   *cli_client.StringParser
}

func (x *AddOrgJWTIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgJWTIDPResponse", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOrgJWTIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddOrgJWTIDPResponse.IdpId = *x.idpIdFlag.Value
	}
}

func (x *AddOrgJWTIDPResponseFlag) Changed() bool {
	return x.changed
}

type AddOrgMemberRequestFlag struct {
	*AddOrgMemberRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	rolesFlag  *cli_client.StringSliceParser
}

func (x *AddOrgMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgMemberRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOrgMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddOrgMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.AddOrgMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *AddOrgMemberRequestFlag) Changed() bool {
	return x.changed
}

type AddOrgMemberResponseFlag struct {
	*AddOrgMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddOrgMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOrgMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOrgMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddOrgMemberResponseFlag) Changed() bool {
	return x.changed
}

type AddOrgOIDCIDPRequestFlag struct {
	*AddOrgOIDCIDPRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag               *cli_client.StringParser
	stylingTypeFlag        *cli_client.EnumParser[idp.IDPStylingType]
	clientIdFlag           *cli_client.StringParser
	clientSecretFlag       *cli_client.StringParser
	issuerFlag             *cli_client.StringParser
	scopesFlag             *cli_client.StringSliceParser
	displayNameMappingFlag *cli_client.EnumParser[idp.OIDCMappingField]
	usernameMappingFlag    *cli_client.EnumParser[idp.OIDCMappingField]
	autoRegisterFlag       *cli_client.BoolParser
}

func (x *AddOrgOIDCIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgOIDCIDPRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[idp.IDPStylingType](x.set, "styling-type", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.displayNameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "display-name-mapping", "")
	x.usernameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "username-mapping", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOrgOIDCIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.StylingType = *x.stylingTypeFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.Issuer = *x.issuerFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.Scopes = *x.scopesFlag.Value
	}
	if x.displayNameMappingFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.DisplayNameMapping = *x.displayNameMappingFlag.Value
	}
	if x.usernameMappingFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.UsernameMapping = *x.usernameMappingFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPRequest.AutoRegister = *x.autoRegisterFlag.Value
	}
}

func (x *AddOrgOIDCIDPRequestFlag) Changed() bool {
	return x.changed
}

type AddOrgOIDCIDPResponseFlag struct {
	*AddOrgOIDCIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idpIdFlag   *cli_client.StringParser
}

func (x *AddOrgOIDCIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgOIDCIDPResponse", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOrgOIDCIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.AddOrgOIDCIDPResponse.IdpId = *x.idpIdFlag.Value
	}
}

func (x *AddOrgOIDCIDPResponseFlag) Changed() bool {
	return x.changed
}

type AddOrgRequestFlag struct {
	*AddOrgRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag *cli_client.StringParser
}

func (x *AddOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	parent.AddFlagSet(x.set)
}

func (x *AddOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddOrgRequest.Name = *x.nameFlag.Value
	}
}

func (x *AddOrgRequestFlag) Changed() bool {
	return x.changed
}

type AddOrgResponseFlag struct {
	*AddOrgResponse

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddOrgResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddOrgResponse.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddOrgResponseFlag) Changed() bool {
	return x.changed
}

type AddPasswordlessRegistrationRequestFlag struct {
	*AddPasswordlessRegistrationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *AddPasswordlessRegistrationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddPasswordlessRegistrationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *AddPasswordlessRegistrationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddPasswordlessRegistrationRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *AddPasswordlessRegistrationRequestFlag) Changed() bool {
	return x.changed
}

type AddPasswordlessRegistrationResponseFlag struct {
	*AddPasswordlessRegistrationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag    *object.ObjectDetailsFlag
	linkFlag       *cli_client.StringParser
	expirationFlag *cli_client.DurationParser
}

func (x *AddPasswordlessRegistrationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddPasswordlessRegistrationResponse", pflag.ContinueOnError)

	x.linkFlag = cli_client.NewStringParser(x.set, "link", "")
	x.expirationFlag = cli_client.NewDurationParser(x.set, "expiration", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddPasswordlessRegistrationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddPasswordlessRegistrationResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.linkFlag.Changed() {
		x.changed = true
		x.AddPasswordlessRegistrationResponse.Link = *x.linkFlag.Value
	}
	if x.expirationFlag.Changed() {
		x.changed = true
		x.AddPasswordlessRegistrationResponse.Expiration = x.expirationFlag.Value
	}
}

func (x *AddPasswordlessRegistrationResponseFlag) Changed() bool {
	return x.changed
}

type AddPersonalAccessTokenRequestFlag struct {
	*AddPersonalAccessTokenRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag         *cli_client.StringParser
	expirationDateFlag *cli_client.TimestampParser
}

func (x *AddPersonalAccessTokenRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddPersonalAccessTokenRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.expirationDateFlag = cli_client.NewTimestampParser(x.set, "expiration-date", "")
	parent.AddFlagSet(x.set)
}

func (x *AddPersonalAccessTokenRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddPersonalAccessTokenRequest.UserId = *x.userIdFlag.Value
	}
	if x.expirationDateFlag.Changed() {
		x.changed = true
		x.AddPersonalAccessTokenRequest.ExpirationDate = x.expirationDateFlag.Value
	}
}

func (x *AddPersonalAccessTokenRequestFlag) Changed() bool {
	return x.changed
}

type AddPersonalAccessTokenResponseFlag struct {
	*AddPersonalAccessTokenResponse

	changed bool
	set     *pflag.FlagSet

	tokenIdFlag *cli_client.StringParser
	tokenFlag   *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddPersonalAccessTokenResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddPersonalAccessTokenResponse", pflag.ContinueOnError)

	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	x.tokenFlag = cli_client.NewStringParser(x.set, "token", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddPersonalAccessTokenResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.AddPersonalAccessTokenResponse.TokenId = *x.tokenIdFlag.Value
	}
	if x.tokenFlag.Changed() {
		x.changed = true
		x.AddPersonalAccessTokenResponse.Token = *x.tokenFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddPersonalAccessTokenResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddPersonalAccessTokenResponseFlag) Changed() bool {
	return x.changed
}

type AddProjectGrantMemberRequestFlag struct {
	*AddProjectGrantMemberRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
	rolesFlag     *cli_client.StringSliceParser
}

func (x *AddProjectGrantMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectGrantMemberRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *AddProjectGrantMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddProjectGrantMemberRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.AddProjectGrantMemberRequest.GrantId = *x.grantIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddProjectGrantMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.AddProjectGrantMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *AddProjectGrantMemberRequestFlag) Changed() bool {
	return x.changed
}

type AddProjectGrantMemberResponseFlag struct {
	*AddProjectGrantMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddProjectGrantMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectGrantMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddProjectGrantMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddProjectGrantMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddProjectGrantMemberResponseFlag) Changed() bool {
	return x.changed
}

type AddProjectGrantRequestFlag struct {
	*AddProjectGrantRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag    *cli_client.StringParser
	grantedOrgIdFlag *cli_client.StringParser
	roleKeysFlag     *cli_client.StringSliceParser
}

func (x *AddProjectGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectGrantRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantedOrgIdFlag = cli_client.NewStringParser(x.set, "granted-org-id", "")
	x.roleKeysFlag = cli_client.NewStringSliceParser(x.set, "role-keys", "")
	parent.AddFlagSet(x.set)
}

func (x *AddProjectGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddProjectGrantRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantedOrgIdFlag.Changed() {
		x.changed = true
		x.AddProjectGrantRequest.GrantedOrgId = *x.grantedOrgIdFlag.Value
	}
	if x.roleKeysFlag.Changed() {
		x.changed = true
		x.AddProjectGrantRequest.RoleKeys = *x.roleKeysFlag.Value
	}
}

func (x *AddProjectGrantRequestFlag) Changed() bool {
	return x.changed
}

type AddProjectGrantResponseFlag struct {
	*AddProjectGrantResponse

	changed bool
	set     *pflag.FlagSet

	grantIdFlag *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddProjectGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectGrantResponse", pflag.ContinueOnError)

	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddProjectGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.grantIdFlag.Changed() {
		x.changed = true
		x.AddProjectGrantResponse.GrantId = *x.grantIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddProjectGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddProjectGrantResponseFlag) Changed() bool {
	return x.changed
}

type AddProjectMemberRequestFlag struct {
	*AddProjectMemberRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
	rolesFlag     *cli_client.StringSliceParser
}

func (x *AddProjectMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectMemberRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *AddProjectMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddProjectMemberRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddProjectMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.AddProjectMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *AddProjectMemberRequestFlag) Changed() bool {
	return x.changed
}

type AddProjectMemberResponseFlag struct {
	*AddProjectMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddProjectMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddProjectMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddProjectMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddProjectMemberResponseFlag) Changed() bool {
	return x.changed
}

type AddProjectRequestFlag struct {
	*AddProjectRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag                   *cli_client.StringParser
	projectRoleAssertionFlag   *cli_client.BoolParser
	projectRoleCheckFlag       *cli_client.BoolParser
	hasProjectCheckFlag        *cli_client.BoolParser
	privateLabelingSettingFlag *cli_client.EnumParser[project.PrivateLabelingSetting]
}

func (x *AddProjectRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.projectRoleAssertionFlag = cli_client.NewBoolParser(x.set, "project-role-assertion", "")
	x.projectRoleCheckFlag = cli_client.NewBoolParser(x.set, "project-role-check", "")
	x.hasProjectCheckFlag = cli_client.NewBoolParser(x.set, "has-project-check", "")
	x.privateLabelingSettingFlag = cli_client.NewEnumParser[project.PrivateLabelingSetting](x.set, "private-labeling-setting", "")
	parent.AddFlagSet(x.set)
}

func (x *AddProjectRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddProjectRequest.Name = *x.nameFlag.Value
	}
	if x.projectRoleAssertionFlag.Changed() {
		x.changed = true
		x.AddProjectRequest.ProjectRoleAssertion = *x.projectRoleAssertionFlag.Value
	}
	if x.projectRoleCheckFlag.Changed() {
		x.changed = true
		x.AddProjectRequest.ProjectRoleCheck = *x.projectRoleCheckFlag.Value
	}
	if x.hasProjectCheckFlag.Changed() {
		x.changed = true
		x.AddProjectRequest.HasProjectCheck = *x.hasProjectCheckFlag.Value
	}
	if x.privateLabelingSettingFlag.Changed() {
		x.changed = true
		x.AddProjectRequest.PrivateLabelingSetting = *x.privateLabelingSettingFlag.Value
	}
}

func (x *AddProjectRequestFlag) Changed() bool {
	return x.changed
}

type AddProjectResponseFlag struct {
	*AddProjectResponse

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddProjectResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddProjectResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddProjectResponse.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddProjectResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddProjectResponseFlag) Changed() bool {
	return x.changed
}

type AddProjectRoleRequestFlag struct {
	*AddProjectRoleRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag   *cli_client.StringParser
	roleKeyFlag     *cli_client.StringParser
	displayNameFlag *cli_client.StringParser
	groupFlag       *cli_client.StringParser
}

func (x *AddProjectRoleRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectRoleRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.roleKeyFlag = cli_client.NewStringParser(x.set, "role-key", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.groupFlag = cli_client.NewStringParser(x.set, "group", "")
	parent.AddFlagSet(x.set)
}

func (x *AddProjectRoleRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddProjectRoleRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.roleKeyFlag.Changed() {
		x.changed = true
		x.AddProjectRoleRequest.RoleKey = *x.roleKeyFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.AddProjectRoleRequest.DisplayName = *x.displayNameFlag.Value
	}
	if x.groupFlag.Changed() {
		x.changed = true
		x.AddProjectRoleRequest.Group = *x.groupFlag.Value
	}
}

func (x *AddProjectRoleRequestFlag) Changed() bool {
	return x.changed
}

type AddProjectRoleResponseFlag struct {
	*AddProjectRoleResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddProjectRoleResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddProjectRoleResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddProjectRoleResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddProjectRoleResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddProjectRoleResponseFlag) Changed() bool {
	return x.changed
}

type AddSAMLAppRequestFlag struct {
	*AddSAMLAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag   *cli_client.StringParser
	nameFlag        *cli_client.StringParser
	metadataXmlFlag *cli_client.BytesParser
	metadataUrlFlag *cli_client.StringParser
}

func (x *AddSAMLAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSAMLAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.metadataUrlFlag = cli_client.NewStringParser(x.set, "metadata-url", "")
	parent.AddFlagSet(x.set)
}

func (x *AddSAMLAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddSAMLAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.AddSAMLAppRequest.Name = *x.nameFlag.Value
	}

	switch cli_client.FieldIndexes(args, "metadata-xml", "metadata-url").Last().Flag {
	case "metadata-xml":
		if x.metadataXmlFlag.Changed() {
			x.changed = true
			x.AddSAMLAppRequest.Metadata = &AddSAMLAppRequest_MetadataXml{MetadataXml: *x.metadataXmlFlag.Value}
		}
	case "metadata-url":
		if x.metadataUrlFlag.Changed() {
			x.changed = true
			x.AddSAMLAppRequest.Metadata = &AddSAMLAppRequest_MetadataUrl{MetadataUrl: *x.metadataUrlFlag.Value}
		}
	}
}

func (x *AddSAMLAppRequestFlag) Changed() bool {
	return x.changed
}

type AddSAMLAppResponseFlag struct {
	*AddSAMLAppResponse

	changed bool
	set     *pflag.FlagSet

	appIdFlag   *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddSAMLAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSAMLAppResponse", pflag.ContinueOnError)

	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSAMLAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.appIdFlag.Changed() {
		x.changed = true
		x.AddSAMLAppResponse.AppId = *x.appIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSAMLAppResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddSAMLAppResponseFlag) Changed() bool {
	return x.changed
}

type AddSAMLProviderRequestFlag struct {
	*AddSAMLProviderRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag              *cli_client.StringParser
	metadataXmlFlag       *cli_client.BytesParser
	metadataUrlFlag       *cli_client.StringParser
	bindingFlag           *cli_client.EnumParser[idp.SAMLBinding]
	withSignedRequestFlag *cli_client.BoolParser
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *AddSAMLProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSAMLProviderRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.metadataUrlFlag = cli_client.NewStringParser(x.set, "metadata-url", "")
	x.bindingFlag = cli_client.NewEnumParser[idp.SAMLBinding](x.set, "binding", "")
	x.withSignedRequestFlag = cli_client.NewBoolParser(x.set, "with-signed-request", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSAMLProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.Name = *x.nameFlag.Value
	}
	if x.bindingFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.Binding = *x.bindingFlag.Value
	}
	if x.withSignedRequestFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.WithSignedRequest = *x.withSignedRequestFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	switch cli_client.FieldIndexes(args, "metadata-xml", "metadata-url").Last().Flag {
	case "metadata-xml":
		if x.metadataXmlFlag.Changed() {
			x.changed = true
			x.AddSAMLProviderRequest.Metadata = &AddSAMLProviderRequest_MetadataXml{MetadataXml: *x.metadataXmlFlag.Value}
		}
	case "metadata-url":
		if x.metadataUrlFlag.Changed() {
			x.changed = true
			x.AddSAMLProviderRequest.Metadata = &AddSAMLProviderRequest_MetadataUrl{MetadataUrl: *x.metadataUrlFlag.Value}
		}
	}
}

func (x *AddSAMLProviderRequestFlag) Changed() bool {
	return x.changed
}

type AddSAMLProviderResponseFlag struct {
	*AddSAMLProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *AddSAMLProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSAMLProviderResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSAMLProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.AddSAMLProviderResponse.Id = *x.idFlag.Value
	}
}

func (x *AddSAMLProviderResponseFlag) Changed() bool {
	return x.changed
}

type AddSecondFactorToLoginPolicyRequestFlag struct {
	*AddSecondFactorToLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.SecondFactorType]
}

func (x *AddSecondFactorToLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSecondFactorToLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.SecondFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *AddSecondFactorToLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.AddSecondFactorToLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *AddSecondFactorToLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type AddSecondFactorToLoginPolicyResponseFlag struct {
	*AddSecondFactorToLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *AddSecondFactorToLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddSecondFactorToLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddSecondFactorToLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddSecondFactorToLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddSecondFactorToLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type AddUserGrantRequestFlag struct {
	*AddUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag         *cli_client.StringParser
	projectIdFlag      *cli_client.StringParser
	projectGrantIdFlag *cli_client.StringParser
	roleKeysFlag       *cli_client.StringSliceParser
}

func (x *AddUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddUserGrantRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.projectGrantIdFlag = cli_client.NewStringParser(x.set, "project-grant-id", "")
	x.roleKeysFlag = cli_client.NewStringSliceParser(x.set, "role-keys", "")
	parent.AddFlagSet(x.set)
}

func (x *AddUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.AddUserGrantRequest.UserId = *x.userIdFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.AddUserGrantRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.projectGrantIdFlag.Changed() {
		x.changed = true
		x.AddUserGrantRequest.ProjectGrantId = *x.projectGrantIdFlag.Value
	}
	if x.roleKeysFlag.Changed() {
		x.changed = true
		x.AddUserGrantRequest.RoleKeys = *x.roleKeysFlag.Value
	}
}

func (x *AddUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type AddUserGrantResponseFlag struct {
	*AddUserGrantResponse

	changed bool
	set     *pflag.FlagSet

	userGrantIdFlag *cli_client.StringParser
	detailsFlag     *object.ObjectDetailsFlag
}

func (x *AddUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AddUserGrantResponse", pflag.ContinueOnError)

	x.userGrantIdFlag = cli_client.NewStringParser(x.set, "user-grant-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AddUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userGrantIdFlag.Changed() {
		x.changed = true
		x.AddUserGrantResponse.UserGrantId = *x.userGrantIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.AddUserGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *AddUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type BulkAddProjectRolesRequestFlag struct {
	*BulkAddProjectRolesRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	rolesFlag     []*BulkAddProjectRolesRequest_RoleFlag
}

func (x *BulkAddProjectRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkAddProjectRolesRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.rolesFlag = []*BulkAddProjectRolesRequest_RoleFlag{}
	parent.AddFlagSet(x.set)
}

func (x *BulkAddProjectRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "roles")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("roles") {
		x.rolesFlag = append(x.rolesFlag, &BulkAddProjectRolesRequest_RoleFlag{BulkAddProjectRolesRequest_Role: new(BulkAddProjectRolesRequest_Role)})
		x.rolesFlag[len(x.rolesFlag)-1].AddFlags(x.set)
		x.rolesFlag[len(x.rolesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.BulkAddProjectRolesRequest.ProjectId = *x.projectIdFlag.Value
	}
	if len(x.rolesFlag) > 0 {
		x.changed = true
		x.Roles = make([]*BulkAddProjectRolesRequest_Role, len(x.rolesFlag))
		for i, value := range x.rolesFlag {
			x.BulkAddProjectRolesRequest.Roles[i] = value.BulkAddProjectRolesRequest_Role
		}
	}

}

func (x *BulkAddProjectRolesRequestFlag) Changed() bool {
	return x.changed
}

type BulkAddProjectRolesRequest_RoleFlag struct {
	*BulkAddProjectRolesRequest_Role

	changed bool
	set     *pflag.FlagSet

	keyFlag         *cli_client.StringParser
	displayNameFlag *cli_client.StringParser
	groupFlag       *cli_client.StringParser
}

func (x *BulkAddProjectRolesRequest_RoleFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkAddProjectRolesRequest_Role", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.groupFlag = cli_client.NewStringParser(x.set, "group", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkAddProjectRolesRequest_RoleFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.BulkAddProjectRolesRequest_Role.Key = *x.keyFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.BulkAddProjectRolesRequest_Role.DisplayName = *x.displayNameFlag.Value
	}
	if x.groupFlag.Changed() {
		x.changed = true
		x.BulkAddProjectRolesRequest_Role.Group = *x.groupFlag.Value
	}
}

func (x *BulkAddProjectRolesRequest_RoleFlag) Changed() bool {
	return x.changed
}

type BulkAddProjectRolesResponseFlag struct {
	*BulkAddProjectRolesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkAddProjectRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkAddProjectRolesResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkAddProjectRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkAddProjectRolesResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkAddProjectRolesResponseFlag) Changed() bool {
	return x.changed
}

type BulkRemoveOrgMetadataRequestFlag struct {
	*BulkRemoveOrgMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keysFlag *cli_client.StringSliceParser
}

func (x *BulkRemoveOrgMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveOrgMetadataRequest", pflag.ContinueOnError)

	x.keysFlag = cli_client.NewStringSliceParser(x.set, "keys", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveOrgMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keysFlag.Changed() {
		x.changed = true
		x.BulkRemoveOrgMetadataRequest.Keys = *x.keysFlag.Value
	}
}

func (x *BulkRemoveOrgMetadataRequestFlag) Changed() bool {
	return x.changed
}

type BulkRemoveOrgMetadataResponseFlag struct {
	*BulkRemoveOrgMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkRemoveOrgMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveOrgMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveOrgMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkRemoveOrgMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkRemoveOrgMetadataResponseFlag) Changed() bool {
	return x.changed
}

type BulkRemoveUserGrantRequestFlag struct {
	*BulkRemoveUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	grantIdFlag *cli_client.StringSliceParser
}

func (x *BulkRemoveUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveUserGrantRequest", pflag.ContinueOnError)

	x.grantIdFlag = cli_client.NewStringSliceParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.grantIdFlag.Changed() {
		x.changed = true
		x.BulkRemoveUserGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *BulkRemoveUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type BulkRemoveUserGrantResponseFlag struct {
	*BulkRemoveUserGrantResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *BulkRemoveUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveUserGrantResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *BulkRemoveUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type BulkRemoveUserMetadataRequestFlag struct {
	*BulkRemoveUserMetadataRequest

	changed bool
	set     *pflag.FlagSet

	idFlag   *cli_client.StringParser
	keysFlag *cli_client.StringSliceParser
}

func (x *BulkRemoveUserMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveUserMetadataRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.keysFlag = cli_client.NewStringSliceParser(x.set, "keys", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveUserMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.BulkRemoveUserMetadataRequest.Id = *x.idFlag.Value
	}
	if x.keysFlag.Changed() {
		x.changed = true
		x.BulkRemoveUserMetadataRequest.Keys = *x.keysFlag.Value
	}
}

func (x *BulkRemoveUserMetadataRequestFlag) Changed() bool {
	return x.changed
}

type BulkRemoveUserMetadataResponseFlag struct {
	*BulkRemoveUserMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkRemoveUserMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkRemoveUserMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkRemoveUserMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkRemoveUserMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkRemoveUserMetadataResponseFlag) Changed() bool {
	return x.changed
}

type BulkSetOrgMetadataRequestFlag struct {
	*BulkSetOrgMetadataRequest

	changed bool
	set     *pflag.FlagSet

	metadataFlag []*BulkSetOrgMetadataRequest_MetadataFlag
}

func (x *BulkSetOrgMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetOrgMetadataRequest", pflag.ContinueOnError)

	x.metadataFlag = []*BulkSetOrgMetadataRequest_MetadataFlag{}
	parent.AddFlagSet(x.set)
}

func (x *BulkSetOrgMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("metadata") {
		x.metadataFlag = append(x.metadataFlag, &BulkSetOrgMetadataRequest_MetadataFlag{BulkSetOrgMetadataRequest_Metadata: new(BulkSetOrgMetadataRequest_Metadata)})
		x.metadataFlag[len(x.metadataFlag)-1].AddFlags(x.set)
		x.metadataFlag[len(x.metadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.metadataFlag) > 0 {
		x.changed = true
		x.Metadata = make([]*BulkSetOrgMetadataRequest_Metadata, len(x.metadataFlag))
		for i, value := range x.metadataFlag {
			x.BulkSetOrgMetadataRequest.Metadata[i] = value.BulkSetOrgMetadataRequest_Metadata
		}
	}

}

func (x *BulkSetOrgMetadataRequestFlag) Changed() bool {
	return x.changed
}

type BulkSetOrgMetadataRequest_MetadataFlag struct {
	*BulkSetOrgMetadataRequest_Metadata

	changed bool
	set     *pflag.FlagSet

	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *BulkSetOrgMetadataRequest_MetadataFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetOrgMetadataRequest_Metadata", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkSetOrgMetadataRequest_MetadataFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.BulkSetOrgMetadataRequest_Metadata.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.BulkSetOrgMetadataRequest_Metadata.Value = *x.valueFlag.Value
	}
}

func (x *BulkSetOrgMetadataRequest_MetadataFlag) Changed() bool {
	return x.changed
}

type BulkSetOrgMetadataResponseFlag struct {
	*BulkSetOrgMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkSetOrgMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetOrgMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkSetOrgMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkSetOrgMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkSetOrgMetadataResponseFlag) Changed() bool {
	return x.changed
}

type BulkSetUserMetadataRequestFlag struct {
	*BulkSetUserMetadataRequest

	changed bool
	set     *pflag.FlagSet

	idFlag       *cli_client.StringParser
	metadataFlag []*BulkSetUserMetadataRequest_MetadataFlag
}

func (x *BulkSetUserMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetUserMetadataRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.metadataFlag = []*BulkSetUserMetadataRequest_MetadataFlag{}
	parent.AddFlagSet(x.set)
}

func (x *BulkSetUserMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("metadata") {
		x.metadataFlag = append(x.metadataFlag, &BulkSetUserMetadataRequest_MetadataFlag{BulkSetUserMetadataRequest_Metadata: new(BulkSetUserMetadataRequest_Metadata)})
		x.metadataFlag[len(x.metadataFlag)-1].AddFlags(x.set)
		x.metadataFlag[len(x.metadataFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.idFlag.Changed() {
		x.changed = true
		x.BulkSetUserMetadataRequest.Id = *x.idFlag.Value
	}
	if len(x.metadataFlag) > 0 {
		x.changed = true
		x.Metadata = make([]*BulkSetUserMetadataRequest_Metadata, len(x.metadataFlag))
		for i, value := range x.metadataFlag {
			x.BulkSetUserMetadataRequest.Metadata[i] = value.BulkSetUserMetadataRequest_Metadata
		}
	}

}

func (x *BulkSetUserMetadataRequestFlag) Changed() bool {
	return x.changed
}

type BulkSetUserMetadataRequest_MetadataFlag struct {
	*BulkSetUserMetadataRequest_Metadata

	changed bool
	set     *pflag.FlagSet

	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *BulkSetUserMetadataRequest_MetadataFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetUserMetadataRequest_Metadata", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *BulkSetUserMetadataRequest_MetadataFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.BulkSetUserMetadataRequest_Metadata.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.BulkSetUserMetadataRequest_Metadata.Value = *x.valueFlag.Value
	}
}

func (x *BulkSetUserMetadataRequest_MetadataFlag) Changed() bool {
	return x.changed
}

type BulkSetUserMetadataResponseFlag struct {
	*BulkSetUserMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *BulkSetUserMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("BulkSetUserMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *BulkSetUserMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.BulkSetUserMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *BulkSetUserMetadataResponseFlag) Changed() bool {
	return x.changed
}

type ClearFlowRequestFlag struct {
	*ClearFlowRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.StringParser
}

func (x *ClearFlowRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ClearFlowRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewStringParser(x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *ClearFlowRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.ClearFlowRequest.Type = *x.typeFlag.Value
	}
}

func (x *ClearFlowRequestFlag) Changed() bool {
	return x.changed
}

type ClearFlowResponseFlag struct {
	*ClearFlowResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ClearFlowResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ClearFlowResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ClearFlowResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ClearFlowResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ClearFlowResponseFlag) Changed() bool {
	return x.changed
}

type CreateActionRequestFlag struct {
	*CreateActionRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag          *cli_client.StringParser
	scriptFlag        *cli_client.StringParser
	timeoutFlag       *cli_client.DurationParser
	allowedToFailFlag *cli_client.BoolParser
}

func (x *CreateActionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateActionRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.scriptFlag = cli_client.NewStringParser(x.set, "script", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.allowedToFailFlag = cli_client.NewBoolParser(x.set, "allowed-to-fail", "")
	parent.AddFlagSet(x.set)
}

func (x *CreateActionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.CreateActionRequest.Name = *x.nameFlag.Value
	}
	if x.scriptFlag.Changed() {
		x.changed = true
		x.CreateActionRequest.Script = *x.scriptFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.CreateActionRequest.Timeout = x.timeoutFlag.Value
	}
	if x.allowedToFailFlag.Changed() {
		x.changed = true
		x.CreateActionRequest.AllowedToFail = *x.allowedToFailFlag.Value
	}
}

func (x *CreateActionRequestFlag) Changed() bool {
	return x.changed
}

type CreateActionResponseFlag struct {
	*CreateActionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	idFlag      *cli_client.StringParser
}

func (x *CreateActionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("CreateActionResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *CreateActionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.CreateActionResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.CreateActionResponse.Id = *x.idFlag.Value
	}
}

func (x *CreateActionResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateActionRequestFlag struct {
	*DeactivateActionRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeactivateActionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateActionRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateActionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeactivateActionRequest.Id = *x.idFlag.Value
	}
}

func (x *DeactivateActionRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateActionResponseFlag struct {
	*DeactivateActionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateActionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateActionResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateActionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateActionResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateActionResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateAppRequestFlag struct {
	*DeactivateAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *DeactivateAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.DeactivateAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.DeactivateAppRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *DeactivateAppRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateAppResponseFlag struct {
	*DeactivateAppResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateAppResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateAppResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateAppResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateOrgIDPRequestFlag struct {
	*DeactivateOrgIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *DeactivateOrgIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateOrgIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateOrgIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.DeactivateOrgIDPRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *DeactivateOrgIDPRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateOrgIDPResponseFlag struct {
	*DeactivateOrgIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateOrgIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateOrgIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateOrgIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateOrgIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateOrgIDPResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateOrgRequestFlag struct {
	*DeactivateOrgRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *DeactivateOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateOrgRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *DeactivateOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *DeactivateOrgRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateOrgResponseFlag struct {
	*DeactivateOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateOrgResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateProjectGrantRequestFlag struct {
	*DeactivateProjectGrantRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
}

func (x *DeactivateProjectGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateProjectGrantRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateProjectGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.DeactivateProjectGrantRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.DeactivateProjectGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *DeactivateProjectGrantRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateProjectGrantResponseFlag struct {
	*DeactivateProjectGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateProjectGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateProjectGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateProjectGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateProjectGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateProjectGrantResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateProjectRequestFlag struct {
	*DeactivateProjectRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeactivateProjectRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateProjectRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateProjectRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeactivateProjectRequest.Id = *x.idFlag.Value
	}
}

func (x *DeactivateProjectRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateProjectResponseFlag struct {
	*DeactivateProjectResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateProjectResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateProjectResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateProjectResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateProjectResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateProjectResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateUserGrantRequestFlag struct {
	*DeactivateUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	grantIdFlag *cli_client.StringParser
}

func (x *DeactivateUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateUserGrantRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.DeactivateUserGrantRequest.UserId = *x.userIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.DeactivateUserGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *DeactivateUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateUserGrantResponseFlag struct {
	*DeactivateUserGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateUserGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateUserGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type DeactivateUserRequestFlag struct {
	*DeactivateUserRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeactivateUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateUserRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeactivateUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeactivateUserRequest.Id = *x.idFlag.Value
	}
}

func (x *DeactivateUserRequestFlag) Changed() bool {
	return x.changed
}

type DeactivateUserResponseFlag struct {
	*DeactivateUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeactivateUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeactivateUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeactivateUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeactivateUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeactivateUserResponseFlag) Changed() bool {
	return x.changed
}

type DeleteActionRequestFlag struct {
	*DeleteActionRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeleteActionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteActionRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeleteActionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeleteActionRequest.Id = *x.idFlag.Value
	}
}

func (x *DeleteActionRequestFlag) Changed() bool {
	return x.changed
}

type DeleteActionResponseFlag struct {
	*DeleteActionResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *DeleteActionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteActionResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *DeleteActionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *DeleteActionResponseFlag) Changed() bool {
	return x.changed
}

type DeleteProviderRequestFlag struct {
	*DeleteProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *DeleteProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *DeleteProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.DeleteProviderRequest.Id = *x.idFlag.Value
	}
}

func (x *DeleteProviderRequestFlag) Changed() bool {
	return x.changed
}

type DeleteProviderResponseFlag struct {
	*DeleteProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *DeleteProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("DeleteProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *DeleteProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.DeleteProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *DeleteProviderResponseFlag) Changed() bool {
	return x.changed
}

type GenerateMachineSecretRequestFlag struct {
	*GenerateMachineSecretRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *GenerateMachineSecretRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GenerateMachineSecretRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GenerateMachineSecretRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GenerateMachineSecretRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *GenerateMachineSecretRequestFlag) Changed() bool {
	return x.changed
}

type GenerateMachineSecretResponseFlag struct {
	*GenerateMachineSecretResponse

	changed bool
	set     *pflag.FlagSet

	clientIdFlag     *cli_client.StringParser
	clientSecretFlag *cli_client.StringParser
	detailsFlag      *object.ObjectDetailsFlag
}

func (x *GenerateMachineSecretResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GenerateMachineSecretResponse", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GenerateMachineSecretResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GenerateMachineSecretResponse.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.GenerateMachineSecretResponse.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GenerateMachineSecretResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *GenerateMachineSecretResponseFlag) Changed() bool {
	return x.changed
}

type GenerateOrgDomainValidationRequestFlag struct {
	*GenerateOrgDomainValidationRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
	typeFlag   *cli_client.EnumParser[org.DomainValidationType]
}

func (x *GenerateOrgDomainValidationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GenerateOrgDomainValidationRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	x.typeFlag = cli_client.NewEnumParser[org.DomainValidationType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *GenerateOrgDomainValidationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.GenerateOrgDomainValidationRequest.Domain = *x.domainFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.GenerateOrgDomainValidationRequest.Type = *x.typeFlag.Value
	}
}

func (x *GenerateOrgDomainValidationRequestFlag) Changed() bool {
	return x.changed
}

type GenerateOrgDomainValidationResponseFlag struct {
	*GenerateOrgDomainValidationResponse

	changed bool
	set     *pflag.FlagSet

	tokenFlag *cli_client.StringParser
	urlFlag   *cli_client.StringParser
}

func (x *GenerateOrgDomainValidationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GenerateOrgDomainValidationResponse", pflag.ContinueOnError)

	x.tokenFlag = cli_client.NewStringParser(x.set, "token", "")
	x.urlFlag = cli_client.NewStringParser(x.set, "url", "")
	parent.AddFlagSet(x.set)
}

func (x *GenerateOrgDomainValidationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tokenFlag.Changed() {
		x.changed = true
		x.GenerateOrgDomainValidationResponse.Token = *x.tokenFlag.Value
	}
	if x.urlFlag.Changed() {
		x.changed = true
		x.GenerateOrgDomainValidationResponse.Url = *x.urlFlag.Value
	}
}

func (x *GenerateOrgDomainValidationResponseFlag) Changed() bool {
	return x.changed
}

type GetActionRequestFlag struct {
	*GetActionRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetActionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetActionRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetActionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetActionRequest.Id = *x.idFlag.Value
	}
}

func (x *GetActionRequestFlag) Changed() bool {
	return x.changed
}

type GetActionResponseFlag struct {
	*GetActionResponse

	changed bool
	set     *pflag.FlagSet

	actionFlag *action.ActionFlag
}

func (x *GetActionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetActionResponse", pflag.ContinueOnError)

	x.actionFlag = &action.ActionFlag{Action: new(action.Action)}
	x.actionFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetActionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "action")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("action"); flagIdx != nil {
		x.actionFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.actionFlag.Changed() {
		x.changed = true
		x.GetActionResponse.Action = x.actionFlag.Action
	}

}

func (x *GetActionResponseFlag) Changed() bool {
	return x.changed
}

type GetAppByIDRequestFlag struct {
	*GetAppByIDRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *GetAppByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAppByIDRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetAppByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.GetAppByIDRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.GetAppByIDRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *GetAppByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetAppByIDResponseFlag struct {
	*GetAppByIDResponse

	changed bool
	set     *pflag.FlagSet

	appFlag *app.AppFlag
}

func (x *GetAppByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAppByIDResponse", pflag.ContinueOnError)

	x.appFlag = &app.AppFlag{App: new(app.App)}
	x.appFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetAppByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "app")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("app"); flagIdx != nil {
		x.appFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.appFlag.Changed() {
		x.changed = true
		x.GetAppByIDResponse.App = x.appFlag.App
	}

}

func (x *GetAppByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetAppKeyRequestFlag struct {
	*GetAppKeyRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
	keyIdFlag     *cli_client.StringParser
}

func (x *GetAppKeyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAppKeyRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetAppKeyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.GetAppKeyRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.GetAppKeyRequest.AppId = *x.appIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.GetAppKeyRequest.KeyId = *x.keyIdFlag.Value
	}
}

func (x *GetAppKeyRequestFlag) Changed() bool {
	return x.changed
}

type GetAppKeyResponseFlag struct {
	*GetAppKeyResponse

	changed bool
	set     *pflag.FlagSet

	keyFlag *authn.KeyFlag
}

func (x *GetAppKeyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetAppKeyResponse", pflag.ContinueOnError)

	x.keyFlag = &authn.KeyFlag{Key: new(authn.Key)}
	x.keyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetAppKeyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "key")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("key"); flagIdx != nil {
		x.keyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.GetAppKeyResponse.Key = x.keyFlag.Key
	}

}

func (x *GetAppKeyResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomDomainClaimedMessageTextRequestFlag struct {
	*GetCustomDomainClaimedMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomDomainClaimedMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomDomainClaimedMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomDomainClaimedMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomDomainClaimedMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomDomainClaimedMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomDomainClaimedMessageTextResponseFlag struct {
	*GetCustomDomainClaimedMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomDomainClaimedMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomDomainClaimedMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomDomainClaimedMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomDomainClaimedMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomDomainClaimedMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomInitMessageTextRequestFlag struct {
	*GetCustomInitMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomInitMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomInitMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomInitMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomInitMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomInitMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomInitMessageTextResponseFlag struct {
	*GetCustomInitMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomInitMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomInitMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomInitMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomInitMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomInitMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomLoginTextsRequestFlag struct {
	*GetCustomLoginTextsRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomLoginTextsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomLoginTextsRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomLoginTextsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomLoginTextsRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomLoginTextsRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomLoginTextsResponseFlag struct {
	*GetCustomLoginTextsResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.LoginCustomTextFlag
}

func (x *GetCustomLoginTextsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomLoginTextsResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.LoginCustomTextFlag{LoginCustomText: new(text.LoginCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomLoginTextsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomLoginTextsResponse.CustomText = x.customTextFlag.LoginCustomText
	}

}

func (x *GetCustomLoginTextsResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordChangeMessageTextRequestFlag struct {
	*GetCustomPasswordChangeMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomPasswordChangeMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordChangeMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordChangeMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordChangeMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomPasswordChangeMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordChangeMessageTextResponseFlag struct {
	*GetCustomPasswordChangeMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomPasswordChangeMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordChangeMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordChangeMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordChangeMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomPasswordChangeMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordResetMessageTextRequestFlag struct {
	*GetCustomPasswordResetMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomPasswordResetMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordResetMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordResetMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordResetMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomPasswordResetMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordResetMessageTextResponseFlag struct {
	*GetCustomPasswordResetMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomPasswordResetMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordResetMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordResetMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordResetMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomPasswordResetMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordlessRegistrationMessageTextRequestFlag struct {
	*GetCustomPasswordlessRegistrationMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordlessRegistrationMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordlessRegistrationMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomPasswordlessRegistrationMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomPasswordlessRegistrationMessageTextResponseFlag struct {
	*GetCustomPasswordlessRegistrationMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomPasswordlessRegistrationMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomPasswordlessRegistrationMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomPasswordlessRegistrationMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomPasswordlessRegistrationMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailMessageTextRequestFlag struct {
	*GetCustomVerifyEmailMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifyEmailMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifyEmailMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailMessageTextResponseFlag struct {
	*GetCustomVerifyEmailMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifyEmailMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifyEmailMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailOTPMessageTextRequestFlag struct {
	*GetCustomVerifyEmailOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifyEmailOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifyEmailOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyEmailOTPMessageTextResponseFlag struct {
	*GetCustomVerifyEmailOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifyEmailOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyEmailOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyEmailOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyEmailOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifyEmailOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyPhoneMessageTextRequestFlag struct {
	*GetCustomVerifyPhoneMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifyPhoneMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyPhoneMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyPhoneMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyPhoneMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifyPhoneMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifyPhoneMessageTextResponseFlag struct {
	*GetCustomVerifyPhoneMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifyPhoneMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifyPhoneMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifyPhoneMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifyPhoneMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifyPhoneMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifySMSOTPMessageTextRequestFlag struct {
	*GetCustomVerifySMSOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetCustomVerifySMSOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifySMSOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifySMSOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetCustomVerifySMSOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetCustomVerifySMSOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetCustomVerifySMSOTPMessageTextResponseFlag struct {
	*GetCustomVerifySMSOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetCustomVerifySMSOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetCustomVerifySMSOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetCustomVerifySMSOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetCustomVerifySMSOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetCustomVerifySMSOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultDomainClaimedMessageTextRequestFlag struct {
	*GetDefaultDomainClaimedMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultDomainClaimedMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultDomainClaimedMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultDomainClaimedMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultDomainClaimedMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultDomainClaimedMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultDomainClaimedMessageTextResponseFlag struct {
	*GetDefaultDomainClaimedMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultDomainClaimedMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultDomainClaimedMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultDomainClaimedMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultDomainClaimedMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultDomainClaimedMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultInitMessageTextRequestFlag struct {
	*GetDefaultInitMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultInitMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultInitMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultInitMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultInitMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultInitMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultInitMessageTextResponseFlag struct {
	*GetDefaultInitMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultInitMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultInitMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultInitMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultInitMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultInitMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultLabelPolicyRequestFlag struct {
	*GetDefaultLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultLabelPolicyResponseFlag struct {
	*GetDefaultLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LabelPolicyFlag
}

func (x *GetDefaultLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLabelPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LabelPolicyFlag{LabelPolicy: new(policy.LabelPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultLabelPolicyResponse.Policy = x.policyFlag.LabelPolicy
	}

}

func (x *GetDefaultLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultLockoutPolicyRequestFlag struct {
	*GetDefaultLockoutPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultLockoutPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLockoutPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLockoutPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultLockoutPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultLockoutPolicyResponseFlag struct {
	*GetDefaultLockoutPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LockoutPolicyFlag
}

func (x *GetDefaultLockoutPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLockoutPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LockoutPolicyFlag{LockoutPolicy: new(policy.LockoutPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLockoutPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultLockoutPolicyResponse.Policy = x.policyFlag.LockoutPolicy
	}

}

func (x *GetDefaultLockoutPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultLoginPolicyRequestFlag struct {
	*GetDefaultLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLoginPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultLoginPolicyResponseFlag struct {
	*GetDefaultLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.LoginPolicyFlag
}

func (x *GetDefaultLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLoginPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.LoginPolicyFlag{LoginPolicy: new(policy.LoginPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultLoginPolicyResponse.Policy = x.policyFlag.LoginPolicy
	}

}

func (x *GetDefaultLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultLoginTextsRequestFlag struct {
	*GetDefaultLoginTextsRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultLoginTextsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLoginTextsRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLoginTextsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultLoginTextsRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultLoginTextsRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultLoginTextsResponseFlag struct {
	*GetDefaultLoginTextsResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.LoginCustomTextFlag
}

func (x *GetDefaultLoginTextsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultLoginTextsResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.LoginCustomTextFlag{LoginCustomText: new(text.LoginCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultLoginTextsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultLoginTextsResponse.CustomText = x.customTextFlag.LoginCustomText
	}

}

func (x *GetDefaultLoginTextsResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultNotificationPolicyRequestFlag struct {
	*GetDefaultNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultNotificationPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultNotificationPolicyResponseFlag struct {
	*GetDefaultNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.NotificationPolicyFlag
}

func (x *GetDefaultNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultNotificationPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.NotificationPolicyFlag{NotificationPolicy: new(policy.NotificationPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultNotificationPolicyResponse.Policy = x.policyFlag.NotificationPolicy
	}

}

func (x *GetDefaultNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordAgePolicyRequestFlag struct {
	*GetDefaultPasswordAgePolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultPasswordAgePolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordAgePolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordAgePolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultPasswordAgePolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordAgePolicyResponseFlag struct {
	*GetDefaultPasswordAgePolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PasswordAgePolicyFlag
}

func (x *GetDefaultPasswordAgePolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordAgePolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PasswordAgePolicyFlag{PasswordAgePolicy: new(policy.PasswordAgePolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordAgePolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordAgePolicyResponse.Policy = x.policyFlag.PasswordAgePolicy
	}

}

func (x *GetDefaultPasswordAgePolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordChangeMessageTextRequestFlag struct {
	*GetDefaultPasswordChangeMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultPasswordChangeMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordChangeMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordChangeMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordChangeMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultPasswordChangeMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordChangeMessageTextResponseFlag struct {
	*GetDefaultPasswordChangeMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultPasswordChangeMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordChangeMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordChangeMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordChangeMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultPasswordChangeMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordComplexityPolicyRequestFlag struct {
	*GetDefaultPasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultPasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordComplexityPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultPasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordComplexityPolicyResponseFlag struct {
	*GetDefaultPasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PasswordComplexityPolicyFlag
}

func (x *GetDefaultPasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PasswordComplexityPolicyFlag{PasswordComplexityPolicy: new(policy.PasswordComplexityPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordComplexityPolicyResponse.Policy = x.policyFlag.PasswordComplexityPolicy
	}

}

func (x *GetDefaultPasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordResetMessageTextRequestFlag struct {
	*GetDefaultPasswordResetMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultPasswordResetMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordResetMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordResetMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordResetMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultPasswordResetMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordResetMessageTextResponseFlag struct {
	*GetDefaultPasswordResetMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultPasswordResetMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordResetMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordResetMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordResetMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultPasswordResetMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordlessRegistrationMessageTextRequestFlag struct {
	*GetDefaultPasswordlessRegistrationMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordlessRegistrationMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordlessRegistrationMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultPasswordlessRegistrationMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPasswordlessRegistrationMessageTextResponseFlag struct {
	*GetDefaultPasswordlessRegistrationMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPasswordlessRegistrationMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultPasswordlessRegistrationMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultPasswordlessRegistrationMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultPrivacyPolicyRequestFlag struct {
	*GetDefaultPrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDefaultPrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPrivacyPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDefaultPrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultPrivacyPolicyResponseFlag struct {
	*GetDefaultPrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PrivacyPolicyFlag
}

func (x *GetDefaultPrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultPrivacyPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PrivacyPolicyFlag{PrivacyPolicy: new(policy.PrivacyPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultPrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDefaultPrivacyPolicyResponse.Policy = x.policyFlag.PrivacyPolicy
	}

}

func (x *GetDefaultPrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailMessageTextRequestFlag struct {
	*GetDefaultVerifyEmailMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifyEmailMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifyEmailMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailMessageTextResponseFlag struct {
	*GetDefaultVerifyEmailMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifyEmailMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifyEmailMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailOTPMessageTextRequestFlag struct {
	*GetDefaultVerifyEmailOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifyEmailOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifyEmailOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyEmailOTPMessageTextResponseFlag struct {
	*GetDefaultVerifyEmailOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifyEmailOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyEmailOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyEmailOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyEmailOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifyEmailOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyPhoneMessageTextRequestFlag struct {
	*GetDefaultVerifyPhoneMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifyPhoneMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyPhoneMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyPhoneMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyPhoneMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifyPhoneMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifyPhoneMessageTextResponseFlag struct {
	*GetDefaultVerifyPhoneMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifyPhoneMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifyPhoneMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifyPhoneMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifyPhoneMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifyPhoneMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifySMSOTPMessageTextRequestFlag struct {
	*GetDefaultVerifySMSOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *GetDefaultVerifySMSOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifySMSOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifySMSOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifySMSOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
}

func (x *GetDefaultVerifySMSOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type GetDefaultVerifySMSOTPMessageTextResponseFlag struct {
	*GetDefaultVerifySMSOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	customTextFlag *text.MessageCustomTextFlag
}

func (x *GetDefaultVerifySMSOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDefaultVerifySMSOTPMessageTextResponse", pflag.ContinueOnError)

	x.customTextFlag = &text.MessageCustomTextFlag{MessageCustomText: new(text.MessageCustomText)}
	x.customTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDefaultVerifySMSOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "custom-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("custom-text"); flagIdx != nil {
		x.customTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.customTextFlag.Changed() {
		x.changed = true
		x.GetDefaultVerifySMSOTPMessageTextResponse.CustomText = x.customTextFlag.MessageCustomText
	}

}

func (x *GetDefaultVerifySMSOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type GetDomainPolicyRequestFlag struct {
	*GetDomainPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetDomainPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDomainPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetDomainPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetDomainPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetDomainPolicyResponseFlag struct {
	*GetDomainPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.DomainPolicyFlag
}

func (x *GetDomainPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetDomainPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.DomainPolicyFlag{DomainPolicy: new(policy.DomainPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetDomainPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetDomainPolicyResponse.Policy = x.policyFlag.DomainPolicy
	}

}

func (x *GetDomainPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetFlowRequestFlag struct {
	*GetFlowRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.StringParser
}

func (x *GetFlowRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetFlowRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewStringParser(x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *GetFlowRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.GetFlowRequest.Type = *x.typeFlag.Value
	}
}

func (x *GetFlowRequestFlag) Changed() bool {
	return x.changed
}

type GetFlowResponseFlag struct {
	*GetFlowResponse

	changed bool
	set     *pflag.FlagSet

	flowFlag *action.FlowFlag
}

func (x *GetFlowResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetFlowResponse", pflag.ContinueOnError)

	x.flowFlag = &action.FlowFlag{Flow: new(action.Flow)}
	x.flowFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetFlowResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "flow")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("flow"); flagIdx != nil {
		x.flowFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.flowFlag.Changed() {
		x.changed = true
		x.GetFlowResponse.Flow = x.flowFlag.Flow
	}

}

func (x *GetFlowResponseFlag) Changed() bool {
	return x.changed
}

type GetGrantedProjectByIDRequestFlag struct {
	*GetGrantedProjectByIDRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
}

func (x *GetGrantedProjectByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetGrantedProjectByIDRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetGrantedProjectByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.GetGrantedProjectByIDRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.GetGrantedProjectByIDRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *GetGrantedProjectByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetGrantedProjectByIDResponseFlag struct {
	*GetGrantedProjectByIDResponse

	changed bool
	set     *pflag.FlagSet

	grantedProjectFlag *project.GrantedProjectFlag
}

func (x *GetGrantedProjectByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetGrantedProjectByIDResponse", pflag.ContinueOnError)

	x.grantedProjectFlag = &project.GrantedProjectFlag{GrantedProject: new(project.GrantedProject)}
	x.grantedProjectFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetGrantedProjectByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "granted-project")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("granted-project"); flagIdx != nil {
		x.grantedProjectFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.grantedProjectFlag.Changed() {
		x.changed = true
		x.GetGrantedProjectByIDResponse.GrantedProject = x.grantedProjectFlag.GrantedProject
	}

}

func (x *GetGrantedProjectByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetHumanEmailRequestFlag struct {
	*GetHumanEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *GetHumanEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetHumanEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetHumanEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetHumanEmailRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *GetHumanEmailRequestFlag) Changed() bool {
	return x.changed
}

type GetHumanEmailResponseFlag struct {
	*GetHumanEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	emailFlag   *user.EmailFlag
}

func (x *GetHumanEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetHumanEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.emailFlag = &user.EmailFlag{Email: new(user.Email)}
	x.emailFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetHumanEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "email")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetHumanEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.GetHumanEmailResponse.Email = x.emailFlag.Email
	}

}

func (x *GetHumanEmailResponseFlag) Changed() bool {
	return x.changed
}

type GetHumanPhoneRequestFlag struct {
	*GetHumanPhoneRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *GetHumanPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetHumanPhoneRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetHumanPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetHumanPhoneRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *GetHumanPhoneRequestFlag) Changed() bool {
	return x.changed
}

type GetHumanPhoneResponseFlag struct {
	*GetHumanPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	phoneFlag   *user.PhoneFlag
}

func (x *GetHumanPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetHumanPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.phoneFlag = &user.PhoneFlag{Phone: new(user.Phone)}
	x.phoneFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetHumanPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "phone")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetHumanPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.GetHumanPhoneResponse.Phone = x.phoneFlag.Phone
	}

}

func (x *GetHumanPhoneResponseFlag) Changed() bool {
	return x.changed
}

type GetHumanProfileRequestFlag struct {
	*GetHumanProfileRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *GetHumanProfileRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetHumanProfileRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetHumanProfileRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetHumanProfileRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *GetHumanProfileRequestFlag) Changed() bool {
	return x.changed
}

type GetHumanProfileResponseFlag struct {
	*GetHumanProfileResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
	profileFlag *user.ProfileFlag
}

func (x *GetHumanProfileResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetHumanProfileResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.profileFlag = &user.ProfileFlag{Profile: new(user.Profile)}
	x.profileFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetHumanProfileResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "profile")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.GetHumanProfileResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.GetHumanProfileResponse.Profile = x.profileFlag.Profile
	}

}

func (x *GetHumanProfileResponseFlag) Changed() bool {
	return x.changed
}

type GetIAMRequestFlag struct {
	*GetIAMRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetIAMRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetIAMRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetIAMRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetIAMRequestFlag) Changed() bool {
	return x.changed
}

type GetIAMResponseFlag struct {
	*GetIAMResponse

	changed bool
	set     *pflag.FlagSet

	globalOrgIdFlag  *cli_client.StringParser
	iamProjectIdFlag *cli_client.StringParser
	defaultOrgIdFlag *cli_client.StringParser
}

func (x *GetIAMResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetIAMResponse", pflag.ContinueOnError)

	x.globalOrgIdFlag = cli_client.NewStringParser(x.set, "global-org-id", "")
	x.iamProjectIdFlag = cli_client.NewStringParser(x.set, "iam-project-id", "")
	x.defaultOrgIdFlag = cli_client.NewStringParser(x.set, "default-org-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetIAMResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.globalOrgIdFlag.Changed() {
		x.changed = true
		x.GetIAMResponse.GlobalOrgId = *x.globalOrgIdFlag.Value
	}
	if x.iamProjectIdFlag.Changed() {
		x.changed = true
		x.GetIAMResponse.IamProjectId = *x.iamProjectIdFlag.Value
	}
	if x.defaultOrgIdFlag.Changed() {
		x.changed = true
		x.GetIAMResponse.DefaultOrgId = *x.defaultOrgIdFlag.Value
	}
}

func (x *GetIAMResponseFlag) Changed() bool {
	return x.changed
}

type GetLabelPolicyRequestFlag struct {
	*GetLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetLabelPolicyResponseFlag struct {
	*GetLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.LabelPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLabelPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.LabelPolicyFlag{LabelPolicy: new(policy.LabelPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetLabelPolicyResponse.Policy = x.policyFlag.LabelPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetLabelPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetLockoutPolicyRequestFlag struct {
	*GetLockoutPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLockoutPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLockoutPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLockoutPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLockoutPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetLockoutPolicyResponseFlag struct {
	*GetLockoutPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.LockoutPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetLockoutPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLockoutPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.LockoutPolicyFlag{LockoutPolicy: new(policy.LockoutPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLockoutPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetLockoutPolicyResponse.Policy = x.policyFlag.LockoutPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetLockoutPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetLockoutPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetLoginPolicyRequestFlag struct {
	*GetLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLoginPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetLoginPolicyResponseFlag struct {
	*GetLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.LoginPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetLoginPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.LoginPolicyFlag{LoginPolicy: new(policy.LoginPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetLoginPolicyResponse.Policy = x.policyFlag.LoginPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetLoginPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetMachineKeyByIDsRequestFlag struct {
	*GetMachineKeyByIDsRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	keyIdFlag  *cli_client.StringParser
}

func (x *GetMachineKeyByIDsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMachineKeyByIDsRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetMachineKeyByIDsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetMachineKeyByIDsRequest.UserId = *x.userIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.GetMachineKeyByIDsRequest.KeyId = *x.keyIdFlag.Value
	}
}

func (x *GetMachineKeyByIDsRequestFlag) Changed() bool {
	return x.changed
}

type GetMachineKeyByIDsResponseFlag struct {
	*GetMachineKeyByIDsResponse

	changed bool
	set     *pflag.FlagSet

	keyFlag *authn.KeyFlag
}

func (x *GetMachineKeyByIDsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMachineKeyByIDsResponse", pflag.ContinueOnError)

	x.keyFlag = &authn.KeyFlag{Key: new(authn.Key)}
	x.keyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMachineKeyByIDsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "key")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("key"); flagIdx != nil {
		x.keyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.GetMachineKeyByIDsResponse.Key = x.keyFlag.Key
	}

}

func (x *GetMachineKeyByIDsResponseFlag) Changed() bool {
	return x.changed
}

type GetMyOrgRequestFlag struct {
	*GetMyOrgRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetMyOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyOrgRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetMyOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetMyOrgRequestFlag) Changed() bool {
	return x.changed
}

type GetMyOrgResponseFlag struct {
	*GetMyOrgResponse

	changed bool
	set     *pflag.FlagSet

	orgFlag *org.OrgFlag
}

func (x *GetMyOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetMyOrgResponse", pflag.ContinueOnError)

	x.orgFlag = &org.OrgFlag{Org: new(org.Org)}
	x.orgFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetMyOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.GetMyOrgResponse.Org = x.orgFlag.Org
	}

}

func (x *GetMyOrgResponseFlag) Changed() bool {
	return x.changed
}

type GetNotificationPolicyRequestFlag struct {
	*GetNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetNotificationPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetNotificationPolicyResponseFlag struct {
	*GetNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.NotificationPolicyFlag
}

func (x *GetNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetNotificationPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.NotificationPolicyFlag{NotificationPolicy: new(policy.NotificationPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetNotificationPolicyResponse.Policy = x.policyFlag.NotificationPolicy
	}

}

func (x *GetNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetOIDCInformationRequestFlag struct {
	*GetOIDCInformationRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetOIDCInformationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOIDCInformationRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetOIDCInformationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetOIDCInformationRequestFlag) Changed() bool {
	return x.changed
}

type GetOIDCInformationResponseFlag struct {
	*GetOIDCInformationResponse

	changed bool
	set     *pflag.FlagSet

	issuerFlag            *cli_client.StringParser
	discoveryEndpointFlag *cli_client.StringParser
}

func (x *GetOIDCInformationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOIDCInformationResponse", pflag.ContinueOnError)

	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.discoveryEndpointFlag = cli_client.NewStringParser(x.set, "discovery-endpoint", "")
	parent.AddFlagSet(x.set)
}

func (x *GetOIDCInformationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.issuerFlag.Changed() {
		x.changed = true
		x.GetOIDCInformationResponse.Issuer = *x.issuerFlag.Value
	}
	if x.discoveryEndpointFlag.Changed() {
		x.changed = true
		x.GetOIDCInformationResponse.DiscoveryEndpoint = *x.discoveryEndpointFlag.Value
	}
}

func (x *GetOIDCInformationResponseFlag) Changed() bool {
	return x.changed
}

type GetOrgByDomainGlobalRequestFlag struct {
	*GetOrgByDomainGlobalRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
}

func (x *GetOrgByDomainGlobalRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgByDomainGlobalRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *GetOrgByDomainGlobalRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.GetOrgByDomainGlobalRequest.Domain = *x.domainFlag.Value
	}
}

func (x *GetOrgByDomainGlobalRequestFlag) Changed() bool {
	return x.changed
}

type GetOrgByDomainGlobalResponseFlag struct {
	*GetOrgByDomainGlobalResponse

	changed bool
	set     *pflag.FlagSet

	orgFlag *org.OrgFlag
}

func (x *GetOrgByDomainGlobalResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgByDomainGlobalResponse", pflag.ContinueOnError)

	x.orgFlag = &org.OrgFlag{Org: new(org.Org)}
	x.orgFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOrgByDomainGlobalResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "org")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("org"); flagIdx != nil {
		x.orgFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.orgFlag.Changed() {
		x.changed = true
		x.GetOrgByDomainGlobalResponse.Org = x.orgFlag.Org
	}

}

func (x *GetOrgByDomainGlobalResponseFlag) Changed() bool {
	return x.changed
}

type GetOrgIAMPolicyRequestFlag struct {
	*GetOrgIAMPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetOrgIAMPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgIAMPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetOrgIAMPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetOrgIAMPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetOrgIAMPolicyResponseFlag struct {
	*GetOrgIAMPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.OrgIAMPolicyFlag
}

func (x *GetOrgIAMPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgIAMPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.OrgIAMPolicyFlag{OrgIAMPolicy: new(policy.OrgIAMPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOrgIAMPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetOrgIAMPolicyResponse.Policy = x.policyFlag.OrgIAMPolicy
	}

}

func (x *GetOrgIAMPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetOrgIDPByIDRequestFlag struct {
	*GetOrgIDPByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetOrgIDPByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgIDPByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetOrgIDPByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetOrgIDPByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetOrgIDPByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetOrgIDPByIDResponseFlag struct {
	*GetOrgIDPByIDResponse

	changed bool
	set     *pflag.FlagSet

	idpFlag *idp.IDPFlag
}

func (x *GetOrgIDPByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgIDPByIDResponse", pflag.ContinueOnError)

	x.idpFlag = &idp.IDPFlag{IDP: new(idp.IDP)}
	x.idpFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOrgIDPByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp"); flagIdx != nil {
		x.idpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpFlag.Changed() {
		x.changed = true
		x.GetOrgIDPByIDResponse.Idp = x.idpFlag.IDP
	}

}

func (x *GetOrgIDPByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetOrgMetadataRequestFlag struct {
	*GetOrgMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keyFlag *cli_client.StringParser
}

func (x *GetOrgMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgMetadataRequest", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *GetOrgMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.GetOrgMetadataRequest.Key = *x.keyFlag.Value
	}
}

func (x *GetOrgMetadataRequestFlag) Changed() bool {
	return x.changed
}

type GetOrgMetadataResponseFlag struct {
	*GetOrgMetadataResponse

	changed bool
	set     *pflag.FlagSet

	metadataFlag *metadata.MetadataFlag
}

func (x *GetOrgMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetOrgMetadataResponse", pflag.ContinueOnError)

	x.metadataFlag = &metadata.MetadataFlag{Metadata: new(metadata.Metadata)}
	x.metadataFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetOrgMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("metadata"); flagIdx != nil {
		x.metadataFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.metadataFlag.Changed() {
		x.changed = true
		x.GetOrgMetadataResponse.Metadata = x.metadataFlag.Metadata
	}

}

func (x *GetOrgMetadataResponseFlag) Changed() bool {
	return x.changed
}

type GetPasswordAgePolicyRequestFlag struct {
	*GetPasswordAgePolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPasswordAgePolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordAgePolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPasswordAgePolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPasswordAgePolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPasswordAgePolicyResponseFlag struct {
	*GetPasswordAgePolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.PasswordAgePolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetPasswordAgePolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordAgePolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.PasswordAgePolicyFlag{PasswordAgePolicy: new(policy.PasswordAgePolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPasswordAgePolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPasswordAgePolicyResponse.Policy = x.policyFlag.PasswordAgePolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetPasswordAgePolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetPasswordAgePolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPasswordComplexityPolicyRequestFlag struct {
	*GetPasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordComplexityPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPasswordComplexityPolicyResponseFlag struct {
	*GetPasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.PasswordComplexityPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetPasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.PasswordComplexityPolicyFlag{PasswordComplexityPolicy: new(policy.PasswordComplexityPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPasswordComplexityPolicyResponse.Policy = x.policyFlag.PasswordComplexityPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetPasswordComplexityPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetPasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPersonalAccessTokenByIDsRequestFlag struct {
	*GetPersonalAccessTokenByIDsRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	tokenIdFlag *cli_client.StringParser
}

func (x *GetPersonalAccessTokenByIDsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPersonalAccessTokenByIDsRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetPersonalAccessTokenByIDsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetPersonalAccessTokenByIDsRequest.UserId = *x.userIdFlag.Value
	}
	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.GetPersonalAccessTokenByIDsRequest.TokenId = *x.tokenIdFlag.Value
	}
}

func (x *GetPersonalAccessTokenByIDsRequestFlag) Changed() bool {
	return x.changed
}

type GetPersonalAccessTokenByIDsResponseFlag struct {
	*GetPersonalAccessTokenByIDsResponse

	changed bool
	set     *pflag.FlagSet

	tokenFlag *user.PersonalAccessTokenFlag
}

func (x *GetPersonalAccessTokenByIDsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPersonalAccessTokenByIDsResponse", pflag.ContinueOnError)

	x.tokenFlag = &user.PersonalAccessTokenFlag{PersonalAccessToken: new(user.PersonalAccessToken)}
	x.tokenFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPersonalAccessTokenByIDsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "token")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("token"); flagIdx != nil {
		x.tokenFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.tokenFlag.Changed() {
		x.changed = true
		x.GetPersonalAccessTokenByIDsResponse.Token = x.tokenFlag.PersonalAccessToken
	}

}

func (x *GetPersonalAccessTokenByIDsResponseFlag) Changed() bool {
	return x.changed
}

type GetPreviewLabelPolicyRequestFlag struct {
	*GetPreviewLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPreviewLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPreviewLabelPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPreviewLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPreviewLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPreviewLabelPolicyResponseFlag struct {
	*GetPreviewLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag    *policy.LabelPolicyFlag
	isDefaultFlag *cli_client.BoolParser
}

func (x *GetPreviewLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPreviewLabelPolicyResponse", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.policyFlag = &policy.LabelPolicyFlag{LabelPolicy: new(policy.LabelPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPreviewLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPreviewLabelPolicyResponse.Policy = x.policyFlag.LabelPolicy
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.GetPreviewLabelPolicyResponse.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *GetPreviewLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetPrivacyPolicyRequestFlag struct {
	*GetPrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetPrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPrivacyPolicyRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetPrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetPrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type GetPrivacyPolicyResponseFlag struct {
	*GetPrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	policyFlag *policy.PrivacyPolicyFlag
}

func (x *GetPrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetPrivacyPolicyResponse", pflag.ContinueOnError)

	x.policyFlag = &policy.PrivacyPolicyFlag{PrivacyPolicy: new(policy.PrivacyPolicy)}
	x.policyFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetPrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "policy")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("policy"); flagIdx != nil {
		x.policyFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.policyFlag.Changed() {
		x.changed = true
		x.GetPrivacyPolicyResponse.Policy = x.policyFlag.PrivacyPolicy
	}

}

func (x *GetPrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type GetProjectByIDRequestFlag struct {
	*GetProjectByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetProjectByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProjectByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetProjectByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetProjectByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetProjectByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetProjectByIDResponseFlag struct {
	*GetProjectByIDResponse

	changed bool
	set     *pflag.FlagSet

	projectFlag *project.ProjectFlag
}

func (x *GetProjectByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProjectByIDResponse", pflag.ContinueOnError)

	x.projectFlag = &project.ProjectFlag{Project: new(project.Project)}
	x.projectFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetProjectByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project"); flagIdx != nil {
		x.projectFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.projectFlag.Changed() {
		x.changed = true
		x.GetProjectByIDResponse.Project = x.projectFlag.Project
	}

}

func (x *GetProjectByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetProjectGrantByIDRequestFlag struct {
	*GetProjectGrantByIDRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
}

func (x *GetProjectGrantByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProjectGrantByIDRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetProjectGrantByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.GetProjectGrantByIDRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.GetProjectGrantByIDRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *GetProjectGrantByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetProjectGrantByIDResponseFlag struct {
	*GetProjectGrantByIDResponse

	changed bool
	set     *pflag.FlagSet

	projectGrantFlag *project.GrantedProjectFlag
}

func (x *GetProjectGrantByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProjectGrantByIDResponse", pflag.ContinueOnError)

	x.projectGrantFlag = &project.GrantedProjectFlag{GrantedProject: new(project.GrantedProject)}
	x.projectGrantFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetProjectGrantByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "project-grant")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("project-grant"); flagIdx != nil {
		x.projectGrantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.projectGrantFlag.Changed() {
		x.changed = true
		x.GetProjectGrantByIDResponse.ProjectGrant = x.projectGrantFlag.GrantedProject
	}

}

func (x *GetProjectGrantByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetProviderByIDRequestFlag struct {
	*GetProviderByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetProviderByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProviderByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetProviderByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetProviderByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetProviderByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetProviderByIDResponseFlag struct {
	*GetProviderByIDResponse

	changed bool
	set     *pflag.FlagSet

	idpFlag *idp.ProviderFlag
}

func (x *GetProviderByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetProviderByIDResponse", pflag.ContinueOnError)

	x.idpFlag = &idp.ProviderFlag{Provider: new(idp.Provider)}
	x.idpFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetProviderByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp"); flagIdx != nil {
		x.idpFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idpFlag.Changed() {
		x.changed = true
		x.GetProviderByIDResponse.Idp = x.idpFlag.Provider
	}

}

func (x *GetProviderByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetSupportedLanguagesRequestFlag struct {
	*GetSupportedLanguagesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *GetSupportedLanguagesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSupportedLanguagesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *GetSupportedLanguagesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *GetSupportedLanguagesRequestFlag) Changed() bool {
	return x.changed
}

type GetSupportedLanguagesResponseFlag struct {
	*GetSupportedLanguagesResponse

	changed bool
	set     *pflag.FlagSet

	languagesFlag *cli_client.StringSliceParser
}

func (x *GetSupportedLanguagesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetSupportedLanguagesResponse", pflag.ContinueOnError)

	x.languagesFlag = cli_client.NewStringSliceParser(x.set, "languages", "")
	parent.AddFlagSet(x.set)
}

func (x *GetSupportedLanguagesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languagesFlag.Changed() {
		x.changed = true
		x.GetSupportedLanguagesResponse.Languages = *x.languagesFlag.Value
	}
}

func (x *GetSupportedLanguagesResponseFlag) Changed() bool {
	return x.changed
}

type GetUserByIDRequestFlag struct {
	*GetUserByIDRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *GetUserByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserByIDRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetUserByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetUserByIDRequest.Id = *x.idFlag.Value
	}
}

func (x *GetUserByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetUserByIDResponseFlag struct {
	*GetUserByIDResponse

	changed bool
	set     *pflag.FlagSet

	userFlag *user.UserFlag
}

func (x *GetUserByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserByIDResponse", pflag.ContinueOnError)

	x.userFlag = &user.UserFlag{User: new(user.User)}
	x.userFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetUserByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.GetUserByIDResponse.User = x.userFlag.User
	}

}

func (x *GetUserByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetUserByLoginNameGlobalRequestFlag struct {
	*GetUserByLoginNameGlobalRequest

	changed bool
	set     *pflag.FlagSet

	loginNameFlag *cli_client.StringParser
}

func (x *GetUserByLoginNameGlobalRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserByLoginNameGlobalRequest", pflag.ContinueOnError)

	x.loginNameFlag = cli_client.NewStringParser(x.set, "login-name", "")
	parent.AddFlagSet(x.set)
}

func (x *GetUserByLoginNameGlobalRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.loginNameFlag.Changed() {
		x.changed = true
		x.GetUserByLoginNameGlobalRequest.LoginName = *x.loginNameFlag.Value
	}
}

func (x *GetUserByLoginNameGlobalRequestFlag) Changed() bool {
	return x.changed
}

type GetUserByLoginNameGlobalResponseFlag struct {
	*GetUserByLoginNameGlobalResponse

	changed bool
	set     *pflag.FlagSet

	userFlag *user.UserFlag
}

func (x *GetUserByLoginNameGlobalResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserByLoginNameGlobalResponse", pflag.ContinueOnError)

	x.userFlag = &user.UserFlag{User: new(user.User)}
	x.userFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetUserByLoginNameGlobalResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user"); flagIdx != nil {
		x.userFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userFlag.Changed() {
		x.changed = true
		x.GetUserByLoginNameGlobalResponse.User = x.userFlag.User
	}

}

func (x *GetUserByLoginNameGlobalResponseFlag) Changed() bool {
	return x.changed
}

type GetUserGrantByIDRequestFlag struct {
	*GetUserGrantByIDRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	grantIdFlag *cli_client.StringParser
}

func (x *GetUserGrantByIDRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserGrantByIDRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *GetUserGrantByIDRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.GetUserGrantByIDRequest.UserId = *x.userIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.GetUserGrantByIDRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *GetUserGrantByIDRequestFlag) Changed() bool {
	return x.changed
}

type GetUserGrantByIDResponseFlag struct {
	*GetUserGrantByIDResponse

	changed bool
	set     *pflag.FlagSet

	userGrantFlag *user.UserGrantFlag
}

func (x *GetUserGrantByIDResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserGrantByIDResponse", pflag.ContinueOnError)

	x.userGrantFlag = &user.UserGrantFlag{UserGrant: new(user.UserGrant)}
	x.userGrantFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetUserGrantByIDResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "user-grant")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("user-grant"); flagIdx != nil {
		x.userGrantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userGrantFlag.Changed() {
		x.changed = true
		x.GetUserGrantByIDResponse.UserGrant = x.userGrantFlag.UserGrant
	}

}

func (x *GetUserGrantByIDResponseFlag) Changed() bool {
	return x.changed
}

type GetUserMetadataRequestFlag struct {
	*GetUserMetadataRequest

	changed bool
	set     *pflag.FlagSet

	idFlag  *cli_client.StringParser
	keyFlag *cli_client.StringParser
}

func (x *GetUserMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserMetadataRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *GetUserMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.GetUserMetadataRequest.Id = *x.idFlag.Value
	}
	if x.keyFlag.Changed() {
		x.changed = true
		x.GetUserMetadataRequest.Key = *x.keyFlag.Value
	}
}

func (x *GetUserMetadataRequestFlag) Changed() bool {
	return x.changed
}

type GetUserMetadataResponseFlag struct {
	*GetUserMetadataResponse

	changed bool
	set     *pflag.FlagSet

	metadataFlag *metadata.MetadataFlag
}

func (x *GetUserMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GetUserMetadataResponse", pflag.ContinueOnError)

	x.metadataFlag = &metadata.MetadataFlag{Metadata: new(metadata.Metadata)}
	x.metadataFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *GetUserMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "metadata")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("metadata"); flagIdx != nil {
		x.metadataFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.metadataFlag.Changed() {
		x.changed = true
		x.GetUserMetadataResponse.Metadata = x.metadataFlag.Metadata
	}

}

func (x *GetUserMetadataResponseFlag) Changed() bool {
	return x.changed
}

type HealthzRequestFlag struct {
	*HealthzRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzRequestFlag) Changed() bool {
	return x.changed
}

type HealthzResponseFlag struct {
	*HealthzResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *HealthzResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("HealthzResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *HealthzResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *HealthzResponseFlag) Changed() bool {
	return x.changed
}

type IDPQueryFlag struct {
	*IDPQuery

	changed bool
	set     *pflag.FlagSet

	idpIdQueryFlag     *idp.IDPIDQueryFlag
	idpNameQueryFlag   *idp.IDPNameQueryFlag
	ownerTypeQueryFlag *idp.IDPOwnerTypeQueryFlag
}

func (x *IDPQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPQuery", pflag.ContinueOnError)

	x.idpIdQueryFlag = &idp.IDPIDQueryFlag{IDPIDQuery: new(idp.IDPIDQuery)}
	x.idpIdQueryFlag.AddFlags(x.set)
	x.idpNameQueryFlag = &idp.IDPNameQueryFlag{IDPNameQuery: new(idp.IDPNameQuery)}
	x.idpNameQueryFlag.AddFlags(x.set)
	x.ownerTypeQueryFlag = &idp.IDPOwnerTypeQueryFlag{IDPOwnerTypeQuery: new(idp.IDPOwnerTypeQuery)}
	x.ownerTypeQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *IDPQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query", "owner-type-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp-id-query"); flagIdx != nil {
		x.idpIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-name-query"); flagIdx != nil {
		x.idpNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("owner-type-query"); flagIdx != nil {
		x.ownerTypeQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query", "owner-type-query").Last().Flag {
	case "idp-id-query":
		if x.idpIdQueryFlag.Changed() {
			x.changed = true
			x.IDPQuery.Query = &IDPQuery_IdpIdQuery{IdpIdQuery: x.idpIdQueryFlag.IDPIDQuery}
		}
	case "idp-name-query":
		if x.idpNameQueryFlag.Changed() {
			x.changed = true
			x.IDPQuery.Query = &IDPQuery_IdpNameQuery{IdpNameQuery: x.idpNameQueryFlag.IDPNameQuery}
		}
	case "owner-type-query":
		if x.ownerTypeQueryFlag.Changed() {
			x.changed = true
			x.IDPQuery.Query = &IDPQuery_OwnerTypeQuery{OwnerTypeQuery: x.ownerTypeQueryFlag.IDPOwnerTypeQuery}
		}
	}
}

func (x *IDPQueryFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserRequestFlag struct {
	*ImportHumanUserRequest

	changed bool
	set     *pflag.FlagSet

	userNameFlag                        *cli_client.StringParser
	profileFlag                         *ImportHumanUserRequest_ProfileFlag
	emailFlag                           *ImportHumanUserRequest_EmailFlag
	phoneFlag                           *ImportHumanUserRequest_PhoneFlag
	passwordFlag                        *cli_client.StringParser
	hashedPasswordFlag                  *ImportHumanUserRequest_HashedPasswordFlag
	passwordChangeRequiredFlag          *cli_client.BoolParser
	requestPasswordlessRegistrationFlag *cli_client.BoolParser
	otpCodeFlag                         *cli_client.StringParser
	idpsFlag                            []*ImportHumanUserRequest_IDPFlag
}

func (x *ImportHumanUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserRequest", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.passwordChangeRequiredFlag = cli_client.NewBoolParser(x.set, "password-change-required", "")
	x.requestPasswordlessRegistrationFlag = cli_client.NewBoolParser(x.set, "request-passwordless-registration", "")
	x.otpCodeFlag = cli_client.NewStringParser(x.set, "otp-code", "")
	x.idpsFlag = []*ImportHumanUserRequest_IDPFlag{}
	x.profileFlag = &ImportHumanUserRequest_ProfileFlag{ImportHumanUserRequest_Profile: new(ImportHumanUserRequest_Profile)}
	x.profileFlag.AddFlags(x.set)
	x.emailFlag = &ImportHumanUserRequest_EmailFlag{ImportHumanUserRequest_Email: new(ImportHumanUserRequest_Email)}
	x.emailFlag.AddFlags(x.set)
	x.phoneFlag = &ImportHumanUserRequest_PhoneFlag{ImportHumanUserRequest_Phone: new(ImportHumanUserRequest_Phone)}
	x.phoneFlag.AddFlags(x.set)
	x.hashedPasswordFlag = &ImportHumanUserRequest_HashedPasswordFlag{ImportHumanUserRequest_HashedPassword: new(ImportHumanUserRequest_HashedPassword)}
	x.hashedPasswordFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "profile", "email", "phone", "hashed-password", "idps")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("profile"); flagIdx != nil {
		x.profileFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email"); flagIdx != nil {
		x.emailFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("phone"); flagIdx != nil {
		x.phoneFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("hashed-password"); flagIdx != nil {
		x.hashedPasswordFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("idps") {
		x.idpsFlag = append(x.idpsFlag, &ImportHumanUserRequest_IDPFlag{ImportHumanUserRequest_IDP: new(ImportHumanUserRequest_IDP)})
		x.idpsFlag[len(x.idpsFlag)-1].AddFlags(x.set)
		x.idpsFlag[len(x.idpsFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.UserName = *x.userNameFlag.Value
	}

	if x.profileFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.Profile = x.profileFlag.ImportHumanUserRequest_Profile
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.Email = x.emailFlag.ImportHumanUserRequest_Email
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.Phone = x.phoneFlag.ImportHumanUserRequest_Phone
	}

	if x.passwordFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.Password = *x.passwordFlag.Value
	}

	if x.hashedPasswordFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.HashedPassword = x.hashedPasswordFlag.ImportHumanUserRequest_HashedPassword
	}

	if x.passwordChangeRequiredFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.PasswordChangeRequired = *x.passwordChangeRequiredFlag.Value
	}
	if x.requestPasswordlessRegistrationFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.RequestPasswordlessRegistration = *x.requestPasswordlessRegistrationFlag.Value
	}
	if x.otpCodeFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest.OtpCode = *x.otpCodeFlag.Value
	}
	if len(x.idpsFlag) > 0 {
		x.changed = true
		x.Idps = make([]*ImportHumanUserRequest_IDP, len(x.idpsFlag))
		for i, value := range x.idpsFlag {
			x.ImportHumanUserRequest.Idps[i] = value.ImportHumanUserRequest_IDP
		}
	}

}

func (x *ImportHumanUserRequestFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserRequest_EmailFlag struct {
	*ImportHumanUserRequest_Email

	changed bool
	set     *pflag.FlagSet

	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *ImportHumanUserRequest_EmailFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserRequest_Email", pflag.ContinueOnError)

	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserRequest_EmailFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.emailFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Email.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Email.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *ImportHumanUserRequest_EmailFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserRequest_HashedPasswordFlag struct {
	*ImportHumanUserRequest_HashedPassword

	changed bool
	set     *pflag.FlagSet

	valueFlag *cli_client.StringParser
}

func (x *ImportHumanUserRequest_HashedPasswordFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserRequest_HashedPassword", pflag.ContinueOnError)

	x.valueFlag = cli_client.NewStringParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserRequest_HashedPasswordFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.valueFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_HashedPassword.Value = *x.valueFlag.Value
	}
}

func (x *ImportHumanUserRequest_HashedPasswordFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserRequest_IDPFlag struct {
	*ImportHumanUserRequest_IDP

	changed bool
	set     *pflag.FlagSet

	configIdFlag       *cli_client.StringParser
	externalUserIdFlag *cli_client.StringParser
	displayNameFlag    *cli_client.StringParser
}

func (x *ImportHumanUserRequest_IDPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserRequest_IDP", pflag.ContinueOnError)

	x.configIdFlag = cli_client.NewStringParser(x.set, "config-id", "")
	x.externalUserIdFlag = cli_client.NewStringParser(x.set, "external-user-id", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserRequest_IDPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.configIdFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_IDP.ConfigId = *x.configIdFlag.Value
	}
	if x.externalUserIdFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_IDP.ExternalUserId = *x.externalUserIdFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_IDP.DisplayName = *x.displayNameFlag.Value
	}
}

func (x *ImportHumanUserRequest_IDPFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserRequest_PhoneFlag struct {
	*ImportHumanUserRequest_Phone

	changed bool
	set     *pflag.FlagSet

	phoneFlag           *cli_client.StringParser
	isPhoneVerifiedFlag *cli_client.BoolParser
}

func (x *ImportHumanUserRequest_PhoneFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserRequest_Phone", pflag.ContinueOnError)

	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isPhoneVerifiedFlag = cli_client.NewBoolParser(x.set, "is-phone-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserRequest_PhoneFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.phoneFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Phone.Phone = *x.phoneFlag.Value
	}
	if x.isPhoneVerifiedFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Phone.IsPhoneVerified = *x.isPhoneVerifiedFlag.Value
	}
}

func (x *ImportHumanUserRequest_PhoneFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserRequest_ProfileFlag struct {
	*ImportHumanUserRequest_Profile

	changed bool
	set     *pflag.FlagSet

	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[user.Gender]
}

func (x *ImportHumanUserRequest_ProfileFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserRequest_Profile", pflag.ContinueOnError)

	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[user.Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserRequest_ProfileFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.firstNameFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Profile.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Profile.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Profile.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Profile.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Profile.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.ImportHumanUserRequest_Profile.Gender = *x.genderFlag.Value
	}
}

func (x *ImportHumanUserRequest_ProfileFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserResponseFlag struct {
	*ImportHumanUserResponse

	changed bool
	set     *pflag.FlagSet

	userIdFlag                   *cli_client.StringParser
	detailsFlag                  *object.ObjectDetailsFlag
	passwordlessRegistrationFlag *ImportHumanUserResponse_PasswordlessRegistrationFlag
}

func (x *ImportHumanUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserResponse", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.passwordlessRegistrationFlag = &ImportHumanUserResponse_PasswordlessRegistrationFlag{ImportHumanUserResponse_PasswordlessRegistration: new(ImportHumanUserResponse_PasswordlessRegistration)}
	x.passwordlessRegistrationFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "passwordless-registration")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration"); flagIdx != nil {
		x.passwordlessRegistrationFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ImportHumanUserResponse.UserId = *x.userIdFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ImportHumanUserResponse.Details = x.detailsFlag.ObjectDetails
	}

	if x.passwordlessRegistrationFlag.Changed() {
		x.changed = true
		x.ImportHumanUserResponse.PasswordlessRegistration = x.passwordlessRegistrationFlag.ImportHumanUserResponse_PasswordlessRegistration
	}

}

func (x *ImportHumanUserResponseFlag) Changed() bool {
	return x.changed
}

type ImportHumanUserResponse_PasswordlessRegistrationFlag struct {
	*ImportHumanUserResponse_PasswordlessRegistration

	changed bool
	set     *pflag.FlagSet

	linkFlag       *cli_client.StringParser
	lifetimeFlag   *cli_client.DurationParser
	expirationFlag *cli_client.DurationParser
}

func (x *ImportHumanUserResponse_PasswordlessRegistrationFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ImportHumanUserResponse_PasswordlessRegistration", pflag.ContinueOnError)

	x.linkFlag = cli_client.NewStringParser(x.set, "link", "")
	x.lifetimeFlag = cli_client.NewDurationParser(x.set, "lifetime", "")
	x.expirationFlag = cli_client.NewDurationParser(x.set, "expiration", "")
	parent.AddFlagSet(x.set)
}

func (x *ImportHumanUserResponse_PasswordlessRegistrationFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.linkFlag.Changed() {
		x.changed = true
		x.ImportHumanUserResponse_PasswordlessRegistration.Link = *x.linkFlag.Value
	}
	if x.lifetimeFlag.Changed() {
		x.changed = true
		x.ImportHumanUserResponse_PasswordlessRegistration.Lifetime = x.lifetimeFlag.Value
	}
	if x.expirationFlag.Changed() {
		x.changed = true
		x.ImportHumanUserResponse_PasswordlessRegistration.Expiration = x.expirationFlag.Value
	}
}

func (x *ImportHumanUserResponse_PasswordlessRegistrationFlag) Changed() bool {
	return x.changed
}

type IsUserUniqueRequestFlag struct {
	*IsUserUniqueRequest

	changed bool
	set     *pflag.FlagSet

	userNameFlag *cli_client.StringParser
	emailFlag    *cli_client.StringParser
}

func (x *IsUserUniqueRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IsUserUniqueRequest", pflag.ContinueOnError)

	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	parent.AddFlagSet(x.set)
}

func (x *IsUserUniqueRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userNameFlag.Changed() {
		x.changed = true
		x.IsUserUniqueRequest.UserName = *x.userNameFlag.Value
	}
	if x.emailFlag.Changed() {
		x.changed = true
		x.IsUserUniqueRequest.Email = *x.emailFlag.Value
	}
}

func (x *IsUserUniqueRequestFlag) Changed() bool {
	return x.changed
}

type IsUserUniqueResponseFlag struct {
	*IsUserUniqueResponse

	changed bool
	set     *pflag.FlagSet

	isUniqueFlag *cli_client.BoolParser
}

func (x *IsUserUniqueResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IsUserUniqueResponse", pflag.ContinueOnError)

	x.isUniqueFlag = cli_client.NewBoolParser(x.set, "is-unique", "")
	parent.AddFlagSet(x.set)
}

func (x *IsUserUniqueResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.isUniqueFlag.Changed() {
		x.changed = true
		x.IsUserUniqueResponse.IsUnique = *x.isUniqueFlag.Value
	}
}

func (x *IsUserUniqueResponseFlag) Changed() bool {
	return x.changed
}

type ListActionsRequestFlag struct {
	*ListActionsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[action.ActionFieldName]
	queriesFlag       []*ActionQueryFlag
}

func (x *ListActionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListActionsRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[action.ActionFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*ActionQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListActionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &ActionQueryFlag{ActionQuery: new(ActionQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListActionsRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListActionsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*ActionQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListActionsRequest.Queries[i] = value.ActionQuery
		}
	}

}

func (x *ListActionsRequestFlag) Changed() bool {
	return x.changed
}

type ListActionsResponseFlag struct {
	*ListActionsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[action.ActionFieldName]
	resultFlag        []*action.ActionFlag
}

func (x *ListActionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListActionsResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[action.ActionFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*action.ActionFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListActionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &action.ActionFlag{Action: new(action.Action)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListActionsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListActionsResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*action.Action, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListActionsResponse.Result[i] = value.Action
		}
	}

}

func (x *ListActionsResponseFlag) Changed() bool {
	return x.changed
}

type ListAllProjectGrantsRequestFlag struct {
	*ListAllProjectGrantsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*project.AllProjectGrantQueryFlag
}

func (x *ListAllProjectGrantsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAllProjectGrantsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*project.AllProjectGrantQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAllProjectGrantsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &project.AllProjectGrantQueryFlag{AllProjectGrantQuery: new(project.AllProjectGrantQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListAllProjectGrantsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*project.AllProjectGrantQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListAllProjectGrantsRequest.Queries[i] = value.AllProjectGrantQuery
		}
	}

}

func (x *ListAllProjectGrantsRequestFlag) Changed() bool {
	return x.changed
}

type ListAllProjectGrantsResponseFlag struct {
	*ListAllProjectGrantsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*project.GrantedProjectFlag
}

func (x *ListAllProjectGrantsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAllProjectGrantsResponse", pflag.ContinueOnError)

	x.resultFlag = []*project.GrantedProjectFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAllProjectGrantsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &project.GrantedProjectFlag{GrantedProject: new(project.GrantedProject)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListAllProjectGrantsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*project.GrantedProject, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListAllProjectGrantsResponse.Result[i] = value.GrantedProject
		}
	}

}

func (x *ListAllProjectGrantsResponseFlag) Changed() bool {
	return x.changed
}

type ListAppChangesRequestFlag struct {
	*ListAppChangesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag     *change.ChangeQueryFlag
	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *ListAppChangesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAppChangesRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.queryFlag = &change.ChangeQueryFlag{ChangeQuery: new(change.ChangeQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAppChangesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListAppChangesRequest.Query = x.queryFlag.ChangeQuery
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListAppChangesRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.ListAppChangesRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *ListAppChangesRequestFlag) Changed() bool {
	return x.changed
}

type ListAppChangesResponseFlag struct {
	*ListAppChangesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*change.ChangeFlag
}

func (x *ListAppChangesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAppChangesResponse", pflag.ContinueOnError)

	x.resultFlag = []*change.ChangeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListAppChangesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &change.ChangeFlag{Change: new(change.Change)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*change.Change, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListAppChangesResponse.Result[i] = value.Change
		}
	}

}

func (x *ListAppChangesResponseFlag) Changed() bool {
	return x.changed
}

type ListAppKeysRequestFlag struct {
	*ListAppKeysRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag     *object.ListQueryFlag
	appIdFlag     *cli_client.StringParser
	projectIdFlag *cli_client.StringParser
}

func (x *ListAppKeysRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAppKeysRequest", pflag.ContinueOnError)

	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAppKeysRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListAppKeysRequest.Query = x.queryFlag.ListQuery
	}

	if x.appIdFlag.Changed() {
		x.changed = true
		x.ListAppKeysRequest.AppId = *x.appIdFlag.Value
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListAppKeysRequest.ProjectId = *x.projectIdFlag.Value
	}
}

func (x *ListAppKeysRequestFlag) Changed() bool {
	return x.changed
}

type ListAppKeysResponseFlag struct {
	*ListAppKeysResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*authn.KeyFlag
}

func (x *ListAppKeysResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAppKeysResponse", pflag.ContinueOnError)

	x.resultFlag = []*authn.KeyFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAppKeysResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &authn.KeyFlag{Key: new(authn.Key)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListAppKeysResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*authn.Key, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListAppKeysResponse.Result[i] = value.Key
		}
	}

}

func (x *ListAppKeysResponseFlag) Changed() bool {
	return x.changed
}

type ListAppsRequestFlag struct {
	*ListAppsRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	queryFlag     *object.ListQueryFlag
	queriesFlag   []*app.AppQueryFlag
}

func (x *ListAppsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAppsRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.queriesFlag = []*app.AppQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAppsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &app.AppQueryFlag{AppQuery: new(app.AppQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListAppsRequest.ProjectId = *x.projectIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListAppsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*app.AppQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListAppsRequest.Queries[i] = value.AppQuery
		}
	}

}

func (x *ListAppsRequestFlag) Changed() bool {
	return x.changed
}

type ListAppsResponseFlag struct {
	*ListAppsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*app.AppFlag
}

func (x *ListAppsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListAppsResponse", pflag.ContinueOnError)

	x.resultFlag = []*app.AppFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListAppsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &app.AppFlag{App: new(app.App)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListAppsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*app.App, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListAppsResponse.Result[i] = value.App
		}
	}

}

func (x *ListAppsResponseFlag) Changed() bool {
	return x.changed
}

type ListFlowTriggerTypesRequestFlag struct {
	*ListFlowTriggerTypesRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.StringParser
}

func (x *ListFlowTriggerTypesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFlowTriggerTypesRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewStringParser(x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *ListFlowTriggerTypesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.ListFlowTriggerTypesRequest.Type = *x.typeFlag.Value
	}
}

func (x *ListFlowTriggerTypesRequestFlag) Changed() bool {
	return x.changed
}

type ListFlowTriggerTypesResponseFlag struct {
	*ListFlowTriggerTypesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*action.TriggerTypeFlag
}

func (x *ListFlowTriggerTypesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFlowTriggerTypesResponse", pflag.ContinueOnError)

	x.resultFlag = []*action.TriggerTypeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListFlowTriggerTypesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &action.TriggerTypeFlag{TriggerType: new(action.TriggerType)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*action.TriggerType, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListFlowTriggerTypesResponse.Result[i] = value.TriggerType
		}
	}

}

func (x *ListFlowTriggerTypesResponseFlag) Changed() bool {
	return x.changed
}

type ListFlowTypesRequestFlag struct {
	*ListFlowTypesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListFlowTypesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFlowTypesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListFlowTypesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListFlowTypesRequestFlag) Changed() bool {
	return x.changed
}

type ListFlowTypesResponseFlag struct {
	*ListFlowTypesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*action.FlowTypeFlag
}

func (x *ListFlowTypesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListFlowTypesResponse", pflag.ContinueOnError)

	x.resultFlag = []*action.FlowTypeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListFlowTypesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &action.FlowTypeFlag{FlowType: new(action.FlowType)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*action.FlowType, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListFlowTypesResponse.Result[i] = value.FlowType
		}
	}

}

func (x *ListFlowTypesResponseFlag) Changed() bool {
	return x.changed
}

type ListGrantedProjectRolesRequestFlag struct {
	*ListGrantedProjectRolesRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	queryFlag     *object.ListQueryFlag
	queriesFlag   []*project.RoleQueryFlag
}

func (x *ListGrantedProjectRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListGrantedProjectRolesRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.queriesFlag = []*project.RoleQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListGrantedProjectRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &project.RoleQueryFlag{RoleQuery: new(project.RoleQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListGrantedProjectRolesRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ListGrantedProjectRolesRequest.GrantId = *x.grantIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListGrantedProjectRolesRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*project.RoleQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListGrantedProjectRolesRequest.Queries[i] = value.RoleQuery
		}
	}

}

func (x *ListGrantedProjectRolesRequestFlag) Changed() bool {
	return x.changed
}

type ListGrantedProjectRolesResponseFlag struct {
	*ListGrantedProjectRolesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*project.RoleFlag
}

func (x *ListGrantedProjectRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListGrantedProjectRolesResponse", pflag.ContinueOnError)

	x.resultFlag = []*project.RoleFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListGrantedProjectRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &project.RoleFlag{Role: new(project.Role)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListGrantedProjectRolesResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*project.Role, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListGrantedProjectRolesResponse.Result[i] = value.Role
		}
	}

}

func (x *ListGrantedProjectRolesResponseFlag) Changed() bool {
	return x.changed
}

type ListGrantedProjectsRequestFlag struct {
	*ListGrantedProjectsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*project.ProjectQueryFlag
}

func (x *ListGrantedProjectsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListGrantedProjectsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*project.ProjectQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListGrantedProjectsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &project.ProjectQueryFlag{ProjectQuery: new(project.ProjectQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListGrantedProjectsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*project.ProjectQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListGrantedProjectsRequest.Queries[i] = value.ProjectQuery
		}
	}

}

func (x *ListGrantedProjectsRequestFlag) Changed() bool {
	return x.changed
}

type ListGrantedProjectsResponseFlag struct {
	*ListGrantedProjectsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*project.GrantedProjectFlag
}

func (x *ListGrantedProjectsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListGrantedProjectsResponse", pflag.ContinueOnError)

	x.resultFlag = []*project.GrantedProjectFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListGrantedProjectsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &project.GrantedProjectFlag{GrantedProject: new(project.GrantedProject)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListGrantedProjectsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*project.GrantedProject, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListGrantedProjectsResponse.Result[i] = value.GrantedProject
		}
	}

}

func (x *ListGrantedProjectsResponseFlag) Changed() bool {
	return x.changed
}

type ListHumanAuthFactorsRequestFlag struct {
	*ListHumanAuthFactorsRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *ListHumanAuthFactorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListHumanAuthFactorsRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ListHumanAuthFactorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListHumanAuthFactorsRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ListHumanAuthFactorsRequestFlag) Changed() bool {
	return x.changed
}

type ListHumanAuthFactorsResponseFlag struct {
	*ListHumanAuthFactorsResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*user.AuthFactorFlag
}

func (x *ListHumanAuthFactorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListHumanAuthFactorsResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.AuthFactorFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListHumanAuthFactorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.AuthFactorFlag{AuthFactor: new(user.AuthFactor)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.AuthFactor, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListHumanAuthFactorsResponse.Result[i] = value.AuthFactor
		}
	}

}

func (x *ListHumanAuthFactorsResponseFlag) Changed() bool {
	return x.changed
}

type ListHumanLinkedIDPsRequestFlag struct {
	*ListHumanLinkedIDPsRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	queryFlag  *object.ListQueryFlag
}

func (x *ListHumanLinkedIDPsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListHumanLinkedIDPsRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListHumanLinkedIDPsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListHumanLinkedIDPsRequest.UserId = *x.userIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListHumanLinkedIDPsRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListHumanLinkedIDPsRequestFlag) Changed() bool {
	return x.changed
}

type ListHumanLinkedIDPsResponseFlag struct {
	*ListHumanLinkedIDPsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*idp.IDPUserLinkFlag
}

func (x *ListHumanLinkedIDPsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListHumanLinkedIDPsResponse", pflag.ContinueOnError)

	x.resultFlag = []*idp.IDPUserLinkFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListHumanLinkedIDPsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.IDPUserLinkFlag{IDPUserLink: new(idp.IDPUserLink)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListHumanLinkedIDPsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.IDPUserLink, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListHumanLinkedIDPsResponse.Result[i] = value.IDPUserLink
		}
	}

}

func (x *ListHumanLinkedIDPsResponseFlag) Changed() bool {
	return x.changed
}

type ListHumanPasswordlessRequestFlag struct {
	*ListHumanPasswordlessRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *ListHumanPasswordlessRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListHumanPasswordlessRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ListHumanPasswordlessRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListHumanPasswordlessRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ListHumanPasswordlessRequestFlag) Changed() bool {
	return x.changed
}

type ListHumanPasswordlessResponseFlag struct {
	*ListHumanPasswordlessResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*user.WebAuthNTokenFlag
}

func (x *ListHumanPasswordlessResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListHumanPasswordlessResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.WebAuthNTokenFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListHumanPasswordlessResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.WebAuthNTokenFlag{WebAuthNToken: new(user.WebAuthNToken)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.WebAuthNToken, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListHumanPasswordlessResponse.Result[i] = value.WebAuthNToken
		}
	}

}

func (x *ListHumanPasswordlessResponseFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyIDPsRequestFlag struct {
	*ListLoginPolicyIDPsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *object.ListQueryFlag
}

func (x *ListLoginPolicyIDPsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyIDPsRequest", pflag.ContinueOnError)

	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyIDPsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyIDPsRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListLoginPolicyIDPsRequestFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyIDPsResponseFlag struct {
	*ListLoginPolicyIDPsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*idp.IDPLoginPolicyLinkFlag
}

func (x *ListLoginPolicyIDPsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyIDPsResponse", pflag.ContinueOnError)

	x.resultFlag = []*idp.IDPLoginPolicyLinkFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyIDPsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.IDPLoginPolicyLinkFlag{IDPLoginPolicyLink: new(idp.IDPLoginPolicyLink)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyIDPsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.IDPLoginPolicyLink, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListLoginPolicyIDPsResponse.Result[i] = value.IDPLoginPolicyLink
		}
	}

}

func (x *ListLoginPolicyIDPsResponseFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyMultiFactorsRequestFlag struct {
	*ListLoginPolicyMultiFactorsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListLoginPolicyMultiFactorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyMultiFactorsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyMultiFactorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListLoginPolicyMultiFactorsRequestFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicyMultiFactorsResponseFlag struct {
	*ListLoginPolicyMultiFactorsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  *cli_client.EnumSliceParser[policy.MultiFactorType]
}

func (x *ListLoginPolicyMultiFactorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicyMultiFactorsResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewEnumSliceParser[policy.MultiFactorType](x.set, "result", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicyMultiFactorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyMultiFactorsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListLoginPolicyMultiFactorsResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListLoginPolicyMultiFactorsResponseFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicySecondFactorsRequestFlag struct {
	*ListLoginPolicySecondFactorsRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListLoginPolicySecondFactorsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicySecondFactorsRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicySecondFactorsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListLoginPolicySecondFactorsRequestFlag) Changed() bool {
	return x.changed
}

type ListLoginPolicySecondFactorsResponseFlag struct {
	*ListLoginPolicySecondFactorsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  *cli_client.EnumSliceParser[policy.SecondFactorType]
}

func (x *ListLoginPolicySecondFactorsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListLoginPolicySecondFactorsResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewEnumSliceParser[policy.SecondFactorType](x.set, "result", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListLoginPolicySecondFactorsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListLoginPolicySecondFactorsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListLoginPolicySecondFactorsResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListLoginPolicySecondFactorsResponseFlag) Changed() bool {
	return x.changed
}

type ListMachineKeysRequestFlag struct {
	*ListMachineKeysRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	queryFlag  *object.ListQueryFlag
}

func (x *ListMachineKeysRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMachineKeysRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMachineKeysRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListMachineKeysRequest.UserId = *x.userIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListMachineKeysRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListMachineKeysRequestFlag) Changed() bool {
	return x.changed
}

type ListMachineKeysResponseFlag struct {
	*ListMachineKeysResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*authn.KeyFlag
}

func (x *ListMachineKeysResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListMachineKeysResponse", pflag.ContinueOnError)

	x.resultFlag = []*authn.KeyFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListMachineKeysResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &authn.KeyFlag{Key: new(authn.Key)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListMachineKeysResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*authn.Key, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListMachineKeysResponse.Result[i] = value.Key
		}
	}

}

func (x *ListMachineKeysResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgChangesRequestFlag struct {
	*ListOrgChangesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag *change.ChangeQueryFlag
}

func (x *ListOrgChangesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgChangesRequest", pflag.ContinueOnError)

	x.queryFlag = &change.ChangeQueryFlag{ChangeQuery: new(change.ChangeQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgChangesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListOrgChangesRequest.Query = x.queryFlag.ChangeQuery
	}

}

func (x *ListOrgChangesRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgChangesResponseFlag struct {
	*ListOrgChangesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*change.ChangeFlag
}

func (x *ListOrgChangesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgChangesResponse", pflag.ContinueOnError)

	x.resultFlag = []*change.ChangeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListOrgChangesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &change.ChangeFlag{Change: new(change.Change)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*change.Change, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListOrgChangesResponse.Result[i] = value.Change
		}
	}

}

func (x *ListOrgChangesResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgDomainsRequestFlag struct {
	*ListOrgDomainsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*org.DomainSearchQueryFlag
}

func (x *ListOrgDomainsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgDomainsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*org.DomainSearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgDomainsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &org.DomainSearchQueryFlag{DomainSearchQuery: new(org.DomainSearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListOrgDomainsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*org.DomainSearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListOrgDomainsRequest.Queries[i] = value.DomainSearchQuery
		}
	}

}

func (x *ListOrgDomainsRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgDomainsResponseFlag struct {
	*ListOrgDomainsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*org.DomainFlag
}

func (x *ListOrgDomainsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgDomainsResponse", pflag.ContinueOnError)

	x.resultFlag = []*org.DomainFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgDomainsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &org.DomainFlag{Domain: new(org.Domain)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListOrgDomainsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*org.Domain, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListOrgDomainsResponse.Result[i] = value.Domain
		}
	}

}

func (x *ListOrgDomainsResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgIDPsRequestFlag struct {
	*ListOrgIDPsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[idp.IDPFieldName]
	queriesFlag       []*IDPQueryFlag
}

func (x *ListOrgIDPsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgIDPsRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[idp.IDPFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*IDPQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgIDPsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &IDPQueryFlag{IDPQuery: new(IDPQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListOrgIDPsRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListOrgIDPsRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*IDPQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListOrgIDPsRequest.Queries[i] = value.IDPQuery
		}
	}

}

func (x *ListOrgIDPsRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgIDPsResponseFlag struct {
	*ListOrgIDPsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[idp.IDPFieldName]
	resultFlag        []*idp.IDPFlag
}

func (x *ListOrgIDPsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgIDPsResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[idp.IDPFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*idp.IDPFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgIDPsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.IDPFlag{IDP: new(idp.IDP)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListOrgIDPsResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListOrgIDPsResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.IDP, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListOrgIDPsResponse.Result[i] = value.IDP
		}
	}

}

func (x *ListOrgIDPsResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgMemberRolesRequestFlag struct {
	*ListOrgMemberRolesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListOrgMemberRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgMemberRolesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListOrgMemberRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListOrgMemberRolesRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgMemberRolesResponseFlag struct {
	*ListOrgMemberRolesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag *cli_client.StringSliceParser
}

func (x *ListOrgMemberRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgMemberRolesResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewStringSliceParser(x.set, "result", "")
	parent.AddFlagSet(x.set)
}

func (x *ListOrgMemberRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListOrgMemberRolesResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListOrgMemberRolesResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgMembersRequestFlag struct {
	*ListOrgMembersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*member.SearchQueryFlag
}

func (x *ListOrgMembersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgMembersRequest", pflag.ContinueOnError)

	x.queriesFlag = []*member.SearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgMembersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &member.SearchQueryFlag{SearchQuery: new(member.SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListOrgMembersRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*member.SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListOrgMembersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListOrgMembersRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgMembersResponseFlag struct {
	*ListOrgMembersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*member.MemberFlag
}

func (x *ListOrgMembersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgMembersResponse", pflag.ContinueOnError)

	x.resultFlag = []*member.MemberFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgMembersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &member.MemberFlag{Member: new(member.Member)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListOrgMembersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*member.Member, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListOrgMembersResponse.Result[i] = value.Member
		}
	}

}

func (x *ListOrgMembersResponseFlag) Changed() bool {
	return x.changed
}

type ListOrgMetadataRequestFlag struct {
	*ListOrgMetadataRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*metadata.MetadataQueryFlag
}

func (x *ListOrgMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgMetadataRequest", pflag.ContinueOnError)

	x.queriesFlag = []*metadata.MetadataQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &metadata.MetadataQueryFlag{MetadataQuery: new(metadata.MetadataQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListOrgMetadataRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*metadata.MetadataQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListOrgMetadataRequest.Queries[i] = value.MetadataQuery
		}
	}

}

func (x *ListOrgMetadataRequestFlag) Changed() bool {
	return x.changed
}

type ListOrgMetadataResponseFlag struct {
	*ListOrgMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*metadata.MetadataFlag
}

func (x *ListOrgMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListOrgMetadataResponse", pflag.ContinueOnError)

	x.resultFlag = []*metadata.MetadataFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListOrgMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &metadata.MetadataFlag{Metadata: new(metadata.Metadata)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListOrgMetadataResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*metadata.Metadata, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListOrgMetadataResponse.Result[i] = value.Metadata
		}
	}

}

func (x *ListOrgMetadataResponseFlag) Changed() bool {
	return x.changed
}

type ListPersonalAccessTokensRequestFlag struct {
	*ListPersonalAccessTokensRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	queryFlag  *object.ListQueryFlag
}

func (x *ListPersonalAccessTokensRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListPersonalAccessTokensRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListPersonalAccessTokensRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListPersonalAccessTokensRequest.UserId = *x.userIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListPersonalAccessTokensRequest.Query = x.queryFlag.ListQuery
	}

}

func (x *ListPersonalAccessTokensRequestFlag) Changed() bool {
	return x.changed
}

type ListPersonalAccessTokensResponseFlag struct {
	*ListPersonalAccessTokensResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*user.PersonalAccessTokenFlag
}

func (x *ListPersonalAccessTokensResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListPersonalAccessTokensResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.PersonalAccessTokenFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListPersonalAccessTokensResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.PersonalAccessTokenFlag{PersonalAccessToken: new(user.PersonalAccessToken)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListPersonalAccessTokensResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.PersonalAccessToken, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListPersonalAccessTokensResponse.Result[i] = value.PersonalAccessToken
		}
	}

}

func (x *ListPersonalAccessTokensResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectChangesRequestFlag struct {
	*ListProjectChangesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag     *change.ChangeQueryFlag
	projectIdFlag *cli_client.StringParser
}

func (x *ListProjectChangesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectChangesRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.queryFlag = &change.ChangeQueryFlag{ChangeQuery: new(change.ChangeQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectChangesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectChangesRequest.Query = x.queryFlag.ChangeQuery
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListProjectChangesRequest.ProjectId = *x.projectIdFlag.Value
	}
}

func (x *ListProjectChangesRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectChangesResponseFlag struct {
	*ListProjectChangesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*change.ChangeFlag
}

func (x *ListProjectChangesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectChangesResponse", pflag.ContinueOnError)

	x.resultFlag = []*change.ChangeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListProjectChangesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &change.ChangeFlag{Change: new(change.Change)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*change.Change, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectChangesResponse.Result[i] = value.Change
		}
	}

}

func (x *ListProjectChangesResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantChangesRequestFlag struct {
	*ListProjectGrantChangesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag     *change.ChangeQueryFlag
	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
}

func (x *ListProjectGrantChangesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantChangesRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.queryFlag = &change.ChangeQueryFlag{ChangeQuery: new(change.ChangeQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantChangesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectGrantChangesRequest.Query = x.queryFlag.ChangeQuery
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListProjectGrantChangesRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ListProjectGrantChangesRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *ListProjectGrantChangesRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantChangesResponseFlag struct {
	*ListProjectGrantChangesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*change.ChangeFlag
}

func (x *ListProjectGrantChangesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantChangesResponse", pflag.ContinueOnError)

	x.resultFlag = []*change.ChangeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantChangesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &change.ChangeFlag{Change: new(change.Change)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*change.Change, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectGrantChangesResponse.Result[i] = value.Change
		}
	}

}

func (x *ListProjectGrantChangesResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantMemberRolesRequestFlag struct {
	*ListProjectGrantMemberRolesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag  *object.ListQueryFlag
	resultFlag *cli_client.StringSliceParser
}

func (x *ListProjectGrantMemberRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantMemberRolesRequest", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewStringSliceParser(x.set, "result", "")
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantMemberRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMemberRolesRequest.Query = x.queryFlag.ListQuery
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMemberRolesRequest.Result = *x.resultFlag.Value
	}
}

func (x *ListProjectGrantMemberRolesRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantMemberRolesResponseFlag struct {
	*ListProjectGrantMemberRolesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  *cli_client.StringSliceParser
}

func (x *ListProjectGrantMemberRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantMemberRolesResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewStringSliceParser(x.set, "result", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantMemberRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMemberRolesResponse.Details = x.detailsFlag.ListDetails
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMemberRolesResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListProjectGrantMemberRolesResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantMembersRequestFlag struct {
	*ListProjectGrantMembersRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	queryFlag     *object.ListQueryFlag
	queriesFlag   []*member.SearchQueryFlag
}

func (x *ListProjectGrantMembersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantMembersRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.queriesFlag = []*member.SearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantMembersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &member.SearchQueryFlag{SearchQuery: new(member.SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMembersRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMembersRequest.GrantId = *x.grantIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMembersRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*member.SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProjectGrantMembersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListProjectGrantMembersRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantMembersResponseFlag struct {
	*ListProjectGrantMembersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*member.MemberFlag
}

func (x *ListProjectGrantMembersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantMembersResponse", pflag.ContinueOnError)

	x.resultFlag = []*member.MemberFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantMembersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &member.MemberFlag{Member: new(member.Member)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectGrantMembersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*member.Member, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectGrantMembersResponse.Result[i] = value.Member
		}
	}

}

func (x *ListProjectGrantMembersResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantsRequestFlag struct {
	*ListProjectGrantsRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	queryFlag     *object.ListQueryFlag
	queriesFlag   []*project.ProjectGrantQueryFlag
}

func (x *ListProjectGrantsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantsRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.queriesFlag = []*project.ProjectGrantQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &project.ProjectGrantQueryFlag{ProjectGrantQuery: new(project.ProjectGrantQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListProjectGrantsRequest.ProjectId = *x.projectIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectGrantsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*project.ProjectGrantQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProjectGrantsRequest.Queries[i] = value.ProjectGrantQuery
		}
	}

}

func (x *ListProjectGrantsRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectGrantsResponseFlag struct {
	*ListProjectGrantsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*project.GrantedProjectFlag
}

func (x *ListProjectGrantsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectGrantsResponse", pflag.ContinueOnError)

	x.resultFlag = []*project.GrantedProjectFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectGrantsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &project.GrantedProjectFlag{GrantedProject: new(project.GrantedProject)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectGrantsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*project.GrantedProject, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectGrantsResponse.Result[i] = value.GrantedProject
		}
	}

}

func (x *ListProjectGrantsResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectMemberRolesRequestFlag struct {
	*ListProjectMemberRolesRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ListProjectMemberRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectMemberRolesRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ListProjectMemberRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ListProjectMemberRolesRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectMemberRolesResponseFlag struct {
	*ListProjectMemberRolesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  *cli_client.StringSliceParser
}

func (x *ListProjectMemberRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectMemberRolesResponse", pflag.ContinueOnError)

	x.resultFlag = cli_client.NewStringSliceParser(x.set, "result", "")
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectMemberRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectMemberRolesResponse.Details = x.detailsFlag.ListDetails
	}

	if x.resultFlag.Changed() {
		x.changed = true
		x.ListProjectMemberRolesResponse.Result = *x.resultFlag.Value
	}
}

func (x *ListProjectMemberRolesResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectMembersRequestFlag struct {
	*ListProjectMembersRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	queryFlag     *object.ListQueryFlag
	queriesFlag   []*member.SearchQueryFlag
}

func (x *ListProjectMembersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectMembersRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.queriesFlag = []*member.SearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectMembersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &member.SearchQueryFlag{SearchQuery: new(member.SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListProjectMembersRequest.ProjectId = *x.projectIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectMembersRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*member.SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProjectMembersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListProjectMembersRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectMembersResponseFlag struct {
	*ListProjectMembersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*member.MemberFlag
}

func (x *ListProjectMembersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectMembersResponse", pflag.ContinueOnError)

	x.resultFlag = []*member.MemberFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectMembersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &member.MemberFlag{Member: new(member.Member)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectMembersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*member.Member, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectMembersResponse.Result[i] = value.Member
		}
	}

}

func (x *ListProjectMembersResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectRolesRequestFlag struct {
	*ListProjectRolesRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	queryFlag     *object.ListQueryFlag
	queriesFlag   []*project.RoleQueryFlag
}

func (x *ListProjectRolesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectRolesRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.queriesFlag = []*project.RoleQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectRolesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &project.RoleQueryFlag{RoleQuery: new(project.RoleQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ListProjectRolesRequest.ProjectId = *x.projectIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectRolesRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*project.RoleQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProjectRolesRequest.Queries[i] = value.RoleQuery
		}
	}

}

func (x *ListProjectRolesRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectRolesResponseFlag struct {
	*ListProjectRolesResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*project.RoleFlag
}

func (x *ListProjectRolesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectRolesResponse", pflag.ContinueOnError)

	x.resultFlag = []*project.RoleFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectRolesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &project.RoleFlag{Role: new(project.Role)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectRolesResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*project.Role, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectRolesResponse.Result[i] = value.Role
		}
	}

}

func (x *ListProjectRolesResponseFlag) Changed() bool {
	return x.changed
}

type ListProjectsRequestFlag struct {
	*ListProjectsRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*project.ProjectQueryFlag
}

func (x *ListProjectsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectsRequest", pflag.ContinueOnError)

	x.queriesFlag = []*project.ProjectQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &project.ProjectQueryFlag{ProjectQuery: new(project.ProjectQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProjectsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*project.ProjectQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProjectsRequest.Queries[i] = value.ProjectQuery
		}
	}

}

func (x *ListProjectsRequestFlag) Changed() bool {
	return x.changed
}

type ListProjectsResponseFlag struct {
	*ListProjectsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*project.ProjectFlag
}

func (x *ListProjectsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProjectsResponse", pflag.ContinueOnError)

	x.resultFlag = []*project.ProjectFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProjectsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &project.ProjectFlag{Project: new(project.Project)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProjectsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*project.Project, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProjectsResponse.Result[i] = value.Project
		}
	}

}

func (x *ListProjectsResponseFlag) Changed() bool {
	return x.changed
}

type ListProvidersRequestFlag struct {
	*ListProvidersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*ProviderQueryFlag
}

func (x *ListProvidersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProvidersRequest", pflag.ContinueOnError)

	x.queriesFlag = []*ProviderQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProvidersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &ProviderQueryFlag{ProviderQuery: new(ProviderQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListProvidersRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*ProviderQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListProvidersRequest.Queries[i] = value.ProviderQuery
		}
	}

}

func (x *ListProvidersRequestFlag) Changed() bool {
	return x.changed
}

type ListProvidersResponseFlag struct {
	*ListProvidersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*idp.ProviderFlag
}

func (x *ListProvidersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListProvidersResponse", pflag.ContinueOnError)

	x.resultFlag = []*idp.ProviderFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListProvidersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &idp.ProviderFlag{Provider: new(idp.Provider)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListProvidersResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*idp.Provider, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListProvidersResponse.Result[i] = value.Provider
		}
	}

}

func (x *ListProvidersResponseFlag) Changed() bool {
	return x.changed
}

type ListUserChangesRequestFlag struct {
	*ListUserChangesRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag  *change.ChangeQueryFlag
	userIdFlag *cli_client.StringParser
}

func (x *ListUserChangesRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserChangesRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.queryFlag = &change.ChangeQueryFlag{ChangeQuery: new(change.ChangeQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserChangesRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListUserChangesRequest.Query = x.queryFlag.ChangeQuery
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListUserChangesRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ListUserChangesRequestFlag) Changed() bool {
	return x.changed
}

type ListUserChangesResponseFlag struct {
	*ListUserChangesResponse

	changed bool
	set     *pflag.FlagSet

	resultFlag []*change.ChangeFlag
}

func (x *ListUserChangesResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserChangesResponse", pflag.ContinueOnError)

	x.resultFlag = []*change.ChangeFlag{}
	parent.AddFlagSet(x.set)
}

func (x *ListUserChangesResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &change.ChangeFlag{Change: new(change.Change)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*change.Change, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListUserChangesResponse.Result[i] = value.Change
		}
	}

}

func (x *ListUserChangesResponseFlag) Changed() bool {
	return x.changed
}

type ListUserGrantRequestFlag struct {
	*ListUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag   *object.ListQueryFlag
	queriesFlag []*user.UserGrantQueryFlag
}

func (x *ListUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserGrantRequest", pflag.ContinueOnError)

	x.queriesFlag = []*user.UserGrantQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &user.UserGrantQueryFlag{UserGrantQuery: new(user.UserGrantQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListUserGrantRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*user.UserGrantQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListUserGrantRequest.Queries[i] = value.UserGrantQuery
		}
	}

}

func (x *ListUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type ListUserGrantResponseFlag struct {
	*ListUserGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*user.UserGrantFlag
}

func (x *ListUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserGrantResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.UserGrantFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.UserGrantFlag{UserGrant: new(user.UserGrant)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListUserGrantResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.UserGrant, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListUserGrantResponse.Result[i] = value.UserGrant
		}
	}

}

func (x *ListUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type ListUserMembershipsRequestFlag struct {
	*ListUserMembershipsRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	queryFlag   *object.ListQueryFlag
	queriesFlag []*user.MembershipQueryFlag
}

func (x *ListUserMembershipsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserMembershipsRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.queriesFlag = []*user.MembershipQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserMembershipsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &user.MembershipQueryFlag{MembershipQuery: new(user.MembershipQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.ListUserMembershipsRequest.UserId = *x.userIdFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListUserMembershipsRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*user.MembershipQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListUserMembershipsRequest.Queries[i] = value.MembershipQuery
		}
	}

}

func (x *ListUserMembershipsRequestFlag) Changed() bool {
	return x.changed
}

type ListUserMembershipsResponseFlag struct {
	*ListUserMembershipsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*user.MembershipFlag
}

func (x *ListUserMembershipsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserMembershipsResponse", pflag.ContinueOnError)

	x.resultFlag = []*user.MembershipFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserMembershipsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.MembershipFlag{Membership: new(user.Membership)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListUserMembershipsResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.Membership, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListUserMembershipsResponse.Result[i] = value.Membership
		}
	}

}

func (x *ListUserMembershipsResponseFlag) Changed() bool {
	return x.changed
}

type ListUserMetadataRequestFlag struct {
	*ListUserMetadataRequest

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	queryFlag   *object.ListQueryFlag
	queriesFlag []*metadata.MetadataQueryFlag
}

func (x *ListUserMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserMetadataRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.queriesFlag = []*metadata.MetadataQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &metadata.MetadataQueryFlag{MetadataQuery: new(metadata.MetadataQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}
	if x.idFlag.Changed() {
		x.changed = true
		x.ListUserMetadataRequest.Id = *x.idFlag.Value
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListUserMetadataRequest.Query = x.queryFlag.ListQuery
	}

	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*metadata.MetadataQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListUserMetadataRequest.Queries[i] = value.MetadataQuery
		}
	}

}

func (x *ListUserMetadataRequestFlag) Changed() bool {
	return x.changed
}

type ListUserMetadataResponseFlag struct {
	*ListUserMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ListDetailsFlag
	resultFlag  []*metadata.MetadataFlag
}

func (x *ListUserMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUserMetadataResponse", pflag.ContinueOnError)

	x.resultFlag = []*metadata.MetadataFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUserMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &metadata.MetadataFlag{Metadata: new(metadata.Metadata)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListUserMetadataResponse.Details = x.detailsFlag.ListDetails
	}

	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*metadata.Metadata, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListUserMetadataResponse.Result[i] = value.Metadata
		}
	}

}

func (x *ListUserMetadataResponseFlag) Changed() bool {
	return x.changed
}

type ListUsersRequestFlag struct {
	*ListUsersRequest

	changed bool
	set     *pflag.FlagSet

	queryFlag         *object.ListQueryFlag
	sortingColumnFlag *cli_client.EnumParser[user.UserFieldName]
	queriesFlag       []*user.SearchQueryFlag
}

func (x *ListUsersRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUsersRequest", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[user.UserFieldName](x.set, "sorting-column", "")
	x.queriesFlag = []*user.SearchQueryFlag{}
	x.queryFlag = &object.ListQueryFlag{ListQuery: new(object.ListQuery)}
	x.queryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUsersRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "query", "queries")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("query"); flagIdx != nil {
		x.queryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("queries") {
		x.queriesFlag = append(x.queriesFlag, &user.SearchQueryFlag{SearchQuery: new(user.SearchQuery)})
		x.queriesFlag[len(x.queriesFlag)-1].AddFlags(x.set)
		x.queriesFlag[len(x.queriesFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.queryFlag.Changed() {
		x.changed = true
		x.ListUsersRequest.Query = x.queryFlag.ListQuery
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListUsersRequest.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.queriesFlag) > 0 {
		x.changed = true
		x.Queries = make([]*user.SearchQuery, len(x.queriesFlag))
		for i, value := range x.queriesFlag {
			x.ListUsersRequest.Queries[i] = value.SearchQuery
		}
	}

}

func (x *ListUsersRequestFlag) Changed() bool {
	return x.changed
}

type ListUsersResponseFlag struct {
	*ListUsersResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag       *object.ListDetailsFlag
	sortingColumnFlag *cli_client.EnumParser[user.UserFieldName]
	resultFlag        []*user.UserFlag
}

func (x *ListUsersResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ListUsersResponse", pflag.ContinueOnError)

	x.sortingColumnFlag = cli_client.NewEnumParser[user.UserFieldName](x.set, "sorting-column", "")
	x.resultFlag = []*user.UserFlag{}
	x.detailsFlag = &object.ListDetailsFlag{ListDetails: new(object.ListDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ListUsersResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "result")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	for _, flagIdx := range flagIndexes.ByName("result") {
		x.resultFlag = append(x.resultFlag, &user.UserFlag{User: new(user.User)})
		x.resultFlag[len(x.resultFlag)-1].AddFlags(x.set)
		x.resultFlag[len(x.resultFlag)-1].ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ListUsersResponse.Details = x.detailsFlag.ListDetails
	}

	if x.sortingColumnFlag.Changed() {
		x.changed = true
		x.ListUsersResponse.SortingColumn = *x.sortingColumnFlag.Value
	}
	if len(x.resultFlag) > 0 {
		x.changed = true
		x.Result = make([]*user.User, len(x.resultFlag))
		for i, value := range x.resultFlag {
			x.ListUsersResponse.Result[i] = value.User
		}
	}

}

func (x *ListUsersResponseFlag) Changed() bool {
	return x.changed
}

type LockUserRequestFlag struct {
	*LockUserRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *LockUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LockUserRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *LockUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.LockUserRequest.Id = *x.idFlag.Value
	}
}

func (x *LockUserRequestFlag) Changed() bool {
	return x.changed
}

type LockUserResponseFlag struct {
	*LockUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *LockUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LockUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *LockUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.LockUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *LockUserResponseFlag) Changed() bool {
	return x.changed
}

type MigrateGenericOIDCProviderRequestFlag struct {
	*MigrateGenericOIDCProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag     *cli_client.StringParser
	azureFlag  *AddAzureADProviderRequestFlag
	googleFlag *AddGoogleProviderRequestFlag
}

func (x *MigrateGenericOIDCProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MigrateGenericOIDCProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.azureFlag = &AddAzureADProviderRequestFlag{AddAzureADProviderRequest: new(AddAzureADProviderRequest)}
	x.azureFlag.AddFlags(x.set)
	x.googleFlag = &AddGoogleProviderRequestFlag{AddGoogleProviderRequest: new(AddGoogleProviderRequest)}
	x.googleFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MigrateGenericOIDCProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "azure", "google")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("azure"); flagIdx != nil {
		x.azureFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("google"); flagIdx != nil {
		x.googleFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.MigrateGenericOIDCProviderRequest.Id = *x.idFlag.Value
	}

	switch cli_client.FieldIndexes(args, "azure", "google").Last().Flag {
	case "azure":
		if x.azureFlag.Changed() {
			x.changed = true
			x.MigrateGenericOIDCProviderRequest.Template = &MigrateGenericOIDCProviderRequest_Azure{Azure: x.azureFlag.AddAzureADProviderRequest}
		}
	case "google":
		if x.googleFlag.Changed() {
			x.changed = true
			x.MigrateGenericOIDCProviderRequest.Template = &MigrateGenericOIDCProviderRequest_Google{Google: x.googleFlag.AddGoogleProviderRequest}
		}
	}
}

func (x *MigrateGenericOIDCProviderRequestFlag) Changed() bool {
	return x.changed
}

type MigrateGenericOIDCProviderResponseFlag struct {
	*MigrateGenericOIDCProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *MigrateGenericOIDCProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MigrateGenericOIDCProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MigrateGenericOIDCProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.MigrateGenericOIDCProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *MigrateGenericOIDCProviderResponseFlag) Changed() bool {
	return x.changed
}

type ProviderQueryFlag struct {
	*ProviderQuery

	changed bool
	set     *pflag.FlagSet

	idpIdQueryFlag     *idp.IDPIDQueryFlag
	idpNameQueryFlag   *idp.IDPNameQueryFlag
	ownerTypeQueryFlag *idp.IDPOwnerTypeQueryFlag
}

func (x *ProviderQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProviderQuery", pflag.ContinueOnError)

	x.idpIdQueryFlag = &idp.IDPIDQueryFlag{IDPIDQuery: new(idp.IDPIDQuery)}
	x.idpIdQueryFlag.AddFlags(x.set)
	x.idpNameQueryFlag = &idp.IDPNameQueryFlag{IDPNameQuery: new(idp.IDPNameQuery)}
	x.idpNameQueryFlag.AddFlags(x.set)
	x.ownerTypeQueryFlag = &idp.IDPOwnerTypeQueryFlag{IDPOwnerTypeQuery: new(idp.IDPOwnerTypeQuery)}
	x.ownerTypeQueryFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProviderQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query", "owner-type-query")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("idp-id-query"); flagIdx != nil {
		x.idpIdQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("idp-name-query"); flagIdx != nil {
		x.idpNameQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("owner-type-query"); flagIdx != nil {
		x.ownerTypeQueryFlag.ParseFlags(x.set, flagIdx.Args)
	}

	switch cli_client.FieldIndexes(args, "idp-id-query", "idp-name-query", "owner-type-query").Last().Flag {
	case "idp-id-query":
		if x.idpIdQueryFlag.Changed() {
			x.changed = true
			x.ProviderQuery.Query = &ProviderQuery_IdpIdQuery{IdpIdQuery: x.idpIdQueryFlag.IDPIDQuery}
		}
	case "idp-name-query":
		if x.idpNameQueryFlag.Changed() {
			x.changed = true
			x.ProviderQuery.Query = &ProviderQuery_IdpNameQuery{IdpNameQuery: x.idpNameQueryFlag.IDPNameQuery}
		}
	case "owner-type-query":
		if x.ownerTypeQueryFlag.Changed() {
			x.changed = true
			x.ProviderQuery.Query = &ProviderQuery_OwnerTypeQuery{OwnerTypeQuery: x.ownerTypeQueryFlag.IDPOwnerTypeQuery}
		}
	}
}

func (x *ProviderQueryFlag) Changed() bool {
	return x.changed
}

type ReactivateActionRequestFlag struct {
	*ReactivateActionRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *ReactivateActionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateActionRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateActionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.ReactivateActionRequest.Id = *x.idFlag.Value
	}
}

func (x *ReactivateActionRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateActionResponseFlag struct {
	*ReactivateActionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateActionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateActionResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateActionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateActionResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateActionResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateAppRequestFlag struct {
	*ReactivateAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *ReactivateAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ReactivateAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.ReactivateAppRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *ReactivateAppRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateAppResponseFlag struct {
	*ReactivateAppResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateAppResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateAppResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateAppResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateOrgIDPRequestFlag struct {
	*ReactivateOrgIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *ReactivateOrgIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateOrgIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateOrgIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.ReactivateOrgIDPRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *ReactivateOrgIDPRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateOrgIDPResponseFlag struct {
	*ReactivateOrgIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateOrgIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateOrgIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateOrgIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateOrgIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateOrgIDPResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateOrgRequestFlag struct {
	*ReactivateOrgRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ReactivateOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateOrgRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ReactivateOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ReactivateOrgRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateOrgResponseFlag struct {
	*ReactivateOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateOrgResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateProjectGrantRequestFlag struct {
	*ReactivateProjectGrantRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
}

func (x *ReactivateProjectGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateProjectGrantRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateProjectGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.ReactivateProjectGrantRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ReactivateProjectGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *ReactivateProjectGrantRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateProjectGrantResponseFlag struct {
	*ReactivateProjectGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateProjectGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateProjectGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateProjectGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateProjectGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateProjectGrantResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateProjectRequestFlag struct {
	*ReactivateProjectRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *ReactivateProjectRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateProjectRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateProjectRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.ReactivateProjectRequest.Id = *x.idFlag.Value
	}
}

func (x *ReactivateProjectRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateProjectResponseFlag struct {
	*ReactivateProjectResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateProjectResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateProjectResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateProjectResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateProjectResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateProjectResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateUserGrantRequestFlag struct {
	*ReactivateUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	grantIdFlag *cli_client.StringParser
}

func (x *ReactivateUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateUserGrantRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ReactivateUserGrantRequest.UserId = *x.userIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.ReactivateUserGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *ReactivateUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateUserGrantResponseFlag struct {
	*ReactivateUserGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateUserGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateUserGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type ReactivateUserRequestFlag struct {
	*ReactivateUserRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *ReactivateUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateUserRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *ReactivateUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.ReactivateUserRequest.Id = *x.idFlag.Value
	}
}

func (x *ReactivateUserRequestFlag) Changed() bool {
	return x.changed
}

type ReactivateUserResponseFlag struct {
	*ReactivateUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ReactivateUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ReactivateUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ReactivateUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ReactivateUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ReactivateUserResponseFlag) Changed() bool {
	return x.changed
}

type RegenerateAPIClientSecretRequestFlag struct {
	*RegenerateAPIClientSecretRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *RegenerateAPIClientSecretRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateAPIClientSecretRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RegenerateAPIClientSecretRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RegenerateAPIClientSecretRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.RegenerateAPIClientSecretRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *RegenerateAPIClientSecretRequestFlag) Changed() bool {
	return x.changed
}

type RegenerateAPIClientSecretResponseFlag struct {
	*RegenerateAPIClientSecretResponse

	changed bool
	set     *pflag.FlagSet

	clientSecretFlag *cli_client.StringParser
	detailsFlag      *object.ObjectDetailsFlag
}

func (x *RegenerateAPIClientSecretResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateAPIClientSecretResponse", pflag.ContinueOnError)

	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegenerateAPIClientSecretResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.RegenerateAPIClientSecretResponse.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegenerateAPIClientSecretResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RegenerateAPIClientSecretResponseFlag) Changed() bool {
	return x.changed
}

type RegenerateOIDCClientSecretRequestFlag struct {
	*RegenerateOIDCClientSecretRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *RegenerateOIDCClientSecretRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateOIDCClientSecretRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RegenerateOIDCClientSecretRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RegenerateOIDCClientSecretRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.RegenerateOIDCClientSecretRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *RegenerateOIDCClientSecretRequestFlag) Changed() bool {
	return x.changed
}

type RegenerateOIDCClientSecretResponseFlag struct {
	*RegenerateOIDCClientSecretResponse

	changed bool
	set     *pflag.FlagSet

	clientSecretFlag *cli_client.StringParser
	detailsFlag      *object.ObjectDetailsFlag
}

func (x *RegenerateOIDCClientSecretResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateOIDCClientSecretResponse", pflag.ContinueOnError)

	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegenerateOIDCClientSecretResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.RegenerateOIDCClientSecretResponse.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegenerateOIDCClientSecretResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RegenerateOIDCClientSecretResponseFlag) Changed() bool {
	return x.changed
}

type RegenerateSAMLProviderCertificateRequestFlag struct {
	*RegenerateSAMLProviderCertificateRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *RegenerateSAMLProviderCertificateRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateSAMLProviderCertificateRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *RegenerateSAMLProviderCertificateRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RegenerateSAMLProviderCertificateRequest.Id = *x.idFlag.Value
	}
}

func (x *RegenerateSAMLProviderCertificateRequestFlag) Changed() bool {
	return x.changed
}

type RegenerateSAMLProviderCertificateResponseFlag struct {
	*RegenerateSAMLProviderCertificateResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RegenerateSAMLProviderCertificateResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegenerateSAMLProviderCertificateResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RegenerateSAMLProviderCertificateResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RegenerateSAMLProviderCertificateResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RegenerateSAMLProviderCertificateResponseFlag) Changed() bool {
	return x.changed
}

type RemoveAppKeyRequestFlag struct {
	*RemoveAppKeyRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
	keyIdFlag     *cli_client.StringParser
}

func (x *RemoveAppKeyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveAppKeyRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveAppKeyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RemoveAppKeyRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.RemoveAppKeyRequest.AppId = *x.appIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.RemoveAppKeyRequest.KeyId = *x.keyIdFlag.Value
	}
}

func (x *RemoveAppKeyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveAppKeyResponseFlag struct {
	*RemoveAppKeyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveAppKeyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveAppKeyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveAppKeyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveAppKeyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveAppKeyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveAppRequestFlag struct {
	*RemoveAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
}

func (x *RemoveAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RemoveAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.RemoveAppRequest.AppId = *x.appIdFlag.Value
	}
}

func (x *RemoveAppRequestFlag) Changed() bool {
	return x.changed
}

type RemoveAppResponseFlag struct {
	*RemoveAppResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveAppResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveAppResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveAppResponseFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyFontRequestFlag struct {
	*RemoveCustomLabelPolicyFontRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveCustomLabelPolicyFontRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyFontRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyFontRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveCustomLabelPolicyFontRequestFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyFontResponseFlag struct {
	*RemoveCustomLabelPolicyFontResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveCustomLabelPolicyFontResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyFontResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyFontResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveCustomLabelPolicyFontResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveCustomLabelPolicyFontResponseFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyIconDarkRequestFlag struct {
	*RemoveCustomLabelPolicyIconDarkRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveCustomLabelPolicyIconDarkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyIconDarkRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyIconDarkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveCustomLabelPolicyIconDarkRequestFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyIconDarkResponseFlag struct {
	*RemoveCustomLabelPolicyIconDarkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveCustomLabelPolicyIconDarkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyIconDarkResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyIconDarkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveCustomLabelPolicyIconDarkResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveCustomLabelPolicyIconDarkResponseFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyIconRequestFlag struct {
	*RemoveCustomLabelPolicyIconRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveCustomLabelPolicyIconRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyIconRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyIconRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveCustomLabelPolicyIconRequestFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyIconResponseFlag struct {
	*RemoveCustomLabelPolicyIconResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveCustomLabelPolicyIconResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyIconResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyIconResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveCustomLabelPolicyIconResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveCustomLabelPolicyIconResponseFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyLogoDarkRequestFlag struct {
	*RemoveCustomLabelPolicyLogoDarkRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveCustomLabelPolicyLogoDarkRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyLogoDarkRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyLogoDarkRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveCustomLabelPolicyLogoDarkRequestFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyLogoDarkResponseFlag struct {
	*RemoveCustomLabelPolicyLogoDarkResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveCustomLabelPolicyLogoDarkResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyLogoDarkResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyLogoDarkResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveCustomLabelPolicyLogoDarkResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveCustomLabelPolicyLogoDarkResponseFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyLogoRequestFlag struct {
	*RemoveCustomLabelPolicyLogoRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveCustomLabelPolicyLogoRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyLogoRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyLogoRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveCustomLabelPolicyLogoRequestFlag) Changed() bool {
	return x.changed
}

type RemoveCustomLabelPolicyLogoResponseFlag struct {
	*RemoveCustomLabelPolicyLogoResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveCustomLabelPolicyLogoResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveCustomLabelPolicyLogoResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveCustomLabelPolicyLogoResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveCustomLabelPolicyLogoResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveCustomLabelPolicyLogoResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorOTPEmailRequestFlag struct {
	*RemoveHumanAuthFactorOTPEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveHumanAuthFactorOTPEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorOTPEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorOTPEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorOTPEmailRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveHumanAuthFactorOTPEmailRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorOTPEmailResponseFlag struct {
	*RemoveHumanAuthFactorOTPEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanAuthFactorOTPEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorOTPEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorOTPEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorOTPEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanAuthFactorOTPEmailResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorOTPRequestFlag struct {
	*RemoveHumanAuthFactorOTPRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveHumanAuthFactorOTPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorOTPRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorOTPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorOTPRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveHumanAuthFactorOTPRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorOTPResponseFlag struct {
	*RemoveHumanAuthFactorOTPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanAuthFactorOTPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorOTPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorOTPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorOTPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanAuthFactorOTPResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorOTPSMSRequestFlag struct {
	*RemoveHumanAuthFactorOTPSMSRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveHumanAuthFactorOTPSMSRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorOTPSMSRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorOTPSMSRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorOTPSMSRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveHumanAuthFactorOTPSMSRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorOTPSMSResponseFlag struct {
	*RemoveHumanAuthFactorOTPSMSResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanAuthFactorOTPSMSResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorOTPSMSResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorOTPSMSResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorOTPSMSResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanAuthFactorOTPSMSResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorU2FRequestFlag struct {
	*RemoveHumanAuthFactorU2FRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	tokenIdFlag *cli_client.StringParser
}

func (x *RemoveHumanAuthFactorU2FRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorU2FRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorU2FRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorU2FRequest.UserId = *x.userIdFlag.Value
	}
	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorU2FRequest.TokenId = *x.tokenIdFlag.Value
	}
}

func (x *RemoveHumanAuthFactorU2FRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAuthFactorU2FResponseFlag struct {
	*RemoveHumanAuthFactorU2FResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanAuthFactorU2FResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAuthFactorU2FResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAuthFactorU2FResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanAuthFactorU2FResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanAuthFactorU2FResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAvatarRequestFlag struct {
	*RemoveHumanAvatarRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveHumanAvatarRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAvatarRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAvatarRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanAvatarRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveHumanAvatarRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanAvatarResponseFlag struct {
	*RemoveHumanAvatarResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanAvatarResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanAvatarResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanAvatarResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanAvatarResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanAvatarResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanLinkedIDPRequestFlag struct {
	*RemoveHumanLinkedIDPRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag       *cli_client.StringParser
	idpIdFlag        *cli_client.StringParser
	linkedUserIdFlag *cli_client.StringParser
}

func (x *RemoveHumanLinkedIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanLinkedIDPRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.linkedUserIdFlag = cli_client.NewStringParser(x.set, "linked-user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanLinkedIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanLinkedIDPRequest.UserId = *x.userIdFlag.Value
	}
	if x.idpIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanLinkedIDPRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.linkedUserIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanLinkedIDPRequest.LinkedUserId = *x.linkedUserIdFlag.Value
	}
}

func (x *RemoveHumanLinkedIDPRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanLinkedIDPResponseFlag struct {
	*RemoveHumanLinkedIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanLinkedIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanLinkedIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanLinkedIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanLinkedIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanLinkedIDPResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanPasswordlessRequestFlag struct {
	*RemoveHumanPasswordlessRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	tokenIdFlag *cli_client.StringParser
}

func (x *RemoveHumanPasswordlessRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanPasswordlessRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanPasswordlessRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanPasswordlessRequest.UserId = *x.userIdFlag.Value
	}
	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanPasswordlessRequest.TokenId = *x.tokenIdFlag.Value
	}
}

func (x *RemoveHumanPasswordlessRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanPasswordlessResponseFlag struct {
	*RemoveHumanPasswordlessResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanPasswordlessResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanPasswordlessResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanPasswordlessResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanPasswordlessResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanPasswordlessResponseFlag) Changed() bool {
	return x.changed
}

type RemoveHumanPhoneRequestFlag struct {
	*RemoveHumanPhoneRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveHumanPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanPhoneRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveHumanPhoneRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveHumanPhoneRequestFlag) Changed() bool {
	return x.changed
}

type RemoveHumanPhoneResponseFlag struct {
	*RemoveHumanPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveHumanPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveHumanPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveHumanPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveHumanPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveHumanPhoneResponseFlag) Changed() bool {
	return x.changed
}

type RemoveIDPFromLoginPolicyRequestFlag struct {
	*RemoveIDPFromLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *RemoveIDPFromLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIDPFromLoginPolicyRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveIDPFromLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.RemoveIDPFromLoginPolicyRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *RemoveIDPFromLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveIDPFromLoginPolicyResponseFlag struct {
	*RemoveIDPFromLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveIDPFromLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveIDPFromLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveIDPFromLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveIDPFromLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveIDPFromLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMachineKeyRequestFlag struct {
	*RemoveMachineKeyRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	keyIdFlag  *cli_client.StringParser
}

func (x *RemoveMachineKeyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMachineKeyRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMachineKeyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveMachineKeyRequest.UserId = *x.userIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.RemoveMachineKeyRequest.KeyId = *x.keyIdFlag.Value
	}
}

func (x *RemoveMachineKeyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMachineKeyResponseFlag struct {
	*RemoveMachineKeyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMachineKeyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMachineKeyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMachineKeyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMachineKeyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMachineKeyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMachineSecretRequestFlag struct {
	*RemoveMachineSecretRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveMachineSecretRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMachineSecretRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMachineSecretRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveMachineSecretRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveMachineSecretRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMachineSecretResponseFlag struct {
	*RemoveMachineSecretResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMachineSecretResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMachineSecretResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMachineSecretResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMachineSecretResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMachineSecretResponseFlag) Changed() bool {
	return x.changed
}

type RemoveMultiFactorFromLoginPolicyRequestFlag struct {
	*RemoveMultiFactorFromLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.MultiFactorType]
}

func (x *RemoveMultiFactorFromLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMultiFactorFromLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.MultiFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveMultiFactorFromLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.RemoveMultiFactorFromLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *RemoveMultiFactorFromLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveMultiFactorFromLoginPolicyResponseFlag struct {
	*RemoveMultiFactorFromLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveMultiFactorFromLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveMultiFactorFromLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveMultiFactorFromLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveMultiFactorFromLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveMultiFactorFromLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOrgDomainRequestFlag struct {
	*RemoveOrgDomainRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
}

func (x *RemoveOrgDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgDomainRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.RemoveOrgDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *RemoveOrgDomainRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOrgDomainResponseFlag struct {
	*RemoveOrgDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveOrgDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOrgDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveOrgDomainResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOrgIDPRequestFlag struct {
	*RemoveOrgIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag *cli_client.StringParser
}

func (x *RemoveOrgIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.RemoveOrgIDPRequest.IdpId = *x.idpIdFlag.Value
	}
}

func (x *RemoveOrgIDPRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOrgIDPResponseFlag struct {
	*RemoveOrgIDPResponse

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveOrgIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgIDPResponse", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveOrgIDPResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOrgMemberRequestFlag struct {
	*RemoveOrgMemberRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *RemoveOrgMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgMemberRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveOrgMemberRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveOrgMemberRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOrgMemberResponseFlag struct {
	*RemoveOrgMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveOrgMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOrgMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveOrgMemberResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOrgMetadataRequestFlag struct {
	*RemoveOrgMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keyFlag *cli_client.StringParser
}

func (x *RemoveOrgMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgMetadataRequest", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.RemoveOrgMetadataRequest.Key = *x.keyFlag.Value
	}
}

func (x *RemoveOrgMetadataRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOrgMetadataResponseFlag struct {
	*RemoveOrgMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveOrgMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOrgMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveOrgMetadataResponseFlag) Changed() bool {
	return x.changed
}

type RemoveOrgRequestFlag struct {
	*RemoveOrgRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *RemoveOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *RemoveOrgRequestFlag) Changed() bool {
	return x.changed
}

type RemoveOrgResponseFlag struct {
	*RemoveOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveOrgResponseFlag) Changed() bool {
	return x.changed
}

type RemovePersonalAccessTokenRequestFlag struct {
	*RemovePersonalAccessTokenRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	tokenIdFlag *cli_client.StringParser
}

func (x *RemovePersonalAccessTokenRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemovePersonalAccessTokenRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.tokenIdFlag = cli_client.NewStringParser(x.set, "token-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemovePersonalAccessTokenRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemovePersonalAccessTokenRequest.UserId = *x.userIdFlag.Value
	}
	if x.tokenIdFlag.Changed() {
		x.changed = true
		x.RemovePersonalAccessTokenRequest.TokenId = *x.tokenIdFlag.Value
	}
}

func (x *RemovePersonalAccessTokenRequestFlag) Changed() bool {
	return x.changed
}

type RemovePersonalAccessTokenResponseFlag struct {
	*RemovePersonalAccessTokenResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemovePersonalAccessTokenResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemovePersonalAccessTokenResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemovePersonalAccessTokenResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemovePersonalAccessTokenResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemovePersonalAccessTokenResponseFlag) Changed() bool {
	return x.changed
}

type RemoveProjectGrantMemberRequestFlag struct {
	*RemoveProjectGrantMemberRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
}

func (x *RemoveProjectGrantMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectGrantMemberRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectGrantMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantMemberRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantMemberRequest.GrantId = *x.grantIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantMemberRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveProjectGrantMemberRequestFlag) Changed() bool {
	return x.changed
}

type RemoveProjectGrantMemberResponseFlag struct {
	*RemoveProjectGrantMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveProjectGrantMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectGrantMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectGrantMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveProjectGrantMemberResponseFlag) Changed() bool {
	return x.changed
}

type RemoveProjectGrantRequestFlag struct {
	*RemoveProjectGrantRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
}

func (x *RemoveProjectGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectGrantRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *RemoveProjectGrantRequestFlag) Changed() bool {
	return x.changed
}

type RemoveProjectGrantResponseFlag struct {
	*RemoveProjectGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveProjectGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveProjectGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveProjectGrantResponseFlag) Changed() bool {
	return x.changed
}

type RemoveProjectMemberRequestFlag struct {
	*RemoveProjectMemberRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
}

func (x *RemoveProjectMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectMemberRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectMemberRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectMemberRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *RemoveProjectMemberRequestFlag) Changed() bool {
	return x.changed
}

type RemoveProjectMemberResponseFlag struct {
	*RemoveProjectMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveProjectMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveProjectMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveProjectMemberResponseFlag) Changed() bool {
	return x.changed
}

type RemoveProjectRequestFlag struct {
	*RemoveProjectRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *RemoveProjectRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RemoveProjectRequest.Id = *x.idFlag.Value
	}
}

func (x *RemoveProjectRequestFlag) Changed() bool {
	return x.changed
}

type RemoveProjectResponseFlag struct {
	*RemoveProjectResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveProjectResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveProjectResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveProjectResponseFlag) Changed() bool {
	return x.changed
}

type RemoveProjectRoleRequestFlag struct {
	*RemoveProjectRoleRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	roleKeyFlag   *cli_client.StringParser
}

func (x *RemoveProjectRoleRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectRoleRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.roleKeyFlag = cli_client.NewStringParser(x.set, "role-key", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectRoleRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.RemoveProjectRoleRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.roleKeyFlag.Changed() {
		x.changed = true
		x.RemoveProjectRoleRequest.RoleKey = *x.roleKeyFlag.Value
	}
}

func (x *RemoveProjectRoleRequestFlag) Changed() bool {
	return x.changed
}

type RemoveProjectRoleResponseFlag struct {
	*RemoveProjectRoleResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveProjectRoleResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveProjectRoleResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveProjectRoleResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveProjectRoleResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveProjectRoleResponseFlag) Changed() bool {
	return x.changed
}

type RemoveSecondFactorFromLoginPolicyRequestFlag struct {
	*RemoveSecondFactorFromLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	typeFlag *cli_client.EnumParser[policy.SecondFactorType]
}

func (x *RemoveSecondFactorFromLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSecondFactorFromLoginPolicyRequest", pflag.ContinueOnError)

	x.typeFlag = cli_client.NewEnumParser[policy.SecondFactorType](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveSecondFactorFromLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.typeFlag.Changed() {
		x.changed = true
		x.RemoveSecondFactorFromLoginPolicyRequest.Type = *x.typeFlag.Value
	}
}

func (x *RemoveSecondFactorFromLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type RemoveSecondFactorFromLoginPolicyResponseFlag struct {
	*RemoveSecondFactorFromLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveSecondFactorFromLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveSecondFactorFromLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveSecondFactorFromLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveSecondFactorFromLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveSecondFactorFromLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type RemoveUserGrantRequestFlag struct {
	*RemoveUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag  *cli_client.StringParser
	grantIdFlag *cli_client.StringParser
}

func (x *RemoveUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveUserGrantRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.RemoveUserGrantRequest.UserId = *x.userIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.RemoveUserGrantRequest.GrantId = *x.grantIdFlag.Value
	}
}

func (x *RemoveUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type RemoveUserGrantResponseFlag struct {
	*RemoveUserGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveUserGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveUserGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type RemoveUserMetadataRequestFlag struct {
	*RemoveUserMetadataRequest

	changed bool
	set     *pflag.FlagSet

	idFlag  *cli_client.StringParser
	keyFlag *cli_client.StringParser
}

func (x *RemoveUserMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveUserMetadataRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveUserMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RemoveUserMetadataRequest.Id = *x.idFlag.Value
	}
	if x.keyFlag.Changed() {
		x.changed = true
		x.RemoveUserMetadataRequest.Key = *x.keyFlag.Value
	}
}

func (x *RemoveUserMetadataRequestFlag) Changed() bool {
	return x.changed
}

type RemoveUserMetadataResponseFlag struct {
	*RemoveUserMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveUserMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveUserMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveUserMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveUserMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveUserMetadataResponseFlag) Changed() bool {
	return x.changed
}

type RemoveUserRequestFlag struct {
	*RemoveUserRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *RemoveUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveUserRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *RemoveUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.RemoveUserRequest.Id = *x.idFlag.Value
	}
}

func (x *RemoveUserRequestFlag) Changed() bool {
	return x.changed
}

type RemoveUserResponseFlag struct {
	*RemoveUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *RemoveUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RemoveUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *RemoveUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.RemoveUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *RemoveUserResponseFlag) Changed() bool {
	return x.changed
}

type ResendHumanEmailVerificationRequestFlag struct {
	*ResendHumanEmailVerificationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *ResendHumanEmailVerificationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendHumanEmailVerificationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ResendHumanEmailVerificationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ResendHumanEmailVerificationRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ResendHumanEmailVerificationRequestFlag) Changed() bool {
	return x.changed
}

type ResendHumanEmailVerificationResponseFlag struct {
	*ResendHumanEmailVerificationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResendHumanEmailVerificationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendHumanEmailVerificationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResendHumanEmailVerificationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResendHumanEmailVerificationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResendHumanEmailVerificationResponseFlag) Changed() bool {
	return x.changed
}

type ResendHumanInitializationRequestFlag struct {
	*ResendHumanInitializationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	emailFlag  *cli_client.StringParser
}

func (x *ResendHumanInitializationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendHumanInitializationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	parent.AddFlagSet(x.set)
}

func (x *ResendHumanInitializationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ResendHumanInitializationRequest.UserId = *x.userIdFlag.Value
	}
	if x.emailFlag.Changed() {
		x.changed = true
		x.ResendHumanInitializationRequest.Email = *x.emailFlag.Value
	}
}

func (x *ResendHumanInitializationRequestFlag) Changed() bool {
	return x.changed
}

type ResendHumanInitializationResponseFlag struct {
	*ResendHumanInitializationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResendHumanInitializationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendHumanInitializationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResendHumanInitializationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResendHumanInitializationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResendHumanInitializationResponseFlag) Changed() bool {
	return x.changed
}

type ResendHumanPhoneVerificationRequestFlag struct {
	*ResendHumanPhoneVerificationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *ResendHumanPhoneVerificationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendHumanPhoneVerificationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *ResendHumanPhoneVerificationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.ResendHumanPhoneVerificationRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *ResendHumanPhoneVerificationRequestFlag) Changed() bool {
	return x.changed
}

type ResendHumanPhoneVerificationResponseFlag struct {
	*ResendHumanPhoneVerificationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResendHumanPhoneVerificationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResendHumanPhoneVerificationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResendHumanPhoneVerificationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResendHumanPhoneVerificationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResendHumanPhoneVerificationResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomDomainClaimedMessageTextToDefaultRequestFlag struct {
	*ResetCustomDomainClaimedMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomDomainClaimedMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomDomainClaimedMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomDomainClaimedMessageTextToDefaultResponseFlag struct {
	*ResetCustomDomainClaimedMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomDomainClaimedMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomDomainClaimedMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomDomainClaimedMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomInitMessageTextToDefaultRequestFlag struct {
	*ResetCustomInitMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomInitMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomInitMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomInitMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomInitMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomInitMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomInitMessageTextToDefaultResponseFlag struct {
	*ResetCustomInitMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomInitMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomInitMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomInitMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomInitMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomInitMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomLoginTextsToDefaultRequestFlag struct {
	*ResetCustomLoginTextsToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomLoginTextsToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomLoginTextsToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomLoginTextsToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomLoginTextsToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomLoginTextsToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomLoginTextsToDefaultResponseFlag struct {
	*ResetCustomLoginTextsToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomLoginTextsToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomLoginTextsToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomLoginTextsToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomLoginTextsToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomLoginTextsToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordChangeMessageTextToDefaultRequestFlag struct {
	*ResetCustomPasswordChangeMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordChangeMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordChangeMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordChangeMessageTextToDefaultResponseFlag struct {
	*ResetCustomPasswordChangeMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordChangeMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordChangeMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordChangeMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomPasswordChangeMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordResetMessageTextToDefaultRequestFlag struct {
	*ResetCustomPasswordResetMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordResetMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordResetMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomPasswordResetMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordResetMessageTextToDefaultResponseFlag struct {
	*ResetCustomPasswordResetMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordResetMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordResetMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomPasswordResetMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag struct {
	*ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordlessRegistrationMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag struct {
	*ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomPasswordlessRegistrationMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomPasswordlessRegistrationMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifyEmailMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifyEmailMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifyEmailMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifyEmailOTPMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailOTPMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailOTPMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifyEmailOTPMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyEmailOTPMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyEmailOTPMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifyEmailOTPMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifyPhoneMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyPhoneMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyPhoneMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifyPhoneMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifyPhoneMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifyPhoneMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifyPhoneMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag struct {
	*ResetCustomVerifySMSOTPMessageTextToDefaultRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifySMSOTPMessageTextToDefaultRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifySMSOTPMessageTextToDefaultRequest.Language = *x.languageFlag.Value
	}
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag struct {
	*ResetCustomVerifySMSOTPMessageTextToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetCustomVerifySMSOTPMessageTextToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetCustomVerifySMSOTPMessageTextToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetCustomVerifySMSOTPMessageTextToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetLabelPolicyToDefaultRequestFlag struct {
	*ResetLabelPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetLabelPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLabelPolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetLabelPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetLabelPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetLabelPolicyToDefaultResponseFlag struct {
	*ResetLabelPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetLabelPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLabelPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetLabelPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetLabelPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetLabelPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetLockoutPolicyToDefaultRequestFlag struct {
	*ResetLockoutPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetLockoutPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLockoutPolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetLockoutPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetLockoutPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetLockoutPolicyToDefaultResponseFlag struct {
	*ResetLockoutPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetLockoutPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLockoutPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetLockoutPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetLockoutPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetLockoutPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetLoginPolicyToDefaultRequestFlag struct {
	*ResetLoginPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetLoginPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLoginPolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetLoginPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetLoginPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetLoginPolicyToDefaultResponseFlag struct {
	*ResetLoginPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetLoginPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetLoginPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetLoginPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetLoginPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetLoginPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetNotificationPolicyToDefaultRequestFlag struct {
	*ResetNotificationPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetNotificationPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetNotificationPolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetNotificationPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetNotificationPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetNotificationPolicyToDefaultResponseFlag struct {
	*ResetNotificationPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetNotificationPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetNotificationPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetNotificationPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetNotificationPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetNotificationPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetPasswordAgePolicyToDefaultRequestFlag struct {
	*ResetPasswordAgePolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetPasswordAgePolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetPasswordAgePolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetPasswordAgePolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetPasswordAgePolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetPasswordAgePolicyToDefaultResponseFlag struct {
	*ResetPasswordAgePolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetPasswordAgePolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetPasswordAgePolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetPasswordAgePolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetPasswordAgePolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetPasswordAgePolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetPasswordComplexityPolicyToDefaultRequestFlag struct {
	*ResetPasswordComplexityPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetPasswordComplexityPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetPasswordComplexityPolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetPasswordComplexityPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetPasswordComplexityPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetPasswordComplexityPolicyToDefaultResponseFlag struct {
	*ResetPasswordComplexityPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetPasswordComplexityPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetPasswordComplexityPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetPasswordComplexityPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetPasswordComplexityPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetPasswordComplexityPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type ResetPrivacyPolicyToDefaultRequestFlag struct {
	*ResetPrivacyPolicyToDefaultRequest

	changed bool
	set     *pflag.FlagSet
}

func (x *ResetPrivacyPolicyToDefaultRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetPrivacyPolicyToDefaultRequest", pflag.ContinueOnError)

	parent.AddFlagSet(x.set)
}

func (x *ResetPrivacyPolicyToDefaultRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

}

func (x *ResetPrivacyPolicyToDefaultRequestFlag) Changed() bool {
	return x.changed
}

type ResetPrivacyPolicyToDefaultResponseFlag struct {
	*ResetPrivacyPolicyToDefaultResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ResetPrivacyPolicyToDefaultResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ResetPrivacyPolicyToDefaultResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ResetPrivacyPolicyToDefaultResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ResetPrivacyPolicyToDefaultResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ResetPrivacyPolicyToDefaultResponseFlag) Changed() bool {
	return x.changed
}

type SendHumanResetPasswordNotificationRequestFlag struct {
	*SendHumanResetPasswordNotificationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	typeFlag   *cli_client.EnumParser[SendHumanResetPasswordNotificationRequest_Type]
}

func (x *SendHumanResetPasswordNotificationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendHumanResetPasswordNotificationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.typeFlag = cli_client.NewEnumParser[SendHumanResetPasswordNotificationRequest_Type](x.set, "type", "")
	parent.AddFlagSet(x.set)
}

func (x *SendHumanResetPasswordNotificationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SendHumanResetPasswordNotificationRequest.UserId = *x.userIdFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.SendHumanResetPasswordNotificationRequest.Type = *x.typeFlag.Value
	}
}

func (x *SendHumanResetPasswordNotificationRequestFlag) Changed() bool {
	return x.changed
}

type SendHumanResetPasswordNotificationResponseFlag struct {
	*SendHumanResetPasswordNotificationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SendHumanResetPasswordNotificationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendHumanResetPasswordNotificationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SendHumanResetPasswordNotificationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SendHumanResetPasswordNotificationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SendHumanResetPasswordNotificationResponseFlag) Changed() bool {
	return x.changed
}

type SendPasswordlessRegistrationRequestFlag struct {
	*SendPasswordlessRegistrationRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
}

func (x *SendPasswordlessRegistrationRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendPasswordlessRegistrationRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	parent.AddFlagSet(x.set)
}

func (x *SendPasswordlessRegistrationRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SendPasswordlessRegistrationRequest.UserId = *x.userIdFlag.Value
	}
}

func (x *SendPasswordlessRegistrationRequestFlag) Changed() bool {
	return x.changed
}

type SendPasswordlessRegistrationResponseFlag struct {
	*SendPasswordlessRegistrationResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SendPasswordlessRegistrationResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SendPasswordlessRegistrationResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SendPasswordlessRegistrationResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SendPasswordlessRegistrationResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SendPasswordlessRegistrationResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomDomainClaimedMessageTextRequestFlag struct {
	*SetCustomDomainClaimedMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomDomainClaimedMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomDomainClaimedMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomDomainClaimedMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomDomainClaimedMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomDomainClaimedMessageTextResponseFlag struct {
	*SetCustomDomainClaimedMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomDomainClaimedMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomDomainClaimedMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomDomainClaimedMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomDomainClaimedMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomDomainClaimedMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomInitMessageTextRequestFlag struct {
	*SetCustomInitMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomInitMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomInitMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomInitMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomInitMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomInitMessageTextResponseFlag struct {
	*SetCustomInitMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomInitMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomInitMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomInitMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomInitMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomInitMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomLoginTextsRequestFlag struct {
	*SetCustomLoginTextsRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag                             *cli_client.StringParser
	selectAccountTextFlag                    *text.SelectAccountScreenTextFlag
	loginTextFlag                            *text.LoginScreenTextFlag
	passwordTextFlag                         *text.PasswordScreenTextFlag
	usernameChangeTextFlag                   *text.UsernameChangeScreenTextFlag
	usernameChangeDoneTextFlag               *text.UsernameChangeDoneScreenTextFlag
	initPasswordTextFlag                     *text.InitPasswordScreenTextFlag
	initPasswordDoneTextFlag                 *text.InitPasswordDoneScreenTextFlag
	emailVerificationTextFlag                *text.EmailVerificationScreenTextFlag
	emailVerificationDoneTextFlag            *text.EmailVerificationDoneScreenTextFlag
	initializeUserTextFlag                   *text.InitializeUserScreenTextFlag
	initializeDoneTextFlag                   *text.InitializeUserDoneScreenTextFlag
	initMfaPromptTextFlag                    *text.InitMFAPromptScreenTextFlag
	initMfaOtpTextFlag                       *text.InitMFAOTPScreenTextFlag
	initMfaU2fTextFlag                       *text.InitMFAU2FScreenTextFlag
	initMfaDoneTextFlag                      *text.InitMFADoneScreenTextFlag
	mfaProvidersTextFlag                     *text.MFAProvidersTextFlag
	verifyMfaOtpTextFlag                     *text.VerifyMFAOTPScreenTextFlag
	verifyMfaU2fTextFlag                     *text.VerifyMFAU2FScreenTextFlag
	passwordlessTextFlag                     *text.PasswordlessScreenTextFlag
	passwordChangeTextFlag                   *text.PasswordChangeScreenTextFlag
	passwordChangeDoneTextFlag               *text.PasswordChangeDoneScreenTextFlag
	passwordResetDoneTextFlag                *text.PasswordResetDoneScreenTextFlag
	registrationOptionTextFlag               *text.RegistrationOptionScreenTextFlag
	registrationUserTextFlag                 *text.RegistrationUserScreenTextFlag
	registrationOrgTextFlag                  *text.RegistrationOrgScreenTextFlag
	linkingUserDoneTextFlag                  *text.LinkingUserDoneScreenTextFlag
	externalUserNotFoundTextFlag             *text.ExternalUserNotFoundScreenTextFlag
	successLoginTextFlag                     *text.SuccessLoginScreenTextFlag
	logoutTextFlag                           *text.LogoutDoneScreenTextFlag
	footerTextFlag                           *text.FooterTextFlag
	passwordlessPromptTextFlag               *text.PasswordlessPromptScreenTextFlag
	passwordlessRegistrationTextFlag         *text.PasswordlessRegistrationScreenTextFlag
	passwordlessRegistrationDoneTextFlag     *text.PasswordlessRegistrationDoneScreenTextFlag
	externalRegistrationUserOverviewTextFlag *text.ExternalRegistrationUserOverviewScreenTextFlag
}

func (x *SetCustomLoginTextsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomLoginTextsRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.selectAccountTextFlag = &text.SelectAccountScreenTextFlag{SelectAccountScreenText: new(text.SelectAccountScreenText)}
	x.selectAccountTextFlag.AddFlags(x.set)
	x.loginTextFlag = &text.LoginScreenTextFlag{LoginScreenText: new(text.LoginScreenText)}
	x.loginTextFlag.AddFlags(x.set)
	x.passwordTextFlag = &text.PasswordScreenTextFlag{PasswordScreenText: new(text.PasswordScreenText)}
	x.passwordTextFlag.AddFlags(x.set)
	x.usernameChangeTextFlag = &text.UsernameChangeScreenTextFlag{UsernameChangeScreenText: new(text.UsernameChangeScreenText)}
	x.usernameChangeTextFlag.AddFlags(x.set)
	x.usernameChangeDoneTextFlag = &text.UsernameChangeDoneScreenTextFlag{UsernameChangeDoneScreenText: new(text.UsernameChangeDoneScreenText)}
	x.usernameChangeDoneTextFlag.AddFlags(x.set)
	x.initPasswordTextFlag = &text.InitPasswordScreenTextFlag{InitPasswordScreenText: new(text.InitPasswordScreenText)}
	x.initPasswordTextFlag.AddFlags(x.set)
	x.initPasswordDoneTextFlag = &text.InitPasswordDoneScreenTextFlag{InitPasswordDoneScreenText: new(text.InitPasswordDoneScreenText)}
	x.initPasswordDoneTextFlag.AddFlags(x.set)
	x.emailVerificationTextFlag = &text.EmailVerificationScreenTextFlag{EmailVerificationScreenText: new(text.EmailVerificationScreenText)}
	x.emailVerificationTextFlag.AddFlags(x.set)
	x.emailVerificationDoneTextFlag = &text.EmailVerificationDoneScreenTextFlag{EmailVerificationDoneScreenText: new(text.EmailVerificationDoneScreenText)}
	x.emailVerificationDoneTextFlag.AddFlags(x.set)
	x.initializeUserTextFlag = &text.InitializeUserScreenTextFlag{InitializeUserScreenText: new(text.InitializeUserScreenText)}
	x.initializeUserTextFlag.AddFlags(x.set)
	x.initializeDoneTextFlag = &text.InitializeUserDoneScreenTextFlag{InitializeUserDoneScreenText: new(text.InitializeUserDoneScreenText)}
	x.initializeDoneTextFlag.AddFlags(x.set)
	x.initMfaPromptTextFlag = &text.InitMFAPromptScreenTextFlag{InitMFAPromptScreenText: new(text.InitMFAPromptScreenText)}
	x.initMfaPromptTextFlag.AddFlags(x.set)
	x.initMfaOtpTextFlag = &text.InitMFAOTPScreenTextFlag{InitMFAOTPScreenText: new(text.InitMFAOTPScreenText)}
	x.initMfaOtpTextFlag.AddFlags(x.set)
	x.initMfaU2fTextFlag = &text.InitMFAU2FScreenTextFlag{InitMFAU2FScreenText: new(text.InitMFAU2FScreenText)}
	x.initMfaU2fTextFlag.AddFlags(x.set)
	x.initMfaDoneTextFlag = &text.InitMFADoneScreenTextFlag{InitMFADoneScreenText: new(text.InitMFADoneScreenText)}
	x.initMfaDoneTextFlag.AddFlags(x.set)
	x.mfaProvidersTextFlag = &text.MFAProvidersTextFlag{MFAProvidersText: new(text.MFAProvidersText)}
	x.mfaProvidersTextFlag.AddFlags(x.set)
	x.verifyMfaOtpTextFlag = &text.VerifyMFAOTPScreenTextFlag{VerifyMFAOTPScreenText: new(text.VerifyMFAOTPScreenText)}
	x.verifyMfaOtpTextFlag.AddFlags(x.set)
	x.verifyMfaU2fTextFlag = &text.VerifyMFAU2FScreenTextFlag{VerifyMFAU2FScreenText: new(text.VerifyMFAU2FScreenText)}
	x.verifyMfaU2fTextFlag.AddFlags(x.set)
	x.passwordlessTextFlag = &text.PasswordlessScreenTextFlag{PasswordlessScreenText: new(text.PasswordlessScreenText)}
	x.passwordlessTextFlag.AddFlags(x.set)
	x.passwordChangeTextFlag = &text.PasswordChangeScreenTextFlag{PasswordChangeScreenText: new(text.PasswordChangeScreenText)}
	x.passwordChangeTextFlag.AddFlags(x.set)
	x.passwordChangeDoneTextFlag = &text.PasswordChangeDoneScreenTextFlag{PasswordChangeDoneScreenText: new(text.PasswordChangeDoneScreenText)}
	x.passwordChangeDoneTextFlag.AddFlags(x.set)
	x.passwordResetDoneTextFlag = &text.PasswordResetDoneScreenTextFlag{PasswordResetDoneScreenText: new(text.PasswordResetDoneScreenText)}
	x.passwordResetDoneTextFlag.AddFlags(x.set)
	x.registrationOptionTextFlag = &text.RegistrationOptionScreenTextFlag{RegistrationOptionScreenText: new(text.RegistrationOptionScreenText)}
	x.registrationOptionTextFlag.AddFlags(x.set)
	x.registrationUserTextFlag = &text.RegistrationUserScreenTextFlag{RegistrationUserScreenText: new(text.RegistrationUserScreenText)}
	x.registrationUserTextFlag.AddFlags(x.set)
	x.registrationOrgTextFlag = &text.RegistrationOrgScreenTextFlag{RegistrationOrgScreenText: new(text.RegistrationOrgScreenText)}
	x.registrationOrgTextFlag.AddFlags(x.set)
	x.linkingUserDoneTextFlag = &text.LinkingUserDoneScreenTextFlag{LinkingUserDoneScreenText: new(text.LinkingUserDoneScreenText)}
	x.linkingUserDoneTextFlag.AddFlags(x.set)
	x.externalUserNotFoundTextFlag = &text.ExternalUserNotFoundScreenTextFlag{ExternalUserNotFoundScreenText: new(text.ExternalUserNotFoundScreenText)}
	x.externalUserNotFoundTextFlag.AddFlags(x.set)
	x.successLoginTextFlag = &text.SuccessLoginScreenTextFlag{SuccessLoginScreenText: new(text.SuccessLoginScreenText)}
	x.successLoginTextFlag.AddFlags(x.set)
	x.logoutTextFlag = &text.LogoutDoneScreenTextFlag{LogoutDoneScreenText: new(text.LogoutDoneScreenText)}
	x.logoutTextFlag.AddFlags(x.set)
	x.footerTextFlag = &text.FooterTextFlag{FooterText: new(text.FooterText)}
	x.footerTextFlag.AddFlags(x.set)
	x.passwordlessPromptTextFlag = &text.PasswordlessPromptScreenTextFlag{PasswordlessPromptScreenText: new(text.PasswordlessPromptScreenText)}
	x.passwordlessPromptTextFlag.AddFlags(x.set)
	x.passwordlessRegistrationTextFlag = &text.PasswordlessRegistrationScreenTextFlag{PasswordlessRegistrationScreenText: new(text.PasswordlessRegistrationScreenText)}
	x.passwordlessRegistrationTextFlag.AddFlags(x.set)
	x.passwordlessRegistrationDoneTextFlag = &text.PasswordlessRegistrationDoneScreenTextFlag{PasswordlessRegistrationDoneScreenText: new(text.PasswordlessRegistrationDoneScreenText)}
	x.passwordlessRegistrationDoneTextFlag.AddFlags(x.set)
	x.externalRegistrationUserOverviewTextFlag = &text.ExternalRegistrationUserOverviewScreenTextFlag{ExternalRegistrationUserOverviewScreenText: new(text.ExternalRegistrationUserOverviewScreenText)}
	x.externalRegistrationUserOverviewTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomLoginTextsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "select-account-text", "login-text", "password-text", "username-change-text", "username-change-done-text", "init-password-text", "init-password-done-text", "email-verification-text", "email-verification-done-text", "initialize-user-text", "initialize-done-text", "init-mfa-prompt-text", "init-mfa-otp-text", "init-mfa-u2f-text", "init-mfa-done-text", "mfa-providers-text", "verify-mfa-otp-text", "verify-mfa-u2f-text", "passwordless-text", "password-change-text", "password-change-done-text", "password-reset-done-text", "registration-option-text", "registration-user-text", "registration-org-text", "linking-user-done-text", "external-user-not-found-text", "success-login-text", "logout-text", "footer-text", "passwordless-prompt-text", "passwordless-registration-text", "passwordless-registration-done-text", "external-registration-user-overview-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("select-account-text"); flagIdx != nil {
		x.selectAccountTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-text"); flagIdx != nil {
		x.loginTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-text"); flagIdx != nil {
		x.passwordTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("username-change-text"); flagIdx != nil {
		x.usernameChangeTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("username-change-done-text"); flagIdx != nil {
		x.usernameChangeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-password-text"); flagIdx != nil {
		x.initPasswordTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-password-done-text"); flagIdx != nil {
		x.initPasswordDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-verification-text"); flagIdx != nil {
		x.emailVerificationTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-verification-done-text"); flagIdx != nil {
		x.emailVerificationDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("initialize-user-text"); flagIdx != nil {
		x.initializeUserTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("initialize-done-text"); flagIdx != nil {
		x.initializeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-prompt-text"); flagIdx != nil {
		x.initMfaPromptTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-otp-text"); flagIdx != nil {
		x.initMfaOtpTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-u2f-text"); flagIdx != nil {
		x.initMfaU2fTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-done-text"); flagIdx != nil {
		x.initMfaDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("mfa-providers-text"); flagIdx != nil {
		x.mfaProvidersTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("verify-mfa-otp-text"); flagIdx != nil {
		x.verifyMfaOtpTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("verify-mfa-u2f-text"); flagIdx != nil {
		x.verifyMfaU2fTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-text"); flagIdx != nil {
		x.passwordlessTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-change-text"); flagIdx != nil {
		x.passwordChangeTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-change-done-text"); flagIdx != nil {
		x.passwordChangeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-reset-done-text"); flagIdx != nil {
		x.passwordResetDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-option-text"); flagIdx != nil {
		x.registrationOptionTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-user-text"); flagIdx != nil {
		x.registrationUserTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-org-text"); flagIdx != nil {
		x.registrationOrgTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("linking-user-done-text"); flagIdx != nil {
		x.linkingUserDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("external-user-not-found-text"); flagIdx != nil {
		x.externalUserNotFoundTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("success-login-text"); flagIdx != nil {
		x.successLoginTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("logout-text"); flagIdx != nil {
		x.logoutTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("footer-text"); flagIdx != nil {
		x.footerTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-prompt-text"); flagIdx != nil {
		x.passwordlessPromptTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration-text"); flagIdx != nil {
		x.passwordlessRegistrationTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration-done-text"); flagIdx != nil {
		x.passwordlessRegistrationDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("external-registration-user-overview-text"); flagIdx != nil {
		x.externalRegistrationUserOverviewTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.Language = *x.languageFlag.Value
	}

	if x.selectAccountTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.SelectAccountText = x.selectAccountTextFlag.SelectAccountScreenText
	}

	if x.loginTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.LoginText = x.loginTextFlag.LoginScreenText
	}

	if x.passwordTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordText = x.passwordTextFlag.PasswordScreenText
	}

	if x.usernameChangeTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.UsernameChangeText = x.usernameChangeTextFlag.UsernameChangeScreenText
	}

	if x.usernameChangeDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.UsernameChangeDoneText = x.usernameChangeDoneTextFlag.UsernameChangeDoneScreenText
	}

	if x.initPasswordTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitPasswordText = x.initPasswordTextFlag.InitPasswordScreenText
	}

	if x.initPasswordDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitPasswordDoneText = x.initPasswordDoneTextFlag.InitPasswordDoneScreenText
	}

	if x.emailVerificationTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.EmailVerificationText = x.emailVerificationTextFlag.EmailVerificationScreenText
	}

	if x.emailVerificationDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.EmailVerificationDoneText = x.emailVerificationDoneTextFlag.EmailVerificationDoneScreenText
	}

	if x.initializeUserTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitializeUserText = x.initializeUserTextFlag.InitializeUserScreenText
	}

	if x.initializeDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitializeDoneText = x.initializeDoneTextFlag.InitializeUserDoneScreenText
	}

	if x.initMfaPromptTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaPromptText = x.initMfaPromptTextFlag.InitMFAPromptScreenText
	}

	if x.initMfaOtpTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaOtpText = x.initMfaOtpTextFlag.InitMFAOTPScreenText
	}

	if x.initMfaU2fTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaU2FText = x.initMfaU2fTextFlag.InitMFAU2FScreenText
	}

	if x.initMfaDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.InitMfaDoneText = x.initMfaDoneTextFlag.InitMFADoneScreenText
	}

	if x.mfaProvidersTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.MfaProvidersText = x.mfaProvidersTextFlag.MFAProvidersText
	}

	if x.verifyMfaOtpTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.VerifyMfaOtpText = x.verifyMfaOtpTextFlag.VerifyMFAOTPScreenText
	}

	if x.verifyMfaU2fTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.VerifyMfaU2FText = x.verifyMfaU2fTextFlag.VerifyMFAU2FScreenText
	}

	if x.passwordlessTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessText = x.passwordlessTextFlag.PasswordlessScreenText
	}

	if x.passwordChangeTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordChangeText = x.passwordChangeTextFlag.PasswordChangeScreenText
	}

	if x.passwordChangeDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordChangeDoneText = x.passwordChangeDoneTextFlag.PasswordChangeDoneScreenText
	}

	if x.passwordResetDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordResetDoneText = x.passwordResetDoneTextFlag.PasswordResetDoneScreenText
	}

	if x.registrationOptionTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.RegistrationOptionText = x.registrationOptionTextFlag.RegistrationOptionScreenText
	}

	if x.registrationUserTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.RegistrationUserText = x.registrationUserTextFlag.RegistrationUserScreenText
	}

	if x.registrationOrgTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.RegistrationOrgText = x.registrationOrgTextFlag.RegistrationOrgScreenText
	}

	if x.linkingUserDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.LinkingUserDoneText = x.linkingUserDoneTextFlag.LinkingUserDoneScreenText
	}

	if x.externalUserNotFoundTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.ExternalUserNotFoundText = x.externalUserNotFoundTextFlag.ExternalUserNotFoundScreenText
	}

	if x.successLoginTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.SuccessLoginText = x.successLoginTextFlag.SuccessLoginScreenText
	}

	if x.logoutTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.LogoutText = x.logoutTextFlag.LogoutDoneScreenText
	}

	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.FooterText = x.footerTextFlag.FooterText
	}

	if x.passwordlessPromptTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessPromptText = x.passwordlessPromptTextFlag.PasswordlessPromptScreenText
	}

	if x.passwordlessRegistrationTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessRegistrationText = x.passwordlessRegistrationTextFlag.PasswordlessRegistrationScreenText
	}

	if x.passwordlessRegistrationDoneTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.PasswordlessRegistrationDoneText = x.passwordlessRegistrationDoneTextFlag.PasswordlessRegistrationDoneScreenText
	}

	if x.externalRegistrationUserOverviewTextFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsRequest.ExternalRegistrationUserOverviewText = x.externalRegistrationUserOverviewTextFlag.ExternalRegistrationUserOverviewScreenText
	}

}

func (x *SetCustomLoginTextsRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomLoginTextsResponseFlag struct {
	*SetCustomLoginTextsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomLoginTextsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomLoginTextsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomLoginTextsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomLoginTextsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomLoginTextsResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomPasswordChangeMessageTextRequestFlag struct {
	*SetCustomPasswordChangeMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomPasswordChangeMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomPasswordChangeMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomPasswordChangeMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomPasswordChangeMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomPasswordChangeMessageTextResponseFlag struct {
	*SetCustomPasswordChangeMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomPasswordChangeMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomPasswordChangeMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomPasswordChangeMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordChangeMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomPasswordChangeMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomPasswordResetMessageTextRequestFlag struct {
	*SetCustomPasswordResetMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomPasswordResetMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomPasswordResetMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomPasswordResetMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomPasswordResetMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomPasswordResetMessageTextResponseFlag struct {
	*SetCustomPasswordResetMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomPasswordResetMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomPasswordResetMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomPasswordResetMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordResetMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomPasswordResetMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomPasswordlessRegistrationMessageTextRequestFlag struct {
	*SetCustomPasswordlessRegistrationMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomPasswordlessRegistrationMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomPasswordlessRegistrationMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomPasswordlessRegistrationMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomPasswordlessRegistrationMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomPasswordlessRegistrationMessageTextResponseFlag struct {
	*SetCustomPasswordlessRegistrationMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomPasswordlessRegistrationMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomPasswordlessRegistrationMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomPasswordlessRegistrationMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomPasswordlessRegistrationMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomPasswordlessRegistrationMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifyEmailMessageTextRequestFlag struct {
	*SetCustomVerifyEmailMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomVerifyEmailMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifyEmailMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifyEmailMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomVerifyEmailMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifyEmailMessageTextResponseFlag struct {
	*SetCustomVerifyEmailMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomVerifyEmailMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifyEmailMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifyEmailMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomVerifyEmailMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifyEmailOTPMessageTextRequestFlag struct {
	*SetCustomVerifyEmailOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomVerifyEmailOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifyEmailOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifyEmailOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomVerifyEmailOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifyEmailOTPMessageTextResponseFlag struct {
	*SetCustomVerifyEmailOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomVerifyEmailOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifyEmailOTPMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifyEmailOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyEmailOTPMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomVerifyEmailOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifyPhoneMessageTextRequestFlag struct {
	*SetCustomVerifyPhoneMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag   *cli_client.StringParser
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
}

func (x *SetCustomVerifyPhoneMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifyPhoneMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifyPhoneMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.titleFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextRequest.FooterText = *x.footerTextFlag.Value
	}
}

func (x *SetCustomVerifyPhoneMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifyPhoneMessageTextResponseFlag struct {
	*SetCustomVerifyPhoneMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomVerifyPhoneMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifyPhoneMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifyPhoneMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomVerifyPhoneMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomVerifyPhoneMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifySMSOTPMessageTextRequestFlag struct {
	*SetCustomVerifySMSOTPMessageTextRequest

	changed bool
	set     *pflag.FlagSet

	languageFlag *cli_client.StringParser
	textFlag     *cli_client.StringParser
}

func (x *SetCustomVerifySMSOTPMessageTextRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifySMSOTPMessageTextRequest", pflag.ContinueOnError)

	x.languageFlag = cli_client.NewStringParser(x.set, "language", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifySMSOTPMessageTextRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.languageFlag.Changed() {
		x.changed = true
		x.SetCustomVerifySMSOTPMessageTextRequest.Language = *x.languageFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.SetCustomVerifySMSOTPMessageTextRequest.Text = *x.textFlag.Value
	}
}

func (x *SetCustomVerifySMSOTPMessageTextRequestFlag) Changed() bool {
	return x.changed
}

type SetCustomVerifySMSOTPMessageTextResponseFlag struct {
	*SetCustomVerifySMSOTPMessageTextResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetCustomVerifySMSOTPMessageTextResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetCustomVerifySMSOTPMessageTextResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetCustomVerifySMSOTPMessageTextResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetCustomVerifySMSOTPMessageTextResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetCustomVerifySMSOTPMessageTextResponseFlag) Changed() bool {
	return x.changed
}

type SetHumanInitialPasswordRequestFlag struct {
	*SetHumanInitialPasswordRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag   *cli_client.StringParser
	passwordFlag *cli_client.StringParser
}

func (x *SetHumanInitialPasswordRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanInitialPasswordRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	parent.AddFlagSet(x.set)
}

func (x *SetHumanInitialPasswordRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SetHumanInitialPasswordRequest.UserId = *x.userIdFlag.Value
	}
	if x.passwordFlag.Changed() {
		x.changed = true
		x.SetHumanInitialPasswordRequest.Password = *x.passwordFlag.Value
	}
}

func (x *SetHumanInitialPasswordRequestFlag) Changed() bool {
	return x.changed
}

type SetHumanInitialPasswordResponseFlag struct {
	*SetHumanInitialPasswordResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetHumanInitialPasswordResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanInitialPasswordResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetHumanInitialPasswordResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetHumanInitialPasswordResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetHumanInitialPasswordResponseFlag) Changed() bool {
	return x.changed
}

type SetHumanPasswordRequestFlag struct {
	*SetHumanPasswordRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag           *cli_client.StringParser
	passwordFlag         *cli_client.StringParser
	noChangeRequiredFlag *cli_client.BoolParser
}

func (x *SetHumanPasswordRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanPasswordRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.passwordFlag = cli_client.NewStringParser(x.set, "password", "")
	x.noChangeRequiredFlag = cli_client.NewBoolParser(x.set, "no-change-required", "")
	parent.AddFlagSet(x.set)
}

func (x *SetHumanPasswordRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.SetHumanPasswordRequest.UserId = *x.userIdFlag.Value
	}
	if x.passwordFlag.Changed() {
		x.changed = true
		x.SetHumanPasswordRequest.Password = *x.passwordFlag.Value
	}
	if x.noChangeRequiredFlag.Changed() {
		x.changed = true
		x.SetHumanPasswordRequest.NoChangeRequired = *x.noChangeRequiredFlag.Value
	}
}

func (x *SetHumanPasswordRequestFlag) Changed() bool {
	return x.changed
}

type SetHumanPasswordResponseFlag struct {
	*SetHumanPasswordResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetHumanPasswordResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetHumanPasswordResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetHumanPasswordResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetHumanPasswordResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetHumanPasswordResponseFlag) Changed() bool {
	return x.changed
}

type SetOrgMetadataRequestFlag struct {
	*SetOrgMetadataRequest

	changed bool
	set     *pflag.FlagSet

	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *SetOrgMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetOrgMetadataRequest", pflag.ContinueOnError)

	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *SetOrgMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.keyFlag.Changed() {
		x.changed = true
		x.SetOrgMetadataRequest.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.SetOrgMetadataRequest.Value = *x.valueFlag.Value
	}
}

func (x *SetOrgMetadataRequestFlag) Changed() bool {
	return x.changed
}

type SetOrgMetadataResponseFlag struct {
	*SetOrgMetadataResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetOrgMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetOrgMetadataResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetOrgMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetOrgMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetOrgMetadataResponseFlag) Changed() bool {
	return x.changed
}

type SetPrimaryOrgDomainRequestFlag struct {
	*SetPrimaryOrgDomainRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
}

func (x *SetPrimaryOrgDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPrimaryOrgDomainRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *SetPrimaryOrgDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.SetPrimaryOrgDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *SetPrimaryOrgDomainRequestFlag) Changed() bool {
	return x.changed
}

type SetPrimaryOrgDomainResponseFlag struct {
	*SetPrimaryOrgDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetPrimaryOrgDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetPrimaryOrgDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetPrimaryOrgDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetPrimaryOrgDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetPrimaryOrgDomainResponseFlag) Changed() bool {
	return x.changed
}

type SetTriggerActionsRequestFlag struct {
	*SetTriggerActionsRequest

	changed bool
	set     *pflag.FlagSet

	flowTypeFlag    *cli_client.StringParser
	triggerTypeFlag *cli_client.StringParser
	actionIdsFlag   *cli_client.StringSliceParser
}

func (x *SetTriggerActionsRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetTriggerActionsRequest", pflag.ContinueOnError)

	x.flowTypeFlag = cli_client.NewStringParser(x.set, "flow-type", "")
	x.triggerTypeFlag = cli_client.NewStringParser(x.set, "trigger-type", "")
	x.actionIdsFlag = cli_client.NewStringSliceParser(x.set, "action-ids", "")
	parent.AddFlagSet(x.set)
}

func (x *SetTriggerActionsRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.flowTypeFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsRequest.FlowType = *x.flowTypeFlag.Value
	}
	if x.triggerTypeFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsRequest.TriggerType = *x.triggerTypeFlag.Value
	}
	if x.actionIdsFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsRequest.ActionIds = *x.actionIdsFlag.Value
	}
}

func (x *SetTriggerActionsRequestFlag) Changed() bool {
	return x.changed
}

type SetTriggerActionsResponseFlag struct {
	*SetTriggerActionsResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetTriggerActionsResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetTriggerActionsResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetTriggerActionsResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetTriggerActionsResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetTriggerActionsResponseFlag) Changed() bool {
	return x.changed
}

type SetUserMetadataRequestFlag struct {
	*SetUserMetadataRequest

	changed bool
	set     *pflag.FlagSet

	idFlag    *cli_client.StringParser
	keyFlag   *cli_client.StringParser
	valueFlag *cli_client.BytesParser
}

func (x *SetUserMetadataRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUserMetadataRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.keyFlag = cli_client.NewStringParser(x.set, "key", "")
	x.valueFlag = cli_client.NewBytesParser(x.set, "value", "")
	parent.AddFlagSet(x.set)
}

func (x *SetUserMetadataRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.SetUserMetadataRequest.Id = *x.idFlag.Value
	}
	if x.keyFlag.Changed() {
		x.changed = true
		x.SetUserMetadataRequest.Key = *x.keyFlag.Value
	}
	if x.valueFlag.Changed() {
		x.changed = true
		x.SetUserMetadataRequest.Value = *x.valueFlag.Value
	}
}

func (x *SetUserMetadataRequestFlag) Changed() bool {
	return x.changed
}

type SetUserMetadataResponseFlag struct {
	*SetUserMetadataResponse

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
}

func (x *SetUserMetadataResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SetUserMetadataResponse", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *SetUserMetadataResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.SetUserMetadataResponse.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.SetUserMetadataResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *SetUserMetadataResponseFlag) Changed() bool {
	return x.changed
}

type UnlockUserRequestFlag struct {
	*UnlockUserRequest

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *UnlockUserRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UnlockUserRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *UnlockUserRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UnlockUserRequest.Id = *x.idFlag.Value
	}
}

func (x *UnlockUserRequestFlag) Changed() bool {
	return x.changed
}

type UnlockUserResponseFlag struct {
	*UnlockUserResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UnlockUserResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UnlockUserResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UnlockUserResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UnlockUserResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UnlockUserResponseFlag) Changed() bool {
	return x.changed
}

type UpdateAPIAppConfigRequestFlag struct {
	*UpdateAPIAppConfigRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag      *cli_client.StringParser
	appIdFlag          *cli_client.StringParser
	authMethodTypeFlag *cli_client.EnumParser[app.APIAuthMethodType]
}

func (x *UpdateAPIAppConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAPIAppConfigRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.authMethodTypeFlag = cli_client.NewEnumParser[app.APIAuthMethodType](x.set, "auth-method-type", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateAPIAppConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateAPIAppConfigRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.UpdateAPIAppConfigRequest.AppId = *x.appIdFlag.Value
	}
	if x.authMethodTypeFlag.Changed() {
		x.changed = true
		x.UpdateAPIAppConfigRequest.AuthMethodType = *x.authMethodTypeFlag.Value
	}
}

func (x *UpdateAPIAppConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateAPIAppConfigResponseFlag struct {
	*UpdateAPIAppConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateAPIAppConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAPIAppConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAPIAppConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateAPIAppConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateAPIAppConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateActionRequestFlag struct {
	*UpdateActionRequest

	changed bool
	set     *pflag.FlagSet

	idFlag            *cli_client.StringParser
	nameFlag          *cli_client.StringParser
	scriptFlag        *cli_client.StringParser
	timeoutFlag       *cli_client.DurationParser
	allowedToFailFlag *cli_client.BoolParser
}

func (x *UpdateActionRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateActionRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.scriptFlag = cli_client.NewStringParser(x.set, "script", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.allowedToFailFlag = cli_client.NewBoolParser(x.set, "allowed-to-fail", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateActionRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateActionRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateActionRequest.Name = *x.nameFlag.Value
	}
	if x.scriptFlag.Changed() {
		x.changed = true
		x.UpdateActionRequest.Script = *x.scriptFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.UpdateActionRequest.Timeout = x.timeoutFlag.Value
	}
	if x.allowedToFailFlag.Changed() {
		x.changed = true
		x.UpdateActionRequest.AllowedToFail = *x.allowedToFailFlag.Value
	}
}

func (x *UpdateActionRequestFlag) Changed() bool {
	return x.changed
}

type UpdateActionResponseFlag struct {
	*UpdateActionResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateActionResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateActionResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateActionResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateActionResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateActionResponseFlag) Changed() bool {
	return x.changed
}

type UpdateAppRequestFlag struct {
	*UpdateAppRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	appIdFlag     *cli_client.StringParser
	nameFlag      *cli_client.StringParser
}

func (x *UpdateAppRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAppRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateAppRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateAppRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.UpdateAppRequest.AppId = *x.appIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateAppRequest.Name = *x.nameFlag.Value
	}
}

func (x *UpdateAppRequestFlag) Changed() bool {
	return x.changed
}

type UpdateAppResponseFlag struct {
	*UpdateAppResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateAppResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAppResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAppResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateAppResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateAppResponseFlag) Changed() bool {
	return x.changed
}

type UpdateAppleProviderRequestFlag struct {
	*UpdateAppleProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	teamIdFlag          *cli_client.StringParser
	keyIdFlag           *cli_client.StringParser
	privateKeyFlag      *cli_client.BytesParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateAppleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAppleProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.teamIdFlag = cli_client.NewStringParser(x.set, "team-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.privateKeyFlag = cli_client.NewBytesParser(x.set, "private-key", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAppleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.teamIdFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.TeamId = *x.teamIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.KeyId = *x.keyIdFlag.Value
	}
	if x.privateKeyFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.PrivateKey = *x.privateKeyFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateAppleProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateAppleProviderResponseFlag struct {
	*UpdateAppleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateAppleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAppleProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAppleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateAppleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateAppleProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateAzureADProviderRequestFlag struct {
	*UpdateAzureADProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	tenantFlag          *idp.AzureADTenantFlag
	emailVerifiedFlag   *cli_client.BoolParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateAzureADProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAzureADProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.emailVerifiedFlag = cli_client.NewBoolParser(x.set, "email-verified", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.tenantFlag = &idp.AzureADTenantFlag{AzureADTenant: new(idp.AzureADTenant)}
	x.tenantFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAzureADProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "tenant", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("tenant"); flagIdx != nil {
		x.tenantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}

	if x.tenantFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Tenant = x.tenantFlag.AzureADTenant
	}

	if x.emailVerifiedFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.EmailVerified = *x.emailVerifiedFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateAzureADProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateAzureADProviderResponseFlag struct {
	*UpdateAzureADProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateAzureADProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateAzureADProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateAzureADProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateAzureADProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateAzureADProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomLabelPolicyRequestFlag struct {
	*UpdateCustomLabelPolicyRequest

	changed bool
	set     *pflag.FlagSet

	primaryColorFlag        *cli_client.StringParser
	hideLoginNameSuffixFlag *cli_client.BoolParser
	warnColorFlag           *cli_client.StringParser
	backgroundColorFlag     *cli_client.StringParser
	fontColorFlag           *cli_client.StringParser
	primaryColorDarkFlag    *cli_client.StringParser
	backgroundColorDarkFlag *cli_client.StringParser
	warnColorDarkFlag       *cli_client.StringParser
	fontColorDarkFlag       *cli_client.StringParser
	disableWatermarkFlag    *cli_client.BoolParser
	themeModeFlag           *cli_client.EnumParser[policy.ThemeMode]
}

func (x *UpdateCustomLabelPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomLabelPolicyRequest", pflag.ContinueOnError)

	x.primaryColorFlag = cli_client.NewStringParser(x.set, "primary-color", "")
	x.hideLoginNameSuffixFlag = cli_client.NewBoolParser(x.set, "hide-login-name-suffix", "")
	x.warnColorFlag = cli_client.NewStringParser(x.set, "warn-color", "")
	x.backgroundColorFlag = cli_client.NewStringParser(x.set, "background-color", "")
	x.fontColorFlag = cli_client.NewStringParser(x.set, "font-color", "")
	x.primaryColorDarkFlag = cli_client.NewStringParser(x.set, "primary-color-dark", "")
	x.backgroundColorDarkFlag = cli_client.NewStringParser(x.set, "background-color-dark", "")
	x.warnColorDarkFlag = cli_client.NewStringParser(x.set, "warn-color-dark", "")
	x.fontColorDarkFlag = cli_client.NewStringParser(x.set, "font-color-dark", "")
	x.disableWatermarkFlag = cli_client.NewBoolParser(x.set, "disable-watermark", "")
	x.themeModeFlag = cli_client.NewEnumParser[policy.ThemeMode](x.set, "theme-mode", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomLabelPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.primaryColorFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.PrimaryColor = *x.primaryColorFlag.Value
	}
	if x.hideLoginNameSuffixFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.HideLoginNameSuffix = *x.hideLoginNameSuffixFlag.Value
	}
	if x.warnColorFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.WarnColor = *x.warnColorFlag.Value
	}
	if x.backgroundColorFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.BackgroundColor = *x.backgroundColorFlag.Value
	}
	if x.fontColorFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.FontColor = *x.fontColorFlag.Value
	}
	if x.primaryColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.PrimaryColorDark = *x.primaryColorDarkFlag.Value
	}
	if x.backgroundColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.BackgroundColorDark = *x.backgroundColorDarkFlag.Value
	}
	if x.warnColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.WarnColorDark = *x.warnColorDarkFlag.Value
	}
	if x.fontColorDarkFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.FontColorDark = *x.fontColorDarkFlag.Value
	}
	if x.disableWatermarkFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.DisableWatermark = *x.disableWatermarkFlag.Value
	}
	if x.themeModeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyRequest.ThemeMode = *x.themeModeFlag.Value
	}
}

func (x *UpdateCustomLabelPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomLabelPolicyResponseFlag struct {
	*UpdateCustomLabelPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomLabelPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomLabelPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomLabelPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomLabelPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomLabelPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomLockoutPolicyRequestFlag struct {
	*UpdateCustomLockoutPolicyRequest

	changed bool
	set     *pflag.FlagSet

	maxPasswordAttemptsFlag *cli_client.Uint32Parser
}

func (x *UpdateCustomLockoutPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomLockoutPolicyRequest", pflag.ContinueOnError)

	x.maxPasswordAttemptsFlag = cli_client.NewUint32Parser(x.set, "max-password-attempts", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomLockoutPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.maxPasswordAttemptsFlag.Changed() {
		x.changed = true
		x.UpdateCustomLockoutPolicyRequest.MaxPasswordAttempts = *x.maxPasswordAttemptsFlag.Value
	}
}

func (x *UpdateCustomLockoutPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomLockoutPolicyResponseFlag struct {
	*UpdateCustomLockoutPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomLockoutPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomLockoutPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomLockoutPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomLockoutPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomLockoutPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomLoginPolicyRequestFlag struct {
	*UpdateCustomLoginPolicyRequest

	changed bool
	set     *pflag.FlagSet

	allowUsernamePasswordFlag      *cli_client.BoolParser
	allowRegisterFlag              *cli_client.BoolParser
	allowExternalIdpFlag           *cli_client.BoolParser
	forceMfaFlag                   *cli_client.BoolParser
	passwordlessTypeFlag           *cli_client.EnumParser[policy.PasswordlessType]
	hidePasswordResetFlag          *cli_client.BoolParser
	ignoreUnknownUsernamesFlag     *cli_client.BoolParser
	defaultRedirectUriFlag         *cli_client.StringParser
	passwordCheckLifetimeFlag      *cli_client.DurationParser
	externalLoginCheckLifetimeFlag *cli_client.DurationParser
	mfaInitSkipLifetimeFlag        *cli_client.DurationParser
	secondFactorCheckLifetimeFlag  *cli_client.DurationParser
	multiFactorCheckLifetimeFlag   *cli_client.DurationParser
	allowDomainDiscoveryFlag       *cli_client.BoolParser
	disableLoginWithEmailFlag      *cli_client.BoolParser
	disableLoginWithPhoneFlag      *cli_client.BoolParser
	forceMfaLocalOnlyFlag          *cli_client.BoolParser
}

func (x *UpdateCustomLoginPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomLoginPolicyRequest", pflag.ContinueOnError)

	x.allowUsernamePasswordFlag = cli_client.NewBoolParser(x.set, "allow-username-password", "")
	x.allowRegisterFlag = cli_client.NewBoolParser(x.set, "allow-register", "")
	x.allowExternalIdpFlag = cli_client.NewBoolParser(x.set, "allow-external-idp", "")
	x.forceMfaFlag = cli_client.NewBoolParser(x.set, "force-mfa", "")
	x.passwordlessTypeFlag = cli_client.NewEnumParser[policy.PasswordlessType](x.set, "passwordless-type", "")
	x.hidePasswordResetFlag = cli_client.NewBoolParser(x.set, "hide-password-reset", "")
	x.ignoreUnknownUsernamesFlag = cli_client.NewBoolParser(x.set, "ignore-unknown-usernames", "")
	x.defaultRedirectUriFlag = cli_client.NewStringParser(x.set, "default-redirect-uri", "")
	x.passwordCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "password-check-lifetime", "")
	x.externalLoginCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "external-login-check-lifetime", "")
	x.mfaInitSkipLifetimeFlag = cli_client.NewDurationParser(x.set, "mfa-init-skip-lifetime", "")
	x.secondFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "second-factor-check-lifetime", "")
	x.multiFactorCheckLifetimeFlag = cli_client.NewDurationParser(x.set, "multi-factor-check-lifetime", "")
	x.allowDomainDiscoveryFlag = cli_client.NewBoolParser(x.set, "allow-domain-discovery", "")
	x.disableLoginWithEmailFlag = cli_client.NewBoolParser(x.set, "disable-login-with-email", "")
	x.disableLoginWithPhoneFlag = cli_client.NewBoolParser(x.set, "disable-login-with-phone", "")
	x.forceMfaLocalOnlyFlag = cli_client.NewBoolParser(x.set, "force-mfa-local-only", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomLoginPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.allowUsernamePasswordFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.AllowUsernamePassword = *x.allowUsernamePasswordFlag.Value
	}
	if x.allowRegisterFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.AllowRegister = *x.allowRegisterFlag.Value
	}
	if x.allowExternalIdpFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.AllowExternalIdp = *x.allowExternalIdpFlag.Value
	}
	if x.forceMfaFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.ForceMfa = *x.forceMfaFlag.Value
	}
	if x.passwordlessTypeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.PasswordlessType = *x.passwordlessTypeFlag.Value
	}
	if x.hidePasswordResetFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.HidePasswordReset = *x.hidePasswordResetFlag.Value
	}
	if x.ignoreUnknownUsernamesFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.IgnoreUnknownUsernames = *x.ignoreUnknownUsernamesFlag.Value
	}
	if x.defaultRedirectUriFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.DefaultRedirectUri = *x.defaultRedirectUriFlag.Value
	}
	if x.passwordCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.PasswordCheckLifetime = x.passwordCheckLifetimeFlag.Value
	}
	if x.externalLoginCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.ExternalLoginCheckLifetime = x.externalLoginCheckLifetimeFlag.Value
	}
	if x.mfaInitSkipLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.MfaInitSkipLifetime = x.mfaInitSkipLifetimeFlag.Value
	}
	if x.secondFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.SecondFactorCheckLifetime = x.secondFactorCheckLifetimeFlag.Value
	}
	if x.multiFactorCheckLifetimeFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.MultiFactorCheckLifetime = x.multiFactorCheckLifetimeFlag.Value
	}
	if x.allowDomainDiscoveryFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.AllowDomainDiscovery = *x.allowDomainDiscoveryFlag.Value
	}
	if x.disableLoginWithEmailFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.DisableLoginWithEmail = *x.disableLoginWithEmailFlag.Value
	}
	if x.disableLoginWithPhoneFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.DisableLoginWithPhone = *x.disableLoginWithPhoneFlag.Value
	}
	if x.forceMfaLocalOnlyFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyRequest.ForceMfaLocalOnly = *x.forceMfaLocalOnlyFlag.Value
	}
}

func (x *UpdateCustomLoginPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomLoginPolicyResponseFlag struct {
	*UpdateCustomLoginPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomLoginPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomLoginPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomLoginPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomLoginPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomLoginPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomNotificationPolicyRequestFlag struct {
	*UpdateCustomNotificationPolicyRequest

	changed bool
	set     *pflag.FlagSet

	passwordChangeFlag *cli_client.BoolParser
}

func (x *UpdateCustomNotificationPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomNotificationPolicyRequest", pflag.ContinueOnError)

	x.passwordChangeFlag = cli_client.NewBoolParser(x.set, "password-change", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomNotificationPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.passwordChangeFlag.Changed() {
		x.changed = true
		x.UpdateCustomNotificationPolicyRequest.PasswordChange = *x.passwordChangeFlag.Value
	}
}

func (x *UpdateCustomNotificationPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomNotificationPolicyResponseFlag struct {
	*UpdateCustomNotificationPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomNotificationPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomNotificationPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomNotificationPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomNotificationPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomNotificationPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomPasswordAgePolicyRequestFlag struct {
	*UpdateCustomPasswordAgePolicyRequest

	changed bool
	set     *pflag.FlagSet

	maxAgeDaysFlag     *cli_client.Uint32Parser
	expireWarnDaysFlag *cli_client.Uint32Parser
}

func (x *UpdateCustomPasswordAgePolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomPasswordAgePolicyRequest", pflag.ContinueOnError)

	x.maxAgeDaysFlag = cli_client.NewUint32Parser(x.set, "max-age-days", "")
	x.expireWarnDaysFlag = cli_client.NewUint32Parser(x.set, "expire-warn-days", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomPasswordAgePolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.maxAgeDaysFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordAgePolicyRequest.MaxAgeDays = *x.maxAgeDaysFlag.Value
	}
	if x.expireWarnDaysFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordAgePolicyRequest.ExpireWarnDays = *x.expireWarnDaysFlag.Value
	}
}

func (x *UpdateCustomPasswordAgePolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomPasswordAgePolicyResponseFlag struct {
	*UpdateCustomPasswordAgePolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomPasswordAgePolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomPasswordAgePolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomPasswordAgePolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordAgePolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomPasswordAgePolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomPasswordComplexityPolicyRequestFlag struct {
	*UpdateCustomPasswordComplexityPolicyRequest

	changed bool
	set     *pflag.FlagSet

	minLengthFlag    *cli_client.Uint64Parser
	hasUppercaseFlag *cli_client.BoolParser
	hasLowercaseFlag *cli_client.BoolParser
	hasNumberFlag    *cli_client.BoolParser
	hasSymbolFlag    *cli_client.BoolParser
}

func (x *UpdateCustomPasswordComplexityPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomPasswordComplexityPolicyRequest", pflag.ContinueOnError)

	x.minLengthFlag = cli_client.NewUint64Parser(x.set, "min-length", "")
	x.hasUppercaseFlag = cli_client.NewBoolParser(x.set, "has-uppercase", "")
	x.hasLowercaseFlag = cli_client.NewBoolParser(x.set, "has-lowercase", "")
	x.hasNumberFlag = cli_client.NewBoolParser(x.set, "has-number", "")
	x.hasSymbolFlag = cli_client.NewBoolParser(x.set, "has-symbol", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomPasswordComplexityPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.minLengthFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordComplexityPolicyRequest.MinLength = *x.minLengthFlag.Value
	}
	if x.hasUppercaseFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordComplexityPolicyRequest.HasUppercase = *x.hasUppercaseFlag.Value
	}
	if x.hasLowercaseFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordComplexityPolicyRequest.HasLowercase = *x.hasLowercaseFlag.Value
	}
	if x.hasNumberFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordComplexityPolicyRequest.HasNumber = *x.hasNumberFlag.Value
	}
	if x.hasSymbolFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordComplexityPolicyRequest.HasSymbol = *x.hasSymbolFlag.Value
	}
}

func (x *UpdateCustomPasswordComplexityPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomPasswordComplexityPolicyResponseFlag struct {
	*UpdateCustomPasswordComplexityPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomPasswordComplexityPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomPasswordComplexityPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomPasswordComplexityPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomPasswordComplexityPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomPasswordComplexityPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateCustomPrivacyPolicyRequestFlag struct {
	*UpdateCustomPrivacyPolicyRequest

	changed bool
	set     *pflag.FlagSet

	tosLinkFlag      *cli_client.StringParser
	privacyLinkFlag  *cli_client.StringParser
	helpLinkFlag     *cli_client.StringParser
	supportEmailFlag *cli_client.StringParser
}

func (x *UpdateCustomPrivacyPolicyRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomPrivacyPolicyRequest", pflag.ContinueOnError)

	x.tosLinkFlag = cli_client.NewStringParser(x.set, "tos-link", "")
	x.privacyLinkFlag = cli_client.NewStringParser(x.set, "privacy-link", "")
	x.helpLinkFlag = cli_client.NewStringParser(x.set, "help-link", "")
	x.supportEmailFlag = cli_client.NewStringParser(x.set, "support-email", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomPrivacyPolicyRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tosLinkFlag.Changed() {
		x.changed = true
		x.UpdateCustomPrivacyPolicyRequest.TosLink = *x.tosLinkFlag.Value
	}
	if x.privacyLinkFlag.Changed() {
		x.changed = true
		x.UpdateCustomPrivacyPolicyRequest.PrivacyLink = *x.privacyLinkFlag.Value
	}
	if x.helpLinkFlag.Changed() {
		x.changed = true
		x.UpdateCustomPrivacyPolicyRequest.HelpLink = *x.helpLinkFlag.Value
	}
	if x.supportEmailFlag.Changed() {
		x.changed = true
		x.UpdateCustomPrivacyPolicyRequest.SupportEmail = *x.supportEmailFlag.Value
	}
}

func (x *UpdateCustomPrivacyPolicyRequestFlag) Changed() bool {
	return x.changed
}

type UpdateCustomPrivacyPolicyResponseFlag struct {
	*UpdateCustomPrivacyPolicyResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateCustomPrivacyPolicyResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateCustomPrivacyPolicyResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateCustomPrivacyPolicyResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateCustomPrivacyPolicyResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateCustomPrivacyPolicyResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOAuthProviderRequestFlag struct {
	*UpdateGenericOAuthProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                    *cli_client.StringParser
	nameFlag                  *cli_client.StringParser
	clientIdFlag              *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	idAttributeFlag           *cli_client.StringParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *UpdateGenericOAuthProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOAuthProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.idAttributeFlag = cli_client.NewStringParser(x.set, "id-attribute", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOAuthProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.Scopes = *x.scopesFlag.Value
	}
	if x.idAttributeFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.IdAttribute = *x.idAttributeFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGenericOAuthProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOAuthProviderResponseFlag struct {
	*UpdateGenericOAuthProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGenericOAuthProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOAuthProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOAuthProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOAuthProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGenericOAuthProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOIDCProviderRequestFlag struct {
	*UpdateGenericOIDCProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag               *cli_client.StringParser
	nameFlag             *cli_client.StringParser
	issuerFlag           *cli_client.StringParser
	clientIdFlag         *cli_client.StringParser
	clientSecretFlag     *cli_client.StringParser
	scopesFlag           *cli_client.StringSliceParser
	providerOptionsFlag  *idp.OptionsFlag
	isIdTokenMappingFlag *cli_client.BoolParser
}

func (x *UpdateGenericOIDCProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOIDCProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.isIdTokenMappingFlag = cli_client.NewBoolParser(x.set, "is-id-token-mapping", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOIDCProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	if x.isIdTokenMappingFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderRequest.IsIdTokenMapping = *x.isIdTokenMappingFlag.Value
	}
}

func (x *UpdateGenericOIDCProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGenericOIDCProviderResponseFlag struct {
	*UpdateGenericOIDCProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGenericOIDCProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGenericOIDCProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGenericOIDCProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGenericOIDCProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGenericOIDCProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubEnterpriseServerProviderRequestFlag struct {
	*UpdateGitHubEnterpriseServerProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                    *cli_client.StringParser
	nameFlag                  *cli_client.StringParser
	clientIdFlag              *cli_client.StringParser
	clientSecretFlag          *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	providerOptionsFlag       *idp.OptionsFlag
}

func (x *UpdateGitHubEnterpriseServerProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubEnterpriseServerProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubEnterpriseServerProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitHubEnterpriseServerProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubEnterpriseServerProviderResponseFlag struct {
	*UpdateGitHubEnterpriseServerProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitHubEnterpriseServerProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubEnterpriseServerProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubEnterpriseServerProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubEnterpriseServerProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitHubEnterpriseServerProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubProviderRequestFlag struct {
	*UpdateGitHubProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGitHubProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitHubProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitHubProviderResponseFlag struct {
	*UpdateGitHubProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitHubProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitHubProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitHubProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitHubProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitHubProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabProviderRequestFlag struct {
	*UpdateGitLabProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGitLabProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitLabProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabProviderResponseFlag struct {
	*UpdateGitLabProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitLabProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitLabProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabSelfHostedProviderRequestFlag struct {
	*UpdateGitLabSelfHostedProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	issuerFlag          *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGitLabSelfHostedProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabSelfHostedProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabSelfHostedProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Id = *x.idFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGitLabSelfHostedProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGitLabSelfHostedProviderResponseFlag struct {
	*UpdateGitLabSelfHostedProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGitLabSelfHostedProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGitLabSelfHostedProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGitLabSelfHostedProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGitLabSelfHostedProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGitLabSelfHostedProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateGoogleProviderRequestFlag struct {
	*UpdateGoogleProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	clientIdFlag        *cli_client.StringParser
	clientSecretFlag    *cli_client.StringParser
	scopesFlag          *cli_client.StringSliceParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateGoogleProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGoogleProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGoogleProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.Name = *x.nameFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.Scopes = *x.scopesFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateGoogleProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateGoogleProviderResponseFlag struct {
	*UpdateGoogleProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateGoogleProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateGoogleProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateGoogleProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateGoogleProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateGoogleProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateHumanEmailRequestFlag struct {
	*UpdateHumanEmailRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag          *cli_client.StringParser
	emailFlag           *cli_client.StringParser
	isEmailVerifiedFlag *cli_client.BoolParser
}

func (x *UpdateHumanEmailRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanEmailRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.emailFlag = cli_client.NewStringParser(x.set, "email", "")
	x.isEmailVerifiedFlag = cli_client.NewBoolParser(x.set, "is-email-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanEmailRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateHumanEmailRequest.UserId = *x.userIdFlag.Value
	}
	if x.emailFlag.Changed() {
		x.changed = true
		x.UpdateHumanEmailRequest.Email = *x.emailFlag.Value
	}
	if x.isEmailVerifiedFlag.Changed() {
		x.changed = true
		x.UpdateHumanEmailRequest.IsEmailVerified = *x.isEmailVerifiedFlag.Value
	}
}

func (x *UpdateHumanEmailRequestFlag) Changed() bool {
	return x.changed
}

type UpdateHumanEmailResponseFlag struct {
	*UpdateHumanEmailResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateHumanEmailResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanEmailResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanEmailResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateHumanEmailResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateHumanEmailResponseFlag) Changed() bool {
	return x.changed
}

type UpdateHumanPhoneRequestFlag struct {
	*UpdateHumanPhoneRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag          *cli_client.StringParser
	phoneFlag           *cli_client.StringParser
	isPhoneVerifiedFlag *cli_client.BoolParser
}

func (x *UpdateHumanPhoneRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanPhoneRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.phoneFlag = cli_client.NewStringParser(x.set, "phone", "")
	x.isPhoneVerifiedFlag = cli_client.NewBoolParser(x.set, "is-phone-verified", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanPhoneRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateHumanPhoneRequest.UserId = *x.userIdFlag.Value
	}
	if x.phoneFlag.Changed() {
		x.changed = true
		x.UpdateHumanPhoneRequest.Phone = *x.phoneFlag.Value
	}
	if x.isPhoneVerifiedFlag.Changed() {
		x.changed = true
		x.UpdateHumanPhoneRequest.IsPhoneVerified = *x.isPhoneVerifiedFlag.Value
	}
}

func (x *UpdateHumanPhoneRequestFlag) Changed() bool {
	return x.changed
}

type UpdateHumanPhoneResponseFlag struct {
	*UpdateHumanPhoneResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateHumanPhoneResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanPhoneResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanPhoneResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateHumanPhoneResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateHumanPhoneResponseFlag) Changed() bool {
	return x.changed
}

type UpdateHumanProfileRequestFlag struct {
	*UpdateHumanProfileRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag            *cli_client.StringParser
	firstNameFlag         *cli_client.StringParser
	lastNameFlag          *cli_client.StringParser
	nickNameFlag          *cli_client.StringParser
	displayNameFlag       *cli_client.StringParser
	preferredLanguageFlag *cli_client.StringParser
	genderFlag            *cli_client.EnumParser[user.Gender]
}

func (x *UpdateHumanProfileRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanProfileRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.firstNameFlag = cli_client.NewStringParser(x.set, "first-name", "")
	x.lastNameFlag = cli_client.NewStringParser(x.set, "last-name", "")
	x.nickNameFlag = cli_client.NewStringParser(x.set, "nick-name", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.preferredLanguageFlag = cli_client.NewStringParser(x.set, "preferred-language", "")
	x.genderFlag = cli_client.NewEnumParser[user.Gender](x.set, "gender", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanProfileRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.UserId = *x.userIdFlag.Value
	}
	if x.firstNameFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.FirstName = *x.firstNameFlag.Value
	}
	if x.lastNameFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.LastName = *x.lastNameFlag.Value
	}
	if x.nickNameFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.NickName = *x.nickNameFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.DisplayName = *x.displayNameFlag.Value
	}
	if x.preferredLanguageFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.PreferredLanguage = *x.preferredLanguageFlag.Value
	}
	if x.genderFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileRequest.Gender = *x.genderFlag.Value
	}
}

func (x *UpdateHumanProfileRequestFlag) Changed() bool {
	return x.changed
}

type UpdateHumanProfileResponseFlag struct {
	*UpdateHumanProfileResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateHumanProfileResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateHumanProfileResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateHumanProfileResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateHumanProfileResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateHumanProfileResponseFlag) Changed() bool {
	return x.changed
}

type UpdateJWTProviderRequestFlag struct {
	*UpdateJWTProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag              *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	issuerFlag          *cli_client.StringParser
	jwtEndpointFlag     *cli_client.StringParser
	keysEndpointFlag    *cli_client.StringParser
	headerNameFlag      *cli_client.StringParser
	providerOptionsFlag *idp.OptionsFlag
}

func (x *UpdateJWTProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateJWTProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateJWTProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.Name = *x.nameFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.Issuer = *x.issuerFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.HeaderName = *x.headerNameFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateJWTProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateJWTProviderResponseFlag struct {
	*UpdateJWTProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateJWTProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateJWTProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateJWTProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateJWTProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateJWTProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateLDAPProviderRequestFlag struct {
	*UpdateLDAPProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                *cli_client.StringParser
	nameFlag              *cli_client.StringParser
	serversFlag           *cli_client.StringSliceParser
	startTlsFlag          *cli_client.BoolParser
	baseDnFlag            *cli_client.StringParser
	bindDnFlag            *cli_client.StringParser
	bindPasswordFlag      *cli_client.StringParser
	userBaseFlag          *cli_client.StringParser
	userObjectClassesFlag *cli_client.StringSliceParser
	userFiltersFlag       *cli_client.StringSliceParser
	timeoutFlag           *cli_client.DurationParser
	attributesFlag        *idp.LDAPAttributesFlag
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *UpdateLDAPProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLDAPProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.serversFlag = cli_client.NewStringSliceParser(x.set, "servers", "")
	x.startTlsFlag = cli_client.NewBoolParser(x.set, "start-tls", "")
	x.baseDnFlag = cli_client.NewStringParser(x.set, "base-dn", "")
	x.bindDnFlag = cli_client.NewStringParser(x.set, "bind-dn", "")
	x.bindPasswordFlag = cli_client.NewStringParser(x.set, "bind-password", "")
	x.userBaseFlag = cli_client.NewStringParser(x.set, "user-base", "")
	x.userObjectClassesFlag = cli_client.NewStringSliceParser(x.set, "user-object-classes", "")
	x.userFiltersFlag = cli_client.NewStringSliceParser(x.set, "user-filters", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.attributesFlag = &idp.LDAPAttributesFlag{LDAPAttributes: new(idp.LDAPAttributes)}
	x.attributesFlag.AddFlags(x.set)
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLDAPProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "attributes", "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("attributes"); flagIdx != nil {
		x.attributesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Name = *x.nameFlag.Value
	}
	if x.serversFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Servers = *x.serversFlag.Value
	}
	if x.startTlsFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.StartTls = *x.startTlsFlag.Value
	}
	if x.baseDnFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.BaseDn = *x.baseDnFlag.Value
	}
	if x.bindDnFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.BindDn = *x.bindDnFlag.Value
	}
	if x.bindPasswordFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.BindPassword = *x.bindPasswordFlag.Value
	}
	if x.userBaseFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.UserBase = *x.userBaseFlag.Value
	}
	if x.userObjectClassesFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.UserObjectClasses = *x.userObjectClassesFlag.Value
	}
	if x.userFiltersFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.UserFilters = *x.userFiltersFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Timeout = x.timeoutFlag.Value
	}

	if x.attributesFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.Attributes = x.attributesFlag.LDAPAttributes
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

}

func (x *UpdateLDAPProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateLDAPProviderResponseFlag struct {
	*UpdateLDAPProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateLDAPProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateLDAPProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateLDAPProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateLDAPProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateLDAPProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateMachineRequestFlag struct {
	*UpdateMachineRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag          *cli_client.StringParser
	descriptionFlag     *cli_client.StringParser
	nameFlag            *cli_client.StringParser
	accessTokenTypeFlag *cli_client.EnumParser[user.AccessTokenType]
}

func (x *UpdateMachineRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMachineRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.accessTokenTypeFlag = cli_client.NewEnumParser[user.AccessTokenType](x.set, "access-token-type", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateMachineRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateMachineRequest.UserId = *x.userIdFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.UpdateMachineRequest.Description = *x.descriptionFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateMachineRequest.Name = *x.nameFlag.Value
	}
	if x.accessTokenTypeFlag.Changed() {
		x.changed = true
		x.UpdateMachineRequest.AccessTokenType = *x.accessTokenTypeFlag.Value
	}
}

func (x *UpdateMachineRequestFlag) Changed() bool {
	return x.changed
}

type UpdateMachineResponseFlag struct {
	*UpdateMachineResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateMachineResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateMachineResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateMachineResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateMachineResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateMachineResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOIDCAppConfigRequestFlag struct {
	*UpdateOIDCAppConfigRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag                *cli_client.StringParser
	appIdFlag                    *cli_client.StringParser
	redirectUrisFlag             *cli_client.StringSliceParser
	responseTypesFlag            *cli_client.EnumSliceParser[app.OIDCResponseType]
	grantTypesFlag               *cli_client.EnumSliceParser[app.OIDCGrantType]
	appTypeFlag                  *cli_client.EnumParser[app.OIDCAppType]
	authMethodTypeFlag           *cli_client.EnumParser[app.OIDCAuthMethodType]
	postLogoutRedirectUrisFlag   *cli_client.StringSliceParser
	devModeFlag                  *cli_client.BoolParser
	accessTokenTypeFlag          *cli_client.EnumParser[app.OIDCTokenType]
	accessTokenRoleAssertionFlag *cli_client.BoolParser
	idTokenRoleAssertionFlag     *cli_client.BoolParser
	idTokenUserinfoAssertionFlag *cli_client.BoolParser
	clockSkewFlag                *cli_client.DurationParser
	additionalOriginsFlag        *cli_client.StringSliceParser
	skipNativeAppSuccessPageFlag *cli_client.BoolParser
}

func (x *UpdateOIDCAppConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOIDCAppConfigRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.redirectUrisFlag = cli_client.NewStringSliceParser(x.set, "redirect-uris", "")
	x.responseTypesFlag = cli_client.NewEnumSliceParser[app.OIDCResponseType](x.set, "response-types", "")
	x.grantTypesFlag = cli_client.NewEnumSliceParser[app.OIDCGrantType](x.set, "grant-types", "")
	x.appTypeFlag = cli_client.NewEnumParser[app.OIDCAppType](x.set, "app-type", "")
	x.authMethodTypeFlag = cli_client.NewEnumParser[app.OIDCAuthMethodType](x.set, "auth-method-type", "")
	x.postLogoutRedirectUrisFlag = cli_client.NewStringSliceParser(x.set, "post-logout-redirect-uris", "")
	x.devModeFlag = cli_client.NewBoolParser(x.set, "dev-mode", "")
	x.accessTokenTypeFlag = cli_client.NewEnumParser[app.OIDCTokenType](x.set, "access-token-type", "")
	x.accessTokenRoleAssertionFlag = cli_client.NewBoolParser(x.set, "access-token-role-assertion", "")
	x.idTokenRoleAssertionFlag = cli_client.NewBoolParser(x.set, "id-token-role-assertion", "")
	x.idTokenUserinfoAssertionFlag = cli_client.NewBoolParser(x.set, "id-token-userinfo-assertion", "")
	x.clockSkewFlag = cli_client.NewDurationParser(x.set, "clock-skew", "")
	x.additionalOriginsFlag = cli_client.NewStringSliceParser(x.set, "additional-origins", "")
	x.skipNativeAppSuccessPageFlag = cli_client.NewBoolParser(x.set, "skip-native-app-success-page", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOIDCAppConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.AppId = *x.appIdFlag.Value
	}
	if x.redirectUrisFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.RedirectUris = *x.redirectUrisFlag.Value
	}
	if x.responseTypesFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.ResponseTypes = *x.responseTypesFlag.Value
	}
	if x.grantTypesFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.GrantTypes = *x.grantTypesFlag.Value
	}
	if x.appTypeFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.AppType = *x.appTypeFlag.Value
	}
	if x.authMethodTypeFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.AuthMethodType = *x.authMethodTypeFlag.Value
	}
	if x.postLogoutRedirectUrisFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.PostLogoutRedirectUris = *x.postLogoutRedirectUrisFlag.Value
	}
	if x.devModeFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.DevMode = *x.devModeFlag.Value
	}
	if x.accessTokenTypeFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.AccessTokenType = *x.accessTokenTypeFlag.Value
	}
	if x.accessTokenRoleAssertionFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.AccessTokenRoleAssertion = *x.accessTokenRoleAssertionFlag.Value
	}
	if x.idTokenRoleAssertionFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.IdTokenRoleAssertion = *x.idTokenRoleAssertionFlag.Value
	}
	if x.idTokenUserinfoAssertionFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.IdTokenUserinfoAssertion = *x.idTokenUserinfoAssertionFlag.Value
	}
	if x.clockSkewFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.ClockSkew = x.clockSkewFlag.Value
	}
	if x.additionalOriginsFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.AdditionalOrigins = *x.additionalOriginsFlag.Value
	}
	if x.skipNativeAppSuccessPageFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigRequest.SkipNativeAppSuccessPage = *x.skipNativeAppSuccessPageFlag.Value
	}
}

func (x *UpdateOIDCAppConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOIDCAppConfigResponseFlag struct {
	*UpdateOIDCAppConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOIDCAppConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOIDCAppConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOIDCAppConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOIDCAppConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOIDCAppConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIDPJWTConfigRequestFlag struct {
	*UpdateOrgIDPJWTConfigRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag        *cli_client.StringParser
	jwtEndpointFlag  *cli_client.StringParser
	issuerFlag       *cli_client.StringParser
	keysEndpointFlag *cli_client.StringParser
	headerNameFlag   *cli_client.StringParser
}

func (x *UpdateOrgIDPJWTConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIDPJWTConfigRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIDPJWTConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPJWTConfigRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPJWTConfigRequest.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPJWTConfigRequest.Issuer = *x.issuerFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPJWTConfigRequest.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPJWTConfigRequest.HeaderName = *x.headerNameFlag.Value
	}
}

func (x *UpdateOrgIDPJWTConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIDPJWTConfigResponseFlag struct {
	*UpdateOrgIDPJWTConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOrgIDPJWTConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIDPJWTConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIDPJWTConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPJWTConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOrgIDPJWTConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIDPOIDCConfigRequestFlag struct {
	*UpdateOrgIDPOIDCConfigRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag              *cli_client.StringParser
	clientIdFlag           *cli_client.StringParser
	clientSecretFlag       *cli_client.StringParser
	issuerFlag             *cli_client.StringParser
	scopesFlag             *cli_client.StringSliceParser
	displayNameMappingFlag *cli_client.EnumParser[idp.OIDCMappingField]
	usernameMappingFlag    *cli_client.EnumParser[idp.OIDCMappingField]
}

func (x *UpdateOrgIDPOIDCConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIDPOIDCConfigRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.clientSecretFlag = cli_client.NewStringParser(x.set, "client-secret", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.displayNameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "display-name-mapping", "")
	x.usernameMappingFlag = cli_client.NewEnumParser[idp.OIDCMappingField](x.set, "username-mapping", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIDPOIDCConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.ClientId = *x.clientIdFlag.Value
	}
	if x.clientSecretFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.ClientSecret = *x.clientSecretFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.Issuer = *x.issuerFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.Scopes = *x.scopesFlag.Value
	}
	if x.displayNameMappingFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.DisplayNameMapping = *x.displayNameMappingFlag.Value
	}
	if x.usernameMappingFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigRequest.UsernameMapping = *x.usernameMappingFlag.Value
	}
}

func (x *UpdateOrgIDPOIDCConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIDPOIDCConfigResponseFlag struct {
	*UpdateOrgIDPOIDCConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOrgIDPOIDCConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIDPOIDCConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIDPOIDCConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPOIDCConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOrgIDPOIDCConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIDPRequestFlag struct {
	*UpdateOrgIDPRequest

	changed bool
	set     *pflag.FlagSet

	idpIdFlag        *cli_client.StringParser
	nameFlag         *cli_client.StringParser
	stylingTypeFlag  *cli_client.EnumParser[idp.IDPStylingType]
	autoRegisterFlag *cli_client.BoolParser
}

func (x *UpdateOrgIDPRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIDPRequest", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[idp.IDPStylingType](x.set, "styling-type", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIDPRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPRequest.IdpId = *x.idpIdFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPRequest.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPRequest.StylingType = *x.stylingTypeFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPRequest.AutoRegister = *x.autoRegisterFlag.Value
	}
}

func (x *UpdateOrgIDPRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOrgIDPResponseFlag struct {
	*UpdateOrgIDPResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOrgIDPResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgIDPResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgIDPResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOrgIDPResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOrgIDPResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOrgMemberRequestFlag struct {
	*UpdateOrgMemberRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag *cli_client.StringParser
	rolesFlag  *cli_client.StringSliceParser
}

func (x *UpdateOrgMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgMemberRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateOrgMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.UpdateOrgMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *UpdateOrgMemberRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOrgMemberResponseFlag struct {
	*UpdateOrgMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOrgMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOrgMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOrgMemberResponseFlag) Changed() bool {
	return x.changed
}

type UpdateOrgRequestFlag struct {
	*UpdateOrgRequest

	changed bool
	set     *pflag.FlagSet

	nameFlag *cli_client.StringParser
}

func (x *UpdateOrgRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgRequest", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateOrgRequest.Name = *x.nameFlag.Value
	}
}

func (x *UpdateOrgRequestFlag) Changed() bool {
	return x.changed
}

type UpdateOrgResponseFlag struct {
	*UpdateOrgResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateOrgResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateOrgResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateOrgResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateOrgResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateOrgResponseFlag) Changed() bool {
	return x.changed
}

type UpdateProjectGrantMemberRequestFlag struct {
	*UpdateProjectGrantMemberRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
	rolesFlag     *cli_client.StringSliceParser
}

func (x *UpdateProjectGrantMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectGrantMemberRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectGrantMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantMemberRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantMemberRequest.GrantId = *x.grantIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *UpdateProjectGrantMemberRequestFlag) Changed() bool {
	return x.changed
}

type UpdateProjectGrantMemberResponseFlag struct {
	*UpdateProjectGrantMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateProjectGrantMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectGrantMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectGrantMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateProjectGrantMemberResponseFlag) Changed() bool {
	return x.changed
}

type UpdateProjectGrantRequestFlag struct {
	*UpdateProjectGrantRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	grantIdFlag   *cli_client.StringParser
	roleKeysFlag  *cli_client.StringSliceParser
}

func (x *UpdateProjectGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectGrantRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.roleKeysFlag = cli_client.NewStringSliceParser(x.set, "role-keys", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantRequest.GrantId = *x.grantIdFlag.Value
	}
	if x.roleKeysFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantRequest.RoleKeys = *x.roleKeysFlag.Value
	}
}

func (x *UpdateProjectGrantRequestFlag) Changed() bool {
	return x.changed
}

type UpdateProjectGrantResponseFlag struct {
	*UpdateProjectGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateProjectGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateProjectGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateProjectGrantResponseFlag) Changed() bool {
	return x.changed
}

type UpdateProjectMemberRequestFlag struct {
	*UpdateProjectMemberRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag *cli_client.StringParser
	userIdFlag    *cli_client.StringParser
	rolesFlag     *cli_client.StringSliceParser
}

func (x *UpdateProjectMemberRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectMemberRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.rolesFlag = cli_client.NewStringSliceParser(x.set, "roles", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectMemberRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectMemberRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectMemberRequest.UserId = *x.userIdFlag.Value
	}
	if x.rolesFlag.Changed() {
		x.changed = true
		x.UpdateProjectMemberRequest.Roles = *x.rolesFlag.Value
	}
}

func (x *UpdateProjectMemberRequestFlag) Changed() bool {
	return x.changed
}

type UpdateProjectMemberResponseFlag struct {
	*UpdateProjectMemberResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateProjectMemberResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectMemberResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectMemberResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateProjectMemberResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateProjectMemberResponseFlag) Changed() bool {
	return x.changed
}

type UpdateProjectRequestFlag struct {
	*UpdateProjectRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                     *cli_client.StringParser
	nameFlag                   *cli_client.StringParser
	projectRoleAssertionFlag   *cli_client.BoolParser
	projectRoleCheckFlag       *cli_client.BoolParser
	hasProjectCheckFlag        *cli_client.BoolParser
	privateLabelingSettingFlag *cli_client.EnumParser[project.PrivateLabelingSetting]
}

func (x *UpdateProjectRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.projectRoleAssertionFlag = cli_client.NewBoolParser(x.set, "project-role-assertion", "")
	x.projectRoleCheckFlag = cli_client.NewBoolParser(x.set, "project-role-check", "")
	x.hasProjectCheckFlag = cli_client.NewBoolParser(x.set, "has-project-check", "")
	x.privateLabelingSettingFlag = cli_client.NewEnumParser[project.PrivateLabelingSetting](x.set, "private-labeling-setting", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateProjectRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateProjectRequest.Name = *x.nameFlag.Value
	}
	if x.projectRoleAssertionFlag.Changed() {
		x.changed = true
		x.UpdateProjectRequest.ProjectRoleAssertion = *x.projectRoleAssertionFlag.Value
	}
	if x.projectRoleCheckFlag.Changed() {
		x.changed = true
		x.UpdateProjectRequest.ProjectRoleCheck = *x.projectRoleCheckFlag.Value
	}
	if x.hasProjectCheckFlag.Changed() {
		x.changed = true
		x.UpdateProjectRequest.HasProjectCheck = *x.hasProjectCheckFlag.Value
	}
	if x.privateLabelingSettingFlag.Changed() {
		x.changed = true
		x.UpdateProjectRequest.PrivateLabelingSetting = *x.privateLabelingSettingFlag.Value
	}
}

func (x *UpdateProjectRequestFlag) Changed() bool {
	return x.changed
}

type UpdateProjectResponseFlag struct {
	*UpdateProjectResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateProjectResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateProjectResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateProjectResponseFlag) Changed() bool {
	return x.changed
}

type UpdateProjectRoleRequestFlag struct {
	*UpdateProjectRoleRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag   *cli_client.StringParser
	roleKeyFlag     *cli_client.StringParser
	displayNameFlag *cli_client.StringParser
	groupFlag       *cli_client.StringParser
}

func (x *UpdateProjectRoleRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectRoleRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.roleKeyFlag = cli_client.NewStringParser(x.set, "role-key", "")
	x.displayNameFlag = cli_client.NewStringParser(x.set, "display-name", "")
	x.groupFlag = cli_client.NewStringParser(x.set, "group", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectRoleRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateProjectRoleRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.roleKeyFlag.Changed() {
		x.changed = true
		x.UpdateProjectRoleRequest.RoleKey = *x.roleKeyFlag.Value
	}
	if x.displayNameFlag.Changed() {
		x.changed = true
		x.UpdateProjectRoleRequest.DisplayName = *x.displayNameFlag.Value
	}
	if x.groupFlag.Changed() {
		x.changed = true
		x.UpdateProjectRoleRequest.Group = *x.groupFlag.Value
	}
}

func (x *UpdateProjectRoleRequestFlag) Changed() bool {
	return x.changed
}

type UpdateProjectRoleResponseFlag struct {
	*UpdateProjectRoleResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateProjectRoleResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateProjectRoleResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateProjectRoleResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateProjectRoleResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateProjectRoleResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSAMLAppConfigRequestFlag struct {
	*UpdateSAMLAppConfigRequest

	changed bool
	set     *pflag.FlagSet

	projectIdFlag   *cli_client.StringParser
	appIdFlag       *cli_client.StringParser
	metadataXmlFlag *cli_client.BytesParser
	metadataUrlFlag *cli_client.StringParser
}

func (x *UpdateSAMLAppConfigRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSAMLAppConfigRequest", pflag.ContinueOnError)

	x.projectIdFlag = cli_client.NewStringParser(x.set, "project-id", "")
	x.appIdFlag = cli_client.NewStringParser(x.set, "app-id", "")
	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.metadataUrlFlag = cli_client.NewStringParser(x.set, "metadata-url", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateSAMLAppConfigRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.projectIdFlag.Changed() {
		x.changed = true
		x.UpdateSAMLAppConfigRequest.ProjectId = *x.projectIdFlag.Value
	}
	if x.appIdFlag.Changed() {
		x.changed = true
		x.UpdateSAMLAppConfigRequest.AppId = *x.appIdFlag.Value
	}

	switch cli_client.FieldIndexes(args, "metadata-xml", "metadata-url").Last().Flag {
	case "metadata-xml":
		if x.metadataXmlFlag.Changed() {
			x.changed = true
			x.UpdateSAMLAppConfigRequest.Metadata = &UpdateSAMLAppConfigRequest_MetadataXml{MetadataXml: *x.metadataXmlFlag.Value}
		}
	case "metadata-url":
		if x.metadataUrlFlag.Changed() {
			x.changed = true
			x.UpdateSAMLAppConfigRequest.Metadata = &UpdateSAMLAppConfigRequest_MetadataUrl{MetadataUrl: *x.metadataUrlFlag.Value}
		}
	}
}

func (x *UpdateSAMLAppConfigRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSAMLAppConfigResponseFlag struct {
	*UpdateSAMLAppConfigResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSAMLAppConfigResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSAMLAppConfigResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSAMLAppConfigResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSAMLAppConfigResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSAMLAppConfigResponseFlag) Changed() bool {
	return x.changed
}

type UpdateSAMLProviderRequestFlag struct {
	*UpdateSAMLProviderRequest

	changed bool
	set     *pflag.FlagSet

	idFlag                *cli_client.StringParser
	nameFlag              *cli_client.StringParser
	metadataXmlFlag       *cli_client.BytesParser
	metadataUrlFlag       *cli_client.StringParser
	bindingFlag           *cli_client.EnumParser[idp.SAMLBinding]
	withSignedRequestFlag *cli_client.BoolParser
	providerOptionsFlag   *idp.OptionsFlag
}

func (x *UpdateSAMLProviderRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSAMLProviderRequest", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.metadataUrlFlag = cli_client.NewStringParser(x.set, "metadata-url", "")
	x.bindingFlag = cli_client.NewEnumParser[idp.SAMLBinding](x.set, "binding", "")
	x.withSignedRequestFlag = cli_client.NewBoolParser(x.set, "with-signed-request", "")
	x.providerOptionsFlag = &idp.OptionsFlag{Options: new(idp.Options)}
	x.providerOptionsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSAMLProviderRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "provider-options")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("provider-options"); flagIdx != nil {
		x.providerOptionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.Id = *x.idFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.Name = *x.nameFlag.Value
	}
	if x.bindingFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.Binding = *x.bindingFlag.Value
	}
	if x.withSignedRequestFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.WithSignedRequest = *x.withSignedRequestFlag.Value
	}

	if x.providerOptionsFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderRequest.ProviderOptions = x.providerOptionsFlag.Options
	}

	switch cli_client.FieldIndexes(args, "metadata-xml", "metadata-url").Last().Flag {
	case "metadata-xml":
		if x.metadataXmlFlag.Changed() {
			x.changed = true
			x.UpdateSAMLProviderRequest.Metadata = &UpdateSAMLProviderRequest_MetadataXml{MetadataXml: *x.metadataXmlFlag.Value}
		}
	case "metadata-url":
		if x.metadataUrlFlag.Changed() {
			x.changed = true
			x.UpdateSAMLProviderRequest.Metadata = &UpdateSAMLProviderRequest_MetadataUrl{MetadataUrl: *x.metadataUrlFlag.Value}
		}
	}
}

func (x *UpdateSAMLProviderRequestFlag) Changed() bool {
	return x.changed
}

type UpdateSAMLProviderResponseFlag struct {
	*UpdateSAMLProviderResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateSAMLProviderResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateSAMLProviderResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateSAMLProviderResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateSAMLProviderResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateSAMLProviderResponseFlag) Changed() bool {
	return x.changed
}

type UpdateUserGrantRequestFlag struct {
	*UpdateUserGrantRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag   *cli_client.StringParser
	grantIdFlag  *cli_client.StringParser
	roleKeysFlag *cli_client.StringSliceParser
}

func (x *UpdateUserGrantRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateUserGrantRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.grantIdFlag = cli_client.NewStringParser(x.set, "grant-id", "")
	x.roleKeysFlag = cli_client.NewStringSliceParser(x.set, "role-keys", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateUserGrantRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateUserGrantRequest.UserId = *x.userIdFlag.Value
	}
	if x.grantIdFlag.Changed() {
		x.changed = true
		x.UpdateUserGrantRequest.GrantId = *x.grantIdFlag.Value
	}
	if x.roleKeysFlag.Changed() {
		x.changed = true
		x.UpdateUserGrantRequest.RoleKeys = *x.roleKeysFlag.Value
	}
}

func (x *UpdateUserGrantRequestFlag) Changed() bool {
	return x.changed
}

type UpdateUserGrantResponseFlag struct {
	*UpdateUserGrantResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateUserGrantResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateUserGrantResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateUserGrantResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateUserGrantResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateUserGrantResponseFlag) Changed() bool {
	return x.changed
}

type UpdateUserNameRequestFlag struct {
	*UpdateUserNameRequest

	changed bool
	set     *pflag.FlagSet

	userIdFlag   *cli_client.StringParser
	userNameFlag *cli_client.StringParser
}

func (x *UpdateUserNameRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateUserNameRequest", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.userNameFlag = cli_client.NewStringParser(x.set, "user-name", "")
	parent.AddFlagSet(x.set)
}

func (x *UpdateUserNameRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.UpdateUserNameRequest.UserId = *x.userIdFlag.Value
	}
	if x.userNameFlag.Changed() {
		x.changed = true
		x.UpdateUserNameRequest.UserName = *x.userNameFlag.Value
	}
}

func (x *UpdateUserNameRequestFlag) Changed() bool {
	return x.changed
}

type UpdateUserNameResponseFlag struct {
	*UpdateUserNameResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *UpdateUserNameResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UpdateUserNameResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *UpdateUserNameResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.UpdateUserNameResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *UpdateUserNameResponseFlag) Changed() bool {
	return x.changed
}

type ValidateOrgDomainRequestFlag struct {
	*ValidateOrgDomainRequest

	changed bool
	set     *pflag.FlagSet

	domainFlag *cli_client.StringParser
}

func (x *ValidateOrgDomainRequestFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ValidateOrgDomainRequest", pflag.ContinueOnError)

	x.domainFlag = cli_client.NewStringParser(x.set, "domain", "")
	parent.AddFlagSet(x.set)
}

func (x *ValidateOrgDomainRequestFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.domainFlag.Changed() {
		x.changed = true
		x.ValidateOrgDomainRequest.Domain = *x.domainFlag.Value
	}
}

func (x *ValidateOrgDomainRequestFlag) Changed() bool {
	return x.changed
}

type ValidateOrgDomainResponseFlag struct {
	*ValidateOrgDomainResponse

	changed bool
	set     *pflag.FlagSet

	detailsFlag *object.ObjectDetailsFlag
}

func (x *ValidateOrgDomainResponseFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ValidateOrgDomainResponse", pflag.ContinueOnError)

	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ValidateOrgDomainResponseFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.ValidateOrgDomainResponse.Details = x.detailsFlag.ObjectDetails
	}

}

func (x *ValidateOrgDomainResponseFlag) Changed() bool {
	return x.changed
}
