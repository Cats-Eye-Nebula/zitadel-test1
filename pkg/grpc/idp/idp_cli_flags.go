// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package idp

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type AppleConfigFlag struct {
	*AppleConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag *cli_client.StringParser
	teamIdFlag   *cli_client.StringParser
	keyIdFlag    *cli_client.StringParser
	scopesFlag   *cli_client.StringSliceParser
}

func (x *AppleConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AppleConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.teamIdFlag = cli_client.NewStringParser(x.set, "team-id", "")
	x.keyIdFlag = cli_client.NewStringParser(x.set, "key-id", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	parent.AddFlagSet(x.set)
}

func (x *AppleConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AppleConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.teamIdFlag.Changed() {
		x.changed = true
		x.AppleConfig.TeamId = *x.teamIdFlag.Value
	}
	if x.keyIdFlag.Changed() {
		x.changed = true
		x.AppleConfig.KeyId = *x.keyIdFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AppleConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *AppleConfigFlag) Changed() bool {
	return x.changed
}

type AzureADConfigFlag struct {
	*AzureADConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag      *cli_client.StringParser
	tenantFlag        *AzureADTenantFlag
	emailVerifiedFlag *cli_client.BoolParser
	scopesFlag        *cli_client.StringSliceParser
}

func (x *AzureADConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AzureADConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.emailVerifiedFlag = cli_client.NewBoolParser(x.set, "email-verified", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.tenantFlag = &AzureADTenantFlag{AzureADTenant: new(AzureADTenant)}
	x.tenantFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *AzureADConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "tenant")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("tenant"); flagIdx != nil {
		x.tenantFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.AzureADConfig.ClientId = *x.clientIdFlag.Value
	}

	if x.tenantFlag.Changed() {
		x.changed = true
		x.AzureADConfig.Tenant = x.tenantFlag.AzureADTenant
	}

	if x.emailVerifiedFlag.Changed() {
		x.changed = true
		x.AzureADConfig.EmailVerified = *x.emailVerifiedFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.AzureADConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *AzureADConfigFlag) Changed() bool {
	return x.changed
}

type AzureADTenantFlag struct {
	*AzureADTenant

	changed bool
	set     *pflag.FlagSet

	tenantTypeFlag *cli_client.EnumParser[AzureADTenantType]
	tenantIdFlag   *cli_client.StringParser
}

func (x *AzureADTenantFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("AzureADTenant", pflag.ContinueOnError)

	x.tenantTypeFlag = cli_client.NewEnumParser[AzureADTenantType](x.set, "tenant-type", "")
	x.tenantIdFlag = cli_client.NewStringParser(x.set, "tenant-id", "")
	parent.AddFlagSet(x.set)
}

func (x *AzureADTenantFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	switch cli_client.FieldIndexes(args, "tenant-type", "tenant-id").Last().Flag {
	case "tenant-type":
		if x.tenantTypeFlag.Changed() {
			x.changed = true
			x.AzureADTenant.Type = &AzureADTenant_TenantType{TenantType: *x.tenantTypeFlag.Value}
		}
	case "tenant-id":
		if x.tenantIdFlag.Changed() {
			x.changed = true
			x.AzureADTenant.Type = &AzureADTenant_TenantId{TenantId: *x.tenantIdFlag.Value}
		}
	}
}

func (x *AzureADTenantFlag) Changed() bool {
	return x.changed
}

type GenericOIDCConfigFlag struct {
	*GenericOIDCConfig

	changed bool
	set     *pflag.FlagSet

	issuerFlag           *cli_client.StringParser
	clientIdFlag         *cli_client.StringParser
	scopesFlag           *cli_client.StringSliceParser
	isIdTokenMappingFlag *cli_client.BoolParser
}

func (x *GenericOIDCConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GenericOIDCConfig", pflag.ContinueOnError)

	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.isIdTokenMappingFlag = cli_client.NewBoolParser(x.set, "is-id-token-mapping", "")
	parent.AddFlagSet(x.set)
}

func (x *GenericOIDCConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.issuerFlag.Changed() {
		x.changed = true
		x.GenericOIDCConfig.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GenericOIDCConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.GenericOIDCConfig.Scopes = *x.scopesFlag.Value
	}
	if x.isIdTokenMappingFlag.Changed() {
		x.changed = true
		x.GenericOIDCConfig.IsIdTokenMapping = *x.isIdTokenMappingFlag.Value
	}
}

func (x *GenericOIDCConfigFlag) Changed() bool {
	return x.changed
}

type GitHubConfigFlag struct {
	*GitHubConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag *cli_client.StringParser
	scopesFlag   *cli_client.StringSliceParser
}

func (x *GitHubConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GitHubConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	parent.AddFlagSet(x.set)
}

func (x *GitHubConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GitHubConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.GitHubConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *GitHubConfigFlag) Changed() bool {
	return x.changed
}

type GitHubEnterpriseServerConfigFlag struct {
	*GitHubEnterpriseServerConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag              *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
}

func (x *GitHubEnterpriseServerConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GitHubEnterpriseServerConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	parent.AddFlagSet(x.set)
}

func (x *GitHubEnterpriseServerConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GitHubEnterpriseServerConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.GitHubEnterpriseServerConfig.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.GitHubEnterpriseServerConfig.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.GitHubEnterpriseServerConfig.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.GitHubEnterpriseServerConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *GitHubEnterpriseServerConfigFlag) Changed() bool {
	return x.changed
}

type GitLabConfigFlag struct {
	*GitLabConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag *cli_client.StringParser
	scopesFlag   *cli_client.StringSliceParser
}

func (x *GitLabConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GitLabConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	parent.AddFlagSet(x.set)
}

func (x *GitLabConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GitLabConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.GitLabConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *GitLabConfigFlag) Changed() bool {
	return x.changed
}

type GitLabSelfHostedConfigFlag struct {
	*GitLabSelfHostedConfig

	changed bool
	set     *pflag.FlagSet

	issuerFlag   *cli_client.StringParser
	clientIdFlag *cli_client.StringParser
	scopesFlag   *cli_client.StringSliceParser
}

func (x *GitLabSelfHostedConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GitLabSelfHostedConfig", pflag.ContinueOnError)

	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	parent.AddFlagSet(x.set)
}

func (x *GitLabSelfHostedConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.issuerFlag.Changed() {
		x.changed = true
		x.GitLabSelfHostedConfig.Issuer = *x.issuerFlag.Value
	}
	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GitLabSelfHostedConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.GitLabSelfHostedConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *GitLabSelfHostedConfigFlag) Changed() bool {
	return x.changed
}

type GoogleConfigFlag struct {
	*GoogleConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag *cli_client.StringParser
	scopesFlag   *cli_client.StringSliceParser
}

func (x *GoogleConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("GoogleConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	parent.AddFlagSet(x.set)
}

func (x *GoogleConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.GoogleConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.GoogleConfig.Scopes = *x.scopesFlag.Value
	}
}

func (x *GoogleConfigFlag) Changed() bool {
	return x.changed
}

type IDPFlag struct {
	*IDP

	changed bool
	set     *pflag.FlagSet

	idFlag           *cli_client.StringParser
	detailsFlag      *object.ObjectDetailsFlag
	stateFlag        *cli_client.EnumParser[IDPState]
	nameFlag         *cli_client.StringParser
	stylingTypeFlag  *cli_client.EnumParser[IDPStylingType]
	ownerFlag        *cli_client.EnumParser[IDPOwnerType]
	oidcConfigFlag   *OIDCConfigFlag
	jwtConfigFlag    *JWTConfigFlag
	autoRegisterFlag *cli_client.BoolParser
}

func (x *IDPFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDP", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[IDPState](x.set, "state", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.stylingTypeFlag = cli_client.NewEnumParser[IDPStylingType](x.set, "styling-type", "")
	x.ownerFlag = cli_client.NewEnumParser[IDPOwnerType](x.set, "owner", "")
	x.autoRegisterFlag = cli_client.NewBoolParser(x.set, "auto-register", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.oidcConfigFlag = &OIDCConfigFlag{OIDCConfig: new(OIDCConfig)}
	x.oidcConfigFlag.AddFlags(x.set)
	x.jwtConfigFlag = &JWTConfigFlag{JWTConfig: new(JWTConfig)}
	x.jwtConfigFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *IDPFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "oidc-config", "jwt-config")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("oidc-config"); flagIdx != nil {
		x.oidcConfigFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("jwt-config"); flagIdx != nil {
		x.jwtConfigFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.IDP.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.IDP.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.IDP.State = *x.stateFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.IDP.Name = *x.nameFlag.Value
	}
	if x.stylingTypeFlag.Changed() {
		x.changed = true
		x.IDP.StylingType = *x.stylingTypeFlag.Value
	}
	if x.ownerFlag.Changed() {
		x.changed = true
		x.IDP.Owner = *x.ownerFlag.Value
	}
	if x.autoRegisterFlag.Changed() {
		x.changed = true
		x.IDP.AutoRegister = *x.autoRegisterFlag.Value
	}

	switch cli_client.FieldIndexes(args, "oidc-config", "jwt-config").Last().Flag {
	case "oidc-config":
		if x.oidcConfigFlag.Changed() {
			x.changed = true
			x.IDP.Config = &IDP_OidcConfig{OidcConfig: x.oidcConfigFlag.OIDCConfig}
		}
	case "jwt-config":
		if x.jwtConfigFlag.Changed() {
			x.changed = true
			x.IDP.Config = &IDP_JwtConfig{JwtConfig: x.jwtConfigFlag.JWTConfig}
		}
	}
}

func (x *IDPFlag) Changed() bool {
	return x.changed
}

type IDPIDQueryFlag struct {
	*IDPIDQuery

	changed bool
	set     *pflag.FlagSet

	idFlag *cli_client.StringParser
}

func (x *IDPIDQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPIDQuery", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPIDQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.IDPIDQuery.Id = *x.idFlag.Value
	}
}

func (x *IDPIDQueryFlag) Changed() bool {
	return x.changed
}

type IDPLoginPolicyLinkFlag struct {
	*IDPLoginPolicyLink

	changed bool
	set     *pflag.FlagSet

	idpIdFlag   *cli_client.StringParser
	idpNameFlag *cli_client.StringParser
	idpTypeFlag *cli_client.EnumParser[IDPType]
}

func (x *IDPLoginPolicyLinkFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPLoginPolicyLink", pflag.ContinueOnError)

	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.idpNameFlag = cli_client.NewStringParser(x.set, "idp-name", "")
	x.idpTypeFlag = cli_client.NewEnumParser[IDPType](x.set, "idp-type", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPLoginPolicyLinkFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idpIdFlag.Changed() {
		x.changed = true
		x.IDPLoginPolicyLink.IdpId = *x.idpIdFlag.Value
	}
	if x.idpNameFlag.Changed() {
		x.changed = true
		x.IDPLoginPolicyLink.IdpName = *x.idpNameFlag.Value
	}
	if x.idpTypeFlag.Changed() {
		x.changed = true
		x.IDPLoginPolicyLink.IdpType = *x.idpTypeFlag.Value
	}
}

func (x *IDPLoginPolicyLinkFlag) Changed() bool {
	return x.changed
}

type IDPNameQueryFlag struct {
	*IDPNameQuery

	changed bool
	set     *pflag.FlagSet

	nameFlag   *cli_client.StringParser
	methodFlag *cli_client.EnumParser[object.TextQueryMethod]
}

func (x *IDPNameQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPNameQuery", pflag.ContinueOnError)

	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.methodFlag = cli_client.NewEnumParser[object.TextQueryMethod](x.set, "method", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPNameQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.nameFlag.Changed() {
		x.changed = true
		x.IDPNameQuery.Name = *x.nameFlag.Value
	}
	if x.methodFlag.Changed() {
		x.changed = true
		x.IDPNameQuery.Method = *x.methodFlag.Value
	}
}

func (x *IDPNameQueryFlag) Changed() bool {
	return x.changed
}

type IDPOwnerTypeQueryFlag struct {
	*IDPOwnerTypeQuery

	changed bool
	set     *pflag.FlagSet

	ownerTypeFlag *cli_client.EnumParser[IDPOwnerType]
}

func (x *IDPOwnerTypeQueryFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPOwnerTypeQuery", pflag.ContinueOnError)

	x.ownerTypeFlag = cli_client.NewEnumParser[IDPOwnerType](x.set, "owner-type", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPOwnerTypeQueryFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.ownerTypeFlag.Changed() {
		x.changed = true
		x.IDPOwnerTypeQuery.OwnerType = *x.ownerTypeFlag.Value
	}
}

func (x *IDPOwnerTypeQueryFlag) Changed() bool {
	return x.changed
}

type IDPUserLinkFlag struct {
	*IDPUserLink

	changed bool
	set     *pflag.FlagSet

	userIdFlag           *cli_client.StringParser
	idpIdFlag            *cli_client.StringParser
	idpNameFlag          *cli_client.StringParser
	providedUserIdFlag   *cli_client.StringParser
	providedUserNameFlag *cli_client.StringParser
	idpTypeFlag          *cli_client.EnumParser[IDPType]
}

func (x *IDPUserLinkFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("IDPUserLink", pflag.ContinueOnError)

	x.userIdFlag = cli_client.NewStringParser(x.set, "user-id", "")
	x.idpIdFlag = cli_client.NewStringParser(x.set, "idp-id", "")
	x.idpNameFlag = cli_client.NewStringParser(x.set, "idp-name", "")
	x.providedUserIdFlag = cli_client.NewStringParser(x.set, "provided-user-id", "")
	x.providedUserNameFlag = cli_client.NewStringParser(x.set, "provided-user-name", "")
	x.idpTypeFlag = cli_client.NewEnumParser[IDPType](x.set, "idp-type", "")
	parent.AddFlagSet(x.set)
}

func (x *IDPUserLinkFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.userIdFlag.Changed() {
		x.changed = true
		x.IDPUserLink.UserId = *x.userIdFlag.Value
	}
	if x.idpIdFlag.Changed() {
		x.changed = true
		x.IDPUserLink.IdpId = *x.idpIdFlag.Value
	}
	if x.idpNameFlag.Changed() {
		x.changed = true
		x.IDPUserLink.IdpName = *x.idpNameFlag.Value
	}
	if x.providedUserIdFlag.Changed() {
		x.changed = true
		x.IDPUserLink.ProvidedUserId = *x.providedUserIdFlag.Value
	}
	if x.providedUserNameFlag.Changed() {
		x.changed = true
		x.IDPUserLink.ProvidedUserName = *x.providedUserNameFlag.Value
	}
	if x.idpTypeFlag.Changed() {
		x.changed = true
		x.IDPUserLink.IdpType = *x.idpTypeFlag.Value
	}
}

func (x *IDPUserLinkFlag) Changed() bool {
	return x.changed
}

type JWTConfigFlag struct {
	*JWTConfig

	changed bool
	set     *pflag.FlagSet

	jwtEndpointFlag  *cli_client.StringParser
	issuerFlag       *cli_client.StringParser
	keysEndpointFlag *cli_client.StringParser
	headerNameFlag   *cli_client.StringParser
}

func (x *JWTConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("JWTConfig", pflag.ContinueOnError)

	x.jwtEndpointFlag = cli_client.NewStringParser(x.set, "jwt-endpoint", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.keysEndpointFlag = cli_client.NewStringParser(x.set, "keys-endpoint", "")
	x.headerNameFlag = cli_client.NewStringParser(x.set, "header-name", "")
	parent.AddFlagSet(x.set)
}

func (x *JWTConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.jwtEndpointFlag.Changed() {
		x.changed = true
		x.JWTConfig.JwtEndpoint = *x.jwtEndpointFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.JWTConfig.Issuer = *x.issuerFlag.Value
	}
	if x.keysEndpointFlag.Changed() {
		x.changed = true
		x.JWTConfig.KeysEndpoint = *x.keysEndpointFlag.Value
	}
	if x.headerNameFlag.Changed() {
		x.changed = true
		x.JWTConfig.HeaderName = *x.headerNameFlag.Value
	}
}

func (x *JWTConfigFlag) Changed() bool {
	return x.changed
}

type LDAPAttributesFlag struct {
	*LDAPAttributes

	changed bool
	set     *pflag.FlagSet

	idAttributeFlag                *cli_client.StringParser
	firstNameAttributeFlag         *cli_client.StringParser
	lastNameAttributeFlag          *cli_client.StringParser
	displayNameAttributeFlag       *cli_client.StringParser
	nickNameAttributeFlag          *cli_client.StringParser
	preferredUsernameAttributeFlag *cli_client.StringParser
	emailAttributeFlag             *cli_client.StringParser
	emailVerifiedAttributeFlag     *cli_client.StringParser
	phoneAttributeFlag             *cli_client.StringParser
	phoneVerifiedAttributeFlag     *cli_client.StringParser
	preferredLanguageAttributeFlag *cli_client.StringParser
	avatarUrlAttributeFlag         *cli_client.StringParser
	profileAttributeFlag           *cli_client.StringParser
}

func (x *LDAPAttributesFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LDAPAttributes", pflag.ContinueOnError)

	x.idAttributeFlag = cli_client.NewStringParser(x.set, "id-attribute", "")
	x.firstNameAttributeFlag = cli_client.NewStringParser(x.set, "first-name-attribute", "")
	x.lastNameAttributeFlag = cli_client.NewStringParser(x.set, "last-name-attribute", "")
	x.displayNameAttributeFlag = cli_client.NewStringParser(x.set, "display-name-attribute", "")
	x.nickNameAttributeFlag = cli_client.NewStringParser(x.set, "nick-name-attribute", "")
	x.preferredUsernameAttributeFlag = cli_client.NewStringParser(x.set, "preferred-username-attribute", "")
	x.emailAttributeFlag = cli_client.NewStringParser(x.set, "email-attribute", "")
	x.emailVerifiedAttributeFlag = cli_client.NewStringParser(x.set, "email-verified-attribute", "")
	x.phoneAttributeFlag = cli_client.NewStringParser(x.set, "phone-attribute", "")
	x.phoneVerifiedAttributeFlag = cli_client.NewStringParser(x.set, "phone-verified-attribute", "")
	x.preferredLanguageAttributeFlag = cli_client.NewStringParser(x.set, "preferred-language-attribute", "")
	x.avatarUrlAttributeFlag = cli_client.NewStringParser(x.set, "avatar-url-attribute", "")
	x.profileAttributeFlag = cli_client.NewStringParser(x.set, "profile-attribute", "")
	parent.AddFlagSet(x.set)
}

func (x *LDAPAttributesFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.idAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.IdAttribute = *x.idAttributeFlag.Value
	}
	if x.firstNameAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.FirstNameAttribute = *x.firstNameAttributeFlag.Value
	}
	if x.lastNameAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.LastNameAttribute = *x.lastNameAttributeFlag.Value
	}
	if x.displayNameAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.DisplayNameAttribute = *x.displayNameAttributeFlag.Value
	}
	if x.nickNameAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.NickNameAttribute = *x.nickNameAttributeFlag.Value
	}
	if x.preferredUsernameAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.PreferredUsernameAttribute = *x.preferredUsernameAttributeFlag.Value
	}
	if x.emailAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.EmailAttribute = *x.emailAttributeFlag.Value
	}
	if x.emailVerifiedAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.EmailVerifiedAttribute = *x.emailVerifiedAttributeFlag.Value
	}
	if x.phoneAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.PhoneAttribute = *x.phoneAttributeFlag.Value
	}
	if x.phoneVerifiedAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.PhoneVerifiedAttribute = *x.phoneVerifiedAttributeFlag.Value
	}
	if x.preferredLanguageAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.PreferredLanguageAttribute = *x.preferredLanguageAttributeFlag.Value
	}
	if x.avatarUrlAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.AvatarUrlAttribute = *x.avatarUrlAttributeFlag.Value
	}
	if x.profileAttributeFlag.Changed() {
		x.changed = true
		x.LDAPAttributes.ProfileAttribute = *x.profileAttributeFlag.Value
	}
}

func (x *LDAPAttributesFlag) Changed() bool {
	return x.changed
}

type LDAPConfigFlag struct {
	*LDAPConfig

	changed bool
	set     *pflag.FlagSet

	serversFlag           *cli_client.StringSliceParser
	startTlsFlag          *cli_client.BoolParser
	baseDnFlag            *cli_client.StringParser
	bindDnFlag            *cli_client.StringParser
	userBaseFlag          *cli_client.StringParser
	userObjectClassesFlag *cli_client.StringSliceParser
	userFiltersFlag       *cli_client.StringSliceParser
	timeoutFlag           *cli_client.DurationParser
	attributesFlag        *LDAPAttributesFlag
}

func (x *LDAPConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LDAPConfig", pflag.ContinueOnError)

	x.serversFlag = cli_client.NewStringSliceParser(x.set, "servers", "")
	x.startTlsFlag = cli_client.NewBoolParser(x.set, "start-tls", "")
	x.baseDnFlag = cli_client.NewStringParser(x.set, "base-dn", "")
	x.bindDnFlag = cli_client.NewStringParser(x.set, "bind-dn", "")
	x.userBaseFlag = cli_client.NewStringParser(x.set, "user-base", "")
	x.userObjectClassesFlag = cli_client.NewStringSliceParser(x.set, "user-object-classes", "")
	x.userFiltersFlag = cli_client.NewStringSliceParser(x.set, "user-filters", "")
	x.timeoutFlag = cli_client.NewDurationParser(x.set, "timeout", "")
	x.attributesFlag = &LDAPAttributesFlag{LDAPAttributes: new(LDAPAttributes)}
	x.attributesFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *LDAPConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "attributes")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("attributes"); flagIdx != nil {
		x.attributesFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.serversFlag.Changed() {
		x.changed = true
		x.LDAPConfig.Servers = *x.serversFlag.Value
	}
	if x.startTlsFlag.Changed() {
		x.changed = true
		x.LDAPConfig.StartTls = *x.startTlsFlag.Value
	}
	if x.baseDnFlag.Changed() {
		x.changed = true
		x.LDAPConfig.BaseDn = *x.baseDnFlag.Value
	}
	if x.bindDnFlag.Changed() {
		x.changed = true
		x.LDAPConfig.BindDn = *x.bindDnFlag.Value
	}
	if x.userBaseFlag.Changed() {
		x.changed = true
		x.LDAPConfig.UserBase = *x.userBaseFlag.Value
	}
	if x.userObjectClassesFlag.Changed() {
		x.changed = true
		x.LDAPConfig.UserObjectClasses = *x.userObjectClassesFlag.Value
	}
	if x.userFiltersFlag.Changed() {
		x.changed = true
		x.LDAPConfig.UserFilters = *x.userFiltersFlag.Value
	}
	if x.timeoutFlag.Changed() {
		x.changed = true
		x.LDAPConfig.Timeout = x.timeoutFlag.Value
	}

	if x.attributesFlag.Changed() {
		x.changed = true
		x.LDAPConfig.Attributes = x.attributesFlag.LDAPAttributes
	}

}

func (x *LDAPConfigFlag) Changed() bool {
	return x.changed
}

type OAuthConfigFlag struct {
	*OAuthConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag              *cli_client.StringParser
	authorizationEndpointFlag *cli_client.StringParser
	tokenEndpointFlag         *cli_client.StringParser
	userEndpointFlag          *cli_client.StringParser
	scopesFlag                *cli_client.StringSliceParser
	idAttributeFlag           *cli_client.StringParser
}

func (x *OAuthConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("OAuthConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.authorizationEndpointFlag = cli_client.NewStringParser(x.set, "authorization-endpoint", "")
	x.tokenEndpointFlag = cli_client.NewStringParser(x.set, "token-endpoint", "")
	x.userEndpointFlag = cli_client.NewStringParser(x.set, "user-endpoint", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.idAttributeFlag = cli_client.NewStringParser(x.set, "id-attribute", "")
	parent.AddFlagSet(x.set)
}

func (x *OAuthConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.OAuthConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.authorizationEndpointFlag.Changed() {
		x.changed = true
		x.OAuthConfig.AuthorizationEndpoint = *x.authorizationEndpointFlag.Value
	}
	if x.tokenEndpointFlag.Changed() {
		x.changed = true
		x.OAuthConfig.TokenEndpoint = *x.tokenEndpointFlag.Value
	}
	if x.userEndpointFlag.Changed() {
		x.changed = true
		x.OAuthConfig.UserEndpoint = *x.userEndpointFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.OAuthConfig.Scopes = *x.scopesFlag.Value
	}
	if x.idAttributeFlag.Changed() {
		x.changed = true
		x.OAuthConfig.IdAttribute = *x.idAttributeFlag.Value
	}
}

func (x *OAuthConfigFlag) Changed() bool {
	return x.changed
}

type OIDCConfigFlag struct {
	*OIDCConfig

	changed bool
	set     *pflag.FlagSet

	clientIdFlag           *cli_client.StringParser
	issuerFlag             *cli_client.StringParser
	scopesFlag             *cli_client.StringSliceParser
	displayNameMappingFlag *cli_client.EnumParser[OIDCMappingField]
	usernameMappingFlag    *cli_client.EnumParser[OIDCMappingField]
}

func (x *OIDCConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("OIDCConfig", pflag.ContinueOnError)

	x.clientIdFlag = cli_client.NewStringParser(x.set, "client-id", "")
	x.issuerFlag = cli_client.NewStringParser(x.set, "issuer", "")
	x.scopesFlag = cli_client.NewStringSliceParser(x.set, "scopes", "")
	x.displayNameMappingFlag = cli_client.NewEnumParser[OIDCMappingField](x.set, "display-name-mapping", "")
	x.usernameMappingFlag = cli_client.NewEnumParser[OIDCMappingField](x.set, "username-mapping", "")
	parent.AddFlagSet(x.set)
}

func (x *OIDCConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.clientIdFlag.Changed() {
		x.changed = true
		x.OIDCConfig.ClientId = *x.clientIdFlag.Value
	}
	if x.issuerFlag.Changed() {
		x.changed = true
		x.OIDCConfig.Issuer = *x.issuerFlag.Value
	}
	if x.scopesFlag.Changed() {
		x.changed = true
		x.OIDCConfig.Scopes = *x.scopesFlag.Value
	}
	if x.displayNameMappingFlag.Changed() {
		x.changed = true
		x.OIDCConfig.DisplayNameMapping = *x.displayNameMappingFlag.Value
	}
	if x.usernameMappingFlag.Changed() {
		x.changed = true
		x.OIDCConfig.UsernameMapping = *x.usernameMappingFlag.Value
	}
}

func (x *OIDCConfigFlag) Changed() bool {
	return x.changed
}

type OptionsFlag struct {
	*Options

	changed bool
	set     *pflag.FlagSet

	isLinkingAllowedFlag  *cli_client.BoolParser
	isCreationAllowedFlag *cli_client.BoolParser
	isAutoCreationFlag    *cli_client.BoolParser
	isAutoUpdateFlag      *cli_client.BoolParser
}

func (x *OptionsFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Options", pflag.ContinueOnError)

	x.isLinkingAllowedFlag = cli_client.NewBoolParser(x.set, "is-linking-allowed", "")
	x.isCreationAllowedFlag = cli_client.NewBoolParser(x.set, "is-creation-allowed", "")
	x.isAutoCreationFlag = cli_client.NewBoolParser(x.set, "is-auto-creation", "")
	x.isAutoUpdateFlag = cli_client.NewBoolParser(x.set, "is-auto-update", "")
	parent.AddFlagSet(x.set)
}

func (x *OptionsFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.isLinkingAllowedFlag.Changed() {
		x.changed = true
		x.Options.IsLinkingAllowed = *x.isLinkingAllowedFlag.Value
	}
	if x.isCreationAllowedFlag.Changed() {
		x.changed = true
		x.Options.IsCreationAllowed = *x.isCreationAllowedFlag.Value
	}
	if x.isAutoCreationFlag.Changed() {
		x.changed = true
		x.Options.IsAutoCreation = *x.isAutoCreationFlag.Value
	}
	if x.isAutoUpdateFlag.Changed() {
		x.changed = true
		x.Options.IsAutoUpdate = *x.isAutoUpdateFlag.Value
	}
}

func (x *OptionsFlag) Changed() bool {
	return x.changed
}

type ProviderFlag struct {
	*Provider

	changed bool
	set     *pflag.FlagSet

	idFlag      *cli_client.StringParser
	detailsFlag *object.ObjectDetailsFlag
	stateFlag   *cli_client.EnumParser[IDPState]
	nameFlag    *cli_client.StringParser
	ownerFlag   *cli_client.EnumParser[IDPOwnerType]
	typeFlag    *cli_client.EnumParser[ProviderType]
	configFlag  *ProviderConfigFlag
}

func (x *ProviderFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("Provider", pflag.ContinueOnError)

	x.idFlag = cli_client.NewStringParser(x.set, "id", "")
	x.stateFlag = cli_client.NewEnumParser[IDPState](x.set, "state", "")
	x.nameFlag = cli_client.NewStringParser(x.set, "name", "")
	x.ownerFlag = cli_client.NewEnumParser[IDPOwnerType](x.set, "owner", "")
	x.typeFlag = cli_client.NewEnumParser[ProviderType](x.set, "type", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.configFlag = &ProviderConfigFlag{ProviderConfig: new(ProviderConfig)}
	x.configFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProviderFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "config")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("config"); flagIdx != nil {
		x.configFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.idFlag.Changed() {
		x.changed = true
		x.Provider.Id = *x.idFlag.Value
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.Provider.Details = x.detailsFlag.ObjectDetails
	}

	if x.stateFlag.Changed() {
		x.changed = true
		x.Provider.State = *x.stateFlag.Value
	}
	if x.nameFlag.Changed() {
		x.changed = true
		x.Provider.Name = *x.nameFlag.Value
	}
	if x.ownerFlag.Changed() {
		x.changed = true
		x.Provider.Owner = *x.ownerFlag.Value
	}
	if x.typeFlag.Changed() {
		x.changed = true
		x.Provider.Type = *x.typeFlag.Value
	}

	if x.configFlag.Changed() {
		x.changed = true
		x.Provider.Config = x.configFlag.ProviderConfig
	}

}

func (x *ProviderFlag) Changed() bool {
	return x.changed
}

type ProviderConfigFlag struct {
	*ProviderConfig

	changed bool
	set     *pflag.FlagSet

	optionsFlag          *OptionsFlag
	ldapFlag             *LDAPConfigFlag
	googleFlag           *GoogleConfigFlag
	oauthFlag            *OAuthConfigFlag
	oidcFlag             *GenericOIDCConfigFlag
	jwtFlag              *JWTConfigFlag
	githubFlag           *GitHubConfigFlag
	githubEsFlag         *GitHubEnterpriseServerConfigFlag
	gitlabFlag           *GitLabConfigFlag
	gitlabSelfHostedFlag *GitLabSelfHostedConfigFlag
	azureAdFlag          *AzureADConfigFlag
	appleFlag            *AppleConfigFlag
	samlFlag             *SAMLConfigFlag
}

func (x *ProviderConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ProviderConfig", pflag.ContinueOnError)

	x.optionsFlag = &OptionsFlag{Options: new(Options)}
	x.optionsFlag.AddFlags(x.set)
	x.ldapFlag = &LDAPConfigFlag{LDAPConfig: new(LDAPConfig)}
	x.ldapFlag.AddFlags(x.set)
	x.googleFlag = &GoogleConfigFlag{GoogleConfig: new(GoogleConfig)}
	x.googleFlag.AddFlags(x.set)
	x.oauthFlag = &OAuthConfigFlag{OAuthConfig: new(OAuthConfig)}
	x.oauthFlag.AddFlags(x.set)
	x.oidcFlag = &GenericOIDCConfigFlag{GenericOIDCConfig: new(GenericOIDCConfig)}
	x.oidcFlag.AddFlags(x.set)
	x.jwtFlag = &JWTConfigFlag{JWTConfig: new(JWTConfig)}
	x.jwtFlag.AddFlags(x.set)
	x.githubFlag = &GitHubConfigFlag{GitHubConfig: new(GitHubConfig)}
	x.githubFlag.AddFlags(x.set)
	x.githubEsFlag = &GitHubEnterpriseServerConfigFlag{GitHubEnterpriseServerConfig: new(GitHubEnterpriseServerConfig)}
	x.githubEsFlag.AddFlags(x.set)
	x.gitlabFlag = &GitLabConfigFlag{GitLabConfig: new(GitLabConfig)}
	x.gitlabFlag.AddFlags(x.set)
	x.gitlabSelfHostedFlag = &GitLabSelfHostedConfigFlag{GitLabSelfHostedConfig: new(GitLabSelfHostedConfig)}
	x.gitlabSelfHostedFlag.AddFlags(x.set)
	x.azureAdFlag = &AzureADConfigFlag{AzureADConfig: new(AzureADConfig)}
	x.azureAdFlag.AddFlags(x.set)
	x.appleFlag = &AppleConfigFlag{AppleConfig: new(AppleConfig)}
	x.appleFlag.AddFlags(x.set)
	x.samlFlag = &SAMLConfigFlag{SAMLConfig: new(SAMLConfig)}
	x.samlFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *ProviderConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "options", "ldap", "google", "oauth", "oidc", "jwt", "github", "github-es", "gitlab", "gitlab-self-hosted", "azure-ad", "apple", "saml")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("options"); flagIdx != nil {
		x.optionsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("ldap"); flagIdx != nil {
		x.ldapFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("google"); flagIdx != nil {
		x.googleFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("oauth"); flagIdx != nil {
		x.oauthFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("oidc"); flagIdx != nil {
		x.oidcFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("jwt"); flagIdx != nil {
		x.jwtFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("github"); flagIdx != nil {
		x.githubFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("github-es"); flagIdx != nil {
		x.githubEsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("gitlab"); flagIdx != nil {
		x.gitlabFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("gitlab-self-hosted"); flagIdx != nil {
		x.gitlabSelfHostedFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("azure-ad"); flagIdx != nil {
		x.azureAdFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("apple"); flagIdx != nil {
		x.appleFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("saml"); flagIdx != nil {
		x.samlFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.optionsFlag.Changed() {
		x.changed = true
		x.ProviderConfig.Options = x.optionsFlag.Options
	}

	switch cli_client.FieldIndexes(args, "ldap", "google", "oauth", "oidc", "jwt", "github", "github-es", "gitlab", "gitlab-self-hosted", "azure-ad", "apple", "saml").Last().Flag {
	case "ldap":
		if x.ldapFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Ldap{Ldap: x.ldapFlag.LDAPConfig}
		}
	case "google":
		if x.googleFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Google{Google: x.googleFlag.GoogleConfig}
		}
	case "oauth":
		if x.oauthFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Oauth{Oauth: x.oauthFlag.OAuthConfig}
		}
	case "oidc":
		if x.oidcFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Oidc{Oidc: x.oidcFlag.GenericOIDCConfig}
		}
	case "jwt":
		if x.jwtFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Jwt{Jwt: x.jwtFlag.JWTConfig}
		}
	case "github":
		if x.githubFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Github{Github: x.githubFlag.GitHubConfig}
		}
	case "github-es":
		if x.githubEsFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_GithubEs{GithubEs: x.githubEsFlag.GitHubEnterpriseServerConfig}
		}
	case "gitlab":
		if x.gitlabFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Gitlab{Gitlab: x.gitlabFlag.GitLabConfig}
		}
	case "gitlab-self-hosted":
		if x.gitlabSelfHostedFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_GitlabSelfHosted{GitlabSelfHosted: x.gitlabSelfHostedFlag.GitLabSelfHostedConfig}
		}
	case "azure-ad":
		if x.azureAdFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_AzureAd{AzureAd: x.azureAdFlag.AzureADConfig}
		}
	case "apple":
		if x.appleFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Apple{Apple: x.appleFlag.AppleConfig}
		}
	case "saml":
		if x.samlFlag.Changed() {
			x.changed = true
			x.ProviderConfig.Config = &ProviderConfig_Saml{Saml: x.samlFlag.SAMLConfig}
		}
	}
}

func (x *ProviderConfigFlag) Changed() bool {
	return x.changed
}

type SAMLConfigFlag struct {
	*SAMLConfig

	changed bool
	set     *pflag.FlagSet

	metadataXmlFlag       *cli_client.BytesParser
	bindingFlag           *cli_client.EnumParser[SAMLBinding]
	withSignedRequestFlag *cli_client.BoolParser
}

func (x *SAMLConfigFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SAMLConfig", pflag.ContinueOnError)

	x.metadataXmlFlag = cli_client.NewBytesParser(x.set, "metadata-xml", "")
	x.bindingFlag = cli_client.NewEnumParser[SAMLBinding](x.set, "binding", "")
	x.withSignedRequestFlag = cli_client.NewBoolParser(x.set, "with-signed-request", "")
	parent.AddFlagSet(x.set)
}

func (x *SAMLConfigFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.metadataXmlFlag.Changed() {
		x.changed = true
		x.SAMLConfig.MetadataXml = *x.metadataXmlFlag.Value
	}
	if x.bindingFlag.Changed() {
		x.changed = true
		x.SAMLConfig.Binding = *x.bindingFlag.Value
	}
	if x.withSignedRequestFlag.Changed() {
		x.changed = true
		x.SAMLConfig.WithSignedRequest = *x.withSignedRequestFlag.Value
	}
}

func (x *SAMLConfigFlag) Changed() bool {
	return x.changed
}
