// Code generated by protoc-gen-cli-client. DO NOT EDIT.

package text

import (
	cli_client "github.com/adlerhurst/cli-client"
	pflag "github.com/spf13/pflag"
	object "github.com/zitadel/zitadel/pkg/grpc/object"
	os "os"
)

type EmailVerificationDoneScreenTextFlag struct {
	*EmailVerificationDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
	loginButtonTextFlag  *cli_client.StringParser
}

func (x *EmailVerificationDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("EmailVerificationDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.loginButtonTextFlag = cli_client.NewStringParser(x.set, "login-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *EmailVerificationDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.EmailVerificationDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.EmailVerificationDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.EmailVerificationDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.EmailVerificationDoneScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.loginButtonTextFlag.Changed() {
		x.changed = true
		x.EmailVerificationDoneScreenText.LoginButtonText = *x.loginButtonTextFlag.Value
	}
}

func (x *EmailVerificationDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type EmailVerificationScreenTextFlag struct {
	*EmailVerificationScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	codeLabelFlag        *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
	resendButtonTextFlag *cli_client.StringParser
}

func (x *EmailVerificationScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("EmailVerificationScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.codeLabelFlag = cli_client.NewStringParser(x.set, "code-label", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.resendButtonTextFlag = cli_client.NewStringParser(x.set, "resend-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *EmailVerificationScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.EmailVerificationScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.EmailVerificationScreenText.Description = *x.descriptionFlag.Value
	}
	if x.codeLabelFlag.Changed() {
		x.changed = true
		x.EmailVerificationScreenText.CodeLabel = *x.codeLabelFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.EmailVerificationScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.resendButtonTextFlag.Changed() {
		x.changed = true
		x.EmailVerificationScreenText.ResendButtonText = *x.resendButtonTextFlag.Value
	}
}

func (x *EmailVerificationScreenTextFlag) Changed() bool {
	return x.changed
}

type ExternalRegistrationUserOverviewScreenTextFlag struct {
	*ExternalRegistrationUserOverviewScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag              *cli_client.StringParser
	descriptionFlag        *cli_client.StringParser
	emailLabelFlag         *cli_client.StringParser
	usernameLabelFlag      *cli_client.StringParser
	firstnameLabelFlag     *cli_client.StringParser
	lastnameLabelFlag      *cli_client.StringParser
	nicknameLabelFlag      *cli_client.StringParser
	languageLabelFlag      *cli_client.StringParser
	phoneLabelFlag         *cli_client.StringParser
	tosAndPrivacyLabelFlag *cli_client.StringParser
	tosConfirmFlag         *cli_client.StringParser
	tosLinkTextFlag        *cli_client.StringParser
	privacyLinkTextFlag    *cli_client.StringParser
	backButtonTextFlag     *cli_client.StringParser
	nextButtonTextFlag     *cli_client.StringParser
	privacyConfirmFlag     *cli_client.StringParser
}

func (x *ExternalRegistrationUserOverviewScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExternalRegistrationUserOverviewScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.emailLabelFlag = cli_client.NewStringParser(x.set, "email-label", "")
	x.usernameLabelFlag = cli_client.NewStringParser(x.set, "username-label", "")
	x.firstnameLabelFlag = cli_client.NewStringParser(x.set, "firstname-label", "")
	x.lastnameLabelFlag = cli_client.NewStringParser(x.set, "lastname-label", "")
	x.nicknameLabelFlag = cli_client.NewStringParser(x.set, "nickname-label", "")
	x.languageLabelFlag = cli_client.NewStringParser(x.set, "language-label", "")
	x.phoneLabelFlag = cli_client.NewStringParser(x.set, "phone-label", "")
	x.tosAndPrivacyLabelFlag = cli_client.NewStringParser(x.set, "tos-and-privacy-label", "")
	x.tosConfirmFlag = cli_client.NewStringParser(x.set, "tos-confirm", "")
	x.tosLinkTextFlag = cli_client.NewStringParser(x.set, "tos-link-text", "")
	x.privacyLinkTextFlag = cli_client.NewStringParser(x.set, "privacy-link-text", "")
	x.backButtonTextFlag = cli_client.NewStringParser(x.set, "back-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.privacyConfirmFlag = cli_client.NewStringParser(x.set, "privacy-confirm", "")
	parent.AddFlagSet(x.set)
}

func (x *ExternalRegistrationUserOverviewScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.Description = *x.descriptionFlag.Value
	}
	if x.emailLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.EmailLabel = *x.emailLabelFlag.Value
	}
	if x.usernameLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.UsernameLabel = *x.usernameLabelFlag.Value
	}
	if x.firstnameLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.FirstnameLabel = *x.firstnameLabelFlag.Value
	}
	if x.lastnameLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.LastnameLabel = *x.lastnameLabelFlag.Value
	}
	if x.nicknameLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.NicknameLabel = *x.nicknameLabelFlag.Value
	}
	if x.languageLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.LanguageLabel = *x.languageLabelFlag.Value
	}
	if x.phoneLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.PhoneLabel = *x.phoneLabelFlag.Value
	}
	if x.tosAndPrivacyLabelFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.TosAndPrivacyLabel = *x.tosAndPrivacyLabelFlag.Value
	}
	if x.tosConfirmFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.TosConfirm = *x.tosConfirmFlag.Value
	}
	if x.tosLinkTextFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.TosLinkText = *x.tosLinkTextFlag.Value
	}
	if x.privacyLinkTextFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.PrivacyLinkText = *x.privacyLinkTextFlag.Value
	}
	if x.backButtonTextFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.BackButtonText = *x.backButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.privacyConfirmFlag.Changed() {
		x.changed = true
		x.ExternalRegistrationUserOverviewScreenText.PrivacyConfirm = *x.privacyConfirmFlag.Value
	}
}

func (x *ExternalRegistrationUserOverviewScreenTextFlag) Changed() bool {
	return x.changed
}

type ExternalUserNotFoundScreenTextFlag struct {
	*ExternalUserNotFoundScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                  *cli_client.StringParser
	descriptionFlag            *cli_client.StringParser
	linkButtonTextFlag         *cli_client.StringParser
	autoRegisterButtonTextFlag *cli_client.StringParser
	tosAndPrivacyLabelFlag     *cli_client.StringParser
	tosConfirmFlag             *cli_client.StringParser
	tosLinkTextFlag            *cli_client.StringParser
	privacyLinkTextFlag        *cli_client.StringParser
	privacyConfirmFlag         *cli_client.StringParser
}

func (x *ExternalUserNotFoundScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("ExternalUserNotFoundScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.linkButtonTextFlag = cli_client.NewStringParser(x.set, "link-button-text", "")
	x.autoRegisterButtonTextFlag = cli_client.NewStringParser(x.set, "auto-register-button-text", "")
	x.tosAndPrivacyLabelFlag = cli_client.NewStringParser(x.set, "tos-and-privacy-label", "")
	x.tosConfirmFlag = cli_client.NewStringParser(x.set, "tos-confirm", "")
	x.tosLinkTextFlag = cli_client.NewStringParser(x.set, "tos-link-text", "")
	x.privacyLinkTextFlag = cli_client.NewStringParser(x.set, "privacy-link-text", "")
	x.privacyConfirmFlag = cli_client.NewStringParser(x.set, "privacy-confirm", "")
	parent.AddFlagSet(x.set)
}

func (x *ExternalUserNotFoundScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.Description = *x.descriptionFlag.Value
	}
	if x.linkButtonTextFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.LinkButtonText = *x.linkButtonTextFlag.Value
	}
	if x.autoRegisterButtonTextFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.AutoRegisterButtonText = *x.autoRegisterButtonTextFlag.Value
	}
	if x.tosAndPrivacyLabelFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.TosAndPrivacyLabel = *x.tosAndPrivacyLabelFlag.Value
	}
	if x.tosConfirmFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.TosConfirm = *x.tosConfirmFlag.Value
	}
	if x.tosLinkTextFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.TosLinkText = *x.tosLinkTextFlag.Value
	}
	if x.privacyLinkTextFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.PrivacyLinkText = *x.privacyLinkTextFlag.Value
	}
	if x.privacyConfirmFlag.Changed() {
		x.changed = true
		x.ExternalUserNotFoundScreenText.PrivacyConfirm = *x.privacyConfirmFlag.Value
	}
}

func (x *ExternalUserNotFoundScreenTextFlag) Changed() bool {
	return x.changed
}

type FooterTextFlag struct {
	*FooterText

	changed bool
	set     *pflag.FlagSet

	tosFlag           *cli_client.StringParser
	privacyPolicyFlag *cli_client.StringParser
	helpFlag          *cli_client.StringParser
	supportEmailFlag  *cli_client.StringParser
}

func (x *FooterTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("FooterText", pflag.ContinueOnError)

	x.tosFlag = cli_client.NewStringParser(x.set, "tos", "")
	x.privacyPolicyFlag = cli_client.NewStringParser(x.set, "privacy-policy", "")
	x.helpFlag = cli_client.NewStringParser(x.set, "help", "")
	x.supportEmailFlag = cli_client.NewStringParser(x.set, "support-email", "")
	parent.AddFlagSet(x.set)
}

func (x *FooterTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.tosFlag.Changed() {
		x.changed = true
		x.FooterText.Tos = *x.tosFlag.Value
	}
	if x.privacyPolicyFlag.Changed() {
		x.changed = true
		x.FooterText.PrivacyPolicy = *x.privacyPolicyFlag.Value
	}
	if x.helpFlag.Changed() {
		x.changed = true
		x.FooterText.Help = *x.helpFlag.Value
	}
	if x.supportEmailFlag.Changed() {
		x.changed = true
		x.FooterText.SupportEmail = *x.supportEmailFlag.Value
	}
}

func (x *FooterTextFlag) Changed() bool {
	return x.changed
}

type InitMFADoneScreenTextFlag struct {
	*InitMFADoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
}

func (x *InitMFADoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitMFADoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitMFADoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitMFADoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitMFADoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFADoneScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFADoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *InitMFADoneScreenTextFlag) Changed() bool {
	return x.changed
}

type InitMFAOTPScreenTextFlag struct {
	*InitMFAOTPScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	descriptionOtpFlag   *cli_client.StringParser
	secretLabelFlag      *cli_client.StringParser
	codeLabelFlag        *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
}

func (x *InitMFAOTPScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitMFAOTPScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.descriptionOtpFlag = cli_client.NewStringParser(x.set, "description-otp", "")
	x.secretLabelFlag = cli_client.NewStringParser(x.set, "secret-label", "")
	x.codeLabelFlag = cli_client.NewStringParser(x.set, "code-label", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitMFAOTPScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.Description = *x.descriptionFlag.Value
	}
	if x.descriptionOtpFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.DescriptionOtp = *x.descriptionOtpFlag.Value
	}
	if x.secretLabelFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.SecretLabel = *x.secretLabelFlag.Value
	}
	if x.codeLabelFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.CodeLabel = *x.codeLabelFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFAOTPScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
}

func (x *InitMFAOTPScreenTextFlag) Changed() bool {
	return x.changed
}

type InitMFAPromptScreenTextFlag struct {
	*InitMFAPromptScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag          *cli_client.StringParser
	descriptionFlag    *cli_client.StringParser
	otpOptionFlag      *cli_client.StringParser
	u2fOptionFlag      *cli_client.StringParser
	skipButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag *cli_client.StringParser
}

func (x *InitMFAPromptScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitMFAPromptScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.otpOptionFlag = cli_client.NewStringParser(x.set, "otp-option", "")
	x.u2fOptionFlag = cli_client.NewStringParser(x.set, "u2f-option", "")
	x.skipButtonTextFlag = cli_client.NewStringParser(x.set, "skip-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitMFAPromptScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitMFAPromptScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitMFAPromptScreenText.Description = *x.descriptionFlag.Value
	}
	if x.otpOptionFlag.Changed() {
		x.changed = true
		x.InitMFAPromptScreenText.OtpOption = *x.otpOptionFlag.Value
	}
	if x.u2fOptionFlag.Changed() {
		x.changed = true
		x.InitMFAPromptScreenText.U2FOption = *x.u2fOptionFlag.Value
	}
	if x.skipButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFAPromptScreenText.SkipButtonText = *x.skipButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFAPromptScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *InitMFAPromptScreenTextFlag) Changed() bool {
	return x.changed
}

type InitMFAU2FScreenTextFlag struct {
	*InitMFAU2FScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	descriptionFlag             *cli_client.StringParser
	tokenNameLabelFlag          *cli_client.StringParser
	notSupportedFlag            *cli_client.StringParser
	registerTokenButtonTextFlag *cli_client.StringParser
	errorRetryFlag              *cli_client.StringParser
}

func (x *InitMFAU2FScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitMFAU2FScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.tokenNameLabelFlag = cli_client.NewStringParser(x.set, "token-name-label", "")
	x.notSupportedFlag = cli_client.NewStringParser(x.set, "not-supported", "")
	x.registerTokenButtonTextFlag = cli_client.NewStringParser(x.set, "register-token-button-text", "")
	x.errorRetryFlag = cli_client.NewStringParser(x.set, "error-retry", "")
	parent.AddFlagSet(x.set)
}

func (x *InitMFAU2FScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitMFAU2FScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitMFAU2FScreenText.Description = *x.descriptionFlag.Value
	}
	if x.tokenNameLabelFlag.Changed() {
		x.changed = true
		x.InitMFAU2FScreenText.TokenNameLabel = *x.tokenNameLabelFlag.Value
	}
	if x.notSupportedFlag.Changed() {
		x.changed = true
		x.InitMFAU2FScreenText.NotSupported = *x.notSupportedFlag.Value
	}
	if x.registerTokenButtonTextFlag.Changed() {
		x.changed = true
		x.InitMFAU2FScreenText.RegisterTokenButtonText = *x.registerTokenButtonTextFlag.Value
	}
	if x.errorRetryFlag.Changed() {
		x.changed = true
		x.InitMFAU2FScreenText.ErrorRetry = *x.errorRetryFlag.Value
	}
}

func (x *InitMFAU2FScreenTextFlag) Changed() bool {
	return x.changed
}

type InitPasswordDoneScreenTextFlag struct {
	*InitPasswordDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
}

func (x *InitPasswordDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitPasswordDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitPasswordDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitPasswordDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitPasswordDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitPasswordDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.InitPasswordDoneScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
}

func (x *InitPasswordDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type InitPasswordScreenTextFlag struct {
	*InitPasswordScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	descriptionFlag             *cli_client.StringParser
	codeLabelFlag               *cli_client.StringParser
	newPasswordLabelFlag        *cli_client.StringParser
	newPasswordConfirmLabelFlag *cli_client.StringParser
	nextButtonTextFlag          *cli_client.StringParser
	resendButtonTextFlag        *cli_client.StringParser
}

func (x *InitPasswordScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitPasswordScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.codeLabelFlag = cli_client.NewStringParser(x.set, "code-label", "")
	x.newPasswordLabelFlag = cli_client.NewStringParser(x.set, "new-password-label", "")
	x.newPasswordConfirmLabelFlag = cli_client.NewStringParser(x.set, "new-password-confirm-label", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.resendButtonTextFlag = cli_client.NewStringParser(x.set, "resend-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitPasswordScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.Description = *x.descriptionFlag.Value
	}
	if x.codeLabelFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.CodeLabel = *x.codeLabelFlag.Value
	}
	if x.newPasswordLabelFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.NewPasswordLabel = *x.newPasswordLabelFlag.Value
	}
	if x.newPasswordConfirmLabelFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.NewPasswordConfirmLabel = *x.newPasswordConfirmLabelFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.resendButtonTextFlag.Changed() {
		x.changed = true
		x.InitPasswordScreenText.ResendButtonText = *x.resendButtonTextFlag.Value
	}
}

func (x *InitPasswordScreenTextFlag) Changed() bool {
	return x.changed
}

type InitializeUserDoneScreenTextFlag struct {
	*InitializeUserDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
}

func (x *InitializeUserDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitializeUserDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitializeUserDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitializeUserDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitializeUserDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.InitializeUserDoneScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitializeUserDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *InitializeUserDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type InitializeUserScreenTextFlag struct {
	*InitializeUserScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	descriptionFlag             *cli_client.StringParser
	codeLabelFlag               *cli_client.StringParser
	newPasswordLabelFlag        *cli_client.StringParser
	newPasswordConfirmLabelFlag *cli_client.StringParser
	resendButtonTextFlag        *cli_client.StringParser
	nextButtonTextFlag          *cli_client.StringParser
}

func (x *InitializeUserScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("InitializeUserScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.codeLabelFlag = cli_client.NewStringParser(x.set, "code-label", "")
	x.newPasswordLabelFlag = cli_client.NewStringParser(x.set, "new-password-label", "")
	x.newPasswordConfirmLabelFlag = cli_client.NewStringParser(x.set, "new-password-confirm-label", "")
	x.resendButtonTextFlag = cli_client.NewStringParser(x.set, "resend-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *InitializeUserScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.Description = *x.descriptionFlag.Value
	}
	if x.codeLabelFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.CodeLabel = *x.codeLabelFlag.Value
	}
	if x.newPasswordLabelFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.NewPasswordLabel = *x.newPasswordLabelFlag.Value
	}
	if x.newPasswordConfirmLabelFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.NewPasswordConfirmLabel = *x.newPasswordConfirmLabelFlag.Value
	}
	if x.resendButtonTextFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.ResendButtonText = *x.resendButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.InitializeUserScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *InitializeUserScreenTextFlag) Changed() bool {
	return x.changed
}

type LinkingUserDoneScreenTextFlag struct {
	*LinkingUserDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
}

func (x *LinkingUserDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LinkingUserDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *LinkingUserDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.LinkingUserDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.LinkingUserDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.LinkingUserDoneScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.LinkingUserDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *LinkingUserDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type LoginCustomTextFlag struct {
	*LoginCustomText

	changed bool
	set     *pflag.FlagSet

	detailsFlag                              *object.ObjectDetailsFlag
	selectAccountTextFlag                    *SelectAccountScreenTextFlag
	loginTextFlag                            *LoginScreenTextFlag
	passwordTextFlag                         *PasswordScreenTextFlag
	usernameChangeTextFlag                   *UsernameChangeScreenTextFlag
	usernameChangeDoneTextFlag               *UsernameChangeDoneScreenTextFlag
	initPasswordTextFlag                     *InitPasswordScreenTextFlag
	initPasswordDoneTextFlag                 *InitPasswordDoneScreenTextFlag
	emailVerificationTextFlag                *EmailVerificationScreenTextFlag
	emailVerificationDoneTextFlag            *EmailVerificationDoneScreenTextFlag
	initializeUserTextFlag                   *InitializeUserScreenTextFlag
	initializeDoneTextFlag                   *InitializeUserDoneScreenTextFlag
	initMfaPromptTextFlag                    *InitMFAPromptScreenTextFlag
	initMfaOtpTextFlag                       *InitMFAOTPScreenTextFlag
	initMfaU2fTextFlag                       *InitMFAU2FScreenTextFlag
	initMfaDoneTextFlag                      *InitMFADoneScreenTextFlag
	mfaProvidersTextFlag                     *MFAProvidersTextFlag
	verifyMfaOtpTextFlag                     *VerifyMFAOTPScreenTextFlag
	verifyMfaU2fTextFlag                     *VerifyMFAU2FScreenTextFlag
	passwordlessTextFlag                     *PasswordlessScreenTextFlag
	passwordChangeTextFlag                   *PasswordChangeScreenTextFlag
	passwordChangeDoneTextFlag               *PasswordChangeDoneScreenTextFlag
	passwordResetDoneTextFlag                *PasswordResetDoneScreenTextFlag
	registrationOptionTextFlag               *RegistrationOptionScreenTextFlag
	registrationUserTextFlag                 *RegistrationUserScreenTextFlag
	registrationOrgTextFlag                  *RegistrationOrgScreenTextFlag
	linkingUserDoneTextFlag                  *LinkingUserDoneScreenTextFlag
	externalUserNotFoundTextFlag             *ExternalUserNotFoundScreenTextFlag
	successLoginTextFlag                     *SuccessLoginScreenTextFlag
	logoutTextFlag                           *LogoutDoneScreenTextFlag
	footerTextFlag                           *FooterTextFlag
	passwordlessPromptTextFlag               *PasswordlessPromptScreenTextFlag
	passwordlessRegistrationTextFlag         *PasswordlessRegistrationScreenTextFlag
	passwordlessRegistrationDoneTextFlag     *PasswordlessRegistrationDoneScreenTextFlag
	externalRegistrationUserOverviewTextFlag *ExternalRegistrationUserOverviewScreenTextFlag
	isDefaultFlag                            *cli_client.BoolParser
}

func (x *LoginCustomTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LoginCustomText", pflag.ContinueOnError)

	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	x.selectAccountTextFlag = &SelectAccountScreenTextFlag{SelectAccountScreenText: new(SelectAccountScreenText)}
	x.selectAccountTextFlag.AddFlags(x.set)
	x.loginTextFlag = &LoginScreenTextFlag{LoginScreenText: new(LoginScreenText)}
	x.loginTextFlag.AddFlags(x.set)
	x.passwordTextFlag = &PasswordScreenTextFlag{PasswordScreenText: new(PasswordScreenText)}
	x.passwordTextFlag.AddFlags(x.set)
	x.usernameChangeTextFlag = &UsernameChangeScreenTextFlag{UsernameChangeScreenText: new(UsernameChangeScreenText)}
	x.usernameChangeTextFlag.AddFlags(x.set)
	x.usernameChangeDoneTextFlag = &UsernameChangeDoneScreenTextFlag{UsernameChangeDoneScreenText: new(UsernameChangeDoneScreenText)}
	x.usernameChangeDoneTextFlag.AddFlags(x.set)
	x.initPasswordTextFlag = &InitPasswordScreenTextFlag{InitPasswordScreenText: new(InitPasswordScreenText)}
	x.initPasswordTextFlag.AddFlags(x.set)
	x.initPasswordDoneTextFlag = &InitPasswordDoneScreenTextFlag{InitPasswordDoneScreenText: new(InitPasswordDoneScreenText)}
	x.initPasswordDoneTextFlag.AddFlags(x.set)
	x.emailVerificationTextFlag = &EmailVerificationScreenTextFlag{EmailVerificationScreenText: new(EmailVerificationScreenText)}
	x.emailVerificationTextFlag.AddFlags(x.set)
	x.emailVerificationDoneTextFlag = &EmailVerificationDoneScreenTextFlag{EmailVerificationDoneScreenText: new(EmailVerificationDoneScreenText)}
	x.emailVerificationDoneTextFlag.AddFlags(x.set)
	x.initializeUserTextFlag = &InitializeUserScreenTextFlag{InitializeUserScreenText: new(InitializeUserScreenText)}
	x.initializeUserTextFlag.AddFlags(x.set)
	x.initializeDoneTextFlag = &InitializeUserDoneScreenTextFlag{InitializeUserDoneScreenText: new(InitializeUserDoneScreenText)}
	x.initializeDoneTextFlag.AddFlags(x.set)
	x.initMfaPromptTextFlag = &InitMFAPromptScreenTextFlag{InitMFAPromptScreenText: new(InitMFAPromptScreenText)}
	x.initMfaPromptTextFlag.AddFlags(x.set)
	x.initMfaOtpTextFlag = &InitMFAOTPScreenTextFlag{InitMFAOTPScreenText: new(InitMFAOTPScreenText)}
	x.initMfaOtpTextFlag.AddFlags(x.set)
	x.initMfaU2fTextFlag = &InitMFAU2FScreenTextFlag{InitMFAU2FScreenText: new(InitMFAU2FScreenText)}
	x.initMfaU2fTextFlag.AddFlags(x.set)
	x.initMfaDoneTextFlag = &InitMFADoneScreenTextFlag{InitMFADoneScreenText: new(InitMFADoneScreenText)}
	x.initMfaDoneTextFlag.AddFlags(x.set)
	x.mfaProvidersTextFlag = &MFAProvidersTextFlag{MFAProvidersText: new(MFAProvidersText)}
	x.mfaProvidersTextFlag.AddFlags(x.set)
	x.verifyMfaOtpTextFlag = &VerifyMFAOTPScreenTextFlag{VerifyMFAOTPScreenText: new(VerifyMFAOTPScreenText)}
	x.verifyMfaOtpTextFlag.AddFlags(x.set)
	x.verifyMfaU2fTextFlag = &VerifyMFAU2FScreenTextFlag{VerifyMFAU2FScreenText: new(VerifyMFAU2FScreenText)}
	x.verifyMfaU2fTextFlag.AddFlags(x.set)
	x.passwordlessTextFlag = &PasswordlessScreenTextFlag{PasswordlessScreenText: new(PasswordlessScreenText)}
	x.passwordlessTextFlag.AddFlags(x.set)
	x.passwordChangeTextFlag = &PasswordChangeScreenTextFlag{PasswordChangeScreenText: new(PasswordChangeScreenText)}
	x.passwordChangeTextFlag.AddFlags(x.set)
	x.passwordChangeDoneTextFlag = &PasswordChangeDoneScreenTextFlag{PasswordChangeDoneScreenText: new(PasswordChangeDoneScreenText)}
	x.passwordChangeDoneTextFlag.AddFlags(x.set)
	x.passwordResetDoneTextFlag = &PasswordResetDoneScreenTextFlag{PasswordResetDoneScreenText: new(PasswordResetDoneScreenText)}
	x.passwordResetDoneTextFlag.AddFlags(x.set)
	x.registrationOptionTextFlag = &RegistrationOptionScreenTextFlag{RegistrationOptionScreenText: new(RegistrationOptionScreenText)}
	x.registrationOptionTextFlag.AddFlags(x.set)
	x.registrationUserTextFlag = &RegistrationUserScreenTextFlag{RegistrationUserScreenText: new(RegistrationUserScreenText)}
	x.registrationUserTextFlag.AddFlags(x.set)
	x.registrationOrgTextFlag = &RegistrationOrgScreenTextFlag{RegistrationOrgScreenText: new(RegistrationOrgScreenText)}
	x.registrationOrgTextFlag.AddFlags(x.set)
	x.linkingUserDoneTextFlag = &LinkingUserDoneScreenTextFlag{LinkingUserDoneScreenText: new(LinkingUserDoneScreenText)}
	x.linkingUserDoneTextFlag.AddFlags(x.set)
	x.externalUserNotFoundTextFlag = &ExternalUserNotFoundScreenTextFlag{ExternalUserNotFoundScreenText: new(ExternalUserNotFoundScreenText)}
	x.externalUserNotFoundTextFlag.AddFlags(x.set)
	x.successLoginTextFlag = &SuccessLoginScreenTextFlag{SuccessLoginScreenText: new(SuccessLoginScreenText)}
	x.successLoginTextFlag.AddFlags(x.set)
	x.logoutTextFlag = &LogoutDoneScreenTextFlag{LogoutDoneScreenText: new(LogoutDoneScreenText)}
	x.logoutTextFlag.AddFlags(x.set)
	x.footerTextFlag = &FooterTextFlag{FooterText: new(FooterText)}
	x.footerTextFlag.AddFlags(x.set)
	x.passwordlessPromptTextFlag = &PasswordlessPromptScreenTextFlag{PasswordlessPromptScreenText: new(PasswordlessPromptScreenText)}
	x.passwordlessPromptTextFlag.AddFlags(x.set)
	x.passwordlessRegistrationTextFlag = &PasswordlessRegistrationScreenTextFlag{PasswordlessRegistrationScreenText: new(PasswordlessRegistrationScreenText)}
	x.passwordlessRegistrationTextFlag.AddFlags(x.set)
	x.passwordlessRegistrationDoneTextFlag = &PasswordlessRegistrationDoneScreenTextFlag{PasswordlessRegistrationDoneScreenText: new(PasswordlessRegistrationDoneScreenText)}
	x.passwordlessRegistrationDoneTextFlag.AddFlags(x.set)
	x.externalRegistrationUserOverviewTextFlag = &ExternalRegistrationUserOverviewScreenTextFlag{ExternalRegistrationUserOverviewScreenText: new(ExternalRegistrationUserOverviewScreenText)}
	x.externalRegistrationUserOverviewTextFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *LoginCustomTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details", "select-account-text", "login-text", "password-text", "username-change-text", "username-change-done-text", "init-password-text", "init-password-done-text", "email-verification-text", "email-verification-done-text", "initialize-user-text", "initialize-done-text", "init-mfa-prompt-text", "init-mfa-otp-text", "init-mfa-u2f-text", "init-mfa-done-text", "mfa-providers-text", "verify-mfa-otp-text", "verify-mfa-u2f-text", "passwordless-text", "password-change-text", "password-change-done-text", "password-reset-done-text", "registration-option-text", "registration-user-text", "registration-org-text", "linking-user-done-text", "external-user-not-found-text", "success-login-text", "logout-text", "footer-text", "passwordless-prompt-text", "passwordless-registration-text", "passwordless-registration-done-text", "external-registration-user-overview-text")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("select-account-text"); flagIdx != nil {
		x.selectAccountTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("login-text"); flagIdx != nil {
		x.loginTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-text"); flagIdx != nil {
		x.passwordTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("username-change-text"); flagIdx != nil {
		x.usernameChangeTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("username-change-done-text"); flagIdx != nil {
		x.usernameChangeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-password-text"); flagIdx != nil {
		x.initPasswordTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-password-done-text"); flagIdx != nil {
		x.initPasswordDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-verification-text"); flagIdx != nil {
		x.emailVerificationTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("email-verification-done-text"); flagIdx != nil {
		x.emailVerificationDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("initialize-user-text"); flagIdx != nil {
		x.initializeUserTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("initialize-done-text"); flagIdx != nil {
		x.initializeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-prompt-text"); flagIdx != nil {
		x.initMfaPromptTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-otp-text"); flagIdx != nil {
		x.initMfaOtpTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-u2f-text"); flagIdx != nil {
		x.initMfaU2fTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("init-mfa-done-text"); flagIdx != nil {
		x.initMfaDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("mfa-providers-text"); flagIdx != nil {
		x.mfaProvidersTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("verify-mfa-otp-text"); flagIdx != nil {
		x.verifyMfaOtpTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("verify-mfa-u2f-text"); flagIdx != nil {
		x.verifyMfaU2fTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-text"); flagIdx != nil {
		x.passwordlessTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-change-text"); flagIdx != nil {
		x.passwordChangeTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-change-done-text"); flagIdx != nil {
		x.passwordChangeDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("password-reset-done-text"); flagIdx != nil {
		x.passwordResetDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-option-text"); flagIdx != nil {
		x.registrationOptionTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-user-text"); flagIdx != nil {
		x.registrationUserTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("registration-org-text"); flagIdx != nil {
		x.registrationOrgTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("linking-user-done-text"); flagIdx != nil {
		x.linkingUserDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("external-user-not-found-text"); flagIdx != nil {
		x.externalUserNotFoundTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("success-login-text"); flagIdx != nil {
		x.successLoginTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("logout-text"); flagIdx != nil {
		x.logoutTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("footer-text"); flagIdx != nil {
		x.footerTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-prompt-text"); flagIdx != nil {
		x.passwordlessPromptTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration-text"); flagIdx != nil {
		x.passwordlessRegistrationTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("passwordless-registration-done-text"); flagIdx != nil {
		x.passwordlessRegistrationDoneTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if flagIdx := flagIndexes.LastByName("external-registration-user-overview-text"); flagIdx != nil {
		x.externalRegistrationUserOverviewTextFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.LoginCustomText.Details = x.detailsFlag.ObjectDetails
	}

	if x.selectAccountTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.SelectAccountText = x.selectAccountTextFlag.SelectAccountScreenText
	}

	if x.loginTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.LoginText = x.loginTextFlag.LoginScreenText
	}

	if x.passwordTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordText = x.passwordTextFlag.PasswordScreenText
	}

	if x.usernameChangeTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.UsernameChangeText = x.usernameChangeTextFlag.UsernameChangeScreenText
	}

	if x.usernameChangeDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.UsernameChangeDoneText = x.usernameChangeDoneTextFlag.UsernameChangeDoneScreenText
	}

	if x.initPasswordTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitPasswordText = x.initPasswordTextFlag.InitPasswordScreenText
	}

	if x.initPasswordDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitPasswordDoneText = x.initPasswordDoneTextFlag.InitPasswordDoneScreenText
	}

	if x.emailVerificationTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.EmailVerificationText = x.emailVerificationTextFlag.EmailVerificationScreenText
	}

	if x.emailVerificationDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.EmailVerificationDoneText = x.emailVerificationDoneTextFlag.EmailVerificationDoneScreenText
	}

	if x.initializeUserTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitializeUserText = x.initializeUserTextFlag.InitializeUserScreenText
	}

	if x.initializeDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitializeDoneText = x.initializeDoneTextFlag.InitializeUserDoneScreenText
	}

	if x.initMfaPromptTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitMfaPromptText = x.initMfaPromptTextFlag.InitMFAPromptScreenText
	}

	if x.initMfaOtpTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitMfaOtpText = x.initMfaOtpTextFlag.InitMFAOTPScreenText
	}

	if x.initMfaU2fTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitMfaU2FText = x.initMfaU2fTextFlag.InitMFAU2FScreenText
	}

	if x.initMfaDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.InitMfaDoneText = x.initMfaDoneTextFlag.InitMFADoneScreenText
	}

	if x.mfaProvidersTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.MfaProvidersText = x.mfaProvidersTextFlag.MFAProvidersText
	}

	if x.verifyMfaOtpTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.VerifyMfaOtpText = x.verifyMfaOtpTextFlag.VerifyMFAOTPScreenText
	}

	if x.verifyMfaU2fTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.VerifyMfaU2FText = x.verifyMfaU2fTextFlag.VerifyMFAU2FScreenText
	}

	if x.passwordlessTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordlessText = x.passwordlessTextFlag.PasswordlessScreenText
	}

	if x.passwordChangeTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordChangeText = x.passwordChangeTextFlag.PasswordChangeScreenText
	}

	if x.passwordChangeDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordChangeDoneText = x.passwordChangeDoneTextFlag.PasswordChangeDoneScreenText
	}

	if x.passwordResetDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordResetDoneText = x.passwordResetDoneTextFlag.PasswordResetDoneScreenText
	}

	if x.registrationOptionTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.RegistrationOptionText = x.registrationOptionTextFlag.RegistrationOptionScreenText
	}

	if x.registrationUserTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.RegistrationUserText = x.registrationUserTextFlag.RegistrationUserScreenText
	}

	if x.registrationOrgTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.RegistrationOrgText = x.registrationOrgTextFlag.RegistrationOrgScreenText
	}

	if x.linkingUserDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.LinkingUserDoneText = x.linkingUserDoneTextFlag.LinkingUserDoneScreenText
	}

	if x.externalUserNotFoundTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.ExternalUserNotFoundText = x.externalUserNotFoundTextFlag.ExternalUserNotFoundScreenText
	}

	if x.successLoginTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.SuccessLoginText = x.successLoginTextFlag.SuccessLoginScreenText
	}

	if x.logoutTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.LogoutText = x.logoutTextFlag.LogoutDoneScreenText
	}

	if x.footerTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.FooterText = x.footerTextFlag.FooterText
	}

	if x.passwordlessPromptTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordlessPromptText = x.passwordlessPromptTextFlag.PasswordlessPromptScreenText
	}

	if x.passwordlessRegistrationTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordlessRegistrationText = x.passwordlessRegistrationTextFlag.PasswordlessRegistrationScreenText
	}

	if x.passwordlessRegistrationDoneTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.PasswordlessRegistrationDoneText = x.passwordlessRegistrationDoneTextFlag.PasswordlessRegistrationDoneScreenText
	}

	if x.externalRegistrationUserOverviewTextFlag.Changed() {
		x.changed = true
		x.LoginCustomText.ExternalRegistrationUserOverviewText = x.externalRegistrationUserOverviewTextFlag.ExternalRegistrationUserOverviewScreenText
	}

	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.LoginCustomText.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *LoginCustomTextFlag) Changed() bool {
	return x.changed
}

type LoginScreenTextFlag struct {
	*LoginScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                     *cli_client.StringParser
	descriptionFlag               *cli_client.StringParser
	titleLinkingProcessFlag       *cli_client.StringParser
	descriptionLinkingProcessFlag *cli_client.StringParser
	userMustBeMemberOfOrgFlag     *cli_client.StringParser
	loginNameLabelFlag            *cli_client.StringParser
	registerButtonTextFlag        *cli_client.StringParser
	nextButtonTextFlag            *cli_client.StringParser
	externalUserDescriptionFlag   *cli_client.StringParser
	userNamePlaceholderFlag       *cli_client.StringParser
	loginNamePlaceholderFlag      *cli_client.StringParser
}

func (x *LoginScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LoginScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.titleLinkingProcessFlag = cli_client.NewStringParser(x.set, "title-linking-process", "")
	x.descriptionLinkingProcessFlag = cli_client.NewStringParser(x.set, "description-linking-process", "")
	x.userMustBeMemberOfOrgFlag = cli_client.NewStringParser(x.set, "user-must-be-member-of-org", "")
	x.loginNameLabelFlag = cli_client.NewStringParser(x.set, "login-name-label", "")
	x.registerButtonTextFlag = cli_client.NewStringParser(x.set, "register-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.externalUserDescriptionFlag = cli_client.NewStringParser(x.set, "external-user-description", "")
	x.userNamePlaceholderFlag = cli_client.NewStringParser(x.set, "user-name-placeholder", "")
	x.loginNamePlaceholderFlag = cli_client.NewStringParser(x.set, "login-name-placeholder", "")
	parent.AddFlagSet(x.set)
}

func (x *LoginScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.LoginScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.LoginScreenText.Description = *x.descriptionFlag.Value
	}
	if x.titleLinkingProcessFlag.Changed() {
		x.changed = true
		x.LoginScreenText.TitleLinkingProcess = *x.titleLinkingProcessFlag.Value
	}
	if x.descriptionLinkingProcessFlag.Changed() {
		x.changed = true
		x.LoginScreenText.DescriptionLinkingProcess = *x.descriptionLinkingProcessFlag.Value
	}
	if x.userMustBeMemberOfOrgFlag.Changed() {
		x.changed = true
		x.LoginScreenText.UserMustBeMemberOfOrg = *x.userMustBeMemberOfOrgFlag.Value
	}
	if x.loginNameLabelFlag.Changed() {
		x.changed = true
		x.LoginScreenText.LoginNameLabel = *x.loginNameLabelFlag.Value
	}
	if x.registerButtonTextFlag.Changed() {
		x.changed = true
		x.LoginScreenText.RegisterButtonText = *x.registerButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.LoginScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.externalUserDescriptionFlag.Changed() {
		x.changed = true
		x.LoginScreenText.ExternalUserDescription = *x.externalUserDescriptionFlag.Value
	}
	if x.userNamePlaceholderFlag.Changed() {
		x.changed = true
		x.LoginScreenText.UserNamePlaceholder = *x.userNamePlaceholderFlag.Value
	}
	if x.loginNamePlaceholderFlag.Changed() {
		x.changed = true
		x.LoginScreenText.LoginNamePlaceholder = *x.loginNamePlaceholderFlag.Value
	}
}

func (x *LoginScreenTextFlag) Changed() bool {
	return x.changed
}

type LogoutDoneScreenTextFlag struct {
	*LogoutDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag           *cli_client.StringParser
	descriptionFlag     *cli_client.StringParser
	loginButtonTextFlag *cli_client.StringParser
}

func (x *LogoutDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("LogoutDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.loginButtonTextFlag = cli_client.NewStringParser(x.set, "login-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *LogoutDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.LogoutDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.LogoutDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.loginButtonTextFlag.Changed() {
		x.changed = true
		x.LogoutDoneScreenText.LoginButtonText = *x.loginButtonTextFlag.Value
	}
}

func (x *LogoutDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type MFAProvidersTextFlag struct {
	*MFAProvidersText

	changed bool
	set     *pflag.FlagSet

	chooseOtherFlag *cli_client.StringParser
	otpFlag         *cli_client.StringParser
	u2fFlag         *cli_client.StringParser
}

func (x *MFAProvidersTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MFAProvidersText", pflag.ContinueOnError)

	x.chooseOtherFlag = cli_client.NewStringParser(x.set, "choose-other", "")
	x.otpFlag = cli_client.NewStringParser(x.set, "otp", "")
	x.u2fFlag = cli_client.NewStringParser(x.set, "u2f", "")
	parent.AddFlagSet(x.set)
}

func (x *MFAProvidersTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.chooseOtherFlag.Changed() {
		x.changed = true
		x.MFAProvidersText.ChooseOther = *x.chooseOtherFlag.Value
	}
	if x.otpFlag.Changed() {
		x.changed = true
		x.MFAProvidersText.Otp = *x.otpFlag.Value
	}
	if x.u2fFlag.Changed() {
		x.changed = true
		x.MFAProvidersText.U2F = *x.u2fFlag.Value
	}
}

func (x *MFAProvidersTextFlag) Changed() bool {
	return x.changed
}

type MessageCustomTextFlag struct {
	*MessageCustomText

	changed bool
	set     *pflag.FlagSet

	detailsFlag    *object.ObjectDetailsFlag
	titleFlag      *cli_client.StringParser
	preHeaderFlag  *cli_client.StringParser
	subjectFlag    *cli_client.StringParser
	greetingFlag   *cli_client.StringParser
	textFlag       *cli_client.StringParser
	buttonTextFlag *cli_client.StringParser
	footerTextFlag *cli_client.StringParser
	isDefaultFlag  *cli_client.BoolParser
}

func (x *MessageCustomTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("MessageCustomText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.preHeaderFlag = cli_client.NewStringParser(x.set, "pre-header", "")
	x.subjectFlag = cli_client.NewStringParser(x.set, "subject", "")
	x.greetingFlag = cli_client.NewStringParser(x.set, "greeting", "")
	x.textFlag = cli_client.NewStringParser(x.set, "text", "")
	x.buttonTextFlag = cli_client.NewStringParser(x.set, "button-text", "")
	x.footerTextFlag = cli_client.NewStringParser(x.set, "footer-text", "")
	x.isDefaultFlag = cli_client.NewBoolParser(x.set, "is-default", "")
	x.detailsFlag = &object.ObjectDetailsFlag{ObjectDetails: new(object.ObjectDetails)}
	x.detailsFlag.AddFlags(x.set)
	parent.AddFlagSet(x.set)
}

func (x *MessageCustomTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args, "details")

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if flagIdx := flagIndexes.LastByName("details"); flagIdx != nil {
		x.detailsFlag.ParseFlags(x.set, flagIdx.Args)
	}

	if x.detailsFlag.Changed() {
		x.changed = true
		x.MessageCustomText.Details = x.detailsFlag.ObjectDetails
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.MessageCustomText.Title = *x.titleFlag.Value
	}
	if x.preHeaderFlag.Changed() {
		x.changed = true
		x.MessageCustomText.PreHeader = *x.preHeaderFlag.Value
	}
	if x.subjectFlag.Changed() {
		x.changed = true
		x.MessageCustomText.Subject = *x.subjectFlag.Value
	}
	if x.greetingFlag.Changed() {
		x.changed = true
		x.MessageCustomText.Greeting = *x.greetingFlag.Value
	}
	if x.textFlag.Changed() {
		x.changed = true
		x.MessageCustomText.Text = *x.textFlag.Value
	}
	if x.buttonTextFlag.Changed() {
		x.changed = true
		x.MessageCustomText.ButtonText = *x.buttonTextFlag.Value
	}
	if x.footerTextFlag.Changed() {
		x.changed = true
		x.MessageCustomText.FooterText = *x.footerTextFlag.Value
	}
	if x.isDefaultFlag.Changed() {
		x.changed = true
		x.MessageCustomText.IsDefault = *x.isDefaultFlag.Value
	}
}

func (x *MessageCustomTextFlag) Changed() bool {
	return x.changed
}

type PasswordChangeDoneScreenTextFlag struct {
	*PasswordChangeDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag          *cli_client.StringParser
	descriptionFlag    *cli_client.StringParser
	nextButtonTextFlag *cli_client.StringParser
}

func (x *PasswordChangeDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordChangeDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordChangeDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordChangeDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordChangeDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordChangeDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *PasswordChangeDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordChangeScreenTextFlag struct {
	*PasswordChangeScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	descriptionFlag             *cli_client.StringParser
	oldPasswordLabelFlag        *cli_client.StringParser
	newPasswordLabelFlag        *cli_client.StringParser
	newPasswordConfirmLabelFlag *cli_client.StringParser
	cancelButtonTextFlag        *cli_client.StringParser
	nextButtonTextFlag          *cli_client.StringParser
}

func (x *PasswordChangeScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordChangeScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.oldPasswordLabelFlag = cli_client.NewStringParser(x.set, "old-password-label", "")
	x.newPasswordLabelFlag = cli_client.NewStringParser(x.set, "new-password-label", "")
	x.newPasswordConfirmLabelFlag = cli_client.NewStringParser(x.set, "new-password-confirm-label", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordChangeScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.Description = *x.descriptionFlag.Value
	}
	if x.oldPasswordLabelFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.OldPasswordLabel = *x.oldPasswordLabelFlag.Value
	}
	if x.newPasswordLabelFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.NewPasswordLabel = *x.newPasswordLabelFlag.Value
	}
	if x.newPasswordConfirmLabelFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.NewPasswordConfirmLabel = *x.newPasswordConfirmLabelFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordChangeScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *PasswordChangeScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordResetDoneScreenTextFlag struct {
	*PasswordResetDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag          *cli_client.StringParser
	descriptionFlag    *cli_client.StringParser
	nextButtonTextFlag *cli_client.StringParser
}

func (x *PasswordResetDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordResetDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordResetDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordResetDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordResetDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordResetDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *PasswordResetDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordScreenTextFlag struct {
	*PasswordScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag          *cli_client.StringParser
	descriptionFlag    *cli_client.StringParser
	passwordLabelFlag  *cli_client.StringParser
	resetLinkTextFlag  *cli_client.StringParser
	backButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag *cli_client.StringParser
	minLengthFlag      *cli_client.StringParser
	hasUppercaseFlag   *cli_client.StringParser
	hasLowercaseFlag   *cli_client.StringParser
	hasNumberFlag      *cli_client.StringParser
	hasSymbolFlag      *cli_client.StringParser
	confirmationFlag   *cli_client.StringParser
}

func (x *PasswordScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.passwordLabelFlag = cli_client.NewStringParser(x.set, "password-label", "")
	x.resetLinkTextFlag = cli_client.NewStringParser(x.set, "reset-link-text", "")
	x.backButtonTextFlag = cli_client.NewStringParser(x.set, "back-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.minLengthFlag = cli_client.NewStringParser(x.set, "min-length", "")
	x.hasUppercaseFlag = cli_client.NewStringParser(x.set, "has-uppercase", "")
	x.hasLowercaseFlag = cli_client.NewStringParser(x.set, "has-lowercase", "")
	x.hasNumberFlag = cli_client.NewStringParser(x.set, "has-number", "")
	x.hasSymbolFlag = cli_client.NewStringParser(x.set, "has-symbol", "")
	x.confirmationFlag = cli_client.NewStringParser(x.set, "confirmation", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.Description = *x.descriptionFlag.Value
	}
	if x.passwordLabelFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.PasswordLabel = *x.passwordLabelFlag.Value
	}
	if x.resetLinkTextFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.ResetLinkText = *x.resetLinkTextFlag.Value
	}
	if x.backButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.BackButtonText = *x.backButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.minLengthFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.MinLength = *x.minLengthFlag.Value
	}
	if x.hasUppercaseFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.HasUppercase = *x.hasUppercaseFlag.Value
	}
	if x.hasLowercaseFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.HasLowercase = *x.hasLowercaseFlag.Value
	}
	if x.hasNumberFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.HasNumber = *x.hasNumberFlag.Value
	}
	if x.hasSymbolFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.HasSymbol = *x.hasSymbolFlag.Value
	}
	if x.confirmationFlag.Changed() {
		x.changed = true
		x.PasswordScreenText.Confirmation = *x.confirmationFlag.Value
	}
}

func (x *PasswordScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordlessPromptScreenTextFlag struct {
	*PasswordlessPromptScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                  *cli_client.StringParser
	descriptionFlag            *cli_client.StringParser
	descriptionInitFlag        *cli_client.StringParser
	passwordlessButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag         *cli_client.StringParser
	skipButtonTextFlag         *cli_client.StringParser
}

func (x *PasswordlessPromptScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordlessPromptScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.descriptionInitFlag = cli_client.NewStringParser(x.set, "description-init", "")
	x.passwordlessButtonTextFlag = cli_client.NewStringParser(x.set, "passwordless-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.skipButtonTextFlag = cli_client.NewStringParser(x.set, "skip-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordlessPromptScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordlessPromptScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordlessPromptScreenText.Description = *x.descriptionFlag.Value
	}
	if x.descriptionInitFlag.Changed() {
		x.changed = true
		x.PasswordlessPromptScreenText.DescriptionInit = *x.descriptionInitFlag.Value
	}
	if x.passwordlessButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessPromptScreenText.PasswordlessButtonText = *x.passwordlessButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessPromptScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.skipButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessPromptScreenText.SkipButtonText = *x.skipButtonTextFlag.Value
	}
}

func (x *PasswordlessPromptScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordlessRegistrationDoneScreenTextFlag struct {
	*PasswordlessRegistrationDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
	descriptionCloseFlag *cli_client.StringParser
}

func (x *PasswordlessRegistrationDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordlessRegistrationDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.descriptionCloseFlag = cli_client.NewStringParser(x.set, "description-close", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordlessRegistrationDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationDoneScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.descriptionCloseFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationDoneScreenText.DescriptionClose = *x.descriptionCloseFlag.Value
	}
}

func (x *PasswordlessRegistrationDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordlessRegistrationScreenTextFlag struct {
	*PasswordlessRegistrationScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	descriptionFlag             *cli_client.StringParser
	tokenNameLabelFlag          *cli_client.StringParser
	notSupportedFlag            *cli_client.StringParser
	registerTokenButtonTextFlag *cli_client.StringParser
	errorRetryFlag              *cli_client.StringParser
}

func (x *PasswordlessRegistrationScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordlessRegistrationScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.tokenNameLabelFlag = cli_client.NewStringParser(x.set, "token-name-label", "")
	x.notSupportedFlag = cli_client.NewStringParser(x.set, "not-supported", "")
	x.registerTokenButtonTextFlag = cli_client.NewStringParser(x.set, "register-token-button-text", "")
	x.errorRetryFlag = cli_client.NewStringParser(x.set, "error-retry", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordlessRegistrationScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationScreenText.Description = *x.descriptionFlag.Value
	}
	if x.tokenNameLabelFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationScreenText.TokenNameLabel = *x.tokenNameLabelFlag.Value
	}
	if x.notSupportedFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationScreenText.NotSupported = *x.notSupportedFlag.Value
	}
	if x.registerTokenButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationScreenText.RegisterTokenButtonText = *x.registerTokenButtonTextFlag.Value
	}
	if x.errorRetryFlag.Changed() {
		x.changed = true
		x.PasswordlessRegistrationScreenText.ErrorRetry = *x.errorRetryFlag.Value
	}
}

func (x *PasswordlessRegistrationScreenTextFlag) Changed() bool {
	return x.changed
}

type PasswordlessScreenTextFlag struct {
	*PasswordlessScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	descriptionFlag             *cli_client.StringParser
	loginWithPwButtonTextFlag   *cli_client.StringParser
	validateTokenButtonTextFlag *cli_client.StringParser
	notSupportedFlag            *cli_client.StringParser
	errorRetryFlag              *cli_client.StringParser
}

func (x *PasswordlessScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("PasswordlessScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.loginWithPwButtonTextFlag = cli_client.NewStringParser(x.set, "login-with-pw-button-text", "")
	x.validateTokenButtonTextFlag = cli_client.NewStringParser(x.set, "validate-token-button-text", "")
	x.notSupportedFlag = cli_client.NewStringParser(x.set, "not-supported", "")
	x.errorRetryFlag = cli_client.NewStringParser(x.set, "error-retry", "")
	parent.AddFlagSet(x.set)
}

func (x *PasswordlessScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.PasswordlessScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.PasswordlessScreenText.Description = *x.descriptionFlag.Value
	}
	if x.loginWithPwButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessScreenText.LoginWithPwButtonText = *x.loginWithPwButtonTextFlag.Value
	}
	if x.validateTokenButtonTextFlag.Changed() {
		x.changed = true
		x.PasswordlessScreenText.ValidateTokenButtonText = *x.validateTokenButtonTextFlag.Value
	}
	if x.notSupportedFlag.Changed() {
		x.changed = true
		x.PasswordlessScreenText.NotSupported = *x.notSupportedFlag.Value
	}
	if x.errorRetryFlag.Changed() {
		x.changed = true
		x.PasswordlessScreenText.ErrorRetry = *x.errorRetryFlag.Value
	}
}

func (x *PasswordlessScreenTextFlag) Changed() bool {
	return x.changed
}

type RegistrationOptionScreenTextFlag struct {
	*RegistrationOptionScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                    *cli_client.StringParser
	descriptionFlag              *cli_client.StringParser
	userNameButtonTextFlag       *cli_client.StringParser
	externalLoginDescriptionFlag *cli_client.StringParser
	loginButtonTextFlag          *cli_client.StringParser
}

func (x *RegistrationOptionScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegistrationOptionScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.userNameButtonTextFlag = cli_client.NewStringParser(x.set, "user-name-button-text", "")
	x.externalLoginDescriptionFlag = cli_client.NewStringParser(x.set, "external-login-description", "")
	x.loginButtonTextFlag = cli_client.NewStringParser(x.set, "login-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *RegistrationOptionScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.RegistrationOptionScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.RegistrationOptionScreenText.Description = *x.descriptionFlag.Value
	}
	if x.userNameButtonTextFlag.Changed() {
		x.changed = true
		x.RegistrationOptionScreenText.UserNameButtonText = *x.userNameButtonTextFlag.Value
	}
	if x.externalLoginDescriptionFlag.Changed() {
		x.changed = true
		x.RegistrationOptionScreenText.ExternalLoginDescription = *x.externalLoginDescriptionFlag.Value
	}
	if x.loginButtonTextFlag.Changed() {
		x.changed = true
		x.RegistrationOptionScreenText.LoginButtonText = *x.loginButtonTextFlag.Value
	}
}

func (x *RegistrationOptionScreenTextFlag) Changed() bool {
	return x.changed
}

type RegistrationOrgScreenTextFlag struct {
	*RegistrationOrgScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                *cli_client.StringParser
	descriptionFlag          *cli_client.StringParser
	orgnameLabelFlag         *cli_client.StringParser
	firstnameLabelFlag       *cli_client.StringParser
	lastnameLabelFlag        *cli_client.StringParser
	usernameLabelFlag        *cli_client.StringParser
	emailLabelFlag           *cli_client.StringParser
	passwordLabelFlag        *cli_client.StringParser
	passwordConfirmLabelFlag *cli_client.StringParser
	tosAndPrivacyLabelFlag   *cli_client.StringParser
	tosConfirmFlag           *cli_client.StringParser
	tosLinkTextFlag          *cli_client.StringParser
	privacyConfirmFlag       *cli_client.StringParser
	privacyLinkTextFlag      *cli_client.StringParser
	saveButtonTextFlag       *cli_client.StringParser
}

func (x *RegistrationOrgScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegistrationOrgScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.orgnameLabelFlag = cli_client.NewStringParser(x.set, "orgname-label", "")
	x.firstnameLabelFlag = cli_client.NewStringParser(x.set, "firstname-label", "")
	x.lastnameLabelFlag = cli_client.NewStringParser(x.set, "lastname-label", "")
	x.usernameLabelFlag = cli_client.NewStringParser(x.set, "username-label", "")
	x.emailLabelFlag = cli_client.NewStringParser(x.set, "email-label", "")
	x.passwordLabelFlag = cli_client.NewStringParser(x.set, "password-label", "")
	x.passwordConfirmLabelFlag = cli_client.NewStringParser(x.set, "password-confirm-label", "")
	x.tosAndPrivacyLabelFlag = cli_client.NewStringParser(x.set, "tos-and-privacy-label", "")
	x.tosConfirmFlag = cli_client.NewStringParser(x.set, "tos-confirm", "")
	x.tosLinkTextFlag = cli_client.NewStringParser(x.set, "tos-link-text", "")
	x.privacyConfirmFlag = cli_client.NewStringParser(x.set, "privacy-confirm", "")
	x.privacyLinkTextFlag = cli_client.NewStringParser(x.set, "privacy-link-text", "")
	x.saveButtonTextFlag = cli_client.NewStringParser(x.set, "save-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *RegistrationOrgScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.Description = *x.descriptionFlag.Value
	}
	if x.orgnameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.OrgnameLabel = *x.orgnameLabelFlag.Value
	}
	if x.firstnameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.FirstnameLabel = *x.firstnameLabelFlag.Value
	}
	if x.lastnameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.LastnameLabel = *x.lastnameLabelFlag.Value
	}
	if x.usernameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.UsernameLabel = *x.usernameLabelFlag.Value
	}
	if x.emailLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.EmailLabel = *x.emailLabelFlag.Value
	}
	if x.passwordLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.PasswordLabel = *x.passwordLabelFlag.Value
	}
	if x.passwordConfirmLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.PasswordConfirmLabel = *x.passwordConfirmLabelFlag.Value
	}
	if x.tosAndPrivacyLabelFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.TosAndPrivacyLabel = *x.tosAndPrivacyLabelFlag.Value
	}
	if x.tosConfirmFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.TosConfirm = *x.tosConfirmFlag.Value
	}
	if x.tosLinkTextFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.TosLinkText = *x.tosLinkTextFlag.Value
	}
	if x.privacyConfirmFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.PrivacyConfirm = *x.privacyConfirmFlag.Value
	}
	if x.privacyLinkTextFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.PrivacyLinkText = *x.privacyLinkTextFlag.Value
	}
	if x.saveButtonTextFlag.Changed() {
		x.changed = true
		x.RegistrationOrgScreenText.SaveButtonText = *x.saveButtonTextFlag.Value
	}
}

func (x *RegistrationOrgScreenTextFlag) Changed() bool {
	return x.changed
}

type RegistrationUserScreenTextFlag struct {
	*RegistrationUserScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                  *cli_client.StringParser
	descriptionFlag            *cli_client.StringParser
	descriptionOrgRegisterFlag *cli_client.StringParser
	firstnameLabelFlag         *cli_client.StringParser
	lastnameLabelFlag          *cli_client.StringParser
	emailLabelFlag             *cli_client.StringParser
	usernameLabelFlag          *cli_client.StringParser
	languageLabelFlag          *cli_client.StringParser
	genderLabelFlag            *cli_client.StringParser
	passwordLabelFlag          *cli_client.StringParser
	passwordConfirmLabelFlag   *cli_client.StringParser
	tosAndPrivacyLabelFlag     *cli_client.StringParser
	tosConfirmFlag             *cli_client.StringParser
	tosLinkTextFlag            *cli_client.StringParser
	privacyConfirmFlag         *cli_client.StringParser
	privacyLinkTextFlag        *cli_client.StringParser
	nextButtonTextFlag         *cli_client.StringParser
	backButtonTextFlag         *cli_client.StringParser
}

func (x *RegistrationUserScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("RegistrationUserScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.descriptionOrgRegisterFlag = cli_client.NewStringParser(x.set, "description-org-register", "")
	x.firstnameLabelFlag = cli_client.NewStringParser(x.set, "firstname-label", "")
	x.lastnameLabelFlag = cli_client.NewStringParser(x.set, "lastname-label", "")
	x.emailLabelFlag = cli_client.NewStringParser(x.set, "email-label", "")
	x.usernameLabelFlag = cli_client.NewStringParser(x.set, "username-label", "")
	x.languageLabelFlag = cli_client.NewStringParser(x.set, "language-label", "")
	x.genderLabelFlag = cli_client.NewStringParser(x.set, "gender-label", "")
	x.passwordLabelFlag = cli_client.NewStringParser(x.set, "password-label", "")
	x.passwordConfirmLabelFlag = cli_client.NewStringParser(x.set, "password-confirm-label", "")
	x.tosAndPrivacyLabelFlag = cli_client.NewStringParser(x.set, "tos-and-privacy-label", "")
	x.tosConfirmFlag = cli_client.NewStringParser(x.set, "tos-confirm", "")
	x.tosLinkTextFlag = cli_client.NewStringParser(x.set, "tos-link-text", "")
	x.privacyConfirmFlag = cli_client.NewStringParser(x.set, "privacy-confirm", "")
	x.privacyLinkTextFlag = cli_client.NewStringParser(x.set, "privacy-link-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	x.backButtonTextFlag = cli_client.NewStringParser(x.set, "back-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *RegistrationUserScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.Description = *x.descriptionFlag.Value
	}
	if x.descriptionOrgRegisterFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.DescriptionOrgRegister = *x.descriptionOrgRegisterFlag.Value
	}
	if x.firstnameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.FirstnameLabel = *x.firstnameLabelFlag.Value
	}
	if x.lastnameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.LastnameLabel = *x.lastnameLabelFlag.Value
	}
	if x.emailLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.EmailLabel = *x.emailLabelFlag.Value
	}
	if x.usernameLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.UsernameLabel = *x.usernameLabelFlag.Value
	}
	if x.languageLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.LanguageLabel = *x.languageLabelFlag.Value
	}
	if x.genderLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.GenderLabel = *x.genderLabelFlag.Value
	}
	if x.passwordLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.PasswordLabel = *x.passwordLabelFlag.Value
	}
	if x.passwordConfirmLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.PasswordConfirmLabel = *x.passwordConfirmLabelFlag.Value
	}
	if x.tosAndPrivacyLabelFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.TosAndPrivacyLabel = *x.tosAndPrivacyLabelFlag.Value
	}
	if x.tosConfirmFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.TosConfirm = *x.tosConfirmFlag.Value
	}
	if x.tosLinkTextFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.TosLinkText = *x.tosLinkTextFlag.Value
	}
	if x.privacyConfirmFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.PrivacyConfirm = *x.privacyConfirmFlag.Value
	}
	if x.privacyLinkTextFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.PrivacyLinkText = *x.privacyLinkTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
	if x.backButtonTextFlag.Changed() {
		x.changed = true
		x.RegistrationUserScreenText.BackButtonText = *x.backButtonTextFlag.Value
	}
}

func (x *RegistrationUserScreenTextFlag) Changed() bool {
	return x.changed
}

type SelectAccountScreenTextFlag struct {
	*SelectAccountScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                     *cli_client.StringParser
	descriptionFlag               *cli_client.StringParser
	titleLinkingProcessFlag       *cli_client.StringParser
	descriptionLinkingProcessFlag *cli_client.StringParser
	otherUserFlag                 *cli_client.StringParser
	sessionStateActiveFlag        *cli_client.StringParser
	sessionStateInactiveFlag      *cli_client.StringParser
	userMustBeMemberOfOrgFlag     *cli_client.StringParser
}

func (x *SelectAccountScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SelectAccountScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.titleLinkingProcessFlag = cli_client.NewStringParser(x.set, "title-linking-process", "")
	x.descriptionLinkingProcessFlag = cli_client.NewStringParser(x.set, "description-linking-process", "")
	x.otherUserFlag = cli_client.NewStringParser(x.set, "other-user", "")
	x.sessionStateActiveFlag = cli_client.NewStringParser(x.set, "session-state-active", "")
	x.sessionStateInactiveFlag = cli_client.NewStringParser(x.set, "session-state-inactive", "")
	x.userMustBeMemberOfOrgFlag = cli_client.NewStringParser(x.set, "user-must-be-member-of-org", "")
	parent.AddFlagSet(x.set)
}

func (x *SelectAccountScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.Description = *x.descriptionFlag.Value
	}
	if x.titleLinkingProcessFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.TitleLinkingProcess = *x.titleLinkingProcessFlag.Value
	}
	if x.descriptionLinkingProcessFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.DescriptionLinkingProcess = *x.descriptionLinkingProcessFlag.Value
	}
	if x.otherUserFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.OtherUser = *x.otherUserFlag.Value
	}
	if x.sessionStateActiveFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.SessionStateActive = *x.sessionStateActiveFlag.Value
	}
	if x.sessionStateInactiveFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.SessionStateInactive = *x.sessionStateInactiveFlag.Value
	}
	if x.userMustBeMemberOfOrgFlag.Changed() {
		x.changed = true
		x.SelectAccountScreenText.UserMustBeMemberOfOrg = *x.userMustBeMemberOfOrgFlag.Value
	}
}

func (x *SelectAccountScreenTextFlag) Changed() bool {
	return x.changed
}

type SuccessLoginScreenTextFlag struct {
	*SuccessLoginScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag                   *cli_client.StringParser
	autoRedirectDescriptionFlag *cli_client.StringParser
	redirectedDescriptionFlag   *cli_client.StringParser
	nextButtonTextFlag          *cli_client.StringParser
}

func (x *SuccessLoginScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("SuccessLoginScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.autoRedirectDescriptionFlag = cli_client.NewStringParser(x.set, "auto-redirect-description", "")
	x.redirectedDescriptionFlag = cli_client.NewStringParser(x.set, "redirected-description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *SuccessLoginScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.SuccessLoginScreenText.Title = *x.titleFlag.Value
	}
	if x.autoRedirectDescriptionFlag.Changed() {
		x.changed = true
		x.SuccessLoginScreenText.AutoRedirectDescription = *x.autoRedirectDescriptionFlag.Value
	}
	if x.redirectedDescriptionFlag.Changed() {
		x.changed = true
		x.SuccessLoginScreenText.RedirectedDescription = *x.redirectedDescriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.SuccessLoginScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *SuccessLoginScreenTextFlag) Changed() bool {
	return x.changed
}

type UsernameChangeDoneScreenTextFlag struct {
	*UsernameChangeDoneScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag          *cli_client.StringParser
	descriptionFlag    *cli_client.StringParser
	nextButtonTextFlag *cli_client.StringParser
}

func (x *UsernameChangeDoneScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UsernameChangeDoneScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *UsernameChangeDoneScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.UsernameChangeDoneScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.UsernameChangeDoneScreenText.Description = *x.descriptionFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.UsernameChangeDoneScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *UsernameChangeDoneScreenTextFlag) Changed() bool {
	return x.changed
}

type UsernameChangeScreenTextFlag struct {
	*UsernameChangeScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag            *cli_client.StringParser
	descriptionFlag      *cli_client.StringParser
	usernameLabelFlag    *cli_client.StringParser
	cancelButtonTextFlag *cli_client.StringParser
	nextButtonTextFlag   *cli_client.StringParser
}

func (x *UsernameChangeScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("UsernameChangeScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.usernameLabelFlag = cli_client.NewStringParser(x.set, "username-label", "")
	x.cancelButtonTextFlag = cli_client.NewStringParser(x.set, "cancel-button-text", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *UsernameChangeScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.UsernameChangeScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.UsernameChangeScreenText.Description = *x.descriptionFlag.Value
	}
	if x.usernameLabelFlag.Changed() {
		x.changed = true
		x.UsernameChangeScreenText.UsernameLabel = *x.usernameLabelFlag.Value
	}
	if x.cancelButtonTextFlag.Changed() {
		x.changed = true
		x.UsernameChangeScreenText.CancelButtonText = *x.cancelButtonTextFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.UsernameChangeScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *UsernameChangeScreenTextFlag) Changed() bool {
	return x.changed
}

type VerifyMFAOTPScreenTextFlag struct {
	*VerifyMFAOTPScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag          *cli_client.StringParser
	descriptionFlag    *cli_client.StringParser
	codeLabelFlag      *cli_client.StringParser
	nextButtonTextFlag *cli_client.StringParser
}

func (x *VerifyMFAOTPScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMFAOTPScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.codeLabelFlag = cli_client.NewStringParser(x.set, "code-label", "")
	x.nextButtonTextFlag = cli_client.NewStringParser(x.set, "next-button-text", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyMFAOTPScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.VerifyMFAOTPScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.VerifyMFAOTPScreenText.Description = *x.descriptionFlag.Value
	}
	if x.codeLabelFlag.Changed() {
		x.changed = true
		x.VerifyMFAOTPScreenText.CodeLabel = *x.codeLabelFlag.Value
	}
	if x.nextButtonTextFlag.Changed() {
		x.changed = true
		x.VerifyMFAOTPScreenText.NextButtonText = *x.nextButtonTextFlag.Value
	}
}

func (x *VerifyMFAOTPScreenTextFlag) Changed() bool {
	return x.changed
}

type VerifyMFAU2FScreenTextFlag struct {
	*VerifyMFAU2FScreenText

	changed bool
	set     *pflag.FlagSet

	titleFlag             *cli_client.StringParser
	descriptionFlag       *cli_client.StringParser
	validateTokenTextFlag *cli_client.StringParser
	notSupportedFlag      *cli_client.StringParser
	errorRetryFlag        *cli_client.StringParser
}

func (x *VerifyMFAU2FScreenTextFlag) AddFlags(parent *pflag.FlagSet) {
	x.set = pflag.NewFlagSet("VerifyMFAU2FScreenText", pflag.ContinueOnError)

	x.titleFlag = cli_client.NewStringParser(x.set, "title", "")
	x.descriptionFlag = cli_client.NewStringParser(x.set, "description", "")
	x.validateTokenTextFlag = cli_client.NewStringParser(x.set, "validate-token-text", "")
	x.notSupportedFlag = cli_client.NewStringParser(x.set, "not-supported", "")
	x.errorRetryFlag = cli_client.NewStringParser(x.set, "error-retry", "")
	parent.AddFlagSet(x.set)
}

func (x *VerifyMFAU2FScreenTextFlag) ParseFlags(parent *pflag.FlagSet, args []string) {
	flagIndexes := cli_client.FieldIndexes(args)

	if err := x.set.Parse(flagIndexes.Primitives().Args); err != nil {
		cli_client.Logger().Error("failed to parse flags", "cause", err)
		os.Exit(1)
	}

	if x.titleFlag.Changed() {
		x.changed = true
		x.VerifyMFAU2FScreenText.Title = *x.titleFlag.Value
	}
	if x.descriptionFlag.Changed() {
		x.changed = true
		x.VerifyMFAU2FScreenText.Description = *x.descriptionFlag.Value
	}
	if x.validateTokenTextFlag.Changed() {
		x.changed = true
		x.VerifyMFAU2FScreenText.ValidateTokenText = *x.validateTokenTextFlag.Value
	}
	if x.notSupportedFlag.Changed() {
		x.changed = true
		x.VerifyMFAU2FScreenText.NotSupported = *x.notSupportedFlag.Value
	}
	if x.errorRetryFlag.Changed() {
		x.changed = true
		x.VerifyMFAU2FScreenText.ErrorRetry = *x.errorRetryFlag.Value
	}
}

func (x *VerifyMFAU2FScreenTextFlag) Changed() bool {
	return x.changed
}
