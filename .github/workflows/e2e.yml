name: "ZITADEL e2e Tests"

on:
  workflow_call:
    inputs:
      tag_name:
        required: true
        type: string

jobs:
  test:
    strategy:
      matrix:
        browser: [firefox, chrome]
    services:
      # we currently use postgres because cockroach doesn't work
      postgres:
        image: postgres
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: zitadel
          PGUSER: zitadel
          POSTGRES_DB: zitadel
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      zitadel:
        image: ${{ inputs.tag_name }}
        credentials:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        options: >-
          --health-cmd "sh curl http://localhost:8080/management/v1/healthz || exit 1"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 8080:8080
        volumes:
          - e2e/config/github/zitadel.yaml:/app/zitadel.yaml
        env:
          ZITADEL_ARGS: "start-from-init --masterkeyFromEnv --config /app/zitadel.yaml --steps /app/zitadel.yaml"
          ZITADEL_MASTERKEY: MasterkeyNeedsToHave32Characters
          ZITADEL_Log_Level: debug
          ZITADEL_ExternalDomain: localhost
          ZITADEL_ExternalSecure: false
          ZITADEL_TLS_Enabled: false
          ZITADEL_Database_postgres_Host: postgres
          ZITADEL_Database_postgres_Port: 5432
          ZITADEL_Database_postgres_Database: zitadel
          ZITADEL_Database_postgres_MaxOpenConns: 20
          ZITADEL_Database_postgres_MaxIdleConns: 10
          ZITADEL_Database_postgres_User_Username: zitadel
          ZITADEL_Database_postgres_User_SSL_Mode: disable
          ZITADEL_Database_postgres_Admin_Username: zitadel
          ZITADEL_Database_postgres_Admin_SSL_Mode: disable
          ZITADEL_FirstInstance_Org_Human_PasswordChangeRequired: false
          ZITADEL_LogStore_Access_Database_Enabled: true
          ZITADEL_LogStore_Access_Database_Debounce_MinFrequency: 0s
          ZITADEL_LogStore_Access_Database_Debounce_MaxBulkSize: 0
          ZITADEL_LogStore_Execution_Database_Enabled: true
          ZITADEL_LogStore_Execution_Stdout_Enabled: false
          ZITADEL_Quotas_Access_ExhaustedCookieKey: "zitadel.quota.limiting"
          ZITADEL_Quotas_Access_ExhaustedCookieMaxAge: "60s"
          ZITADEL_Projections_Customizations_NotificationsQuotas_RequeueEvery: 1s
          ZITADEL_DefaultInstance_LoginPolicy_MfaInitSkipLifetime: "0"
          ZITADEL_SystemAPIUsers_cypress_KeyData: "LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUF6aStGRlNKTDdmNXl3NEtUd3pnTQpQMzRlUEd5Y20vTStrVDBNN1Y0Q2d4NVYzRWFESXZUUUtUTGZCYUVCNDV6YjlMdGpJWHpEdzByWFJvUzJoTzZ0CmgrQ1lRQ3ozS0N2aDA5QzBJenhaaUIySVMzSC9hVCs1Qng5RUZZK3ZuQWtaamNjYnlHNVlOUnZtdE9sbnZJZUkKSDdxWjB0RXdrUGZGNUdFWk5QSlB0bXkzVUdWN2lvZmRWUVMxeFJqNzMrYU13NXJ2SDREOElkeWlBQzNWZWtJYgpwdDBWajBTVVgzRHdLdG9nMzM3QnpUaVBrM2FYUkYwc2JGaFFvcWRKUkk4TnFnWmpDd2pxOXlmSTV0eXhZc3duCitKR3pIR2RIdlczaWRPRGxtd0V0NUsycGFzaVJJV0syT0dmcSt3MEVjbHRRSGFidXFFUGdabG1oQ2tSZE5maXgKQndJREFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0tCg=="

    runs-on: ubuntu-latest
    env:
      ZITADEL_IMAGE: ${{ inputs.tag_name }}
    steps:
      - 
        name: Checkout Repository
        uses: actions/checkout@v3
      - 
        name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: e2e
          build: npm run build
          start: npm start
          browser: ${{ matrix.browser }}
      - 
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: production-tests-${{ matrix.browser }}
          path: |
            e2e/cypress/screenshots
            e2e/cypress/videos
            e2e/cypress/results
          retention-days: 30

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v2
      #   with:
      #     driver: docker
      #     install: true
      # - name: Test ${{ matrix.browser }}
      #   run: docker compose run --service-ports e2e --browser ${{ matrix.browser }}
      #   working-directory: e2e/config/host.docker.internal
      # - name: Ensure Artifacts Directory Exists
      #   run: mkdir -p ./.artifacts
      # - name: Save ZITADEL Logs
      #   if: always()
      #   run: docker compose logs zitadel > ../../../.artifacts/e2e-compose-zitadel.log
      #   working-directory: e2e/config/host.docker.internal
      # - name: Save Prepare Logs
      #   if: always()
      #   run: docker compose logs prepare > ../../../.artifacts/e2e-compose-prepare.log
      #   working-directory: e2e/config/host.docker.internal
      # - name: Archive production tests ${{ matrix.browser }}
      #   if: always()
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: production-tests-${{ matrix.browser }}
      #     path: |
      #       e2e/cypress/results
      #       e2e/cypress/videos
      #       e2e/cypress/screenshots
      #       .artifacts/e2e-compose-zitadel.log
      #       .artifacts/e2e-compose-prepare.log
      #     retention-days: 30
