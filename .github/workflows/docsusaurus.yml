name: Docs
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            src:
              - 'docs/**'
              - 'proto/**'
              - '.github/workflows/docsusaurus.yml'
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'yarn'
          cache-dependency-path: docs/yarn.lock
      - name: Install Vercel CLI
        run: yarn global add vercel
      - name: Install Dependencies
        if: steps.filter.outputs.src == 'true'
        run: yarn install --frozen-lockfile
        working-directory: ./docs
      - uses: actions/cache@v4
        if: steps.filter.outputs.src == 'true'
        with:
          path: |
            ${{ github.workspace }}/docs/.docusaurus
            ${{ github.workspace }}/docs/node_modules/.cache
          key: |
            ${{ runner.os }}-docusaurus-${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          restore-keys: |
            ${{ runner.os }}-docusaurus-${{ hashFiles('**/package-lock.json', '**/npm-shrinkwrap.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
              ${{ runner.os }}-docusaurus-${{ hashFiles('docs/yarn.lock') }}
      - name: Prepare Preview Environment
        if: ${{ github.ref != 'refs/heads/main' && steps.filter.outputs.src == 'true' }} 
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Perpare Production Environment
        if: ${{ github.ref == 'refs/heads/main' && steps.filter.outputs.src == 'true' }} 
        run: vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }} 
      - name: Build Project Artifacts
        if: steps.filter.outputs.src == 'true'
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Preview
        if: ${{ github.ref != 'refs/heads/main' && steps.filter.outputs.src == 'true' }} 
        run: |
          vercel deploy --prebuilt --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt
          echo "deploymentUrl=$(cat deployment-url.txt)" >> $GITHUB_OUTPUT
      - name: Deploy Production
        if: ${{ github.ref == 'refs/heads/main' && steps.filter.outputs.src == 'true'}}
        run: |
          vercel deploy --prebuilt --archive=tgz --prod --token=${{ secrets.VERCEL_TOKEN }} >deployment-url.txt
      - name: Get Preview URL
        run: |
          vercel ls --token=$VERCEL_TOKEN --meta base_hash=${{ env.META_TAG }} &> vercel-output
          url=$(cat vercel-output | grep http | awk '{print $2}')
          echo "New preview URL: $url"
          echo "META_TAG=$META_TAG"
          echo "VERCEL_URL=$url" >> "$GITHUB_OUTPUT"
      - uses: mshick/add-pr-comment@v2
        with:
          message: |
            Your build has completed!

            [Preview deployment](${{ steps.vercel.outputs.VERCEL_URL }})