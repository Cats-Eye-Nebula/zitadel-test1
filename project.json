{
  "root": "",
  "sourceRoot": "",
  "projectType": "application",
  "targets": {
    "build": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "go mod download",
          "go build -o=zitadel"
        ],
        "cwd": ""
      },
      "inputs": ["!{workspaceRoot}/console/**/*", "!{workspaceRoot}/docs/**/*"],
      "outputs": ["{workspaceRoot}/zitadel"],
      "dependsOn": ["generate"]
    },
    "generate": {
      "executor": "nx:noop",
      "dependsOn": ["generate_grpc", "generate_static", "generate_assets"]
    },
    "generate_grpc": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "go install github.com/zitadel/zitadel/internal/protoc/protoc-gen-authoption",
          "rm -rf .artifacts/grpc",
          "for i in $(find proto/zitadel -iname *.proto); do export PATH=$(go env GOPATH)/bin:$PATH && ./node_modules/.bin/buf generate ${i}; done",
          "cp .artifacts/grpc/zitadel/auth.pb.authoptions.go .artifacts/grpc/github.com/zitadel/zitadel/pkg/grpc/auth",
          "cp .artifacts/grpc/zitadel/admin.pb.authoptions.go .artifacts/grpc/github.com/zitadel/zitadel/pkg/grpc/admin",
          "cp .artifacts/grpc/zitadel/management.pb.authoptions.go .artifacts/grpc/github.com/zitadel/zitadel/pkg/grpc/management",
          "cp .artifacts/grpc/zitadel/system.pb.authoptions.go .artifacts/grpc/github.com/zitadel/zitadel/pkg/grpc/system",
          "cp -R .artifacts/grpc/github.com/zitadel/zitadel/pkg/grpc/* pkg/grpc",
          "mkdir -p openapi/v2/zitadel",
          "cp .artifacts/grpc/zitadel/*.swagger.json openapi/v2/zitadel"
        ],
        "parallel": false,
        "cwd": ""
      },
      "inputs": [
        "!{workspaceRoot}/**/*",
        "{workspaceRoot}/proto/**/*",
        "{workspaceRoot}/tools/**/*",
        "{workspaceRoot}/internal/protoc/**/*"
      ],
      "outputs": [
        "{workspaceRoot}/.artifacts/grpc/zitadel/**/*",
        "{workspaceRoot}/pkg/grpc/**/*"
      ]
    },
    "generate_static": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "export PATH=$(go env GOPATH)/bin:$PATH",
          "export PATH=$(go env GOPATH)/bin:$PATH && go install github.com/rakyll/statik@v0.1.7",
          "export PATH=$(go env GOPATH)/bin:$PATH && go generate internal/api/ui/login/statik/generate.go",
          "export PATH=$(go env GOPATH)/bin:$PATH && go generate internal/api/ui/login/static/generate.go",
          "export PATH=$(go env GOPATH)/bin:$PATH && go generate internal/notification/statik/generate.go",
          "export PATH=$(go env GOPATH)/bin:$PATH && go generate internal/statik/generate.go"
        ],
        "cwd": "",
        "parallel": false
      },
      "inputs": [
        "!{workspaceRoot}/**/*",
        "{workspaceRoot}/internal/api/ui/**/*",
        "{workspaceRoot}/internal/notification/**/*",
        "{workspaceRoot}/internal/statik/**/*"
      ],
      "outputs": []
    },
    "generate_assets": {
      "executor": "nx:run-commands",
      "options": {
        "commands": [
          "go install github.com/rakyll/statik@v0.1.7",
          "export PATH=$(go env GOPATH)/bin:$PATH && go generate openapi/statik/generate.go",
          "mkdir -p docs/apis/assets/",
          "go run internal/api/assets/generator/asset_generator.go -directory=internal/api/assets/generator/ -assets=docs/apis/assets/assets.md"
        ],
        "cwd": "",
        "parallel": false
      },
      "inputs": [
        "!{workspaceRoot}/**/*",
        "{workspaceRoot}/internal/api/assets/**/*"
      ],
      "outputs": ["{workspaceRoot}/docs/apis/assets/**/*"]
    }
  }
}
