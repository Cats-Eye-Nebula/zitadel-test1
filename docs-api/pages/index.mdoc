---
title: Get started with Markdoc
description: How to get started with Markdoc
---

# ZITADEL API reference

{% callout %}
This will be our full-featured API reference for ZITADEL. Notice it's still work in progress but feel free to report issues and helpful feedback ðŸ‘· You can find the main issue [here](https://github.com/zitadel/zitadel/issues/4839).
{% /callout %}

{% section %}
{% column columns=2 %}

### Introduction

ZITADEL provides five APIs for different use cases. Four of these APIs are built with GRPC and generate a REST service. Each service's proto definition is located in the source control on GitHub. {% .text-base %}

As we generate the REST services and Swagger file out of the proto definition we recommend that you rely on the proto file. We annotate the corresponding REST methods on each possible call as well as the AuthN and AuthZ requirements. The last API (assets) is only a REST API because ZITADEL uses multipart form data for certain elements.

{% /column %}

{% column %}

Don't know how to get started? {% .ztdl-subheader .pb-0 %}

Read our Quickstart Guide [here](https://zitadel.com/docs/guides/start/quickstart)

You're not a developer? {% .ztdl-subheader .pb-0 %}

Consider reading our Guide [here](https://zitadel.com/docs/guides/introduction) or contact us at [support@zitadel.com](mailto:support@zitadel.com).

{% card title="Base URLs" %}
**Auth**: {% instanceDomain("your-domain", "auth", "v1") %}{% .pt-4 .pb-2 m-0 %}

**Management** {% instanceDomain("your-domain", "management", "v1") %}{% .py-2 m-0 %}

**Admin** {% instanceDomain("your-domain", "admin", "v1") %}{% .py-2 m-0 %}

**System** {% instanceDomain("your-domain", "system", "v1") %}{% .py-2 m-0 %}

**Assets** {% instanceDomain("your-domain", "assets", "v1") %}{% .py-4 .pt-2 m-0 %}

{% /card %}
{% /column %}
{% /section %}

{% section %}
{% column %}

### Authentication

You can authorize your requests for ZITADEL API's by multiple methods.
These methods rely highly on the environment of your application.
You can either use an OIDC/OAuth2 Token or generate and use a Personal Access Token.

To successfully authenticate your request, send a valid `Authorization` header, using the `Bearer` scheme.

You can use the token directly after a user has authenticated in your app, or generate Peronsal Access Tokens in the ZITADEL Console.

Your Tokens carry many privileges, so be sure to keep them secure! Do not share your Tokens in publicly accessible areas such as GitHub, client-side code, and so forth.

All API requests must be made over HTTPS. Calls made over plain HTTP will fail. Most API requests without authentication will also fail.
{% /column %}

{% column %}
{% card title="User Info Endpoint" %}
This request gets the basic user information from the user

```bash
curl {% instanceDomain("your-domain", "auth", "v1") %} \
  -u 51IK2AACdCycJe9V8zmsnX1ByJhyRegEyFAwcgEA
# The colon prevents curl from asking for a password.
```

{% /card %}
{% /column %}

{% /section %}

### Organization Context

...blabla use `x-zitadel-orgid` header.

{% section %}
{% column %}

### Errors

Depending if your using our GRPC Service or REST, you may encounter different types of errors.

If your using GRPC you'll get a code attribute as a response depending on the outcome.
In general you will get a 0 for an OK rensponse. For all other types take a look at the table or the [official documentation](https://grpc.github.io/grpc/core/md_doc_statuscodes.html).

If your using REST, ZITADEL will return conventional HTTP response codes.
If your familiar with HTTP you know that 2xx codes stand for successful responses while 4xx indicate an issue on missing information provided.
5xx errors state that there was an issue with the server.

If your getting a 401 error code you may consider reading the [Authentication Chapter](#authentication) as you may doing something wrong with your headers.

{% /column %}
{% column %}
{% card title="Status Codes" hasProtocolToggle="true" protocol=$protocol %}
hello {% $protocol %} 

{% if equals($protocol, "grpc") %}


| Code              | Number | Description                                                                                                                              |
| :---------------- | :----- | :--------------------------------------------------------------------------------------------------------------------------------------- |
| OK                | 0      | Not an error, return on success {% .text-xs %}                                                                                           |
| CANCELLED         | 1      | The operation was cancelled {% .text-xs %}                                                                                               |
| UNKNOWN           | 2      | Unknown error {% .text-xs %}                                                                                                             |
| INVALID_ARGUMENT  | 3      | The client specified an invalid argument {% .text-xs %}                                                                                  |
| DEADLINE_EXCEEDED | 4      | The deadline expired before the operation could complete {% .text-xs %}                                                                  |
| NOT_FOUND         | 5      | Some requested object was not found {% .text-xs %}                                                                                       |
| ALREADY_EXISTS    | 6      | Object already exists {% .text-xs %}                                                                                                     |
| PERMISSION_DENIED | 7      | Your unauthorized because you are missing an [auth header](#authentication) or your user does not have enough permission. {% .text-xs %} |
{% /if %}
{% if equals($protocol, "rest") %}
| Code              | Number | Description                                                    |
| :---------------- | :----- | :------------------------------------------------------------- |
| OK                | 200    | The request succeeded {% .text-xs %}                           |
| Bad Request       | 400    | Not an error, return on success {% .text-xs %}                 |
| Unauthorized      | 401    | You must send an [auth header](#authentication) {% .text-xs %} |
| Request Failed    | 402    | Not an error, return on success {% .text-xs %}                 |
| Forbidden         | 403    | Not an error, return on success {% .text-xs %}                 |
| Not found         | 404    | Not an error, return on success {% .text-xs %}                 |
| Conflict          | 409    | Not an error, return on success {% .text-xs %}                 |
| PERMISSION_DENIED | 429    | Not an error, return on success {% .text-xs %}                 |
{% /if %}
{% /card %}
{% /column %}
{% /section %}

{% section %}

{% column %}

### Metadata

With our APIs you get the possibility to store your application related data into ZITADEL Objects.
Metadata is currently supported for [Users](#Users) and [Organizations](#Organizations).

You can specify infinite key-value entries on these ZITADEL objects.

Make sure you don't save sensitive information as the values are not encrypted, or make sure you encode the value beforehand.

{% /column %}

{% column %}
{% card title="Endpoints" %}

{% endpoint method="POST" link="#org-metadata" %}/org/metadata/\_search{% /endpoint %}
{% endpoint method="GET" link="#org-metadata" %}/org/metadata/key{% /endpoint %}

{% endpoint method="POST" link="#user-metadata" %}/users/userId/metadata/\_search{% /endpoint %}
{% endpoint method="GET" link="#user-metadata" %}/users/userId/metadata/key{% /endpoint %}

{% /card %}
{% /column %}
{% /section %}

### Pagination

## Core resources

### Users

#### User Metadata

### Organizations

#### Org Metadata

### Policies

### Projects

```js
import { Tag } from '@markdoc/markdoc';

export const group = {
  render: 'Group',
  attributes: {
    items: { type: Array }
  },
  transform(node, config) {
    const attributes = node.transformAttributes(config);
    const children = node.transformChildren(config);

    for (const item of attributes.items) {
      /* Do something with each item */
    }

    return new Tag('Group', attributes, children);
  }
};
```

### Applications

### Members

## Authentication Service

The authentication API (aka Auth API) is used for all operations on the currently logged in user. The user id is taken from the sub claim in the token.

### Introduction

## Management Service

### Introduction1

## Admin Service

### Introduction2

## Open Id Connect

## SAML
