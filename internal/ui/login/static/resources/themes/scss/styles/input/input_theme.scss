@import '../theming/theming.scss';
@import './input.scss';

@mixin lgn-input-theme($theme-or-color-config) {
    $theme: lgn-private-legacy-get-theme($theme-or-color-config);
    // @include lgn-private-check-duplicate-theme-styles($theme, 'mat-button') {
      $color: lgn-get-color-config($theme);

      @if $color != null {
        @include lgn-input-color($color);
      }
    // }
}

@mixin lgn-input-color($config-or-theme) {
    $config: lgn-get-color-config($config-or-theme);
    $primary: map-get($config, primary);
    $warn: map-get($config, warn);
    $background: map-get($config, background);
    $foreground: map-get($config, foreground);

    input:not([disabled]), .lgn-input:not([disabled]) {
      border-color: lgn-color($foreground, input-border);
    }
  
    input, .lgn-input {
      color: lgn-color($foreground, text);
      background-color: lgn-color($background, input);

      &:hover {
        border-color: lgn-color($foreground, input-border-hover);
      }

      &:active {
        @include _lgn-input-theme-property($config, 'border-color', default);
      }

      &:focus {
        @include _lgn-input-theme-property($config, 'border-color', default);
      }
    }

    input::placeholder,
    .lgn-input::placeholder {
        color: lgn-color($foreground, input-placeholder);
    }    
  }
  
  @mixin _lgn-input-theme-property($theme, $property, $hue) {
    $primary: map-get($theme, primary);
    #{$property}: lgn-color($primary, $hue);
  }
