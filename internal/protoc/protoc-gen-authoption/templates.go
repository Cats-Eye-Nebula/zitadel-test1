// Code generated by go-bindata.
// sources:
// templates/auth_method_mapping.go.tmpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesAuth_method_mappingGoTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x52\x4d\x6f\x1b\x2d\x10\x3e\xbf\xfc\x8a\xd1\x6a\x0f\xb1\xe5\x80\xde\xab\xa5\x1c\x2a\xa7\xa9\x72\x48\x6c\x29\x6e\xaf\x16\xd9\x1d\x63\xe4\x5d\x40\x03\xeb\x2a\x46\xfc\xf7\x8a\xdd\x4d\xbd\x6e\x52\xa9\x9c\x06\x98\x79\x3e\xe0\x11\x02\x56\xb6\x46\x50\x68\x90\x64\xc0\x1a\x5e\xdf\xc0\x91\x0d\xb6\xba\x55\x68\x6e\x65\x17\x0e\x2d\x86\x83\xad\x39\xdc\xaf\xe1\x79\xbd\x85\xaf\xf7\x8f\x5b\xce\x98\x93\xd5\x51\x2a\x84\x18\xf9\x83\x6e\x90\x7f\xb3\x9b\xa3\xe2\xcf\xb2\xc5\x94\x18\x63\xba\x75\x96\x02\xdc\x30\x00\x80\x42\x59\xab\x1a\xe4\xca\x36\xd2\x28\x6e\x49\x09\x45\xae\x2a\xfa\x4b\xf6\x5f\xa1\x74\x38\x74\xaf\xbc\xb2\xad\xa8\xa4\xf5\xe2\xac\x83\xac\xb1\x11\xda\x04\x24\x23\x1b\x21\x9d\x16\x59\xca\xb9\xf8\xd7\xee\x8c\x2f\x3c\xd2\x09\x49\xb4\xba\xae\x1b\xfc\x29\x09\x0b\x36\x63\x2c\x46\x20\x69\x14\x42\xe9\x61\x79\x07\x83\xfc\x17\xa4\x93\xae\xd0\x43\x56\x2f\xe6\x73\x06\x73\x88\xb1\xf4\xef\x8e\x60\x2e\x18\x3b\x49\x9a\x1e\xee\xbe\x74\xe1\xf0\xd4\xbf\x8e\x87\x3b\xe8\x05\xf2\x61\xff\x24\x9d\xd3\x46\x41\xec\x2d\x5e\x18\xdb\xcc\x58\xfa\xb1\x2b\xe3\x8e\x2b\x46\x28\xdb\x8c\xb7\x76\x21\xf7\x58\x17\xb4\x35\x50\xb6\x7c\xdd\x57\x1e\x8a\x6c\x96\x8f\x66\x79\x17\x74\xe3\xf9\xe9\x7f\x9e\x59\x77\x43\x77\x01\xd7\x80\x7a\x0f\xd2\xd4\x13\xdc\xdf\x15\xdf\x20\xb5\xda\xfb\x4c\x31\x99\xe9\xff\x4a\xc4\x58\x0e\x6f\xb2\x19\xbe\x38\x25\x3e\x31\x2d\x62\x1c\xab\x62\x39\x5a\x1e\x14\xc6\x2b\x98\xbc\x2e\x24\x4b\x28\x62\xfc\x8c\x3d\xa5\x62\xf1\x61\x6e\x75\xc0\xea\xb8\x91\x24\xdb\x3f\xe6\xfa\x8b\x07\x8d\x4d\x3d\x2a\xb8\x9e\x4d\x8b\x89\x7b\x34\xef\xcf\x1b\x23\x0c\x9b\xc4\xd8\xbe\x33\xd5\x87\x2f\xb4\xa4\xcf\x32\x5b\xd8\x3d\xe6\x08\x55\xe8\x82\xa5\x9b\x13\x92\xde\x6b\xa4\xd1\xe4\xd6\x1e\xd1\xfc\x18\xcf\x16\xfd\xe1\xca\x9a\x3d\xcc\x87\xeb\x5c\x6b\x35\x83\x9c\x3b\xfe\xdd\x48\x7a\x7b\xe9\xc3\x37\x41\x1c\xc3\x40\x18\x3a\x32\x70\x09\x25\xbf\xd2\xf0\x99\x84\x0b\xdd\xe2\x6f\xf9\x9b\x65\x77\x83\x53\x48\xe9\x57\x00\x00\x00\xff\xff\x0f\x58\x9d\x9d\xd7\x03\x00\x00")

func templatesAuth_method_mappingGoTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatesAuth_method_mappingGoTmpl,
		"templates/auth_method_mapping.go.tmpl",
	)
}

func templatesAuth_method_mappingGoTmpl() (*asset, error) {
	bytes, err := templatesAuth_method_mappingGoTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/auth_method_mapping.go.tmpl", size: 983, mode: os.FileMode(420), modTime: time.Unix(1592983058, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/auth_method_mapping.go.tmpl": templatesAuth_method_mappingGoTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"auth_method_mapping.go.tmpl": &bintree{templatesAuth_method_mappingGoTmpl, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
