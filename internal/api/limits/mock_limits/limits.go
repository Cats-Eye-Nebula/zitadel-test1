// Code generated by MockGen. DO NOT EDIT.
// Source: limits.go
//
// Generated by this command:
//
//	mockgen -source limits.go -destination ./mock_limits/limits.go
//
// Package mock_limits is a generated GoMock package.
package mock_limits

import (
	context "context"
	reflect "reflect"

	limits "github.com/zitadel/zitadel/internal/api/limits"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// Limits mocks base method.
func (m *MockQuerier) Limits(ctx context.Context, resourceOwner string) (*limits.Limits, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Limits", ctx, resourceOwner)
	ret0, _ := ret[0].(*limits.Limits)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Limits indicates an expected call of Limits.
func (mr *MockQuerierMockRecorder) Limits(ctx, resourceOwner any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Limits", reflect.TypeOf((*MockQuerier)(nil).Limits), ctx, resourceOwner)
}
