// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/internal/idp/providers/ldap (interfaces: ProviderInterface)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	idp "github.com/zitadel/zitadel/internal/idp"
	reflect "reflect"
)

// MockProviderInterface is a mock of ProviderInterface interface
type MockProviderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProviderInterfaceMockRecorder
}

// MockProviderInterfaceMockRecorder is the mock recorder for MockProviderInterface
type MockProviderInterfaceMockRecorder struct {
	mock *MockProviderInterface
}

// NewMockProviderInterface creates a new mock instance
func NewMockProviderInterface(ctrl *gomock.Controller) *MockProviderInterface {
	mock := &MockProviderInterface{ctrl: ctrl}
	mock.recorder = &MockProviderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderInterface) EXPECT() *MockProviderInterfaceMockRecorder {
	return m.recorder
}

// BeginAuth mocks base method
func (m *MockProviderInterface) BeginAuth(arg0 context.Context, arg1 string, arg2 ...interface{}) (idp.Session, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BeginAuth", varargs...)
	ret0, _ := ret[0].(idp.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginAuth indicates an expected call of BeginAuth
func (mr *MockProviderInterfaceMockRecorder) BeginAuth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginAuth", reflect.TypeOf((*MockProviderInterface)(nil).BeginAuth), varargs...)
}

// GetSession mocks base method
func (m *MockProviderInterface) GetSession(arg0, arg1 string) idp.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", arg0, arg1)
	ret0, _ := ret[0].(idp.Session)
	return ret0
}

// GetSession indicates an expected call of GetSession
func (mr *MockProviderInterfaceMockRecorder) GetSession(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockProviderInterface)(nil).GetSession), arg0, arg1)
}

// IsAutoCreation mocks base method
func (m *MockProviderInterface) IsAutoCreation() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoCreation")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoCreation indicates an expected call of IsAutoCreation
func (mr *MockProviderInterfaceMockRecorder) IsAutoCreation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoCreation", reflect.TypeOf((*MockProviderInterface)(nil).IsAutoCreation))
}

// IsAutoUpdate mocks base method
func (m *MockProviderInterface) IsAutoUpdate() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAutoUpdate")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAutoUpdate indicates an expected call of IsAutoUpdate
func (mr *MockProviderInterfaceMockRecorder) IsAutoUpdate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAutoUpdate", reflect.TypeOf((*MockProviderInterface)(nil).IsAutoUpdate))
}

// IsCreationAllowed mocks base method
func (m *MockProviderInterface) IsCreationAllowed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCreationAllowed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCreationAllowed indicates an expected call of IsCreationAllowed
func (mr *MockProviderInterfaceMockRecorder) IsCreationAllowed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCreationAllowed", reflect.TypeOf((*MockProviderInterface)(nil).IsCreationAllowed))
}

// IsLinkingAllowed mocks base method
func (m *MockProviderInterface) IsLinkingAllowed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLinkingAllowed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLinkingAllowed indicates an expected call of IsLinkingAllowed
func (mr *MockProviderInterfaceMockRecorder) IsLinkingAllowed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLinkingAllowed", reflect.TypeOf((*MockProviderInterface)(nil).IsLinkingAllowed))
}

// Name mocks base method
func (m *MockProviderInterface) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockProviderInterfaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockProviderInterface)(nil).Name))
}
