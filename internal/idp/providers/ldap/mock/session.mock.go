// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/zitadel/zitadel/internal/idp (interfaces: Session)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	idp "github.com/zitadel/zitadel/internal/idp"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// FetchUser mocks base method
func (m *MockSession) FetchUser(arg0 context.Context) (idp.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", arg0)
	ret0, _ := ret[0].(idp.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUser indicates an expected call of FetchUser
func (mr *MockSessionMockRecorder) FetchUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockSession)(nil).FetchUser), arg0)
}

// GetAuthURL mocks base method
func (m *MockSession) GetAuthURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAuthURL indicates an expected call of GetAuthURL
func (mr *MockSessionMockRecorder) GetAuthURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthURL", reflect.TypeOf((*MockSession)(nil).GetAuthURL))
}
