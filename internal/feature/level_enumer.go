// Code generated by "enumer -type Level -transform snake -trimprefix Level"; DO NOT EDIT.

package feature

import (
	"fmt"
	"strings"
)

const _LevelName = "unspecifieddefaultsysteminstanceorgprojectappuser"

var _LevelIndex = [...]uint8{0, 11, 18, 24, 32, 35, 42, 45, 49}

const _LevelLowerName = "unspecifieddefaultsysteminstanceorgprojectappuser"

func (i Level) String() string {
	if i < 0 || i >= Level(len(_LevelIndex)-1) {
		return fmt.Sprintf("Level(%d)", i)
	}
	return _LevelName[_LevelIndex[i]:_LevelIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _LevelNoOp() {
	var x [1]struct{}
	_ = x[LevelUnspecified-(0)]
	_ = x[LevelDefault-(1)]
	_ = x[LevelSystem-(2)]
	_ = x[LevelInstance-(3)]
	_ = x[LevelOrg-(4)]
	_ = x[LevelProject-(5)]
	_ = x[LevelApp-(6)]
	_ = x[LevelUser-(7)]
}

var _LevelValues = []Level{LevelUnspecified, LevelDefault, LevelSystem, LevelInstance, LevelOrg, LevelProject, LevelApp, LevelUser}

var _LevelNameToValueMap = map[string]Level{
	_LevelName[0:11]:       LevelUnspecified,
	_LevelLowerName[0:11]:  LevelUnspecified,
	_LevelName[11:18]:      LevelDefault,
	_LevelLowerName[11:18]: LevelDefault,
	_LevelName[18:24]:      LevelSystem,
	_LevelLowerName[18:24]: LevelSystem,
	_LevelName[24:32]:      LevelInstance,
	_LevelLowerName[24:32]: LevelInstance,
	_LevelName[32:35]:      LevelOrg,
	_LevelLowerName[32:35]: LevelOrg,
	_LevelName[35:42]:      LevelProject,
	_LevelLowerName[35:42]: LevelProject,
	_LevelName[42:45]:      LevelApp,
	_LevelLowerName[42:45]: LevelApp,
	_LevelName[45:49]:      LevelUser,
	_LevelLowerName[45:49]: LevelUser,
}

var _LevelNames = []string{
	_LevelName[0:11],
	_LevelName[11:18],
	_LevelName[18:24],
	_LevelName[24:32],
	_LevelName[32:35],
	_LevelName[35:42],
	_LevelName[42:45],
	_LevelName[45:49],
}

// LevelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func LevelString(s string) (Level, error) {
	if val, ok := _LevelNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _LevelNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Level values", s)
}

// LevelValues returns all values of the enum
func LevelValues() []Level {
	return _LevelValues
}

// LevelStrings returns a slice of all String values of the enum
func LevelStrings() []string {
	strs := make([]string, len(_LevelNames))
	copy(strs, _LevelNames)
	return strs
}

// IsALevel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Level) IsALevel() bool {
	for _, v := range _LevelValues {
		if i == v {
			return true
		}
	}
	return false
}
