syntax = "proto3";

package zitadel.policy.v2alpha;

option go_package = "github.com/zitadel/zitadel/pkg/grpc/policy/v2alpha;policy";

import "protoc-gen-openapiv2/options/annotations.proto";
import "google/protobuf/duration.proto";

message LoginPolicy {
    bool allow_username_password = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if a user is allowed to log in with his username and password"
        }
    ];
    bool allow_register = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if a person is allowed to register a user on this organization"
        }
    ];
    bool allow_external_idp = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if a user is allowed to add a defined identity provider. E.g. Google auth"
        }
    ];
   bool force_mfa = 4 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if a user MUST use a multi-factor to log in"
        }
    ];
    PasswordkeysType passwordkeys_type = 5 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if passwordkeys are allowed for users"
        }
    ];
    bool hide_password_reset = 6 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if password reset link should be shown in the login screen"
        }
    ];
    bool ignore_unknown_usernames = 7 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if unknown username on login screen directly returns an error or always displays the password screen"
        }
    ];
    string default_redirect_uri = 8 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines where the user will be redirected to if the login is started without app context (e.g. from mail)";
            example: "\"https://acme.com/ui/console\"";
        }
    ];
    google.protobuf.Duration password_check_lifetime = 9 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"864000s\"";
        }
    ];
    google.protobuf.Duration external_login_check_lifetime = 10 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"864000s\"";
        }
    ];
    google.protobuf.Duration mfa_init_skip_lifetime = 11 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"2592000s\"";
        }
    ];
    google.protobuf.Duration second_factor_check_lifetime = 12 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"64800s\"";
        }
    ];
    google.protobuf.Duration multi_factor_check_lifetime = 13 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "\"43200s\"";
        }
    ];
    repeated SecondFactorType second_factors = 14;
    repeated MultiFactorType multi_factors = 15;
    // If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success.
    bool allow_domain_discovery = 16 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "If set to true, the suffix (@domain.com) of an unknown username input on the login screen will be matched against the org domains and will redirect to the registration of that organization on success."
        }
    ];
    bool disable_login_with_email = 17 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if the user can additionally (to the login name) be identified by their verified email address"
        }
    ];
    bool disable_login_with_phone = 18 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "defines if the user can additionally (to the login name) be identified by their verified phone number"
        }
    ];
}

enum SecondFactorType {
    SECOND_FACTOR_TYPE_UNSPECIFIED = 0;
    SECOND_FACTOR_TYPE_OTP = 1;
    SECOND_FACTOR_TYPE_U2F = 2;
}

enum MultiFactorType {
    MULTI_FACTOR_TYPE_UNSPECIFIED = 0;
    MULTI_FACTOR_TYPE_U2F_WITH_VERIFICATION = 1;
}

enum PasswordkeysType {
    PASSWORDKEYS_TYPE_NOT_ALLOWED = 0;
    PASSWORDKEYS_TYPE_ALLOWED = 1;
}