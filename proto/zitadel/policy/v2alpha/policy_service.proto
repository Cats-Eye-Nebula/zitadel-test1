syntax = "proto3";

package zitadel.policy.v2alpha;

import "zitadel/options.proto";
import "zitadel/object/v2alpha/object.proto";
import "zitadel/policy/v2alpha/login_policy.proto";
import "zitadel/policy/v2alpha/password_policy.proto";
import "zitadel/policy/v2alpha/branding_settings.proto";
import "zitadel/policy/v2alpha/domain_settings.proto";
import "zitadel/policy/v2alpha/legal_settings.proto";
import "zitadel/policy/v2alpha/lockout_policy.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/policy/v2alpha;policy";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "Policy Service";
        version: "2.0-alpha";
        description: "This API is intended to manage policies in a ZITADEL instance. This project is in alpha state. It can AND will continue breaking until the services provide the same functionality as the current login.";
        contact:{
            name: "ZITADEL"
            url: "https://zitadel.com"
            email: "hi@zitadel.com"
        }
        license: {
            name: "Apache 2.0",
            url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
        };
    };
    schemes: HTTPS;
    schemes: HTTP;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";

    consumes: "application/grpc-web+proto";
    produces: "application/grpc-web+proto";

    host: "$ZITADEL_DOMAIN";
    base_path: "/";

    external_docs: {
        description: "Detailed information about ZITADEL",
        url: "https://zitadel.com/docs"
    }

    responses: {
        key: "403";
        value: {
            description: "Returned when the user does not have permission to access the resource.";
            schema: {
                json_schema: {
                    ref: "#/definitions/rpcStatus";
                }
            }
        }
    }
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    ref: "#/definitions/rpcStatus";
                }
            }
        }
    }
};

service PolicyService {
    rpc GetLoginPolicy (GetLoginPolicyRequest) returns (GetLoginPolicyResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/login"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active login policy";
            description: "Return the current active login policy for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetPasswordPolicy (GetPasswordPolicyRequest) returns (GetPasswordPolicyResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/password"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active password policy";
            description: "Return the current active password policy for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetBrandingSettings (GetBrandingSettingsRequest) returns (GetBrandingSettingsResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/branding"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active branding policy";
            description: "Return the current active branding policy for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetDomainSettings (GetDomainSettingsRequest) returns (GetDomainSettingsResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/domain"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active domain settings";
            description: "Return the current active domain settings for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetLegalSettings (GetLegalSettingsRequest) returns (GetLegalSettingsResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/legal"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active legal settings";
            description: "Return the current active legal settings for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetLockoutPolicy (GetLockoutPolicyRequest) returns (GetLockoutPolicyResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/lockout"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active lockout policy";
            description: "Return the current active lockout policy for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetActiveIdentityProviders (GetActiveIdentityProvidersRequest) returns (GetActiveIdentityProvidersResponse) {
        option (google.api.http) = {
            get: "/v2alpha/policies/idps"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get the current active identity providers";
            description: "Return the current active identity providers for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
    rpc GetGeneralSettings(GetGeneralSettingsRequest) returns (GetGeneralSettingsResponse) {
        option (google.api.http) = {
            get: "/v2alpha/general/settings"
        };

        option (zitadel.v1.auth_option) = {
            permission: "policy.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Get basic information over the instance";
            description: "Return the basic information of the instance for the requested context"
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
            };
        };
    }
}

message GetLoginPolicyRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetLoginPolicyResponse {
    zitadel.object.v2alpha.Details details = 1;
    zitadel.policy.v2alpha.LoginPolicy policy = 2;
}

message GetPasswordPolicyRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetPasswordPolicyResponse {
    zitadel.object.v2alpha.Details details = 1;
    zitadel.policy.v2alpha.PasswordPolicy policy = 2;
}

message GetBrandingSettingsRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetBrandingSettingsResponse {
    zitadel.object.v2alpha.Details details = 1;
    zitadel.policy.v2alpha.BrandingSettings settings = 2;
}

message GetDomainSettingsRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetDomainSettingsResponse {
    zitadel.object.v2alpha.Details details = 1;
    zitadel.policy.v2alpha.DomainSettings settings = 2;
}

message GetLegalSettingsRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetLegalSettingsResponse {
    zitadel.object.v2alpha.Details details = 1;
    zitadel.policy.v2alpha.LegalSettings settings = 2;
}

message GetLockoutPolicyRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetLockoutPolicyResponse {
    zitadel.object.v2alpha.Details details = 1;
    zitadel.policy.v2alpha.LockoutPolicy policy = 2;
}

message GetActiveIdentityProvidersRequest {
    zitadel.object.v2alpha.Organisation organisation = 1;
}

message GetActiveIdentityProvidersResponse {
    repeated string idps = 1;
}

message GetGeneralSettingsRequest {}

message GetGeneralSettingsResponse {
    string default_org_id = 1 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "default organization for the current context"
        }
    ];
    string default_language = 2 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            description: "default language for the current context"
            example: "\"en\""
        }
    ];
    repeated string supported_languages = 3 [
        (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
            example: "[\"en\", \"de\", \"it\"]"
        }
    ];
}