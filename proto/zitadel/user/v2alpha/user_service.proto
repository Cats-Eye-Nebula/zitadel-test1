syntax = "proto3";

package zitadel.user.v2alpha;

import "zitadel/object/v2alpha/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/user/v2alpha/auth.proto";
import "zitadel/user/v2alpha/email.proto";
import "zitadel/user/v2alpha/password.proto";
import "zitadel/user/v2alpha/user.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/user/v2alpha;user";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "User Service";
    version: "2.0-alpha";
    description: "This API is intended to manage users in a ZITADEL instance. This project is in alpha state. It can AND will continue breaking until the services provide the same functionality as the current login.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$ZITADEL_DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }

  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service UserService {

  // Create a new human user
  rpc AddHumanUser (AddHumanUserRequest) returns (AddHumanUserResponse) {
    option (google.api.http) = {
      post: "/v2alpha/users/human"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "user.write"
        org_field: "organisation"
      }
      http_response: {
        success_code: 201
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Create a user (Human)";
      description: "Create/import a new user with the type human. The newly created user will get a verification email if either the email address is not marked as verified and you did not request the verification to be returned."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  // Change the email of a user
  rpc SetEmail (SetEmailRequest) returns (SetEmailResponse) {
    option (google.api.http) = {
      post: "/v2alpha/users/{user_id}/email"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Change the user email";
      description: "Change the email address of a user. If the state is set to not verified, a verification code will be generated, which can be either returned or sent to the user by email."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  // Verify the email with the provided code
  rpc VerifyEmail (VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v2alpha/users/{user_id}/email/_verify"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Verify the email";
      description: "Verify the email with the generated code."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  rpc RegisterPasskey (RegisterPasskeyRequest) returns (RegisterPasskeyResponse) {
    option (google.api.http) = {
      post: "/users/{user_id}/passkeys"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };
    //TODO: DOCS and examples
  }
  rpc VerifyPasskeyRegistration (VerifyPasskeyRegistrationRequest) returns (VerifyPasskeyRegistrationResponse) {
    option (google.api.http) = {
      post: "/users/{user_id}/passkeys/{passkey_id}"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authenticated"
      }
    };
    //TODO: DOCS and examples
  }
  rpc CreatePasskeyRegistrationLink (CreatePasskeyRegistrationLinkRequest) returns (CreatePasskeyRegistrationLinkResponse) {
    option (google.api.http) = {
      post: "/users/{user_id}/passkeys/registration_link"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "user.passkey.write"
      }
    };
    //TODO: DOCS and examples
  }
}

message AddHumanUserRequest{
  // optionally set your own id unique for the user
  optional string user_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"d654e6ba-70a3-48ef-a95d-37c8d8a7901a\"";
    }
  ];
  // optionally set a unique username, if none is provided the email will be used
  optional string username = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"minnie-mouse\"";
    }
  ];
  zitadel.object.v2alpha.Organisation organisation = 3;
  SetHumanProfile profile = 4 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  SetHumanEmail email = 5 [
    (validate.rules).message.required = true,
    (google.api.field_behavior) = REQUIRED
  ];
  repeated SetMetadataEntry metadata = 6;
  oneof password_type {
    Password password = 7;
    HashedPassword hashed_password = 8;
  }
}

message AddHumanUserResponse {
  string user_id = 1;
  zitadel.object.v2alpha.Details details = 2;
  optional string email_code = 3;
}

message SetEmailRequest{
  string user_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629026806489455\"";
    }
  ];
  string email = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200, email: true},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"mini@mouse.com\"";
    }
  ];
  // if no verification is specified, an email is sent with the default url
  oneof verification {
    SendEmailVerificationCode send_code = 3;
    ReturnEmailVerificationCode return_code = 4;
    bool is_verified = 5 [(validate.rules).bool.const = true];
  }
}

message SetEmailResponse{
  zitadel.object.v2alpha.Details details = 1;
  // in case the verification was set to return_code, the code will be returned
  optional string verification_code = 2;
}

message VerifyEmailRequest{
  string user_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"69629026806489455\"";
    }
  ];
  string verification_code = 2 [
    (validate.rules).string = {min_len: 1, max_len: 20},
    (google.api.field_behavior) = REQUIRED,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 20;
      example: "\"SKJd342k\"";
      description: "\"the verification code generated during the set email request\"";
    }
  ];
}

message VerifyEmailResponse{
  zitadel.object.v2alpha.Details details = 1;
}

message RegisterPasskeyRequest{
  string user_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"d654e6ba-70a3-48ef-a95d-37c8d8a7901a\"";
    }
  ];
  string code = 2 [
    (validate.rules).string = {max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\"";
      example: "\"SomeSpecialCode\"";
      max_length: 200;
    }
  ];
  PasskeyAuthenticator authenticator = 3 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "\"optionally specify the authenticator type\"";
    }
  ];
}

message RegisterPasskeyResponse{
  zitadel.object.v2alpha.Details details = 1;
  bytes public_key_credential = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "json representation of public key credential creation options used by the passkey client"
      example: "\"eyJwdWJsaWNLZXkiOnsiY2hhbGxlbmdlIoplfZm4vM21qSzBPdjltN2x6VWhnclYyejFJSlVzZnpLd0Z1TytWTWtzRW1Icz0iLCJycCI6eyJuYW1lIjoiWklUQURFTCIsImlkIjoiYWNtZS1nem9lNHgueml0YWRlbC5jbG91ZCJ9LCJ1c2VyIjp7Im5hbWUiOiJ0ZXN0dXNlcjU1QGFjbWUueml0YWRlbC5jbG91ZCIsImRpc3BsYXlOYW1lIjoiVGVzdCBUZXN0IiwiaWQiOiJNVGd5TVRVMk1qWTBNakk1TXpBMk5qSTEifSwicHViS2V5Q3JlZFBhcmFtcyI6W3sidHlwZSI6InB1YmxpYy1rZXkiLCJhbGciOi03fSx7InR5cGUiOiJwdWJsaWMta2V5IiwiYWxnIjotMzV9LHsidHlwZSI6InB1YmxpYy1rZXkiLCJhbGciOi0zNn0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTI1N30seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTI1OH0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTI1OX0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTM3fSx7InR5cGUiOiJwdWJsaWMta2V5IiwiYWxnIjotMzh9LHsidHlwZSI6InB1YmxpYy1rZXkiLCJhbGciOi0zOX0seyJ0eXBlIjoicHVibGljLWtleSIsImFsZyI6LTh9XSwiYXV0aGVudGljYXRvclNlbGVjdGlvbiI6eyJ1c2VyVmVyaWZpY2F0aW9uIjoiZGlzY291cmFnZWQifn2ilGltZW91dCI6NjAwMDAsImF0dGVzdGF0aW9uIjoibm9uZSJ9fQ==\""
    }
  ];
}

message VerifyPasskeyRegistrationRequest{
  string user_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"d654e6ba-70a3-48ef-a95d-37c8d8a7901a\"";
    }
  ];
  string passkey_id = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"fabde5c8-c13f-481d-a90b-5e59a001a076\"";
    }
  ];
  bytes public_key_credential = 3 [
    (validate.rules).bytes = {min_len: 55, max_len: 1048576},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "JSON representation of public key credential issued by the passkey client";
      min_length: 55;
      max_length: 1048576; //1 MB
    }
  ];
  string passkey_name = 4 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"fido key\""
    }
  ];
  string code = 5 [
    (validate.rules).string = {max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "\"one time code generated by ZITADEL; required to start the passkey registration without user authentication\"";
      example: "\"SomeSpecialCode\"";
      max_length: 200;
    }
  ];
}

message VerifyPasskeyRegistrationResponse{
  zitadel.object.v2alpha.Details details = 1;
}

message CreatePasskeyRegistrationLinkRequest{
  string user_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      example: "\"d654e6ba-70a3-48ef-a95d-37c8d8a7901a\"";
    }
  ];
  // if no medium is specified, an email is sent with the default url
  oneof medium {
    SendPasskeyRegistrationLink send_link = 2;
    ReturnPasskeyRegistrationCode return_code = 3;
  }
}

message CreatePasskeyRegistrationLinkResponse{
  zitadel.object.v2alpha.Details details = 1;
  string code = 2;
}
