syntax = "proto3";

package zitadel.execution.v3alpha;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/struct.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";
import "zitadel/object/v2beta/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/execution/v3alpha;execution";

message Execution {
  string execution_id = 1 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"request.zitadel.session.v2beta.SessionService\"";
    }
  ];
  // Details provide some base information (such as the last change date) of the target.
  zitadel.object.v2beta.Details details = 2;
  // List of ordered list of targets/includes called during the execution.
  repeated ExecutionType executions = 3;
}

message ExecutionType {
  oneof type {
    string target = 1;
    string include = 2;
  }
}

message Condition {
  // Condition-types under which conditions the execution should happen, only one possible.
  oneof condition_type {
    option (validate.required) = true;

    // Condition-type to execute if a request on the defined API point happens.
    RequestExecution request = 1;
    // Condition-type to execute on response if a request on the defined API point happens.
    ResponseExecution response = 2;
    // Condition-type to execute if function is used, replaces actions v1.
    FunctionExecution function = 3;
    // Condition-type to execute if an event is created in the system.
    EventExecution event = 4;
  }
}



/*
{
  call: {
    service: {
      name: "zitadel.session.v2beta.SessionService",
      method: {
        name: "ListSessions"
      }
    }
  }
}

*/

message RequestExecution {
  // if the service is not defined the execution is made on every request
  optional Service service = 1;
}

message ResponseExecution {
    // if the service is not defined the execution is made on every response
    optional Service service = 1;
}

// Executed on all methods of the defined service
message Service {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  // If set executed on the specified method
  optional Method method = 2;
}

// Executed on a specifc grpc method
message Method {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 1000}];
}

// Executed on all events
message EventExecution{
  // If set executed on specified aggregate type
  optional AggregateTypeExecution aggregate_type = 1;
}

// Executed on a specific aggregate type
message AggregateTypeExecution {
  string type = 1 [(validate.rules).string = {min_len: 1, max_len: 1000}];
  // If set executed on specified event type
  optional EventTypeExecution event_type = 2;
}

// Executed on a specific event type
message EventTypeExecution {
  string type = 1 [(validate.rules).string = {min_len: 1, max_len: 1000}];
}

// Executed on the specified function
// TODO: wouldn't an enum work here?
message FunctionExecution {
  string name = 1 [(validate.rules).string = {min_len: 1, max_len: 1000}];
}