syntax = "proto3";

package zitadel.oidc.v2alpha;

import "zitadel/object/v2alpha/object.proto";
import "zitadel/protoc_gen_zitadel/v2/options.proto";
import "zitadel/oidc/v2alpha/authorization.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/zitadel/zitadel/pkg/grpc/oidc/v2alpha;oidc";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "OIDC Service";
    version: "2.0-alpha";
    description: "Get OIDC Auth Request details and create callback URLs. This project is in alpha state. It can AND will continue breaking until the services provide the same functionality as the current login.";
    contact:{
      name: "ZITADEL"
      url: "https://zitadel.com"
      email: "hi@zitadel.com"
    }
    license: {
      name: "Apache 2.0",
      url: "https://github.com/zitadel/zitadel/blob/main/LICENSE";
    };
  };
  schemes: HTTPS;
  schemes: HTTP;

  consumes: "application/json";
  consumes: "application/grpc";

  produces: "application/json";
  produces: "application/grpc";

  consumes: "application/grpc-web+proto";
  produces: "application/grpc-web+proto";

  host: "$ZITADEL_DOMAIN";
  base_path: "/";

  external_docs: {
    description: "Detailed information about ZITADEL",
    url: "https://zitadel.com/docs"
  }

  responses: {
    key: "403";
    value: {
      description: "Returned when the user does not have permission to access the resource.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
  responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist.";
      schema: {
        json_schema: {
          ref: "#/definitions/rpcStatus";
        }
      }
    }
  }
};

service OIDCService {
  rpc GetAuthRequest (GetAuthRequestRequest) returns (GetAuthRequestResponse) {
    option (google.api.http) = {
      get: "/v2alpha/oidc/auth_requests/{auth_request_id}"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authrequest.read"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Get OIDC Auth Request details";
      description: "Get OIDC Auth Request details by ID, obtained from the redirect URL. Returns details that are parsed from the application's Auth Request."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }

  rpc LinkSessionToAuthRequest (LinkSessionToAuthRequestRequest) returns (LinkSessionToAuthRequestResponse) {
    option (google.api.http) = {
      post: "/v2alpha/oidc/auth_requests/{auth_request_id}"
      body: "*"
    };

    option (zitadel.protoc_gen_zitadel.v2.options) = {
      auth_option: {
        permission: "authrequest.update"
      }
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Link session to the AuthRequest.";
      description: "Link an existing session to an auth request. With the link the auth request can be finished and tokens can be created under the session."
      responses: {
        key: "200"
        value: {
          description: "OK";
        }
      };
    };
  }
}

message GetAuthRequestRequest {
  string auth_request_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      description: "ID of the Auth Request, as obtained from the redirect URL.";
      example: "\"163840776835432705\"";
    }
  ];
}

message GetAuthRequestResponse {
  AuthRequest auth_request = 1;
}

message LinkSessionToAuthRequestRequest {
  string auth_request_id = 1 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      description: "ID of the Auth Request, as obtained from the redirect URL.";
      example: "\"163840776835432705\"";
    }
  ];

  string session_id = 2 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      description: "ID of the session, used to login the user. Connects the session to the Auth Request.";
      example: "\"163840776835432705\"";
    }
  ];

  string session_token = 3 [
    (validate.rules).string = {min_len: 1, max_len: 200},
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      min_length: 1;
      max_length: 200;
      description: "Token to verify the session is valid";
    }
  ];
}

message LinkSessionToAuthRequestResponse {
  zitadel.object.v2alpha.Details details = 1;
  string callback_url = 2 [
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "Callback URL where the user should be redirected, using a \"302 FOUND\" status. The URl will point to the standard OIDC authorize callback to finish the auth request.";
      example: "\"https://client.example.org/cb?code=SplxlOBeZQQYbYS6WxSbIA&state=af0ifjsldkj\""
    }
  ];
}
