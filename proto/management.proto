syntax = "proto3";

import "user.proto";
import "external_idp.proto";

package zitadel.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/management";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "management service";
        version: "1.0";
        contact:{
            url: "https://github.com/caos/zitadel/api/management" //TODO: should be swagger path
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};


service ManagementService {
    rpc GetUserByID(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.UserResponse) {
        option (google.api.http) = {
            get: "/users/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    // GetUserByLoginNameGlobal searches a user over all organisations
    // the login name has to match exactly
    rpc GetUserByLoginNameGlobal(GetUserByLoginNameGlobalRequest) returns (zitadel.v1.user.UserResponse) {
        option (google.api.http) = {
            get: "/global/users/_byloginname"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.global.read"
        };
    }

    // Limit should always be set, there is a default limit set by the service
    rpc SearchUsers(zitadel.v1.user.UserSearchRequest) returns (zitadel.v1.user.UserSearchResponse) {
        option (google.api.http) = {
            post: "/users/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc IsUserUnique(IsUserUniqueRequest) returns (UniqueUserResponse) {
        option (google.api.http) = {
            get: "/users/_isunique"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc CreateUser(zitadel.v1.user.CreateUserRequest) returns (zitadel.v1.user.CreateUserResponse) {
        option (google.api.http) = {
            post: "/users"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeactivateUser(zitadel.v1.user.UserIDRequest) returns (DeactivateUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ReactivateUser(zitadel.v1.user.UserIDRequest) returns (ReactivateUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc LockUser(zitadel.v1.user.UserIDRequest) returns (LockUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_lock"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc UnlockUser(zitadel.v1.user.UserIDRequest) returns (UnlockUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_unlock"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeleteUser(zitadel.v1.user.UserIDRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/users/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.delete"
        };
    }

    rpc UpdateUserName(zitadel.v1.user.UpdateUserNameRequest) returns (zitadel.v1.user.UpdateUserNameResponse) {
        option (google.api.http) = {
            get: "/users/{id}/username"
        };
        
        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanProfile(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.UserProfileResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/profile"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanProfile(zitadel.v1.user.UpdateUserProfileRequest) returns (UpdateUserProfileResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/profile"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanEmail(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.UserEmailResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/email"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanEmail(zitadel.v1.user.UpdateUserEmailRequest) returns (zitadel.v1.user.UpdateUserEmailResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/email"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ResendInitialMail(ResendInitialMailRequest) returns (ResendInitialMailResponse) {
        option (google.api.http) = {
            post: "/users/{id}/_resendinitialisation"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    //TODO: previously ResendEmailVerificationMail
    rpc ResendHumanEmailVerification(zitadel.v1.user.UserIDRequest) returns (ResendEmailVerificationResponse) {
        option (google.api.http) = {
            post: "/users/{id}/email/_resendverification"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }  

    rpc GetHumanPhone(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.UserPhoneResponse) {
        option (google.api.http) = {
            get: "/users/{id}/phone"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanPhone(zitadel.v1.user.UpdateUserPhoneRequest) returns (zitadel.v1.user.Update) {
        option (google.api.http) = {
            put: "/users/{id}/phone"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc RemoveHumanPhone(zitadel.v1.user.UserIDRequest) returns (RemoveUserPhoneResponse) {
        option (google.api.http) = {
            delete: "/users/{id}/phone"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ResendHumanPhoneVerification(zitadel.v1.user.UserIDRequest) returns (ResendPhoneVerificationResponse) {
        option (google.api.http) = {
            post: "/users/{id}/phone/_resendverification"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanAddress(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.UserAddressResponse) {
        option (google.api.http) = {
            get: "/users/{id}/address"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanAddress(zitadel.v1.user.UpdateUserAddressRequest) returns (zitadel.v1.user.UpdateUserAddressResponse) {
        option (google.api.http) = {
            put: "/users/{id}/address"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetUserMFAs(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.Multifactors) {
        option (google.api.http) = {
            get: "/users/{id}/mfas"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc RemoveMFAOTP(zitadel.v1.user.UserIDRequest) returns (RemoveMFAOTPResponse) {
        option (google.api.http) = {
            delete: "/users/{id}/mfas/otp"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc RemoveMFAU2F(zitadel.v1.user.WebAuthNTokenID) returns (RemoveMFAU2FResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}/mfas/u2f/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetPasswordless(zitadel.v1.user.UserIDRequest) returns (zitadel.v1.user.WebAuthNTokensResponse) {
        option (google.api.http) = {
            get: "/users/{id}/passwordless"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc RemovePasswordless(zitadel.v1.user.WebAuthNTokenID) returns (RemovePasswordlessResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}/passwordless"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    // Sends an Notification (Email/SMS) with a password reset Link
    rpc SendSetPasswordNotification(SetPasswordNotificationRequest) returns (SendSetPasswordNotificationResponse) {
        option (google.api.http) = {
            post: "/users/{id}/password/_sendsetnotification"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    // A Manager is only allowed to set an initial password, on the next login the user has to change his password
    rpc SetInitialPassword(SetInitialPasswordRequest) returns (SetInitialPasswordResponse) {
        option (google.api.http) = {
            post: "/users/{id}/password/_initialize"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc UpdateMachine(zitadel.v1.user.UpdateMachineRequest) returns (zitadel.v1.user.UpdateMachineResponse) {
        option (google.api.http) = {
            put: "/users/{id}/machine"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetMachineKey(zitadel.v1.user.MachineKeyIDRequest) returns (MachineKeyResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/keys/{key_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc SearchMachineKeys(zitadel.v1.user.SearchMachineKeyRequest) returns (SearchMachineKeysResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/keys/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc AddMachineKey(zitadel.v1.user.AddMachineKeyRequest) returns (AddMachineKeyResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/keys"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeleteMachineKey(zitadel.v1.user.MachineKeyIDRequest) returns (DeleteMachineKeyResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}/keys/{key_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc SearchUserExternalIDPs(zitadel.v1.externalidp.ExternalIDPSearchRequest) returns (zitadel.v1.externalidp.ExternalIDPSearchResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/externalidps/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc RemoveExternalIDP(zitadel.v1.externalidp.RemoveExternalIDPRequest) returns (zitadel.v1.externalidp.RemoveExternalIDPResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}/externalidps/{idp_config_id}/{external_user_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc SearchUserMemberships(zitadel.v1.user.UserMembershipSearchRequest) returns (zitadel.v1.user.UserMembershipSearchResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/memberships/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.membership.read"
        };
    }




    rpc CreateOrg(zitadel.v1.org.CreateOrgRequest) returns (zitadel.v1.org.CreateOrgResponse) {
        option (google.api.http) = {
            post: "/orgs"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.create"
        };
    }

    rpc GetMyOrg(MyOrgRequest) returns (zitadel.v1.org.OrgResponse) {
        option (google.api.http) = {
            get: "/orgs/me"
        };
    
        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.read"
        };
      }

    // search a organisation by its domain overall organisations
    rpc GetOrgByDomainGlobal(OrgByDomainRequest) returns (zitadel.v1.org.OrgResponse) {
            option (google.api.http) = {
            get: "/global/orgs/_bydomain"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.global.read"
        };
    }

    rpc DeactivateMyOrg(MyOrgRequest) returns (DeactivateOrgResponse) {
        option (google.api.http) = {
            put: "/orgs/me/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc ReactivateMyOrg(MyOrgRequest) returns (ReactivateOrgResponse) {
        option (google.api.http) = {
            put: "/orgs/me/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc SearchMyOrgDomains(zitadel.v1.org.DomainSearchRequest) returns (zitadel.v1.org.DomainSearchResponse) {
        option (google.api.http) = {
            post: "/orgs/me/domains/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.read"
        };
    }

    rpc AddMyOrgDomain(AddOrgDomainRequest) returns (OrgDomain) {
        option (google.api.http) = {
            post: "/orgs/me/domains"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc GenerateMyOrgDomainValidation(GenerateOrgDomainValidationRequest) returns (GenerateOrgDomainValidationResponse) {
        option (google.api.http) = {
            post: "/orgs/me/domains/{domain}/validation/create"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc ValidateMyOrgDomain(ValidateOrgDomainRequest) returns (ValidateOrgDomainResponse) {
        option (google.api.http) = {
            post: "/orgs/me/domains/{domain}/validation/check"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc SetMyPrimaryOrgDomain(SetPrimaryOrgDomainRequest) returns (SetPrimaryOrgDomainResponse) {
        option (google.api.http) = {
            post: "/orgs/me/domains/{domain}/_primary"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc RemoveMyOrgDomain(RemoveOrgDomainRequest) returns (RemoveOrgDomainResponse) {
        option (google.api.http) = {
            delete: "/orgs/me/domains/{domain}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.write"
        };
    }

    rpc AddMyOrgMember(zitadel.v1.member.AddMemberRequest) returns (zitadel.v1.member.AddMemberResponse) {
        option (google.api.http) = {
            post: "/orgs/me/members"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.member.write"
        };
    }

    rpc UpdateMyOrgMember(zitadel.v1.member.UpdateMemberRequest) returns (zitadel.v1.member.UpdateMemberResponse) {
        option (google.api.http) = {
            put: "/orgs/me/members/{user_id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.member.write"
        };
    }

    rpc RemoveMyOrgMember(RemoveOrgMemberRequest) returns (RemoveOrgMemberResponse) {
        option (google.api.http) = {
            delete: "/orgs/me/members/{user_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.member.delete"
        };
    }

    rpc SearchMyOrgMembers(zitadel.v1.member.MembersSearchRequest) returns (zitadel.v1.member.MembersSearchResponse) {
        option (google.api.http) = {
            post: "/orgs/me/members/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.member.read"
        };
    }







    rpc ProjectByID(zitadel.v1.project.ProjectIDRequest) returns (zitadel.v1.ProjectResponse) {
        option (google.api.http) = {
            get: "/projects/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.read"
            check_field_name: "Id"
        };
    }

    rpc SearchProjects(zitadel.v1.project.SearchProjectsRequest) returns (SearchProjectsResponse) {
        option (google.api.http) = {
            post: "/projects/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.read"
        };
    }

    rpc CreateProject(zitadel.v1.project.CreateProjectRequest) returns (zitadel.v1.project.CreateProjectResponse) {
        option (google.api.http) = {
            post: "/projects"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.create"
        };
    }

    rpc UpdateProject(zitadel.v1.project.UpdateProjectRequest) returns (zitadel.v1.project.UpdateProjectResponse) {
        option (google.api.http) = {
            put: "/projects/{id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.write"
            check_field_name: "Id"
        };
    }

    rpc DeactivateProject(zitadel.v1.project.ProjectIDRequest) returns (DeactivateProjectResponse) {
        option (google.api.http) = {
            put: "/projects/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.write"
            check_field_name: "Id"
        };
    }

    rpc ReactivateProject(zitadel.v1.project.ProjectIDRequset) returns (ReactivateProjectResponse) {
        option (google.api.http) = {
            put: "/projects/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.write"
            check_field_name: "Id"
        };
    }

    rpc RemoveProject(zitadel.v1.project.ProjectIDRequest) returns (RemoveProjectResponse) {
        option (google.api.http) = {
            delete: "/projects/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.delete"
            check_field_name: "Id"
        };
    }







    rpc SearchProjectRoles(zitadel.v1.project.SearchProjectRolesRequest) returns (zitadel.v1.project.SearchProjectRolesResponse) {
        option (google.api.http) = {
            post: "/projects/{project_id}/roles/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.role.read"
            check_field_name: "ProjectId"
        };
    }

    rpc AddProjectRole(zitadel.v1.project.AddProjectRole) returns (zitadel.v1.project.AddProjectRole) {
        option (google.api.http) = {
            post: "/projects/{id}/roles"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.role.write"
            check_field_name: "Id"
        };
    }

    // add a list of project roles in one request
    rpc BulkAddProjectRole(zitadel.v1.project.AddProjectRolesRequest) returns (zitadel.v1.project.AddProjectRolesResponse) {
        option (google.api.http) = {
            post: "/projects/{id}/roles/_bulk"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.role.write"
            check_field_name: "Id"
        };
    }

    rpc ChangeProjectRole(zitadel.v1.project.UpdateProjectRole) returns (zitadel.v1.project.UpdateProjectRoleResponse) {
        option (google.api.http) = {
            put: "/projects/{id}/roles/{key}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.role.write"
            check_field_name: "Id"
        };
    }

    // RemoveProjectRole removes role from UserGrants, ProjectGrants and from Project
    rpc RemoveProjectRole(zitadel.v1.project.RemoveProjectRoleRequest) returns (zitadel.v1.project.RemoveProjectRoleResponse) {
        option (google.api.http) = {
            delete: "/projects/{id}/roles/{key}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.role.delete"
            check_field_name: "Id"
        };
    }



    rpc GetApplicationByID(zitadel.v1.project.ApplicationIDRequest) returns (zitadel.v1.project.ApplicationResponse) {
        option (google.api.http) = {
            get: "/projects/{project_id}/applications/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.read"
            check_field_name: "ProjectId"
        };
    }

    rpc SearchApplications(zitadel.v1.project.SearchApplicationRequest) returns (zitadel.v1.project.SearchApplicationResponse) {
        option (google.api.http) = {
            post: "/projects/{project_id}/applications/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.read"
            check_field_name: "ProjectId"
        };
    }

    rpc CreateApplication(CreateApplicationRequest) returns (CreateApplicationResponse) {
        option (google.api.http) = {
            post: "/projects/{project_id}/applications/oidc"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.write"
            check_field_name: "ProjectId"
        };
    }


    rpc UpdateApplication(UpdateApplicationRequest) returns (UpdateApplicationResponse) {
        option (google.api.http) = {
            put: "/projects/{project_id}/applications/{id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.write"
            check_field_name: "ProjectId"
        };
    }

    rpc DeactivateApplication(zitadel.v1.project.ApplicationIDRequest) returns (DeactivateApplicationResponse) {
        option (google.api.http) = {
            put: "/projects/{project_id}/applications/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.write"
            check_field_name: "ProjectId"
        };
    }

    rpc ReactivateApplication(zitadel.v1.project.ApplicationIDRequest) returns (ReactivateApplicationResponse) {
        option (google.api.http) = {
            put: "/projects/{project_id}/applications/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.write"
            check_field_name: "ProjectId"
        };
    }

    rpc RemoveApplication(zitadel.v1.project.ApplicationIDRequest) returns (RemoveApplicationResponse) {
        option (google.api.http) = {
            delete: "/projects/{project_id}/applications/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "project.app.delete"
            check_field_name: "ProjectId"
        };
    }

}

message GetUserByLoginNameGlobalRequest {
    string login_name = 1; //TODO: validate
}

message GetUserByLoginNameGlobalResponse {
    zitadel.v1.user.User user = 1;
    repeated string login_names = 6;
    google.protobuf.Timestamp last_login = 8;
}

message IsUserUniqueRequest {
    string user_name = 1 [(validate.rules).string.pattern = "^[^[:space:]]{1,200}$"];
    //TODO: email still needed or should it be login_names?
    string email = 2 [(validate.rules).string = {min_len: 1, max_len: 200}];
}

message IsUserUniqueResponse {
    bool is_unique = 1;
}

message DeactivateUserResponse {}
message ReactivateUserResponse {}
message LockUserResponse {}
message UnlockUserResponse {}
message DeleteUserResponse {}
message DeleteMachineKeyResponse {}
message ResendEmailVerificationResponse {}
message RemoveUserPhoneResponse {}
message ResendPhoneVerificationResponse {}
message RemoveMFAOTPResponse {}
message RemoveMFAU2FResponse {}
message RemovePasswordlessResponse {}
message SendSetPasswordNotificationResponse {}

message SetPasswordNotificationRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];
    NotificationType type = 2;
}

enum NotificationType {
    NOTIFICATIONTYPE_EMAIL = 0;
    NOTIFICATIONTYPE_SMS = 1;
}

message SetInitialPasswordRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];
    string password = 2 [(validate.rules).string = {min_len: 1, max_len: 72}];
}

message SetInitialPasswordResponse {}

message ResendInitialMailRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];
    string email = 2;
}

message ResendInitialMailResponse {}

message MyOrgRequest {}

message OrgByDomainRequest {
    string domain = ;
}

message DeactivateOrgResponse {}
message ReactivateOrgResponse {}

message AddOrgDomainRequest {
    string domain = ;
}

message GenerateOrgDomainValidationResponse {
    string domain = ;
    zitadel.v1.org.DomainValidationType type = ;
}

message GenerateOrgDomainValidationResponse {
    string token = ;
    string url = ;
}

message ValidateOrgDomainRequest {
    string domain = ;
}

message ValidateOrgDomainRequest {}

message SetPrimaryOrgDomainRequest {
    string domain = ;
}

message SetPrimaryOrgDomainResponse {}

message RemoveOrgDomainRequest {
    string domain = ;
}

message RemoveOrgDomainResponse {}

message DeactivateProjectResponse {}
message ReactivateProjectResponse {}
message RemoveProjectResponse {}