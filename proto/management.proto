syntax = "proto3";

import "user.proto";
import "external_idp.proto";

package zitadel.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/management";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "management service";
        version: "1.0";
        contact:{
            url: "https://github.com/caos/zitadel/api/management" //TODO: should be swagger path
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};


service ManagementService {
    rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse) {
        option (google.api.http) = {
            get: "/users/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    // GetUserByLoginNameGlobal searches a user over all organisations
    // the login name has to match exactly
    rpc GetUserByLoginNameGlobal(GetUserByLoginNameGlobalRequest) returns (zitadel.user.v1.UserResponse) {
        option (google.api.http) = {
            get: "/global/users/_byloginname"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.global.read"
        };
    }

    // Limit should always be set, there is a default limit set by the service
    rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
        option (google.api.http) = {
            post: "/users/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc IsUserUnique(IsUserUniqueRequest) returns (UniqueUserResponse) {
        option (google.api.http) = {
            get: "/users/_isunique"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/users"
            body: "user"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeactivateUser(DeactivateUserRequest) returns (DeactivateUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ReactivateUser(zitadel.user.v1.UserIDRequest) returns (ReactivateUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc LockUser(zitadel.user.v1.UserIDRequest) returns (LockUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_lock"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc UnlockUser(zitadel.user.v1.UserIDRequest) returns (UnlockUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_unlock"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeleteUser(zitadel.user.v1.UserIDRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/users/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.delete"
        };
    }

    rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse) {
        option (google.api.http) = {
            get: "/users/{id}/username"
        };
        
        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanProfile(GetHumanProfileRequest) returns (GetHumanProfileResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/profile"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanProfile(UpdateHumanProfileRequest) returns (UpdateHumanProfileResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/profile"
            body: "profile"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanEmail(GetHumanEmailRequest) returns (GetHumanEmailResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/email"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanEmail(UpdateHumanEmailRequest) returns (UpdateHumanEmailResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/email"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ResendHumanInitialization(ResendHumanInitializationRequest) returns (ResendHumanInitializationResponse) {
        option (google.api.http) = {
            post: "/users/{id}/_resendinitialisation" //TODO: verb?
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    //TODO: previously ResendEmailVerificationMail
    rpc ResendHumanEmailVerification(ResendEmailVerificationRequest) returns (ResendEmailVerificationResponse) {
        option (google.api.http) = {
            post: "/users/{id}/email/_resendverification"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }  

    rpc GetHumanPhone(GetHumanPhoneRequest) returns (GetHumanPhoneResponse) {
        option (google.api.http) = {
            get: "/users/{id}/phone"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanPhone(UpdateHumanPhoneRequest) returns (UpdateHumanPhoneResponse) {
        option (google.api.http) = {
            put: "/users/{id}/phone"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc RemoveHumanPhone(RemoveHumanPhoneRequest) returns (RemoveHumanPhoneResponse) {
        option (google.api.http) = {
            delete: "/users/{id}/phone"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ResendHumanPhoneVerification(ResendHumanPhoneVerificationRequest) returns (ResendHumanPhoneVerificationResponse) {
        option (google.api.http) = {
            post: "/users/{id}/phone/_resendverification"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanAddress(GetHumanAddressRequest) returns (GetHumanAddressResponse) {
        option (google.api.http) = {
            get: "/users/{id}/address"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanAddress(UpdateHumanAddressRequest) returns (UpdateHumanAddressResponse) {
        option (google.api.http) = {
            put: "/users/{id}/address"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    // A Manager is only allowed to set an initial password, on the next login the user has to change his password
    rpc SetInitialPassword(SetInitialPasswordRequest) returns (SetInitialPasswordResponse) {
        option (google.api.http) = {
            post: "/users/{id}/password/_initialize"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }











//TODO: ...OrgIDP... or is comment enough?
    rpc GetOrgIDPByID(GetOrgIDPByIDRequest) returns (GetOrgIDPByIDResponse) {
        option (google.api.http) = {
            get: "/orgs/me/idps/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.read"
        };
    }

    rpc SearchOrgIDPs(SearchOrgIDPsRequest) returns (SearchOrgIDPsResponse) {
        option (google.api.http) = {
            post: "/orgs/me/idps/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.read"
        };
    }

    rpc CreateOrgIDP(CreateOrgIDPRequest) returns (CreateOrgIDPResponse) {
        option (google.api.http) = {
            post: "/orgs/me/idps"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc DeactivateOrgIDP(DeactivateOrgIDPRequest) returns (DeactivateOrgIDPResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc ReactivateOrgIDP(ReactivateOrgIDPRequest) returns (ReactivateOrgIDPResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc RemoveOrgIDP(RemoveOrgIDPRequest) returns (RemoveOrgIDPResponse) {
        option (google.api.http) = {
            delete: "/orgs/me/idps/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc UpdateOrgIDP(UpdateOrgIDPRequest) returns (UpdateOrgIDPResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc UpdateOrgIDPOIDCConfig(UpdateOrgIDPOIDCConfigRequest) returns (UpdateOrgIDPOIDCConfigResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{idp_id}/oidcconfig"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }
}

message GetUserByIDRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetUserByIDResponse {
    zitadel.user.v1.User user = 1;
}

message GetUserByLoginNameGlobalRequest{
    string login_name = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetUserByLoginNameGlobalResponse {
    zitadel.user.v1.User user = 1;
}

message SearchUsersRequest {
    zitadel.v1.Search meta_data = ;
    zitadel.user.v1.UserFieldName sorting_column ;
    zitadel.user.v1.SearchQuery query = ;
}

message SearchUsersResponse {
    zitadel.v1.Search meta_data = ;
    zitadel.user.v1.UserFieldName sorting_column = ;
    repeated zitadel.user.v1.User result = ;
}

message IsUserUniqueRequest {
    string user_name = 1 [
        (validate.rules).string.pattern = "^[^[:space:]]{1,200}$",
        (google.api.field_behavior) = REQUIRED
    ];
    //TODO: email still needed or should it be login_names?
    string email = 2  [
        (validate.rules).string = {min_len: 1, max_len: 200},
        (google.api.field_behavior) = REQUIRED
    ];
}

message IsUserUniqueResponse {
    bool is_unique = 1;
}

message CreateUserRequest {
    zitadel.user.v1.User user = 1;
}

message CreateUserResponse {
    zitadel.user.v1.User user = 1;
}

message DeactivateUserRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeactivateUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message ReactivateUserRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ReactivateUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message LockUserRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message LockUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message UnlockUserRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UnlockUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message DeleteUserRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message UpdateUserNameRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    string user_name = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateUserNameResponse {
    zitadel.v1.MetaData meta_data = 1;
    string user_name = 2;
}

message GetHumanProfileRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanProfileResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Profile profile = 3;
}

message UpdateHumanProfileRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Profile profile = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanProfileResponse {
    string user_id = 1;
    zitadel.user.v1.Profile profile = 2;
    zitadel.v1.MetaData meta_data = 3;
}

message GetHumanEmailRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanEmailResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Email email = 3;
}

message UpdateHumanEmailRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Email email = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanEmailResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Email email = 3;
}

message ResendHumanInitializationRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ResendHumanInitializationResponse {}

message ResendEmailVerificationRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ResendEmailVerificationResponse {}

message GetHumanPhoneRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanPhoneResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Phone phone = 3;
}

message UpdateHumanPhoneRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Phone phone = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanPhoneResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Email email = 3;
}

message RemoveHumanPhoneRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message RemoveHumanPhoneResponse {}

message ResendHumanPhoneVerificationRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ResendHumanPhoneVerificationResponse {}

message GetHumanAddressRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanAddressResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Address address = 3;
}

message UpdateHumanAddressRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Address address = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanAddressResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
    zitadel.user.v1.Address address = 3;
}

message SetInitialPasswordRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];
    string password = 2 [(validate.rules).string = {min_len: 1, max_len: 72}];
}

message SetInitialPasswordResponse {}









message GetOrgIDPByIDRequest {
    string id = 1;
}

message GetOrgIDPByIDResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.IDP idp = 2;
}

message SearchOrgIDPsRequest {
    zitadel.v1.Search meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDPQuery queries = 3;
}

message SearchOrgIDPsResponse {
    zitadel.v1.Search meta_data = 1;
    zitadel.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDP result = 3;
}

message CreateOrgIDPRequest {
    zitadel.idp.v1.IDP idp = 1;
}

message CreateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.IDP idp = 2;
}

message DeactivateOrgIDPRequest {
    string id = 1;
}

message DeactivateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message ReactivateOrgIDPRequest {
    string id = 1;
}

message ReactivateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message RemoveOrgIDPRequest {
    string id = 1;
}

message RemoveOrgIDPRequest {
    zitadel.v1.MetaData meta_data = 1;
}

message UpdateOrgIDPRequest {
    string id = 1;
    string name = 2;
    zitadel.idp.v1.IDPStylingType styling_type = 3;
}

message UpdateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
    string id = 2;
    zitadel.idp.v1.IDPState state = 3;
    string name = 4;
    zitadel.idp.v1.IDPStylingType styling_type = 5;
}

message UpdateOrgIDPOIDCConfigRequest {
    string idp_id = 1;
    zitadel.idp.v1.OIDCConfig config = 2;
}

message UpdateOrgIDPOIDCConfigResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.OIDCConfig config = 2;
}




message View {
    string database = 1;
    string view_name = 2;
    uint64 processed_sequence = 3;
    google.protobuf.Timestamp event_timestamp = 4;
    google.protobuf.Timestamp last_successful_spooler_run = 5;
}

message FailedEvent {
    string database = 1;
    string view_name = 2;
    uint64 failed_sequence = 3;
    uint64 failure_count = 4;
    string error_message = 5;
}