syntax = "proto3";

import "zitadel/idp.proto";
import "zitadel/user.proto";
import "zitadel/object.proto";
import "zitadel/options.proto";
import "zitadel/org.proto";
import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/timestamp.proto";
import "protoc-gen-openapiv2/options/annotations.proto";
import "validate/validate.proto";

package zitadel.management.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/management";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    swagger: "2.0",
    info: {
        title: "management api of ZITADEL";
        version: "1.0";
        description: "it's for managing organisation internal and extnernal objects.";
        contact:{
            name: "CAOS developers of ZITADEL"
            url: "https://zitadel.ch"
            email: "hi@caos.ch" //TODO: is there a zitadel@caos.ch?
        }
        license: {
            name: "Apache License 2.0",
            url: "https://github.com/caos/zitadel/blob/master/LICENSE"
        };
    };

    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    
    consumes: "application/grpc";
    produces: "application/grpc";

    consumes: "application/grpc-web+proto";
    produces: "application/grpc-web+proto";


    external_docs: {
        description: "Detailed information about ZITADEL",
        url: "https://docs.zitadel.ch"
    }
};


service ManagementService {
    rpc Healthz(HealthzRequest) returns (HealthzResponse) {
        option (google.api.http) = {
            get: "/healthz"
        };
    }

    rpc GetUserByID(GetUserByIDRequest) returns (GetUserByIDResponse) {
        option (google.api.http) = {
            get: "/users/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    // GetUserByLoginNameGlobal searches a user over all organisations
    // the login name has to match exactly
    rpc GetUserByLoginNameGlobal(GetUserByLoginNameGlobalRequest) returns (GetUserByLoginNameGlobalResponse) {
        option (google.api.http) = {
            get: "/global/users/_byloginname"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.global.read"
        };

        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            summary: "Search a user within all organisations by it's loginname";
            description: "The request only returns data if the login name matches exactly."
            tags: "user";
            tags: "global";
            responses: {
                key: "200"
                value: {
                    description: "OK";
                }
                //TODO: errors
            };
        };
    }

    // Limit should always be set, there is a default limit set by the service
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
        option (google.api.http) = {
            post: "/users/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc IsUserUnique(IsUserUniqueRequest) returns (IsUserUniqueResponse) {
        option (google.api.http) = {
            get: "/users/_isunique"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/users"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeactivateUser(DeactivateUserRequest) returns (DeactivateUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_deactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ReactivateUser(ReactivateUserRequest) returns (ReactivateUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_reactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc LockUser(LockUserRequest) returns (LockUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_lock"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc UnlockUser(UnlockUserRequest) returns (UnlockUserResponse) {
        option (google.api.http) = {
            put: "/users/{id}/_unlock"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/users/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.delete"
        };
    }

    rpc UpdateUserName(UpdateUserNameRequest) returns (UpdateUserNameResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/username"
        };
        
        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanProfile(GetHumanProfileRequest) returns (GetHumanProfileResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/profile"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanProfile(UpdateHumanProfileRequest) returns (UpdateHumanProfileResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/profile"
            body: "profile"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanEmail(GetHumanEmailRequest) returns (GetHumanEmailResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/email"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanEmail(UpdateHumanEmailRequest) returns (UpdateHumanEmailResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/email"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ResendHumanInitialization(ResendHumanInitializationRequest) returns (ResendHumanInitializationResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/_resendinitialisation" //TODO: verb?
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    //TODO: previously ResendEmailVerificationMail
    rpc ResendHumanEmailVerification(ResendEmailVerificationRequest) returns (ResendEmailVerificationResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/email/_resendverification"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }  

    rpc GetHumanPhone(GetHumanPhoneRequest) returns (GetHumanPhoneResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/phone"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanPhone(UpdateHumanPhoneRequest) returns (UpdateHumanPhoneResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/phone"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc RemoveHumanPhone(RemoveHumanPhoneRequest) returns (RemoveHumanPhoneResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}/phone"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc ResendHumanPhoneVerification(ResendHumanPhoneVerificationRequest) returns (ResendHumanPhoneVerificationResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/phone/_resendverification"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetHumanAddress(GetHumanAddressRequest) returns (GetHumanAddressResponse) {
        option (google.api.http) = {
            get: "/users/{user_id}/address"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc UpdateHumanAddress(UpdateHumanAddressRequest) returns (UpdateHumanAddressResponse) {
        option (google.api.http) = {
            put: "/users/{user_id}/address"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    // A Manager is only allowed to set an initial password, on the next login the user has to change his password
    rpc SetInitialPassword(SetInitialPasswordRequest) returns (SetInitialPasswordResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/password/_initialize"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc UpdateMachine(UpdateMachineRequest) returns (UpdateMachineResponse) {
        option (google.api.http) = {
            put: "/users/{id}/machine"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc GetMachineKeyByIDs(GetMachineKeyByIDsRequest) returns (GetMachineKeyByIDsResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/keys/{key_id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc ListMachineKeys(ListMachineKeysRequest) returns (ListMachineKeysResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/keys/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.read"
        };
    }

    rpc AddMachineKey(AddMachineKeyRequest) returns (AddMachineKeyResponse) {
        option (google.api.http) = {
            post: "/users/{user_id}/keys"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }

    rpc RemoveMachineKey(RemoveMachineKeyRequest) returns (RemoveMachineKeyResponse) {
        option (google.api.http) = {
            delete: "/users/{user_id}/keys/{key_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "user.write"
        };
    }






    rpc GetMyOrg(GetMyOrgRequest) returns (GetMyOrgResponse) {
        option (google.api.http) = {
            get: "/orgs/me"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.read"
        };
    }

    rpc GetOrgByDomainGlobal(GetOrgByDomainGlobalRequest) returns (GetOrgByDomainGlobalResponse) {
        option (google.api.http) = {
            get: "/global/orgs/_bydomain"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.global.read"
        };
    }

    rpc CreateOrg(CreateOrgRequest) returns (CreateOrgResponse) {
        option (google.api.http) = {
            post: "/orgs"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "org.create"
        };
    }











//TODO: ...OrgIDP... or is comment enough?
    rpc GetOrgIDPByID(GetOrgIDPByIDRequest) returns (GetOrgIDPByIDResponse) {
        option (google.api.http) = {
            get: "/orgs/me/idps/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.read"
        };
    }

    rpc ListOrgIDPs(ListOrgIDPsRequest) returns (ListOrgIDPsResponse) {
        option (google.api.http) = {
            post: "/orgs/me/idps/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.read"
        };
    }

    rpc CreateOrgIDP(CreateOrgIDPRequest) returns (CreateOrgIDPResponse) {
        option (google.api.http) = {
            post: "/orgs/me/idps"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc DeactivateOrgIDP(DeactivateOrgIDPRequest) returns (DeactivateOrgIDPResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{id}/_deactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc ReactivateOrgIDP(ReactivateOrgIDPRequest) returns (ReactivateOrgIDPResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{id}/_reactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc RemoveOrgIDP(RemoveOrgIDPRequest) returns (RemoveOrgIDPResponse) {
        option (google.api.http) = {
            delete: "/orgs/me/idps/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc UpdateOrgIDP(UpdateOrgIDPRequest) returns (UpdateOrgIDPResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{id}"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }

    rpc UpdateOrgIDPOIDCConfig(UpdateOrgIDPOIDCConfigRequest) returns (UpdateOrgIDPOIDCConfigResponse) {
        option (google.api.http) = {
            put: "/orgs/me/idps/{idp_id}/oidcconfig"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "org.idp.write"
        };
    }
}

message HealthzRequest {}

message HealthzResponse {}

message GetUserByIDRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetUserByIDResponse {
    zitadel.user.v1.User user = 1;
}

message GetUserByLoginNameGlobalRequest{
    string login_name = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetUserByLoginNameGlobalResponse {
    zitadel.user.v1.User user = 1;
}

message ListUsersRequest {
    zitadel.v1.Search meta_data = 1;
    zitadel.user.v1.UserFieldName sorting_column = 2;
    zitadel.user.v1.SearchQuery query = 3;
}

message ListUsersResponse {
    zitadel.v1.Search meta_data = 1;
    zitadel.user.v1.UserFieldName sorting_column = 2;
    repeated zitadel.user.v1.User result = 3;
}

message IsUserUniqueRequest {
    string user_name = 1 [
        (validate.rules).string.pattern = "^[^[:space:]]{1,200}$",
        (google.api.field_behavior) = REQUIRED
    ];
    //TODO: email still needed or should it be login_names?
    string email = 2  [
        (validate.rules).string = {min_len: 1, max_len: 200},
        (google.api.field_behavior) = REQUIRED
    ];
}

message IsUserUniqueResponse {
    bool is_unique = 1;
}

message CreateUserRequest {
    string user_name = 1;
    oneof type {
        zitadel.user.v1.Human human = 2;
        zitadel.user.v1.Machine machine = 3;
    }
}

message CreateUserResponse {
    string id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message DeactivateUserRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeactivateUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message ReactivateUserRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ReactivateUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message LockUserRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message LockUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message UnlockUserRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UnlockUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message DeleteUserRequest {
    string id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message DeleteUserResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message UpdateUserNameRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    string user_name = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateUserNameResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message GetHumanProfileRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanProfileResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message UpdateHumanProfileRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Profile profile = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanProfileResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 3;
}

message GetHumanEmailRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanEmailResponse {
    string user_id = 1;
    zitadel.user.v1.Email email = 3;
}

message UpdateHumanEmailRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Email email = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanEmailResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message ResendHumanInitializationRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ResendHumanInitializationResponse {}

message ResendEmailVerificationRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ResendEmailVerificationResponse {}

message GetHumanPhoneRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanPhoneResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message UpdateHumanPhoneRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Phone phone = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanPhoneResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message RemoveHumanPhoneRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message RemoveHumanPhoneResponse {}

message ResendHumanPhoneVerificationRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message ResendHumanPhoneVerificationResponse {}

message GetHumanAddressRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message GetHumanAddressResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message UpdateHumanAddressRequest {
    string user_id = 1 [
        (google.api.field_behavior) = REQUIRED
    ];
    zitadel.user.v1.Address address = 2 [
        (google.api.field_behavior) = REQUIRED
    ];
}

message UpdateHumanAddressResponse {
    string user_id = 1;
    zitadel.v1.MetaData meta_data = 2;
}

message SetInitialPasswordRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];
    string password = 2 [(validate.rules).string = {min_len: 1, max_len: 72}];
}

message SetInitialPasswordResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message UpdateMachineRequest {
    string user_id = 1;
    //TODO: discuss with or without description?
    string description = 2 [(validate.rules).string.max_len = 500];
    string name = 3 [(validate.rules).string = {min_len: 1, max_len: 200}];
}

message UpdateMachineResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message GetMachineKeyByIDsRequest {
    string user_id = 1;
    string key_id = 2;
}

message GetMachineKeyByIDsResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.user.v1.MachineKey key = 2;
}

message ListMachineKeysRequest {
    string user_id = 1;
    zitadel.v1.Search meta_data = 2;
}

message ListMachineKeysResponse {
    zitadel.v1.Search meta_data = 1;
    repeated zitadel.user.v1.MachineKey result = 2;
}

message AddMachineKeyRequest {
    string user_id = 1 [(validate.rules).string.min_len = 1];
    zitadel.user.v1.MachineKeyType type = 2 [(validate.rules).enum = {not_in: [0]}];
    google.protobuf.Timestamp expiration_date = 3;
}
  
message AddMachineKeyResponse {
    string id = 1;
    bytes key_details = 2;
    zitadel.v1.MetaData meta_data = 3;
}

message RemoveMachineKeyRequest {
    string user_id = 1;
    string key_id = 2;
}

message RemoveMachineKeyResponse {
    zitadel.v1.MetaData meta_data = 1;
}







message GetMyOrgRequest {}

message GetMyOrgResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.org.v1.Org org = 2;
}

message GetOrgByDomainGlobalRequest {
    string domain = 1;
}

message GetOrgByDomainGlobalResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.org.v1.Org org = 2;
}

message CreateOrgRequest {
    string name = 1;
}

message CreateOrgResponse {
    string id = 1;
    zitadel.v1.MetaData meta_data = 2;
}










message GetOrgIDPByIDRequest {
    string id = 1;
}

message GetOrgIDPByIDResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.IDP idp = 2;
}

message ListOrgIDPsRequest {
    zitadel.v1.Search meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDPQuery queries = 3;
}

message ListOrgIDPsResponse {
    zitadel.v1.Search meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDP result = 3;
}

message CreateOrgIDPRequest {
    zitadel.idp.v1.IDP idp = 1;
}

message CreateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.IDP idp = 2;
}

message DeactivateOrgIDPRequest {
    string id = 1;
}

message DeactivateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message ReactivateOrgIDPRequest {
    string id = 1;
}

message ReactivateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message RemoveOrgIDPRequest {
    string id = 1;
}

message RemoveOrgIDPResponse {}

message UpdateOrgIDPRequest {
    string id = 1;
    string name = 2;
    zitadel.idp.v1.IDPStylingType styling_type = 3;
}

message UpdateOrgIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
    string id = 2;
    zitadel.idp.v1.IDPState state = 3;
    string name = 4;
    zitadel.idp.v1.IDPStylingType styling_type = 5;
}

message UpdateOrgIDPOIDCConfigRequest {
    string idp_id = 1;
    zitadel.idp.v1.OIDCConfig config = 2;
}

message UpdateOrgIDPOIDCConfigResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.OIDCConfig config = 2;
}
