syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "authoption/options.proto";

package caos.zitadel.admin.api.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/admin";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "admin service";
        version: "1.0";
        contact:{
            url: "https://github.com/caos/zitadel/api/admin" //TODO: should be swagger path
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};


service AdminService {
    // Healthz returns status OK as soon as the service started
    rpc Healthz(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
           get: "/healthz"
        };
    }

    //IsOrgUnique checks if the passed parameters are unique
    // an organisation is unique if all parameters are unique
    rpc IsOrgUnique(UniqueOrgRequest) returns (UniqueOrgResponse) {
        option (google.api.http) = {
            get: "/orgs/_isunique"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //GetOrgByID returns the requested organisation
    rpc GetOrgByID(OrgIDRequest) returns (OrgResponse) {
        option (google.api.http) = {
            get: "/orgs/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //SearchOrgs returns all orgs matching the request
    // all queries need to match (ANDed)
    rpc SearchOrgs(OrgsRequest) returns (OrgsResponse) {
        option (google.api.http) = {
            post: "/orgs/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //SetUpOrg creates a new org and user 
    // and adds the user to the orgs members as ORG_OWNER
    rpc SetUpOrg(OrgSetUpRequest) returns (OrgSetUpResponse) {
        option (google.api.http) = {
            post: "/orgs/_setup"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    //GetDefaultOrgIAMPolicy returns the IAM policy defined by the administrators of ZITADEL
    rpc GetDefaultOrgIAMPolicy(DefaultOrgIAMPolicyRequest) returns (OrgIAMPolicyView) {
        option (google.api.http) = {
            get: "/orgs/default/policies/orgiam"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultOrgIAMPolicy changes the default IAM policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultOrgIAMPolicy(UpdatedOrgIAMPolicyRequest) returns (UpdateOrgIAMPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/default/policies/orgiam"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetOrgIAMPolicy returns the customised policy or the default if not defined
    rpc GetOrgIAMPolicy(OrgIAMPolicyIDRequest) returns (OrgIAMPolicyView) {
        option (google.api.http) = {
            get: "/orgs/{org_id}/policies/orgiam"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //CreateOrgIAMPolicy let's an organisation manager define a custom IAM policy
    rpc CreateOrgIAMPolicy(CreateOrgIAMPolicyRequest) returns (CreateOrgIAMPolicyResponse) {
        option (google.api.http) = {
            post: "/orgs/{org_id}/policies/orgiam"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //UpdateOrgIAMPolicy let's an organisation manager define a custom IAM policy
    rpc UpdateOrgIAMPolicy(UpdateOrgIAMPolicyRequest) returns (UpdateOrgIAMPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/{org_id}/policies/orgiam"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveOrgIAMPolicy deletes a custom IAM policy
    // ZITADEL will fallback to the default policy defined by the ZITADEL managers
    rpc RemoveOrgIAMPolicy(OrgIAMPolicyIDRequest) returns (RemoveOrgIAMPolicyResponse) {
        option (google.api.http) = {
            delete: "/orgs/{org_id}/policies/orgiam"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.delete"
        };
    }

    //GetIAMMemberRoles returns the IAM roles visible for this user 
    rpc GetIAMMemberRoles(IAMMemberRolesRequest) returns (IAMMemberRolesResponse) {
        option (google.api.http) = {
            get: "/members/roles"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.read"
        };
    }

    //AddIAMMember adds a user to the membership list of ZITADEL with the given roles
    // undefined roles will be dropped
    rpc AddIAMMember(AddIAMMemberRequest) returns (AddIAMMemberResponse) {
        option (google.api.http) = {
            post: "/members"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.write"
        };
    }

    //ChangeIAMMember will set the given roles on a member
    rpc ChangeIAMMember(ChangeIAMMemberRequest) returns (ChangeIAMMemberResponse) {
        option (google.api.http) = {
            put: "/members/{user_id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.write"
        };
    }

    //RemoveIAMMember removes the user from the membershiplist of ZITADEL
    rpc RemoveIAMMember(RemoveIAMMemberRequest) returns (RemoveIAMMemberResponse) {
        option (google.api.http) = {
            delete: "/members/{user_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.delete"
        };
    }

    //SearchIAMMembers returns all members matching the request
    // all queries need to match (ANDed)
    rpc SearchIAMMembers(IAMMemberSearchRequest) returns (IAMMemberSearchResponse) {
        option (google.api.http) = {
            post: "/members/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.read"
        };
    }

    //GetViews returns all stored read models of ZITADEL
    // views are used for search optimisation and optimise request latencies
    // they represent the delta of the event happend on the objects
    rpc GetViews(GetViewsRequest) returns (ViewsResponse) {
        option (google.api.http) = {
            get: "/views"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //ClearView truncates the delta of the change stream
    // be carefull with this function because view need to 
    // be recomputed after they got cleared. 
    // Search requests will return wrong results until all deltas are recomputed
    rpc ClearView(ViewIDRequest) returns (ClearViewResponse) {
        option (google.api.http) = {
            post: "/views/{database}/{view_name}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    //GetFailedEvents returns event descriptions which cannot be processed.
    // It's possible that some events need some retries. 
    // For example if the SMTP-API wasn't able to send an email
    rpc GetFailedEvents(FailedEventsRequest) returns (FailedEventsResponse) {
        option (google.api.http) = {
            get: "/failedevents"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //RemoveFailedEvent deletes the event from failed events
    // the event is not removed from the change stream
    rpc RemoveFailedEvent(RemoveFailedEventRequest) returns (RemoveFailedEventResponse) {
        option (google.api.http) = {
            delete: "/failedevents/{database}/{view_name}/{failed_sequence}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    //GetIDPByID returns the requested idp
    rpc GetIDPByID(IDPIDRequest) returns (IDPView) {
        option (google.api.http) = {
            get: "/idps/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }

    //UpdateIDP changes the specified idp
    rpc UpdateIDP(UpdateIDPRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //DeactivateIDP deactivates the specified idp
    // The idp will still be visible but logins via this idp are disabled
    rpc DeactivateIDP(IDPIDRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //ReactivateIDP reactivates the specified idp
    // logins via this idp are enabled
    rpc ReactivateIDP(IDPIDRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //RemoveIDP deletes the idp
    rpc RemoveIDP(IDPIDRequest) returns (RemoveIDPResponse) {
        option (google.api.http) = {
            delete: "/idps/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //CreateOIDCIDP creates the specified oidc idp
    rpc CreateOIDCIDP(CreateOIDCIDPConfigRequest) returns (CreateIDPResponse) {
        option (google.api.http) = {
            post: "/idps/oidc"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //UpdateOIDCIDP changes the passed oidc idp config
    rpc UpdateOIDCIDP(OIDCIDPConfigUpdate) returns (UpdateOIDCIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{idp_id}/oidc"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //SearchIDPs returns all idp's matching the request
    // all queries need to match (ANDed)
    rpc SearchIDPs(IDPSearchRequest) returns (IDPSearchResponse) {
        option (google.api.http) = {
            post: "/idps/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }
    
    //GetDefaultLabelPolicy returns the label policy defined by the administrators of ZITADEL
    rpc GetDefaultLabelPolicy(DefaultLabelPolicyRequest) returns (DefaultLabelPolicyView) {
        option (google.api.http) = {
            get: "/policies/label"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultLabelPolicy changes the default label policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultLabelPolicy(UpdateDefaultLabelPolicyRequest) returns (UpdateDefaultLabelPolicyResponse) {
        option (google.api.http) = {
            put: "/policies/label"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
    //GetDefaultLoginPolicy returns the login policy defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicy(DefaultLoginPolicyRequest) returns (DefaultLoginPolicyView) {
        option (google.api.http) = {
            get: "/policies/login"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultLoginPolicy changes the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultLoginPolicy(UpdateDefaultLoginPolicyRequest) returns (UpdateDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            put: "/policies/login"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultLoginPolicyIDPProviders returns the idp providers defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicyIDPProviders(IDPProviderSearchRequest) returns (IDPProviderSearchResponse) {
        option (google.api.http) = {
            post: "/policies/login/idpproviders/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //AddIDPProviderToDefaultLoginPolicy adds an idp provider to the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc AddIDPProviderToDefaultLoginPolicy(IDPProviderID) returns (IDPProviderID) {
        option (google.api.http) = {
            post: "/policies/login/idpproviders"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveIDPProviderFromDefaultLoginPolicy removes an idp provider from the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc RemoveIDPProviderFromDefaultLoginPolicy(IDPProviderID) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/policies/login/idpproviders/{idp_config_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultLoginPolicySecondFactors returns the second factors defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicySecondFactors(google.protobuf.Empty) returns (SecondFactorsResult) {
        option (google.api.http) = {
            get: "/policies/login/secondfactors/_search"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //AddSecondFactorToDefaultLoginPolicy adds a second factor to the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc AddSecondFactorToDefaultLoginPolicy(SecondFactor) returns (SecondFactor) {
        option (google.api.http) = {
            post: "/policies/login/secondfactors"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveSecondFactorFromDefaultLoginPolicy removes a second factor from the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc RemoveSecondFactorFromDefaultLoginPolicy(SecondFactor) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/policies/login/secondfactors/{second_factor}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultLoginPolicyMultiFactors returns the multi factors defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicyMultiFactors(google.protobuf.Empty) returns (MultiFactorsResult) {
        option (google.api.http) = {
            get: "/policies/login/multifactors/_search"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //AddMultiFactorToDefaultLoginPolicy adds a multiy factor to the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc AddMultiFactorToDefaultLoginPolicy(MultiFactor) returns (MultiFactor) {
        option (google.api.http) = {
            post: "/policies/login/multifactors"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveMultiFactorFromDefaultLoginPolicy removes a multi factor from the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc RemoveMultiFactorFromDefaultLoginPolicy(MultiFactor) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/policies/login/multifactors/{multi_factor}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
    //GetDefaultPasswordComplexityPolicy returns the password complexity policy defined by the administrators of ZITADEL
    rpc GetDefaultPasswordComplexityPolicy(google.protobuf.Empty) returns (DefaultPasswordComplexityPolicyView) {
        option (google.api.http) = {
            get: "/policies/password/complexity"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultPasswordComplexityPolicy changes the default password complexity policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultPasswordComplexityPolicy(DefaultPasswordComplexityPolicyRequest) returns (DefaultPasswordComplexityPolicy) {
        option (google.api.http) = {
            put: "/policies/password/complexity"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
    //GetDefaultPasswordAgePolicy returns the password age policy defined by the administrators of ZITADEL
    rpc GetDefaultPasswordAgePolicy(google.protobuf.Empty) returns (DefaultPasswordAgePolicyView) {
        option (google.api.http) = {
            get: "/policies/password/age"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultPasswordPolicy changes the default password age policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultPasswordAgePolicy(DefaultPasswordAgePolicyRequest) returns (DefaultPasswordAgePolicy) {
        option (google.api.http) = {
            put: "/policies/password/age"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultPasswordLockoutPolicy returns the password lockout policy defined by the administrators of ZITADEL
    rpc GetDefaultPasswordLockoutPolicy(google.protobuf.Empty) returns (DefaultPasswordLockoutPolicyView) {
        option (google.api.http) = {
            get: "/policies/password/lockout"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultPasswordLockoutPolicy changes the default password lockout policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultPasswordLockoutPolicy(DefaultPasswordLockoutPolicyRequest) returns (DefaultPasswordLockoutPolicy) {
        option (google.api.http) = {
            put: "/policies/password/lockout"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
}