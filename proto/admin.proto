syntax = "proto3";

import "zitadel/idp.proto";
import "zitadel/user.proto";
import "zitadel/object.proto";
import "zitadel/options.proto";
import "zitadel/org.proto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "protoc-gen-openapiv2/options/annotations.proto";

import "validate/validate.proto";

package zitadel.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/admin";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "admin service";
        version: "1.0";
        contact:{
            url: "https://github.com/caos/zitadel/api/admin" //TODO: should be swagger path
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};


service AdminService {
    rpc IsOrgUnique(IsOrgUniqueRequest) returns (IsOrgUniqueResponse) {
        option (google.api.http) = {
            get: "/orgs/_isunique"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc GetOrgByID(GetOrgByIDRequest) returns (GetOrgByIDResponse) {
        option (google.api.http) = {
            get: "/orgs/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc ListOrgs(ListOrgsRequest) returns (ListOrgsResponse) {
        option (google.api.http) = {
            post: "/orgs/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc SetUpOrg(SetUpOrgRequest) returns (SetUpOrgResponse) {
        option (google.api.http) = {
            post: "/orgs/_setup"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    rpc GetIDPByID(GetIDPByIDRequest) returns (GetIDPByIDResponse) {
        option (google.api.http) = {
            get: "/idps/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }

    rpc ListIDPs(ListIDPsRequest) returns (ListIDPsResponse) {
        option (google.api.http) = {
            post: "/idps/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }

    rpc CreateIDP(CreateIDPRequest) returns (CreateIDPResponse) {
        option (google.api.http) = {
            post: "/idps"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc DeactivateIDP(DeactivateIDPRequest) returns (DeactivateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_deactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc ReactivateIDP(ReactivateIDPRequest) returns (ReactivateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_reactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc RemoveIDP(RemoveIDPRequest) returns (RemoveIDPResponse) {
        option (google.api.http) = {
            delete: "/idps/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc UpdateIDP(UpdateIDPRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc UpdateIDPOIDCConfig(UpdateIDPOIDCConfigRequest) returns (UpdateIDPOIDCConfigResponse) {
        option (google.api.http) = {
            put: "/idps/{idp_id}/oidcconfig"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {
        option (google.api.http) = {
            get: "/views"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc ClearView(ClearViewRequest) returns (ClearViewResponse) {
        option (google.api.http) = {
            post: "/views/{database}/{view_name}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    rpc ListFailedEvents(ListFailedEventsRequest) returns (ListFailedEventsResponse) {
        option (google.api.http) = {
            get: "/failedevents"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc RemoveFailedEvent(RemoveFailedEventRequest) returns (RemoveFailedEventResponse) {
        option (google.api.http) = {
            delete: "/failedevents/{database}/{view_name}/{failed_sequence}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.write"
        };
    }
}

message IsOrgUniqueRequest {
    string name = 1 [(validate.rules).string.min_len = 1];
    string domain = 2 [(validate.rules).string.min_len = 1];
}

message IsOrgUniqueResponse {
    bool is_unique = 1;
}

message GetOrgByIDRequest {
    string id = 1;
}

message GetOrgByIDResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.org.v1.Org org = 2;
}

message ListOrgsRequest {
    zitadel.v1.Search meta_data = 1;
    zitadel.org.v1.OrgFieldName sorting_column = 2;
    repeated zitadel.org.v1.OrgQuery queries = 3;
}

message ListOrgsResponse {
    zitadel.v1.Search meta_data = 1;
    zitadel.org.v1.OrgFieldName sorting_column = 2;
    repeated zitadel.org.v1.Org result = 3;
}

message SetUpOrgRequest {
    zitadel.org.v1.Org org = 1;
    zitadel.user.v1.User user = 2;
}

message SetUpOrgResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.org.v1.Org org = 2;
    zitadel.user.v1.User user = 3;
}










message ListViewsRequest {}

message ListViewsResponse {
    repeated View views = 1;
}

message ClearViewRequest {
    string database = 1 [(validate.rules).string = {min_len: 1}];
    string view_name = 2 [(validate.rules).string = {min_len: 1}];
}

message ClearViewResponse {}

message ListFailedEventsRequest {}

message ListFailedEventsResponse {
    repeated FailedEvent result = 1;
}

message RemoveFailedEventRequest {
    string database = 1 [(validate.rules).string = {min_len: 1}];
    string view_name = 2 [(validate.rules).string = {min_len: 1}];
    uint64 failed_sequence = 3;
}

message RemoveFailedEventResponse {}






message GetIDPByIDRequest {
    string id = 1;
}

message GetIDPByIDResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.IDP idp = 2;
}

message ListIDPsRequest {
    zitadel.v1.Search meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDPQuery queries = 3;
}

message ListIDPsResponse {
    zitadel.v1.Search meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDP result = 3;
}

message CreateIDPRequest {
    zitadel.idp.v1.IDP idp = 1;
}

message CreateIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.IDP idp = 2;
}

message DeactivateIDPRequest {
    string id = 1;
}

message DeactivateIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message ReactivateIDPRequest {
    string id = 1;
}

message ReactivateIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message RemoveIDPRequest {
    string id = 1;
}

message RemoveIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
}

message UpdateIDPRequest {
    string id = 1;
    string name = 2;
    zitadel.idp.v1.IDPStylingType styling_type = 3;
}

message UpdateIDPResponse {
    zitadel.v1.MetaData meta_data = 1;
    string id = 2;
    zitadel.idp.v1.IDPState state = 3;
    string name = 4;
    zitadel.idp.v1.IDPStylingType styling_type = 5;
}

message UpdateIDPOIDCConfigRequest {
    string idp_id = 1;
    zitadel.idp.v1.OIDCConfig config = 2;
}

message UpdateIDPOIDCConfigResponse {
    zitadel.v1.MetaData meta_data = 1;
    zitadel.idp.v1.OIDCConfig config = 2;
}




message View {
    string database = 1;
    string view_name = 2;
    uint64 processed_sequence = 3;
    google.protobuf.Timestamp event_timestamp = 4;
    google.protobuf.Timestamp last_successful_spooler_run = 5;
}

message FailedEvent {
    string database = 1;
    string view_name = 2;
    uint64 failed_sequence = 3;
    uint64 failure_count = 4;
    string error_message = 5;
}