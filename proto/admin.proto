syntax = "proto3";

import "zitadel/idp.proto";
import "zitadel/user.proto";
import "zitadel/object.proto";
import "zitadel/options.proto";
import "zitadel/org.proto";
import "zitadel/policy.proto";
import "zitadel/member.proto";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";

import "protoc-gen-openapiv2/options/annotations.proto";

import "validate/validate.proto";

package zitadel.admin.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/admin";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
    info: {
        title: "admin service";
        version: "1.0";
        contact:{
            url: "https://github.com/caos/zitadel/api/admin" //TODO: should be swagger path
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};


service AdminService {
    rpc Healthz(HealthzRequest) returns (HealthzResponse) {
        option (google.api.http) = {
            get: "/healthz"
        };
    }
    
    rpc IsOrgUnique(IsOrgUniqueRequest) returns (IsOrgUniqueResponse) {
        option (google.api.http) = {
            get: "/orgs/_isunique"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc GetOrgByID(GetOrgByIDRequest) returns (GetOrgByIDResponse) {
        option (google.api.http) = {
            get: "/orgs/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc ListOrgs(ListOrgsRequest) returns (ListOrgsResponse) {
        option (google.api.http) = {
            post: "/orgs/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc SetUpOrg(SetUpOrgRequest) returns (SetUpOrgResponse) {
        option (google.api.http) = {
            post: "/orgs/_setup"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    rpc GetIDPByID(GetIDPByIDRequest) returns (GetIDPByIDResponse) {
        option (google.api.http) = {
            get: "/idps/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }

    rpc ListIDPs(ListIDPsRequest) returns (ListIDPsResponse) {
        option (google.api.http) = {
            post: "/idps/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }

    rpc AddOIDCIDP(AddOIDCIDPRequest) returns (AddOIDCIDPResponse) {
        option (google.api.http) = {
            post: "/idps/oidc"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc UpdateIDP(UpdateIDPRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc DeactivateIDP(DeactivateIDPRequest) returns (DeactivateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_deactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc ReactivateIDP(ReactivateIDPRequest) returns (ReactivateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_reactivate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc RemoveIDP(RemoveIDPRequest) returns (RemoveIDPResponse) {
        option (google.api.http) = {
            delete: "/idps/{id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc UpdateIDPOIDCConfig(UpdateIDPOIDCConfigRequest) returns (UpdateIDPOIDCConfigResponse) {
        option (google.api.http) = {
            put: "/idps/{idp_id}/oidcconfig"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    rpc GetDefaultOrgIAMPolicy(GetDefaultOrgIAMPolicyRequest) returns (GetDefaultOrgIAMPolicyResponse) {
        option (google.api.http) = {
            get: "/orgs/default/policies/orgiam"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    rpc UpdateDefaultOrgIAMPolicy(UpdateDefaultOrgIAMPolicyRequest) returns (UpdateDefaultOrgIAMPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/default/policies/orgiam"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc GetOrgIAMPolicy(GetOrgIAMPolicyRequest) returns (GetOrgIAMPolicyResponse) {
        option (google.api.http) = {
            get: "/orgs/{org_id}/policies/orgiam"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    rpc AddCustomOrgIAMPolicy(AddCustomOrgIAMPolicyRequest) returns (AddCustomOrgIAMPolicyResponse) {
        option (google.api.http) = {
            post: "/orgs/{org_id}/policies/orgiam"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc UpdateCustomOrgIAMPolicy(UpdateCustomOrgIAMPolicyRequest) returns (UpdateCustomOrgIAMPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/{org_id}/policies/orgiam"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc ResetOrgIAMPolicyToDefault(ResetOrgIAMPolicyToDefaultRequest) returns (ResetOrgIAMPolicyToDefaultResponse) {
        option (google.api.http) = {
            delete: "/orgs/{org_id}/policies/orgiam"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.delete"
        };
    }

    rpc GetDefaultLabelPolicy(GetDefaultLabelPolicyRequest) returns (GetDefaultLabelPolicyResponse) {
        option (google.api.http) = {
            get: "/orgs/default/policies/label"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    rpc UpdateDefaultLabelPolicy(UpdateDefaultLabelPolicyRequest) returns (UpdateDefaultLabelPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/default/policies/label"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc GetDefaultMailTemplatePolicy(GetDefaultMailTemplatePolicyRequest) returns (GetDefaultMailTemplatePolicyResponse) {
        option (google.api.http) = {
            get: "/policies/mailtemplate"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    rpc UpdateDefaultMailTemplatePolicy(UpdateDefaultMailTemplatePolicyRequest) returns (UpdateDefaultMailTemplatePolicyResponse) {
        option (google.api.http) = {
            put: "/policies/mailtemplate"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc GetDefaultLoginPolicy(GetDefaultLoginPolicyRequest) returns (GetDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            get: "/orgs/default/policies/login"
        };
    
        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }
    
    rpc UpdateDefaultLoginPolicy(UpdateDefaultLoginPolicyRequest) returns (UpdateDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/default/policies/login"
            body: "*"
        };
    
        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc ListDefaultLoginPolicyIDPs(ListDefaultLoginPolicyIDPsRequest) returns (ListDefaultLoginPolicyIDPsResponse) {
        option (google.api.http) = {
            post: "/policies/login/idps/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //TODO: discuss EnableIDPOnDefaultLoginPolicy
    rpc AddIDPToDefaultLoginPolicy(AddIDPToDefaultLoginPolicyRequest) returns (AddIDPToDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            post: "/policies/login/idps"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //TODO: discuss DisableIDPOnDefaultLoginPolicy
    rpc RemoveIDPFromDefaultLoginPolicy(RemoveIDPFromDefaultLoginPolicyRequest) returns (RemoveIDPFromDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            delete: "/policies/login/idps/{idp_id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc ListDefaultLoginPolicySecondFactors(ListDefaultLoginPolicySecondFactorsRequest) returns (ListDefaultLoginPolicySecondFactorsResponse) {
        option (google.api.http) = {
            get: "/policies/login/secondfactors/_search"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //TODO: discuss EnableSecondFactorFromDefaultLoginPolicy
    rpc AddSecondFactorToDefaultLoginPolicy(AddSecondFactorToDefaultLoginPolicyRequest) returns (AddSecondFactorToDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            post: "/policies/login/secondfactors"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //TODO: discuss DisableSecondFactorFromDefaultLoginPolicy
    rpc RemoveSecondFactorFromDefaultLoginPolicy(RemoveSecondFactorFromDefaultLoginPolicyRequest) returns (RemoveSecondFactorFromDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            delete: "/policies/login/secondfactors/{type}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc ListDefaultLoginPolicyMultiFactors(ListDefaultLoginPolicyMultiFactorsRequest) returns (ListDefaultLoginPolicyMultiFactorsResponse) {
        option (google.api.http) = {
            get: "/policies/login/mfas/_search"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //TODO: discuss EnableMultiFactorToDefaultLoginPolicy
    rpc AddMultiFactorToDefaultLoginPolicy(AddMultiFactorToDefaultLoginPolicyRequest) returns (AddMultiFactorToDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            post: "/policies/login/mfas"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //TODO: discuss DisableMultiFactorToDefaultLoginPolicy
    rpc RemoveMultiFactorFromDefaultLoginPolicy(RemoveMultiFactorFromDefaultLoginPolicyRequest) returns (RemoveMultiFactorFromDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            delete: "/policies/login/mfas/{type}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }














    rpc GetDefaultPasswordComplexityPolicy(GetDefaultPasswordComplexityPolicyRequest) returns (GetDefaultPasswordComplexityPolicyResponse) {
        option (google.api.http) = {
            get: "/policies/password/complexity"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    rpc UpdateDefaultPasswordComplexityPolicy(UpdateDefaultPasswordComplexityPolicyRequest) returns (UpdateDefaultPasswordComplexityPolicyResponse) {
        option (google.api.http) = {
            put: "/policies/password/complexity"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc GetDefaultPasswordAgePolicy(GetDefaultPasswordAgePolicyRequest) returns (GetDefaultPasswordAgePolicyResponse) {
        option (google.api.http) = {
            get: "/policies/password/age"
        };
    
        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }
    
    rpc UpdateDefaultPasswordAgePolicy(UpdateDefaultPasswordAgePolicyRequest) returns (UpdateDefaultPasswordAgePolicyResponse) {
        option (google.api.http) = {
            put: "/policies/password/age"
            body: "*"
        };
    
        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc GetDefaultPasswordLockoutPolicy(GetDefaultPasswordLockoutPolicyRequest) returns (GetDefaultPasswordLockoutPolicyResponse) {
        option (google.api.http) = {
            get: "/policies/password/lockout"
        };
    
        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }
    
    rpc UpdateDefaultPasswordLockoutPolicy(UpdateDefaultPasswordLockoutPolicyRequest) returns (UpdateDefaultPasswordLockoutPolicyResponse) {
        option (google.api.http) = {
            put: "/policies/password/lockout"
            body: "*"
        };
    
        option (zitadel.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    rpc ListIAMMemberRoles(ListIAMMemberRolesRequest) returns (ListIAMMemberRolesResponse) {
        option (google.api.http) = {
            get: "/members/roles"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.member.read"
        };
    }

    rpc ListIAMMembers(ListIAMMembersRequest) returns (ListIAMMembersResponse) {
        option (google.api.http) = {
            post: "/members/_search"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.member.read"
        };
    }

    rpc AddIAMMember(AddIAMMemberRequest) returns (AddIAMMemberResponse) {
        option (google.api.http) = {
            post: "/members"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.member.write"
        };
    }

    rpc UpdateIAMMember(UpdateIAMMemberRequest) returns (UpdateIAMMemberResponse) {
        option (google.api.http) = {
            put: "/members/{user_id}"
            body: "*"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.member.write"
        };
    }

    rpc RemoveIAMMember(RemoveIAMMemberRequest) returns (RemoveIAMMemberResponse) {
        option (google.api.http) = {
            delete: "/members/{user_id}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.member.delete"
        };
    }

    rpc ListViews(ListViewsRequest) returns (ListViewsResponse) {
        option (google.api.http) = {
            get: "/views"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc ClearView(ClearViewRequest) returns (ClearViewResponse) {
        option (google.api.http) = {
            post: "/views/{database}/{view_name}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    rpc ListFailedEvents(ListFailedEventsRequest) returns (ListFailedEventsResponse) {
        option (google.api.http) = {
            get: "/failedevents"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    rpc RemoveFailedEvent(RemoveFailedEventRequest) returns (RemoveFailedEventResponse) {
        option (google.api.http) = {
            delete: "/failedevents/{database}/{view_name}/{failed_sequence}"
        };

        option (zitadel.v1.auth_option) = {
            permission: "iam.write"
        };
    }
}

message HealthzRequest {}

message HealthzResponse {}

message IsOrgUniqueRequest {
    string name = 1 [(validate.rules).string.min_len = 1];
    string domain = 2 [(validate.rules).string.min_len = 1];
}

message IsOrgUniqueResponse {
    bool is_unique = 1;
}

message GetOrgByIDRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
}

message GetOrgByIDResponse {
    zitadel.org.v1.Org org = 1;
}

message ListOrgsRequest {
    zitadel.v1.ListQuery meta_data = 1;
    zitadel.org.v1.OrgFieldName sorting_column = 2;
    repeated zitadel.org.v1.OrgQuery queries = 3;
}

message ListOrgsResponse {
    zitadel.v1.ListDetails meta_data = 1;
    zitadel.org.v1.OrgFieldName sorting_column = 2;
    repeated zitadel.org.v1.Org result = 3;
}

message SetUpOrgRequest {
    message Org {
        string name = 1 [(validate.rules).string.min_len = 1];
        string domain = 2;
    }
    message Human {
        message Profile {
            string first_name = 1;
            string last_name = 2;
            string nick_name = 3;
            string display_name = 4;
            string preferred_language = 5;
            zitadel.user.v1.Gender gender = 6;
        }
        message Email {
            string email = 1;
            bool is_email_verified = 2;
        }
        message Phone {
            //TODO: use https://github.com/google/libphonenumber/blob/master/resources/phonenumber.proto
            string phone = 1;
            bool is_phone_verified = 2;
        }
        message Address {
            string country = 1;
            string locality = 2;
            string postal_code = 3;
            string region = 4;
            string street_address = 5;
        }
    
        string user_name = 1;
        
        Profile profile = 2;
        Email email = 3;
        Phone phone = 4;
        Address address = 5;
    }
    message Machine {
        string user_name = 1;

        string name = 2;
        string description = 3;
    }
    Org org = 1;
    oneof user {
        Human human = 2;
        Machine machine = 3;
    }
}

message SetUpOrgResponse {
    zitadel.v1.ObjectDetails details = 1;
    string org_id = 2;
    string user_id = 3;
}

message GetIDPByIDRequest {
    string id = 1;
}

message GetIDPByIDResponse {
    zitadel.idp.v1.IDP idp = 1;
}

message ListIDPsRequest {
    zitadel.v1.ListQuery meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDPQuery queries = 3;
}

message ListIDPsResponse {
    zitadel.v1.ListDetails meta_data = 1;
    zitadel.idp.v1.IDPFieldName sorting_column = 2;
    repeated zitadel.idp.v1.IDP result = 3;
}

message AddOIDCIDPRequest {
    string id = 1;
    string name = 2;
    zitadel.idp.v1.IDPStylingType styling_type = 3;

    string client_id = 4;
    string client_secret = 5;
    string issuer = 6;
    repeated string scopes = 7;
    zitadel.idp.v1.OIDCMappingField display_name_mapping = 8;
    zitadel.idp.v1.OIDCMappingField username_mapping = 9;
}

message AddOIDCIDPResponse {
    zitadel.v1.ObjectDetails details = 1;
    string idp_id = 2;
}

message DeactivateIDPRequest {
    string id = 1;
}

message DeactivateIDPResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message ReactivateIDPRequest {
    string id = 1;
}

message ReactivateIDPResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message RemoveIDPRequest {
    string id = 1;
}

message RemoveIDPResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message UpdateIDPRequest {
    string id = 1;
    string name = 2;
    zitadel.idp.v1.IDPStylingType styling_type = 3;
}

message UpdateIDPResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message UpdateIDPOIDCConfigRequest {
    string idp_id = 1;
    string issuer = 2;
    repeated string scopes = 3;
    zitadel.idp.v1.OIDCMappingField display_name_mapping = 4;
    zitadel.idp.v1.OIDCMappingField username_mapping = 5;
}

message UpdateIDPOIDCConfigResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultOrgIAMPolicyRequest {}

message GetDefaultOrgIAMPolicyResponse {
    zitadel.policy.v1.OrgIAMPolicy policy = 1;
}

message UpdateDefaultOrgIAMPolicyRequest {
    bool user_login_must_be_domain = 1;
}

message UpdateDefaultOrgIAMPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetOrgIAMPolicyRequest {
    string org_id = 1;
}

message GetOrgIAMPolicyResponse {
    zitadel.policy.v1.OrgIAMPolicy policy = 1;
    bool is_default = 2;
}

message AddCustomOrgIAMPolicyRequest {
    string org_id = 1;
    bool user_login_must_be_domain = 2;
}

message AddCustomOrgIAMPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message UpdateCustomOrgIAMPolicyRequest {
    string org_id = 1;
    bool user_login_must_be_domain = 2;
}

message UpdateCustomOrgIAMPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message ResetOrgIAMPolicyToDefaultRequest {
    string org_id = 1;
}

message ResetOrgIAMPolicyToDefaultResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultLabelPolicyRequest {}

message GetDefaultLabelPolicyResponse {
    zitadel.policy.v1.LabelPolicy policy = 1;
}

message UpdateDefaultLabelPolicyRequest {
    string primary_color = 1;
    string secondary_color = 2;
}

message UpdateDefaultLabelPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultMailTemplatePolicyRequest {}

message GetDefaultMailTemplatePolicyResponse {
    zitadel.policy.v1.MailTemplatePolicy policy = 1;
}

message UpdateDefaultMailTemplatePolicyRequest {
    string mail_text_type = 1; //TODO: type sounds like an enum
	string language = 2; //TODO: enum?
	string title = 3;
	string pre_header = 4;
	string subject = 5;
	string greeting = 6;
	string text = 7;
	string button_text = 8;
}

message UpdateDefaultMailTemplatePolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultLoginPolicyRequest {}

message GetDefaultLoginPolicyResponse {
    zitadel.policy.v1.LoginPolicy policy = 1;
}

message UpdateDefaultLoginPolicyRequest {
    bool allow_username_password = 1;
    bool allow_register = 2;
    bool allow_external_idp = 3;
    bool force_mfa = 4;
    zitadel.policy.v1.PasswordlessType passwordless_type = 5;
}

message UpdateDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message ListDefaultLoginPolicyIDPsRequest {
    zitadel.v1.ListQuery meta_data = 1;
}

message ListDefaultLoginPolicyIDPsResponse {
    zitadel.v1.ListDetails meta_data = 1;
    repeated zitadel.idp.v1.IDPLoginPolicyLink result = 2;
}

message AddIDPToDefaultLoginPolicyRequest {
    string idp_id = 1;
}

message AddIDPToDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message RemoveIDPFromDefaultLoginPolicyRequest {
    string idp_id = 1;
}

message RemoveIDPFromDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message ListDefaultLoginPolicySecondFactorsRequest {}

message ListDefaultLoginPolicySecondFactorsResponse {
    zitadel.v1.ListDetails meta_data = 1;
    repeated zitadel.policy.v1.SecondFactorType result = 2;
}

message AddSecondFactorToDefaultLoginPolicyRequest {
    zitadel.policy.v1.SecondFactorType type = 1;
}

message AddSecondFactorToDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message RemoveSecondFactorFromDefaultLoginPolicyRequest {
    zitadel.policy.v1.SecondFactorType type = 1;
}

message RemoveSecondFactorFromDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message ListDefaultLoginPolicyMultiFactorsRequest {}

message ListDefaultLoginPolicyMultiFactorsResponse {
    zitadel.v1.ListDetails meta_data = 1;
    repeated zitadel.policy.v1.MultiFactorType result = 2;
}

message AddMultiFactorToDefaultLoginPolicyRequest {
    zitadel.policy.v1.MultiFactorType type = 1;
}

message AddMultiFactorToDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message RemoveMultiFactorFromDefaultLoginPolicyRequest {
    zitadel.policy.v1.MultiFactorType type = 1;
}

message RemoveMultiFactorFromDefaultLoginPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultPasswordComplexityPolicyRequest {}

message GetDefaultPasswordComplexityPolicyResponse {
    zitadel.policy.v1.PasswordComplexityPolicy policy = 1;
}

message UpdateDefaultPasswordComplexityPolicyRequest {
    uint32 min_length = 1;
    bool has_uppercase = 2;
    bool has_lowercase = 3;
    bool has_number = 4;
    bool has_symbol = 5;
}

message UpdateDefaultPasswordComplexityPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultPasswordAgePolicyRequest {}

message GetDefaultPasswordAgePolicyResponse {
    zitadel.policy.v1.PasswordAgePolicy policy = 1;
}

message UpdateDefaultPasswordAgePolicyRequest {
    uint32 max_age_days = 1;
    uint32 expire_warn_days = 2;
}

message UpdateDefaultPasswordAgePolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message GetDefaultPasswordLockoutPolicyRequest {}

message GetDefaultPasswordLockoutPolicyResponse {
    zitadel.policy.v1.PasswordLockoutPolicy policy = 1;
}

message UpdateDefaultPasswordLockoutPolicyRequest {
    uint32 max_attempts = 1;
    bool show_lockout_failure = 2;
}

message UpdateDefaultPasswordLockoutPolicyResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message AddIAMMemberRequest {
    string user_id = 1;
    repeated string roles = 2;
}

message AddIAMMemberResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message UpdateIAMMemberRequest {
    string user_id = 1;
    repeated string roles = 2;
}

message UpdateIAMMemberResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message RemoveIAMMemberRequest {
    string user_id = 1;
}

message RemoveIAMMemberResponse {
    zitadel.v1.ObjectDetails details = 1;
}

message ListIAMMemberRolesRequest {}

message ListIAMMemberRolesResponse {
    zitadel.v1.ListDetails meta_data = 1;
    repeated string roles = 2;
}

message ListIAMMembersRequest {
    zitadel.v1.ListQuery meta_data = 1;
    zitadel.member.v1.MemberFieldName sorting_column = 2;
    zitadel.member.v1.SearchQuery query = 3;
}

message ListIAMMembersResponse {
    zitadel.v1.ListDetails meta_data = 1;
    zitadel.member.v1.MemberFieldName sorting_column = 2;
    repeated zitadel.member.v1.Member result = 3;
}

message ListViewsRequest {}

message ListViewsResponse {
    //TODO: search
    repeated View result = 1;
}

message ClearViewRequest {
    string database = 1 [(validate.rules).string = {min_len: 1}];
    string view_name = 2 [(validate.rules).string = {min_len: 1}];
}

message ClearViewResponse {}

message ListFailedEventsRequest {}

message ListFailedEventsResponse {
    //TODO: search
    repeated FailedEvent result = 1;
}

message RemoveFailedEventRequest {
    string database = 1 [(validate.rules).string = {min_len: 1}];
    string view_name = 2 [(validate.rules).string = {min_len: 1}];
    uint64 failed_sequence = 3;
}

message RemoveFailedEventResponse {}

message View {
    string database = 1;
    string view_name = 2;
    uint64 processed_sequence = 3;
    google.protobuf.Timestamp event_timestamp = 4;
    google.protobuf.Timestamp last_successful_spooler_run = 5;
}

message FailedEvent {
    string database = 1;
    string view_name = 2;
    uint64 failed_sequence = 3;
    uint64 failure_count = 4;
    string error_message = 5;
}