syntax = "proto3";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "authoption/options.proto";

//zitadel imports
import "org.proto";
import "probes.proto";
import "user.proto";
import "iam.proto";

package caos.zitadel.admin.api.v1;

option go_package ="github.com/caos/zitadel/pkg/grpc/admin";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
    info: {
        title: "admin service";
        version: "1.0";
        contact:{
            url: "https://github.com/caos/zitadel/api/admin" //TODO: should be swagger path
        };
    };

    schemes: HTTPS;

    consumes: "application/json";
    consumes: "application/grpc";

    produces: "application/json";
    produces: "application/grpc";
};


service AdminService {
    // Healthz returns status OK as soon as the service started
    rpc Healthz(caos.zitadel.api.v1.HealthzRequest) returns (caos.zitadel.api.v1.HealthzResponse) {
        option (google.api.http) = {
           get: "/healthz"
        };
    }

    //IsOrgUnique checks if the passed parameters are unique
    // an organisation is unique if all parameters are unique
    rpc IsOrgUnique(caos.zitadel.api.v1.IsOrgUniqueRequest) returns (caos.zitadel.api.v1.IsOrgUniqueResponse) {
        option (google.api.http) = {
            get: "/orgs/_isunique"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //GetOrgByID returns the requested organisation
    rpc GetOrgByID(caos.zitadel.api.v1.OrgIDRequest) returns (caos.zitadel.api.v1.Org) {
        option (google.api.http) = {
            get: "/orgs/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //SearchOrgs returns all orgs matching the request
    // all queries need to match (ANDed)
    rpc SearchOrgs(caos.zitadel.api.v1.SearchOrgsRequest) returns (caos.zitadel.api.v1.SearchOrgsResponse) {
        option (google.api.http) = {
            post: "/orgs/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //SetUpOrg creates a new org and user 
    // and adds the user to the orgs members as ORG_OWNER
    rpc SetUpOrg(SetUpOrgRequest) returns (SetUpOrgResponse) {
        option (google.api.http) = {
            post: "/orgs/_setup"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    //GetDefaultOrgIAMPolicy returns the IAM policy defined by the administrators of ZITADEL
    rpc GetDefaultOrgIAMPolicy(DefaultOrgIAMPolicyRequest) returns (DefaultOrgIAMPolicyResponse) {
        option (google.api.http) = {
            get: "/orgs/default/policies/orgiam"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultOrgIAMPolicy changes the default IAM policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultOrgIAMPolicy(UpdateDefaultOrgIAMPolicyRequest) returns (UpdateDefaultOrgIAMPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/default/policies/orgiam"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetOrgIAMPolicy returns the customised policy or the default if not defined
    rpc GetOrgIAMPolicy(caos.zitadel.api.v1.OrgIAMPolicyIDRequest) returns (caos.zitadel.api.v1.OrgIAMPolicyResponse) {
        option (google.api.http) = {
            get: "/orgs/{org_id}/policies/orgiam"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //CreateOrgIAMPolicy let's an organisation manager define a custom IAM policy
    rpc CreateOrgIAMPolicy(caos.zitadel.api.v1.CreateOrgIAMPolicyRequest) returns (caos.zitadel.api.v1.CreateOrgIAMPolicyResponse) {
        option (google.api.http) = {
            post: "/orgs/{org_id}/policies/orgiam"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //UpdateOrgIAMPolicy let's an organisation manager define a custom IAM policy
    rpc UpdateOrgIAMPolicy(caos.zitadel.api.v1.UpdateOrgIAMPolicyRequest) returns (caos.zitadel.api.v1.UpdateOrgIAMPolicyResponse) {
        option (google.api.http) = {
            put: "/orgs/{org_id}/policies/orgiam"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveOrgIAMPolicy deletes a custom IAM policy
    // ZITADEL will fallback to the default policy defined by the ZITADEL managers
    rpc RemoveOrgIAMPolicy(caos.zitadel.api.v1.OrgIAMPolicyIDRequest) returns (caos.zitadel.api.v1.RemoveOrgIAMPolicyResponse) {
        option (google.api.http) = {
            delete: "/orgs/{org_id}/policies/orgiam"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.delete"
        };
    }

    //GetIAMMemberRoles returns the IAM roles visible for this user 
    rpc GetIAMMemberRoles(caos.zitadel.api.v1.IAMMemberRolesRequest) returns (caos.zitadel.api.v1.IAMMemberRolesResponse) {
        option (google.api.http) = {
            get: "/members/roles"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.read"
        };
    }

    //AddIAMMember adds a user to the membership list of ZITADEL with the given roles
    // undefined roles will be dropped
    rpc AddIAMMember(caos.zitadel.api.v1.AddIAMMemberRequest) returns (caos.zitadel.api.v1.AddIAMMemberResponse) {
        option (google.api.http) = {
            post: "/members"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.write"
        };
    }

    //ChangeIAMMember will set the given roles on a member
    rpc ChangeIAMMember(caos.zitadel.api.v1.ChangeIAMMemberRequest) returns (caos.zitadel.api.v1.ChangeIAMMemberResponse) {
        option (google.api.http) = {
            put: "/members/{user_id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.write"
        };
    }

    //RemoveIAMMember removes the user from the membershiplist of ZITADEL
    rpc RemoveIAMMember(caos.zitadel.api.v1.RemoveIAMMemberRequest) returns (caos.zitadel.api.v1.RemoveIAMMemberResponse) {
        option (google.api.http) = {
            delete: "/members/{user_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.delete"
        };
    }

    //SearchIAMMembers returns all members matching the request
    // all queries need to match (ANDed)
    rpc SearchIAMMembers(caos.zitadel.api.v1.SearchIAMMembersRequest) returns (caos.zitadel.api.v1.SearchIAMMembersResponse) {
        option (google.api.http) = {
            post: "/members/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.member.read"
        };
    }

    //GetViews returns all stored read models of ZITADEL
    // views are used for search optimisation and optimise request latencies
    // they represent the delta of the event happend on the objects
    rpc GetViews(GetViewsRequest) returns (ViewsResponse) {
        option (google.api.http) = {
            get: "/views"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //ClearView truncates the delta of the change stream
    // be carefull with this function because view need to 
    // be recomputed after they got cleared. 
    // Search requests will return wrong results until all deltas are recomputed
    rpc ClearView(ViewIDRequest) returns (ClearViewResponse) {
        option (google.api.http) = {
            post: "/views/{database}/{view_name}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    //GetFailedEvents returns event descriptions which cannot be processed.
    // It's possible that some events need some retries. 
    // For example if the SMTP-API wasn't able to send an email
    rpc GetFailedEvents(FailedEventsRequest) returns (FailedEventsResponse) {
        option (google.api.http) = {
            get: "/failedevents"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.read"
        };
    }

    //RemoveFailedEvent deletes the event from failed events
    // the event is not removed from the change stream
    rpc RemoveFailedEvent(RemoveFailedEventRequest) returns (RemoveFailedEventResponse) {
        option (google.api.http) = {
            delete: "/failedevents/{database}/{view_name}/{failed_sequence}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.write"
        };
    }

    //GetIDPByID returns the requested idp
    rpc GetIDPByID(IDPIDRequest) returns (IDPView) {
        option (google.api.http) = {
            get: "/idps/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }

    //UpdateIDP changes the specified idp
    rpc UpdateIDP(UpdateIDPRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //DeactivateIDP deactivates the specified idp
    // The idp will still be visible but logins via this idp are disabled
    rpc DeactivateIDP(IDPIDRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_deactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //ReactivateIDP reactivates the specified idp
    // logins via this idp are enabled
    rpc ReactivateIDP(IDPIDRequest) returns (UpdateIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{id}/_reactivate"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //RemoveIDP deletes the idp
    rpc RemoveIDP(IDPIDRequest) returns (RemoveIDPResponse) {
        option (google.api.http) = {
            delete: "/idps/{id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //CreateOIDCIDP creates the specified oidc idp
    rpc CreateOIDCIDP(CreateOIDCIDPConfigRequest) returns (CreateIDPResponse) {
        option (google.api.http) = {
            post: "/idps/oidc"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //UpdateOIDCIDP changes the passed oidc idp config
    rpc UpdateOIDCIDP(OIDCIDPConfigUpdate) returns (UpdateOIDCIDPResponse) {
        option (google.api.http) = {
            put: "/idps/{idp_id}/oidc"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.write"
        };
    }

    //SearchIDPs returns all idp's matching the request
    // all queries need to match (ANDed)
    rpc SearchIDPs(IDPSearchRequest) returns (IDPSearchResponse) {
        option (google.api.http) = {
            post: "/idps/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.idp.read"
        };
    }
    
    //GetDefaultLabelPolicy returns the label policy defined by the administrators of ZITADEL
    rpc GetDefaultLabelPolicy(DefaultLabelPolicyRequest) returns (DefaultLabelPolicyView) {
        option (google.api.http) = {
            get: "/policies/label"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultLabelPolicy changes the default label policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultLabelPolicy(UpdateDefaultLabelPolicyRequest) returns (UpdateDefaultLabelPolicyResponse) {
        option (google.api.http) = {
            put: "/policies/label"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
    //GetDefaultLoginPolicy returns the login policy defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicy(DefaultLoginPolicyRequest) returns (DefaultLoginPolicyView) {
        option (google.api.http) = {
            get: "/policies/login"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultLoginPolicy changes the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultLoginPolicy(UpdateDefaultLoginPolicyRequest) returns (UpdateDefaultLoginPolicyResponse) {
        option (google.api.http) = {
            put: "/policies/login"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultLoginPolicyIDPProviders returns the idp providers defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicyIDPProviders(IDPProviderSearchRequest) returns (IDPProviderSearchResponse) {
        option (google.api.http) = {
            post: "/policies/login/idpproviders/_search"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //AddIDPProviderToDefaultLoginPolicy adds an idp provider to the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc AddIDPProviderToDefaultLoginPolicy(IDPProviderID) returns (IDPProviderID) {
        option (google.api.http) = {
            post: "/policies/login/idpproviders"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveIDPProviderFromDefaultLoginPolicy removes an idp provider from the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc RemoveIDPProviderFromDefaultLoginPolicy(IDPProviderID) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/policies/login/idpproviders/{idp_config_id}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultLoginPolicySecondFactors returns the second factors defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicySecondFactors(google.protobuf.Empty) returns (SecondFactorsResult) {
        option (google.api.http) = {
            get: "/policies/login/secondfactors/_search"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //AddSecondFactorToDefaultLoginPolicy adds a second factor to the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc AddSecondFactorToDefaultLoginPolicy(SecondFactor) returns (SecondFactor) {
        option (google.api.http) = {
            post: "/policies/login/secondfactors"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveSecondFactorFromDefaultLoginPolicy removes a second factor from the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc RemoveSecondFactorFromDefaultLoginPolicy(SecondFactor) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/policies/login/secondfactors/{second_factor}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultLoginPolicyMultiFactors returns the multi factors defined by the administrators of ZITADEL
    rpc GetDefaultLoginPolicyMultiFactors(google.protobuf.Empty) returns (MultiFactorsResult) {
        option (google.api.http) = {
            get: "/policies/login/multifactors/_search"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //AddMultiFactorToDefaultLoginPolicy adds a multiy factor to the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc AddMultiFactorToDefaultLoginPolicy(MultiFactor) returns (MultiFactor) {
        option (google.api.http) = {
            post: "/policies/login/multifactors"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //RemoveMultiFactorFromDefaultLoginPolicy removes a multi factor from the default login policy it will impact all
    // it impacts all organisations without a customised policy
    rpc RemoveMultiFactorFromDefaultLoginPolicy(MultiFactor) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/policies/login/multifactors/{multi_factor}"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
    //GetDefaultPasswordComplexityPolicy returns the password complexity policy defined by the administrators of ZITADEL
    rpc GetDefaultPasswordComplexityPolicy(google.protobuf.Empty) returns (DefaultPasswordComplexityPolicyView) {
        option (google.api.http) = {
            get: "/policies/password/complexity"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultPasswordComplexityPolicy changes the default password complexity policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultPasswordComplexityPolicy(DefaultPasswordComplexityPolicyRequest) returns (DefaultPasswordComplexityPolicy) {
        option (google.api.http) = {
            put: "/policies/password/complexity"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
    //GetDefaultPasswordAgePolicy returns the password age policy defined by the administrators of ZITADEL
    rpc GetDefaultPasswordAgePolicy(google.protobuf.Empty) returns (DefaultPasswordAgePolicyView) {
        option (google.api.http) = {
            get: "/policies/password/age"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultPasswordPolicy changes the default password age policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultPasswordAgePolicy(DefaultPasswordAgePolicyRequest) returns (DefaultPasswordAgePolicy) {
        option (google.api.http) = {
            put: "/policies/password/age"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }

    //GetDefaultPasswordLockoutPolicy returns the password lockout policy defined by the administrators of ZITADEL
    rpc GetDefaultPasswordLockoutPolicy(google.protobuf.Empty) returns (DefaultPasswordLockoutPolicyView) {
        option (google.api.http) = {
            get: "/policies/password/lockout"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.read"
        };
    }

    //UpdateDefaultPasswordLockoutPolicy changes the default password lockout policy it will impact all
    // it impacts all organisations without a customised policy
    rpc UpdateDefaultPasswordLockoutPolicy(DefaultPasswordLockoutPolicyRequest) returns (DefaultPasswordLockoutPolicy) {
        option (google.api.http) = {
            put: "/policies/password/lockout"
            body: "*"
        };

        option (caos.zitadel.utils.v1.auth_option) = {
            permission: "iam.policy.write"
        };
    }
}

message SetUpOrgRequest {
    caos.zitadel.api.v1.CreateOrgRequest org = 1 [(validate.rules).message.required = true];
    caos.zitadel.api.v1.CreateUserRequest user = 2 [(validate.rules).message.required = true];
}

message SetUpOrgResponse {
    caos.zitadel.api.v1.CreateOrgResponse org = 1;
    caos.zitadel.api.v1.CreateUserResponse user = 2;
}

message DefaultOrgIAMPolicyRequest {}

message DefaultOrgIAMPolicyResponse{
    caos.zitadel.api.v1.OrgIAMPolicy policy = 1;
}

message UpdateDefaultOrgIAMPolicyRequest{
    caos.zitadel.api.v1.UpdatedOrgIAMPolicyRequest policy = 1;
}

message UpdateDefaultOrgIAMPolicyResponse{
    caos.zitadel.api.v1.UpdatedOrgIAMPolicyResponse policy = 1;
}



























































message OrgID {
    string id = 1 [(validate.rules).string = {min_len: 1}];
}

message UniqueOrgRequest {
    string name = 1 [(validate.rules).string.min_len = 1];
    string domain = 2 [(validate.rules).string.min_len = 1];
}

message UniqueOrgResponse {
    bool is_unique = 1;
}

message Org {
    string id = 1;
    OrgState state = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
    string name = 5;
    string domain = 6;
}

enum OrgState {
    ORGSTATE_UNSPECIFIED = 0;
    ORGSTATE_ACTIVE = 1;
    ORGSTATE_INACTIVE = 2;
}

message OrgSearchRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    OrgSearchKey sorting_column = 3 [(validate.rules).enum = {not_in: [0]}];;
    bool asc = 4;
    repeated OrgSearchQuery queries = 5;
}

message OrgSearchQuery {
    OrgSearchKey key = 1 [(validate.rules).enum = {not_in: [0]}];;
    OrgSearchMethod method = 2;
    string value = 3;
}

enum OrgSearchKey {
    ORGSEARCHKEY_UNSPECIFIED = 0;
    ORGSEARCHKEY_NAME = 1;
    ORGSEARCHKEY_DOMAIN = 2;
    ORGSEARCHKEY_STATE = 3;
}

message OrgSearchResponse {
    uint64 offset = 1;
    uint64 limit = 2;
    uint64 total_result = 3;
    repeated Org result = 4;
    uint64 processed_sequence = 5;
    google.protobuf.Timestamp view_timestamp = 6;
}

enum OrgSearchMethod {
    ORGSEARCHMETHOD_EQUALS = 0;
    ORGSEARCHMETHOD_STARTS_WITH = 1;
    ORGSEARCHMETHOD_CONTAINS = 2;
}

message OrgSetUpRequest {
    CreateOrgRequest org = 1 [(validate.rules).message.required = true];
    CreateUserRequest user = 2 [(validate.rules).message.required = true];
}

message OrgSetUpResponse {
    Org org = 1;
    UserResponse user = 2;
}

message CreateUserRequest {
    string user_name = 1 [(validate.rules).string.pattern = "^[^[:space:]]{1,200}$"];

    oneof user {
      option (validate.required) = true;
  
      CreateHumanRequest human = 2;
      CreateMachineRequest machine = 3;
    }
}

message CreateHumanRequest {
    string first_name = 1 [(validate.rules).string = {min_len: 1, max_len: 200}];
    string last_name = 2 [(validate.rules).string = {min_len: 1, max_len: 200}];
    string nick_name = 3 [(validate.rules).string = {max_len: 200}];
    string preferred_language = 4 [(validate.rules).string = {max_len: 200}];
    Gender gender = 5;
    string email = 6 [(validate.rules).string = {min_len: 1, max_len: 200, email: true}];
    bool is_email_verified = 7;
    string phone = 8 [(validate.rules).string = {max_len: 20}];
    bool is_phone_verified = 9;
    string country = 10 [(validate.rules).string = {max_len: 200}];
    string locality = 11 [(validate.rules).string = {max_len: 200}];
    string postal_code = 12 [(validate.rules).string = {max_len: 200}];
    string region = 13 [(validate.rules).string = {max_len: 200}];
    string street_address = 14 [(validate.rules).string = {max_len: 200}];
    string password = 15 [(validate.rules).string = {max_len: 72}];
}

message CreateMachineRequest {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 200}];
    string description = 2 [(validate.rules).string = {max_len: 500}];
  }

message UserResponse {
    string id = 1;
    UserState state = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
    uint64 sequence = 5;
    string user_name = 6;
  
    oneof user {
      option (validate.required) = true;
  
      HumanResponse human = 7;
      MachineResponse machine = 8;
    }
}

enum UserState {
    USERSTATE_UNSPECIFIED = 0;
    USERSTATE_ACTIVE = 1;
    USERSTATE_INACTIVE = 2;
    USERSTATE_DELETED = 3;
    USERSTATE_LOCKED = 4;
    USERSTATE_SUSPEND = 5;
    USERSTATE_INITIAL= 6;
}

enum Gender {
    GENDER_UNSPECIFIED = 0;
    GENDER_FEMALE = 1;
    GENDER_MALE = 2;
    GENDER_DIVERSE = 3;
}

message HumanResponse {
    string first_name = 1;
    string last_name = 2;
    string display_name = 3;
    string nick_name = 4;
    string preferred_language = 5;
    Gender gender = 6;
    string email = 7;
    bool is_email_verified = 8;
    string phone = 9;
    bool is_phone_verified = 10;
    string country = 11;
    string locality = 12;
    string postal_code = 13;
    string region = 14;
    string street_address = 15;
  }

  message MachineResponse {
    string name = 1;
    string description = 2;
    repeated MachineKeyResponse keys = 3;
  }

  message MachineKeyResponse {
    string id = 1;
    MachineKeyType type = 2;
    uint64 sequence = 3;
  
    google.protobuf.Timestamp creation_date = 4;
    google.protobuf.Timestamp expiration_date = 5;
  }

  enum MachineKeyType {
    MACHINEKEY_UNSPECIFIED = 0;
    MACHINEKEY_JSON = 1;
  }

message CreateOrgRequest {
    string name = 1 [(validate.rules).string.min_len = 1];
    string domain = 2;
}

message OrgIamPolicy {
    string org_id = 1;
    bool user_login_must_be_domain = 2;
    bool default = 3;
    uint64 sequence = 4;
    google.protobuf.Timestamp creation_date = 5;
    google.protobuf.Timestamp change_date = 6;
}

message OrgIamPolicyView {
    string org_id = 1;
    bool user_login_must_be_domain = 2;
    bool default = 3;
    uint64 sequence = 4;
    google.protobuf.Timestamp creation_date = 5;
    google.protobuf.Timestamp change_date = 6;
}

message OrgIamPolicyRequest {
    string org_id = 1 [(validate.rules).string = {min_len: 1}];
    string description = 2;
    bool user_login_must_be_domain = 3;
}

message OrgIamPolicyID {
    string org_id = 1 [(validate.rules).string = {min_len: 1}];
}

message IamMemberRoles {
    repeated string roles = 1;
}

message IamMember {
    string user_id = 1;
    repeated string roles = 2;
    google.protobuf.Timestamp change_date = 3;
    google.protobuf.Timestamp creation_date = 4;
    uint64 sequence = 5;
}

message AddIamMemberRequest {
    string user_id = 1 [(validate.rules).string = {min_len: 1}];
    repeated string roles = 2;
}

message ChangeIamMemberRequest {
    string user_id = 1 [(validate.rules).string = {min_len: 1}];
    repeated string roles = 2;
}

message RemoveIamMemberRequest {
    string user_id = 1 [(validate.rules).string = {min_len: 1}];
}

message IamMemberSearchResponse {
    uint64 offset = 1;
    uint64 limit = 2;
    uint64 total_result = 3;
    repeated IamMemberView result = 4;
    uint64 processed_sequence = 5;
    google.protobuf.Timestamp view_timestamp = 6;
}

message IamMemberView {
    string user_id = 1;
    repeated string roles = 2;
    google.protobuf.Timestamp change_date = 3;
    google.protobuf.Timestamp creation_date = 4;
    uint64 sequence = 5;
    string user_name = 6;
    string email = 7;
    string first_name = 8;
    string last_name = 9;
    string display_name = 10;
}

message IamMemberSearchRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    repeated IamMemberSearchQuery queries = 3;
}

message IamMemberSearchQuery {
    IamMemberSearchKey key = 1 [(validate.rules).enum = {not_in: [0]}];
    SearchMethod method = 2;
    string value = 3;
}

enum IamMemberSearchKey {
    IAMMEMBERSEARCHKEY_UNSPECIFIED = 0;
    IAMMEMBERSEARCHKEY_FIRST_NAME = 1;
    IAMMEMBERSEARCHKEY_LAST_NAME = 2;
    IAMMEMBERSEARCHKEY_EMAIL = 3;
    IAMMEMBERSEARCHKEY_USER_ID = 4;
}

enum SearchMethod {
    SEARCHMETHOD_EQUALS = 0;
    SEARCHMETHOD_STARTS_WITH = 1;
    SEARCHMETHOD_CONTAINS = 2;
    SEARCHMETHOD_EQUALS_IGNORE_CASE = 3;
    SEARCHMETHOD_STARTS_WITH_IGNORE_CASE = 4;
    SEARCHMETHOD_CONTAINS_IGNORE_CASE = 5;
    SEARCHMETHOD_NOT_EQUALS = 6;
    SEARCHMETHOD_GREATER_THAN = 7;
    SEARCHMETHOD_LESS_THAN = 8;
    SEARCHMETHOD_IS_ONE_OF = 9;
    SEARCHMETHOD_LIST_CONTAINS = 10;
}

message FailedEventID {
    string database = 1 [(validate.rules).string = {min_len: 1}];
    string view_name = 2 [(validate.rules).string = {min_len: 1}];
    uint64 failed_sequence = 3;
}

message FailedEvents {
    repeated FailedEvent failed_events = 1;
}

message FailedEvent {
    string database = 1;
    string view_name = 2;
    uint64 failed_sequence = 3;
    uint64 failure_count = 4;
    string error_message = 5;
}

message ViewID {
    string database = 1 [(validate.rules).string = {min_len: 1}];
    string view_name = 2 [(validate.rules).string = {min_len: 1}];
}

message Views {
    repeated View views = 1;
}

message View {
    string database = 1;
    string view_name = 2;
    uint64 processed_sequence = 3;
    google.protobuf.Timestamp event_timestamp = 4;
    google.protobuf.Timestamp last_successful_spooler_run = 5;
}

message IdpID {
    string id = 1 [(validate.rules).string = {min_len: 1}];
}

message Idp {
    string id = 1;
    IdpState state = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
    string name = 5;
    IdpStylingType styling_type = 6;
    oneof idp_config {
        OidcIdpConfig oidc_config = 7;
    }
    uint64 sequence = 8;
}

message IdpUpdate {
    string id = 1 [(validate.rules).string = {min_len: 1}];
    string name = 2;
    IdpStylingType styling_type = 3;
}

message OidcIdpConfig {
    string client_id = 1;
    string client_secret = 2;
    string issuer = 3;
    repeated string scopes = 4;
}

enum IdpStylingType {
    IDPSTYLINGTYPE_UNSPECIFIED = 0;
    IDPSTYLINGTYPE_GOOGLE = 1;
}

enum IdpState {
    IDPCONFIGSTATE_UNSPECIFIED = 0;
    IDPCONFIGSTATE_ACTIVE = 1;
    IDPCONFIGSTATE_INACTIVE = 2;
}

enum OIDCMappingField {
    OIDCMAPPINGFIELD_UNSPECIFIED = 0;
    OIDCMAPPINGFIELD_PREFERRED_USERNAME = 1;
    OIDCMAPPINGFIELD_EMAIL = 2;
}

message OidcIdpConfigCreate {
    string name = 1 [(validate.rules).string = {min_len: 1, max_len: 200}];
    IdpStylingType styling_type = 2;
    string client_id = 3 [(validate.rules).string = {min_len: 1, max_len: 200}];
    string client_secret = 4 [(validate.rules).string = {min_len: 1, max_len: 200}];
    string issuer = 5 [(validate.rules).string = {min_len: 1, max_len: 200}];
    repeated string scopes = 6;
    OIDCMappingField idp_display_name_mapping = 7;
    OIDCMappingField username_mapping = 8;
}

message OidcIdpConfigUpdate {
    string idp_id = 1 [(validate.rules).string = {min_len: 1}];
    string client_id = 2 [(validate.rules).string = {min_len: 1, max_len: 200}];
    string client_secret = 3;
    string issuer = 4 [(validate.rules).string = {min_len: 1, max_len: 200}];
    repeated string scopes = 5;
    OIDCMappingField idp_display_name_mapping = 6;
    OIDCMappingField username_mapping = 7;
}

message IdpSearchResponse {
    uint64 offset = 1;
    uint64 limit = 2;
    uint64 total_result = 3;
    repeated IdpView result = 4;
    uint64 processed_sequence = 5;
    google.protobuf.Timestamp view_timestamp = 6;
}

message IdpView {
    string id = 1;
    IdpState state = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
    string name = 5;
    IdpStylingType styling_type = 6;
    oneof idp_config_view {
        OidcIdpConfigView oidc_config = 7;
    }
    uint64 sequence = 8;
}

message OidcIdpConfigView {
    string client_id = 1;
    string issuer = 2;
    repeated string scopes = 3;
    OIDCMappingField idp_display_name_mapping = 4;
    OIDCMappingField username_mapping = 5;
}

message IdpSearchRequest {
    uint64 offset = 1;
    uint64 limit = 2;
    repeated IdpSearchQuery queries = 3;
}

message IdpSearchQuery {
    IdpSearchKey key = 1 [(validate.rules).enum = {not_in: [0]}];
    SearchMethod method = 2;
    string value = 3;
}

enum IdpSearchKey {
    IDPSEARCHKEY_UNSPECIFIED = 0;
    IDPSEARCHKEY_IDP_CONFIG_ID = 1;
    IDPSEARCHKEY_NAME = 2;
}

message DefaultLabelPolicy {
    string primary_color = 1;
    string secondary_color = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
}

message DefaultLabelPolicyUpdate {
    string primary_color = 1;
    string secondary_color = 2;
}

message DefaultLabelPolicyView {
    string primary_color = 1;
    string secondary_color = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
}

message DefaultLoginPolicy {
    bool allow_username_password = 1;
    bool allow_register = 2;
    bool allow_external_idp = 3;
    google.protobuf.Timestamp creation_date = 4;
    google.protobuf.Timestamp change_date = 5;
    bool force_mfa = 6;
    PasswordlessType passwordless_type = 7;
}

message DefaultLoginPolicyRequest {
    bool allow_username_password = 1;
    bool allow_register = 2;
    bool allow_external_idp = 3;
    bool force_mfa = 4;
    PasswordlessType passwordless_type = 5;
}

enum PasswordlessType {
    PASSWORDLESSTYPE_NOT_ALLOWED = 0;
    PASSWORDLESSTYPE_ALLOWED = 1;
}

message IdpProviderID {
    string idp_config_id = 1 [(validate.rules).string = {min_len: 1}];
}

message DefaultLoginPolicyView {
    bool allow_username_password = 1;
    bool allow_register = 2;
    bool allow_external_idp = 3;
    google.protobuf.Timestamp creation_date = 4;
    google.protobuf.Timestamp change_date = 5;
    bool force_mfa = 6;
    PasswordlessType passwordless_type = 7;
}

message IdpProviderView {
    string idp_config_id = 1;
    string name = 2;
    IdpType type = 3;
}

enum IdpType {
    IDPTYPE_UNSPECIFIED = 0;
    IDPTYPE_OIDC = 1;
    IDPTYPE_SAML = 2;
}

message IdpProviderSearchResponse {
    uint64 offset = 1;
    uint64 limit = 2;
    uint64 total_result = 3;
    repeated IdpProviderView result = 4;
    uint64 processed_sequence = 5;
    google.protobuf.Timestamp view_timestamp = 6;
}

message IdpProviderSearchRequest {
    uint64 offset = 1;
    uint64 limit = 2;
}

message SecondFactorsResult {
    repeated SecondFactorType second_factors = 1;
}

message SecondFactor {
    SecondFactorType second_factor = 1;
}

enum SecondFactorType {
    SECONDFACTORTYPE_UNSPECIFIED = 0;
    SECONDFACTORTYPE_OTP = 1;
    SECONDFACTORTYPE_U2F = 2;
}

message MultiFactorsResult {
    repeated MultiFactorType multi_factors = 1;
}

message MultiFactor {
    MultiFactorType multi_factor = 1;
}

enum MultiFactorType {
    MULTIFACTORTYPE_UNSPECIFIED = 0;
    MULTIFACTORTYPE_U2F_WITH_PIN = 1;
}

message DefaultPasswordComplexityPolicy {
    uint64 min_length = 1;
    bool has_uppercase = 2;
    bool has_lowercase = 3;
    bool has_number = 4;
    bool has_symbol = 5;
    google.protobuf.Timestamp creation_date = 6;
    google.protobuf.Timestamp change_date = 7;
}

message DefaultPasswordComplexityPolicyRequest {
    uint64 min_length = 1;
    bool has_uppercase = 2;
    bool has_lowercase = 3;
    bool has_number = 4;
    bool has_symbol = 5;
}

message DefaultPasswordComplexityPolicyView {
    uint64 min_length = 1;
    bool has_uppercase = 2;
    bool has_lowercase = 3;
    bool has_number = 4;
    bool has_symbol = 5;
    google.protobuf.Timestamp creation_date = 6;
    google.protobuf.Timestamp change_date = 7;
}

message DefaultPasswordAgePolicy {
    uint64 max_age_days = 1;
    uint64 expire_warn_days = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
}

message DefaultPasswordAgePolicyRequest {
    uint64 max_age_days = 1;
    uint64 expire_warn_days = 2;
}

message DefaultPasswordAgePolicyView {
    uint64 max_age_days = 1;
    uint64 expire_warn_days = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
}

message DefaultPasswordLockoutPolicy {
    uint64 max_attempts = 1;
    bool show_lockout_failure = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
}

message DefaultPasswordLockoutPolicyRequest {
    uint64 max_attempts = 1;
    bool show_lockout_failure = 2;
}

message DefaultPasswordLockoutPolicyView {
    uint64 max_attempts = 1;
    bool show_lockout_failure = 2;
    google.protobuf.Timestamp creation_date = 3;
    google.protobuf.Timestamp change_date = 4;
}